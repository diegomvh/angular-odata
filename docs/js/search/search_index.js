var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiOptions.html",[0,1.088,1,2.402]],["body/interfaces/ApiOptions.html",[0,1.978,1,3.578,2,2.109,3,0.063,4,0.063,5,0.063,6,0.046,7,2.286,8,0.695,9,2.651,10,0.046,11,0.568,12,0.201,13,3.735,14,3.884,15,4.048,16,3.049,17,4.13,18,3.538,19,1.931,20,3.884,21,4.048,22,3.735,23,1.845,24,0.106,25,0.01,26,3.247,27,2.725,28,2.991,29,3.552,30,0.632,31,0.318,32,2.972,33,2.583,34,2.897,35,1.895,36,0.124,37,3.315,38,2.286,39,2.286,40,2.286,41,3.295,42,1.961,43,2.972,44,3.09,45,1.895,46,2.286,47,3.22,48,0.708,49,1.069,50,1.834,51,2.158,52,1.895,53,3.09,54,3.049,55,2.099,56,2.67,57,1.876,58,2.972,59,3.22,60,1.076,61,3.247,62,0.879,63,1.936,64,2.353,65,2.426,66,2.972,67,2.502,68,2.67,69,2.972,70,2.502,71,2.502,72,2.502,73,2.67,74,2.972,75,3.22,76,2.763,77,2.193,78,1.988,79,0.166,80,3.09,81,3.09,82,2.972,83,2.286,84,2.286,85,2.193,86,1.069,87,0.559,88,1.895,89,2.286,90,2.032,91,2.504,92,2.504,93,3.44,94,2.286,95,2.388,96,2.388,97,3.884,98,0.994,99,3.578,100,2.725,101,2.991,102,4.084,103,2.502,104,2.67,105,1.048,106,2.991,107,2.583,108,1.961,109,3.199,110,1.961,111,1.834,112,0.725,113,2.109,114,2.504,115,2.032,116,2.502,117,1.018,118,2.504,119,0.489,120,1.834,121,2.388,122,2.286,123,2.388,124,0.113,125,1.703,126,2.504,127,2.109,128,2.504,129,2.109,130,2.504,131,2.286,132,2.388,133,3.22,134,4.286,135,1.374,136,2.286,137,2.286,138,2.286,139,1.576,140,1.212,141,2.735,142,2.193,143,2.972,144,1.961,145,3.09,146,2.388,147,2.972,148,2.388,149,3.22,150,2.193,151,3.22,152,3.09,153,2.286,154,2.032,155,2.863,156,2.193,157,1.339,158,0.84,159,3.735,160,1.838,161,1.834,162,1.339,163,1.339,164,2.286,165,1.834,166,2.286,167,2.504,168,1.67,169,2.193,170,2.286,171,0.844,172,1.961,173,1.834,174,2.286,175,1.834,176,2.286,177,2.388,178,0.081,179,2.193,180,2.032,181,1.895,182,0.006,183,0.006]],["title/classes/ArithmeticFunctions.html",[184,0.349,185,1.829]],["body/classes/ArithmeticFunctions.html",[0,1.463,3,0.043,4,0.043,5,0.043,6,0.068,8,0.486,10,0.032,12,0.118,19,0.665,24,0.092,25,0.01,30,0.624,31,0.295,36,0.119,60,1.144,62,1.166,79,0.163,86,0.676,87,0.918,98,2.013,105,1.288,112,1.068,119,0.639,124,0.113,140,1.566,158,1.528,171,1.188,178,0.106,182,0.004,183,0.004,184,0.673,185,2.459,186,0.113,187,1.181,188,0.598,189,4.249,190,4.249,191,4.249,192,1.834,193,0.166,194,2.735,195,0.676,196,1.834,197,2.735,198,1.834,199,2.735,200,0.942,201,0.462,202,0.789,203,2.239,204,1.32,205,1.181,206,2.145,207,2.357,208,2.747,209,2.747,210,2.913,211,1.08,212,2.025,213,1.882,214,1.704,215,1.181,216,0.665,217,0.85,218,1.181,219,1.834,220,1.834,221,1.181,222,1.181,223,1.544,224,1.181,225,1.181,226,1.181,227,2.249,228,2.585,229,1.181,230,1.181,231,1.181,232,1.181,233,1.181,234,1.181,235,1.181,236,1.181,237,1.181,238,1.181,239,1.181,240,3.951,241,1.195,242,1.631,243,1.181,244,1.112,245,1.181,246,1.181,247,1.181,248,0.215,249,2.092,250,2.709,251,1.033,252,0.872,253,1.389,254,2.818,255,3.031,256,1.181,257,1.181,258,1.834,259,1.181,260,2.248,261,2.248,262,1.181,263,2.181,264,1.181,265,1.181,266,1.181,267,1.181,268,1.181,269,1.181,270,1.181,271,1.181,272,1.181,273,1.181,274,1.181,275,1.181,276,1.181,277,1.834,278,1.544,279,1.181,280,1.181,281,2.181,282,1.181,283,2.535,284,1.181,285,1.834,286,1.181,287,1.181,288,2.181,289,1.181,290,1.834,291,1.181,292,1.181,293,1.181,294,1.181,295,1.181,296,1.181,297,1.181,298,2.181,299,1.181,300,1.181,301,1.181,302,1.181,303,1.181,304,1.181,305,1.181,306,1.181,307,1.181,308,1.181,309,1.181,310,1.181,311,1.181,312,1.181,313,1.181,314,1.181,315,1.181,316,1.181,317,1.181,318,1.181,319,1.181,320,1.181,321,1.181,322,1.181,323,1.181,324,1.181,325,1.181,326,1.181,327,1.181,328,1.181,329,1.181,330,2.181,331,1.181,332,1.181,333,1.181,334,1.181,335,2.181,336,1.181,337,1.834,338,1.181,339,1.181,340,1.834,341,1.181,342,1.181,343,1.181,344,1.181,345,2.181,346,1.181,347,1.181,348,1.181,349,2.459,350,2.535,351,2.744,352,3.651,353,3.839,354,1.834,355,1.181,356,1.181,357,0.872,358,1.181,359,1.181,360,2.181,361,1.181,362,1.181,363,1.181,364,1.181,365,1.181,366,1.181,367,1.181,368,1.181,369,1.181,370,1.181,371,1.181,372,1.181,373,1.181,374,1.181,375,1.181,376,1.181,377,1.181,378,1.181,379,1.181,380,1.181,381,1.181,382,1.181,383,2.181,384,1.181,385,1.181,386,1.181,387,1.181,388,1.181,389,1.181,390,1.181,391,1.181,392,1.181,393,1.181,394,1.181,395,1.678,396,0.942,397,1.834,398,1.181,399,1.181,400,1.181,401,2.181,402,1.843,403,1.181,404,1.181,405,2.181,406,1.181,407,1.181,408,1.181,409,1.181,410,2.584,411,1.181,412,1.145,413,2.584,414,1.181,415,0.994,416,2.535,417,1.181,418,0.918]],["title/classes/ArithmeticOperators.html",[184,0.349,383,1.829]],["body/classes/ArithmeticOperators.html",[0,1.44,3,0.042,4,0.042,5,0.042,6,0.08,8,0.477,10,0.031,12,0.15,19,0.646,24,0.095,25,0.01,30,0.632,31,0.289,36,0.119,60,1.14,62,1.04,79,0.161,86,0.663,87,0.917,98,2,105,1.25,112,1.051,119,0.627,124,0.115,140,1.551,158,1.514,171,1.187,178,0.135,182,0.004,183,0.004,184,0.67,185,2.141,186,0.11,187,1.147,188,0.585,192,1.147,193,0.211,195,0.863,196,1.147,198,1.147,200,0.915,201,0.448,202,0.766,203,2.215,204,1.291,205,1.147,206,2.12,207,2.332,208,2.737,209,2.737,210,2.903,211,1.05,212,2.004,213,1.862,214,1.681,215,1.147,216,0.646,217,0.826,218,1.147,219,1.793,220,1.793,221,1.147,222,1.147,223,1.509,224,1.147,225,1.147,226,1.147,227,2.219,228,2.55,229,1.147,230,1.147,231,1.147,232,1.147,233,1.147,234,1.147,235,1.147,236,1.147,237,1.147,238,1.147,239,1.147,240,3.969,241,1.169,242,1.595,243,1.147,244,1.08,245,1.147,246,1.147,247,1.147,248,0.212,249,2.075,250,2.686,251,1.01,252,0.847,253,1.358,254,2.785,255,2.999,256,1.147,257,1.147,258,1.793,259,1.147,260,2.207,261,2.207,262,1.147,263,2.141,264,1.147,265,1.147,266,1.147,267,1.147,268,1.147,269,1.147,270,1.147,271,1.147,272,1.147,273,1.147,274,1.147,275,1.147,276,1.147,277,1.793,278,1.509,279,1.147,280,1.147,281,2.141,282,1.147,283,2.495,284,1.147,285,1.793,286,1.147,287,1.147,288,2.141,289,1.147,290,1.793,291,1.147,292,1.147,293,1.147,294,1.147,295,1.147,296,1.147,297,1.147,298,2.141,299,1.147,300,1.147,301,1.147,302,1.147,303,1.147,304,1.147,305,1.147,306,1.147,307,1.147,308,1.147,309,1.147,310,1.147,311,1.147,312,1.147,313,1.147,314,1.147,315,1.147,316,1.147,317,1.147,318,1.147,319,1.147,320,1.147,321,1.147,322,1.147,323,1.147,324,1.147,325,1.147,326,1.147,327,1.147,328,1.147,329,1.147,330,2.141,331,1.147,332,1.147,333,1.147,334,1.147,335,2.141,336,1.147,337,1.793,338,1.147,339,1.147,340,1.793,341,1.147,342,1.147,343,1.147,344,1.147,345,2.141,346,1.147,347,1.147,348,1.147,349,3.165,350,2.495,351,2.707,352,3.72,353,3.886,354,1.793,355,1.147,356,1.147,357,0.847,358,1.147,359,1.147,360,2.141,361,1.147,362,1.147,363,1.147,364,1.147,365,1.147,366,1.147,367,1.147,368,1.147,369,1.147,370,1.147,371,1.147,372,1.147,373,1.147,374,1.147,375,1.147,376,1.147,377,1.147,378,1.147,379,1.147,380,1.147,381,1.147,382,1.147,383,2.421,384,1.793,385,1.147,386,1.793,387,1.147,388,1.793,389,1.147,390,1.793,391,1.147,392,1.793,393,1.147,394,1.793,395,1.641,396,0.915,397,1.793,398,1.147,399,1.147,400,1.147,401,2.141,402,1.809,403,1.147,404,1.147,405,2.141,406,1.147,407,1.147,408,1.147,409,1.147,410,2.553,411,1.147,412,1.113,413,2.553,414,1.147,415,0.966,416,2.495,417,1.147,418,0.892,419,3.098,420,4.154,421,4.154,422,4.154,423,4.154,424,4.154,425,2.657,426,0.911,427,2.657,428,2.657,429,2.657,430,2.657,431,2.657]],["title/interfaces/Cache.html",[0,1.088,41,1.776]],["body/interfaces/Cache.html",[0,1.998,1,3.17,2,2.188,3,0.066,4,0.066,5,0.066,6,0.077,7,2.37,8,0.67,9,2.623,10,0.048,11,0.361,12,0.13,13,2.188,14,2.275,15,2.37,16,1.786,17,3.381,18,2.739,19,1.746,20,2.275,21,2.37,22,2.188,24,0.104,25,0.01,26,2.65,27,1.732,28,1.902,29,3.3,30,0.631,31,0.326,32,3.049,33,2.65,34,2.954,35,1.966,36,0.124,37,3.381,38,2.37,39,2.37,40,2.37,41,3.378,42,2.034,43,3.049,44,3.17,45,1.966,46,2.37,47,3.303,48,0.734,49,1.108,50,1.902,51,2.214,52,1.966,53,3.17,54,3.098,55,2.153,56,2.739,57,1.914,58,3.049,59,3.303,60,1.083,61,3.3,62,0.901,63,1.986,64,2.414,65,2.488,66,3.049,67,2.567,68,2.739,69,3.049,70,2.567,71,2.567,72,2.567,73,2.739,74,3.049,75,3.303,76,2.835,77,2.275,78,2.039,79,0.167,80,3.17,81,3.17,82,3.049,83,2.37,84,2.37,85,2.275,86,1.078,87,0.574,88,1.966,89,2.37,90,2.108,91,2.597,92,2.597,93,3.48,94,2.37,95,2.477,96,2.477,97,3.947,98,1.031,99,3.649,100,2.779,101,3.051,102,4.165,103,2.567,104,2.739,105,1.233,106,3.051,107,2.65,108,2.034,109,3.263,110,2.034,111,1.902,112,0.752,113,2.188,114,3.619,115,3.381,116,3.48,117,1.472,118,3.619,119,0.707,120,1.902,121,2.477,122,2.37,123,2.477,124,0.117,125,1.747,126,2.597,127,2.188,128,2.597,129,2.188,130,2.597,131,2.37,132,2.477,133,3.303,134,4.325,135,1.425,136,2.37,137,2.37,138,2.37,139,1.634,140,1.243,141,2.763,142,2.275,143,3.049,144,2.034,145,3.17,146,2.477,147,3.049,148,2.477,149,3.303,150,2.275,151,3.303,152,3.17,153,2.37,154,2.108,155,2.937,156,2.275,157,1.388,158,1.397,159,3.795,160,1.885,161,1.902,162,1.388,163,1.388,164,2.37,165,1.902,166,2.37,167,2.597,168,1.732,169,2.275,170,2.37,171,0.861,172,2.034,173,1.902,174,2.37,175,1.902,176,2.37,177,2.477,178,0.153,179,2.275,180,2.108,181,1.966,182,0.006,183,0.006,188,0.812,193,0.183,195,0.748,432,3.619,433,4.138,434,4.138]],["title/classes/CollectionFunctions.html",[184,0.349,281,1.829]],["body/classes/CollectionFunctions.html",[0,1.472,3,0.044,4,0.044,5,0.044,6,0.061,8,0.489,10,0.032,12,0.097,19,0.673,24,0.091,25,0.01,30,0.624,31,0.297,36,0.12,60,1.142,62,1.139,79,0.161,86,0.681,87,0.919,98,2.017,105,1.281,112,1.074,119,0.643,124,0.112,140,1.571,158,1.534,171,1.189,178,0.087,182,0.004,183,0.004,184,0.674,185,2.196,186,0.114,187,1.194,188,0.603,192,1.194,193,0.136,195,0.556,196,1.194,198,1.194,200,0.953,201,0.467,202,0.797,203,2.248,204,1.332,205,1.194,206,2.155,207,2.366,208,2.751,209,2.751,210,2.917,211,1.092,212,2.033,213,1.889,214,1.712,215,1.194,216,0.673,217,0.859,218,1.194,219,1.849,220,1.849,221,1.194,222,1.194,223,1.557,224,1.194,225,1.194,226,1.194,227,2.261,228,2.598,229,1.194,230,1.194,231,1.194,232,1.194,233,1.194,234,1.194,235,1.194,236,1.194,237,1.194,238,1.194,239,1.194,240,3.953,241,1.205,242,1.645,243,1.194,244,1.124,245,1.194,246,1.194,247,1.194,248,0.217,249,2.099,250,2.718,251,1.042,252,0.882,253,1.401,254,2.831,255,3.043,256,1.194,257,1.194,258,1.849,259,1.194,260,2.264,261,2.264,262,1.194,263,2.196,264,1.194,265,1.194,266,1.194,267,1.194,268,1.194,269,1.194,270,1.194,271,1.194,272,1.194,273,1.194,274,1.194,275,1.194,276,1.194,277,1.849,278,1.557,279,1.194,280,1.194,281,2.474,282,1.849,283,3.145,284,1.194,285,2.55,286,1.849,287,1.194,288,2.196,289,1.194,290,1.849,291,1.194,292,1.194,293,1.194,294,1.194,295,1.194,296,1.194,297,1.194,298,2.196,299,1.194,300,1.194,301,1.194,302,1.194,303,1.194,304,1.194,305,1.194,306,1.194,307,1.194,308,1.194,309,1.194,310,1.194,311,1.194,312,1.194,313,1.194,314,1.194,315,1.194,316,1.194,317,1.194,318,1.194,319,1.194,320,1.194,321,1.194,322,1.194,323,1.194,324,1.194,325,1.194,326,1.194,327,1.194,328,1.194,329,1.194,330,2.196,331,1.194,332,1.194,333,1.194,334,1.194,335,2.196,336,1.194,337,1.849,338,1.194,339,1.194,340,1.849,341,1.194,342,1.194,343,1.194,344,1.194,345,2.196,346,1.194,347,1.194,348,1.194,349,2.474,350,2.55,351,2.758,352,3.658,353,3.843,354,1.849,355,1.194,356,1.194,357,0.882,358,1.194,359,1.194,360,2.196,361,1.194,362,1.194,363,1.194,364,1.194,365,1.194,366,1.194,367,1.194,368,1.194,369,1.194,370,1.194,371,1.194,372,1.194,373,1.194,374,1.194,375,1.194,376,1.194,377,1.194,378,1.194,379,1.194,380,1.194,381,1.194,382,1.194,383,2.196,384,1.194,385,1.194,386,1.194,387,1.194,388,1.194,389,1.194,390,1.194,391,1.194,392,1.194,393,1.194,394,1.194,395,1.692,396,0.953,397,1.849,398,1.194,399,1.194,400,1.194,401,2.196,402,1.855,403,1.194,404,1.194,405,2.196,406,1.194,407,1.194,408,1.194,409,1.194,410,2.596,411,1.194,412,1.158,413,2.596,414,1.194,415,1.005,416,2.55,417,1.194,418,0.928,435,4.285,436,4.285,437,2.766,438,2.766]],["title/classes/ComputeExpression.html",[184,0.349,439,3.512]],["body/classes/ComputeExpression.html",[3,0.077,4,0.077,5,0.077,6,0.098,8,0.601,10,0.074,11,0.562,12,0.18,23,1.812,24,0.104,25,0.01,30,0.341,31,0.408,36,0.067,49,1.933,60,0.614,62,1.006,66,3.814,79,0.159,87,0.833,98,1.913,105,1.242,112,0.885,116,3.725,117,1.643,119,0.885,124,0.118,125,1.475,168,2.038,171,0.835,178,0.175,182,0.007,183,0.007,184,0.389,186,0.201,188,0.906,193,0.281,195,1.126,203,2.052,204,2.242,206,2.667,207,2.421,208,2.299,209,2.299,210,2.421,212,2.08,213,2.057,217,2.672,248,0.266,249,1.767,278,2.621,357,1.551,410,2.77,412,2.696,413,2.77,415,2.339,418,1.633,426,0.667,439,7.296,440,4.867,441,4.545,442,4.263,443,4.254,444,4.254,445,4.492,446,3.898,447,4.38,448,2.573,449,6.438,450,2.549,451,3.404,452,6.438,453,5.012,454,4.867,455,4.867,456,4.292,457,3.404,458,4.39,459,4.867,460,4.867,461,4.867,462,4.867,463,2.312,464,4.867,465,4.867,466,3.404,467,3.404,468,3.63,469,2.479,470,7.215,471,3.216,472,4.867,473,4.867,474,4.867,475,2.914,476,4.292,477,4.867,478,2.788,479,2.914,480,4.867,481,3.216,482,4.503,483,3.854,484,4.867]],["title/classes/ConditionalFunctions.html",[184,0.349,345,1.829]],["body/classes/ConditionalFunctions.html",[0,1.477,3,0.044,4,0.044,5,0.044,6,0.05,8,0.492,10,0.032,12,0.063,19,0.677,24,0.09,25,0.01,30,0.625,31,0.298,36,0.12,60,1.144,62,1.105,79,0.162,86,0.683,87,0.919,98,2.02,105,1.272,112,1.078,119,0.646,124,0.111,140,1.575,158,1.537,171,1.189,178,0.057,182,0.004,183,0.004,184,0.675,185,2.206,186,0.115,187,1.202,188,0.606,192,1.202,193,0.088,195,0.361,196,1.202,198,1.202,200,0.959,201,0.47,202,0.803,203,2.253,204,1.338,205,1.202,206,2.161,207,2.372,208,2.753,209,2.753,210,2.919,211,1.1,212,2.038,213,1.894,214,1.718,215,1.202,216,0.677,217,0.865,218,1.202,219,1.859,220,1.859,221,1.202,222,1.202,223,1.565,224,1.202,225,1.202,226,1.202,227,2.268,228,2.606,229,1.202,230,1.202,231,1.202,232,1.202,233,1.202,234,1.202,235,1.202,236,1.202,237,1.202,238,1.202,239,1.202,240,3.954,241,1.212,242,1.654,243,1.202,244,1.132,245,1.202,246,1.202,247,1.202,248,0.218,249,2.102,250,2.724,251,1.048,252,0.887,253,1.408,254,2.839,255,3.051,256,1.202,257,1.202,258,1.859,259,1.202,260,2.273,261,2.273,262,1.202,263,2.206,264,1.202,265,1.202,266,1.202,267,1.202,268,1.202,269,1.202,270,1.202,271,1.202,272,1.202,273,1.202,274,1.202,275,1.202,276,1.202,277,1.859,278,1.565,279,1.202,280,1.202,281,2.206,282,1.202,283,2.559,284,1.202,285,1.859,286,1.202,287,1.202,288,2.206,289,1.202,290,1.859,291,1.202,292,1.202,293,1.202,294,1.202,295,1.202,296,1.202,297,1.202,298,2.206,299,1.202,300,1.202,301,1.202,302,1.202,303,1.202,304,1.202,305,1.202,306,1.202,307,1.202,308,1.202,309,1.202,310,1.202,311,1.202,312,1.202,313,1.202,314,1.202,315,1.202,316,1.202,317,1.202,318,1.202,319,1.202,320,1.202,321,1.202,322,1.202,323,1.202,324,1.202,325,1.202,326,1.202,327,1.202,328,1.202,329,1.202,330,2.206,331,1.202,332,1.202,333,1.202,334,1.202,335,2.206,336,1.202,337,1.859,338,1.202,339,1.202,340,1.859,341,1.202,342,1.202,343,1.202,344,1.202,345,2.482,346,1.859,347,1.202,348,1.859,349,2.482,350,2.559,351,2.767,352,3.661,353,3.845,354,1.859,355,1.202,356,1.202,357,0.887,358,1.202,359,1.202,360,2.206,361,1.202,362,1.202,363,1.202,364,1.202,365,1.202,366,1.202,367,1.202,368,1.202,369,1.202,370,1.202,371,1.202,372,1.202,373,1.202,374,1.202,375,1.202,376,1.202,377,1.202,378,1.202,379,1.202,380,1.202,381,1.202,382,1.202,383,2.206,384,1.202,385,1.202,386,1.202,387,1.202,388,1.202,389,1.202,390,1.202,391,1.202,392,1.202,393,1.202,394,1.202,395,1.701,396,0.959,397,1.859,398,1.202,399,1.202,400,1.202,401,2.206,402,1.863,403,1.202,404,1.202,405,2.206,406,1.202,407,1.202,408,1.202,409,1.202,410,2.603,411,1.202,412,1.166,413,2.603,414,1.202,415,1.012,416,2.559,417,1.202,418,0.934,485,3.463,486,2.784]],["title/classes/CsdlAction.html",[184,0.349,487,2.503]],["body/classes/CsdlAction.html",[3,0.089,4,0.089,5,0.089,6,0.1,10,0.065,11,0.615,12,0.199,24,0.101,25,0.01,30,0.618,36,0.117,48,1.658,55,2.631,62,1.351,63,1.927,79,0.166,86,1.105,124,0.121,157,2.364,160,2.304,162,2.364,163,2.364,175,3.914,178,0.176,182,0.007,183,0.007,184,0.681,186,0.231,193,0.271,248,0.358,426,1.109,487,4.036,488,2.555,489,3.697,490,5.345,491,5.345,492,1.878,493,5.098,494,5.098,495,5.596,496,5.596,497,5.596,498,5.596,499,5.596,500,5.596,501,3.206,502,3.512,503,3.206,504,3.697,505,3.35,506,3.206,507,3.04]],["title/classes/CsdlActionImport.html",[184,0.349,506,2.503]],["body/classes/CsdlActionImport.html",[3,0.092,4,0.092,5,0.092,6,0.097,10,0.067,11,0.629,12,0.177,24,0.099,25,0.01,30,0.602,36,0.118,48,1.658,55,3.21,62,1.318,63,2.905,79,0.168,86,1.115,124,0.122,157,2.42,160,2.358,162,2.42,163,2.42,175,3.315,178,0.159,182,0.007,183,0.007,184,0.688,186,0.24,193,0.261,248,0.361,426,0.796,487,3.328,488,2.493,489,3.838,490,4.526,491,4.526,492,1.949,493,4.695,494,4.695,501,3.328,502,3.646,503,3.328,504,3.838,505,3.478,506,4.132,507,3.112,508,5.809,509,5.809,510,5.809,511,5.809]],["title/classes/CsdlAnnotable.html",[184,0.349,512,2.402]],["body/classes/CsdlAnnotable.html",[3,0.101,4,0.101,5,0.101,6,0.094,8,0.596,10,0.074,11,0.667,12,0.184,24,0.094,25,0.01,30,0.447,36,0.116,48,1.633,79,0.164,86,1.061,124,0.105,135,2.2,157,2.143,160,2.088,162,2.143,163,2.143,178,0.13,182,0.008,183,0.008,184,0.678,186,0.264,193,0.243,216,1.858,223,2.32,248,0.338,426,0.875,488,2.416,507,2.756,512,4.495,513,4.763,514,4.962,515,6.386,516,4.648,517,6.386,518,6.386,519,4.008,520,4.574,521,3.659,522,4.008,523,4.466,524,3.511,525,4.466]],["title/classes/CsdlAnnotation.html",[184,0.349,516,2.31]],["body/classes/CsdlAnnotation.html",[3,0.1,4,0.1,5,0.1,6,0.097,8,0.587,10,0.073,11,0.661,12,0.183,24,0.097,25,0.01,30,0.44,36,0.116,48,1.637,79,0.167,86,1.054,124,0.104,135,2.904,157,2.11,160,2.057,162,2.11,163,2.11,178,0.128,182,0.008,183,0.008,184,0.674,186,0.26,193,0.258,216,1.841,223,2.285,248,0.336,426,0.862,488,2.491,507,2.714,512,4.162,513,4.691,514,4.337,516,4.457,519,3.947,520,5.245,521,3.603,522,3.947,523,4.399,524,3.458,525,4.399,526,6.289,527,6.289,528,7.571]],["title/classes/CsdlAnnotations.html",[184,0.349,519,2.742]],["body/classes/CsdlAnnotations.html",[3,0.098,4,0.098,5,0.098,6,0.097,8,0.698,10,0.071,11,0.653,12,0.194,24,0.099,25,0.01,30,0.432,36,0.115,48,1.64,79,0.166,86,1.045,124,0.103,135,2.126,157,2.071,160,2.018,162,2.071,163,2.071,178,0.125,182,0.008,183,0.008,184,0.67,186,0.255,193,0.266,216,1.82,223,3.043,248,0.333,426,0.846,450,1.918,488,2.476,507,2.663,512,4.605,513,4.602,514,4.997,516,4.611,519,4.697,520,5.222,521,3.536,522,3.873,523,4.316,524,3.393,525,4.316,529,6.171,530,6.171,531,6.171,532,6.171,533,4.602]],["title/classes/CsdlComplexType.html",[184,0.349,534,2.615]],["body/classes/CsdlComplexType.html",[3,0.089,4,0.089,5,0.089,6,0.082,8,0.722,10,0.065,11,0.781,12,0.202,24,0.1,25,0.01,30,0.632,31,0.318,36,0.115,48,1.633,57,1.624,79,0.164,124,0.12,140,1.214,158,1.185,178,0.114,182,0.007,183,0.007,184,0.668,186,0.233,193,0.275,216,1.72,248,0.336,426,1.145,450,2.65,488,2.091,492,1.89,534,4.234,535,2.962,536,2.768,537,5.878,538,3.488,539,5.836,540,6.177,541,5.836,542,4.41,543,4.41,544,5.631,545,4.965,546,4.965,547,4.965,548,4.965,549,4.965,550,4.965,551,2.768,552,2.977,553,3.889,554,3.371,555,4.439,556,3.721,557,3.938,558,4.439]],["title/classes/CsdlEntityContainer.html",[184,0.349,559,3.258]],["body/classes/CsdlEntityContainer.html",[3,0.095,4,0.095,5,0.095,6,0.102,10,0.069,11,0.642,12,0.204,24,0.101,25,0.009,31,0.45,36,0.082,48,1.633,56,2.85,62,0.938,63,2.066,79,0.16,124,0.117,150,4.68,178,0.122,182,0.008,183,0.008,184,0.48,186,0.248,193,0.279,248,0.304,426,1.166,488,2.619,492,2.013,503,4.877,506,4.877,551,3.912,559,5.487,560,4.241,561,5.29,562,8.512,563,8.512,564,8.512,565,8.512,566,6.349,567,6.349,568,5.999,569,5.999,570,5.999,571,5.999,572,5.999,573,5.29,574,5.999,575,3.591]],["title/classes/CsdlEntitySet.html",[184,0.349,566,3.258]],["body/classes/CsdlEntitySet.html",[3,0.101,4,0.101,5,0.101,6,0.101,10,0.073,11,0.665,12,0.195,24,0.1,25,0.009,30,0.592,31,0.36,36,0.087,48,1.62,57,1.836,79,0.162,124,0.119,161,2.926,178,0.129,179,4.758,182,0.008,183,0.008,184,0.509,186,0.263,193,0.275,248,0.315,426,1.045,488,2.597,492,2.136,505,5.181,551,3.13,560,4.174,566,5.688,576,5.118,577,7.631,578,6.052,579,6.366,580,5.614,581,6.366,582,6.366,583,5.614,584,4.206]],["title/classes/CsdlEntityType.html",[184,0.349,554,2.615]],["body/classes/CsdlEntityType.html",[3,0.087,4,0.087,5,0.087,6,0.093,8,0.71,10,0.063,11,0.777,12,0.204,24,0.101,25,0.01,30,0.636,31,0.308,36,0.113,48,1.638,57,1.57,79,0.163,124,0.119,140,1.174,158,1.741,178,0.111,182,0.007,183,0.007,184,0.662,186,0.225,193,0.279,216,1.684,248,0.331,426,1.177,450,2.628,488,2.368,492,1.827,534,3.259,535,3.355,536,2.676,537,5.846,538,3.468,539,5.801,540,6.141,541,5.801,542,4.377,543,4.377,545,4.801,546,4.801,547,4.801,548,4.801,549,4.801,550,4.801,551,2.676,552,2.878,553,3.807,554,4.145,555,5.192,556,5.466,557,3.808,558,4.346,585,5.444,586,5.444,587,4.801]],["title/classes/CsdlEnumMember.html",[184,0.349,588,3.258]],["body/classes/CsdlEnumMember.html",[3,0.104,4,0.104,5,0.104,6,0.099,10,0.076,11,0.678,12,0.187,24,0.096,25,0.009,30,0.46,36,0.107,48,1.607,51,3.284,60,1.101,79,0.16,86,1.11,124,0.121,154,3.349,178,0.134,182,0.008,183,0.008,184,0.622,186,0.272,193,0.263,216,1.599,248,0.322,426,0.901,488,2.528,492,2.206,536,3.232,588,6.173,589,5.797,590,6.855,591,4.598,592,5.285,593,5.285]],["title/classes/CsdlEnumType.html",[184,0.349,591,3.055]],["body/classes/CsdlEnumType.html",[3,0.101,4,0.101,5,0.101,6,0.101,10,0.073,11,0.664,12,0.195,24,0.1,25,0.009,30,0.592,36,0.104,48,1.624,51,3.37,60,0.8,79,0.163,86,0.823,124,0.12,154,4.404,178,0.129,182,0.008,183,0.008,184,0.609,186,0.262,193,0.275,216,1.542,248,0.315,426,1.042,488,2.594,492,2.128,536,3.117,588,6.447,591,5.321,592,6.95,593,6.95,594,6.34,595,5.591,596,6.34,597,6.34,598,6.34]],["title/classes/CsdlFunction.html",[184,0.349,501,2.503]],["body/classes/CsdlFunction.html",[3,0.088,4,0.088,5,0.088,6,0.101,10,0.064,11,0.609,12,0.199,24,0.102,25,0.01,30,0.628,36,0.116,48,1.659,55,2.607,62,1.363,63,1.9,79,0.166,86,1.101,124,0.121,157,2.343,160,2.283,162,2.343,163,2.343,175,3.9,178,0.175,182,0.007,183,0.007,184,0.679,186,0.228,193,0.274,248,0.356,426,1.103,487,3.16,488,2.577,489,3.645,490,5.325,491,5.325,492,1.851,493,5.08,494,5.08,501,4,502,5.213,503,3.16,504,3.645,505,3.302,506,3.16,507,3.013,599,5.516,600,5.516,601,5.516,602,5.516,603,5.516,604,5.516,605,5.516]],["title/classes/CsdlFunctionImport.html",[184,0.349,503,2.503]],["body/classes/CsdlFunctionImport.html",[3,0.091,4,0.091,5,0.091,6,0.099,10,0.066,11,0.622,12,0.189,24,0.1,25,0.01,30,0.62,36,0.117,48,1.658,55,3.196,62,1.338,63,1.966,79,0.167,86,1.11,124,0.121,157,2.394,160,2.333,162,2.394,163,2.394,175,3.279,178,0.158,182,0.007,183,0.007,184,0.685,186,0.236,193,0.267,248,0.359,426,0.978,487,3.27,488,2.53,489,3.772,490,4.477,491,4.477,492,1.915,493,4.658,494,4.658,501,3.27,502,3.583,503,4.087,504,5.544,505,5.023,506,3.27,507,3.079,606,5.708,607,5.708,608,5.708,609,5.708,610,5.708]],["title/classes/CsdlInclude.html",[184,0.349,611,3.055]],["body/classes/CsdlInclude.html",[3,0.102,4,0.102,5,0.102,6,0.098,8,0.599,10,0.074,11,0.669,12,0.185,24,0.095,25,0.01,31,0.363,36,0.112,48,1.616,79,0.165,90,3.27,124,0.088,139,3.352,140,1.87,178,0.13,182,0.008,183,0.008,184,0.655,186,0.266,193,0.26,216,1.561,248,0.339,426,0.88,488,2.508,512,4.213,514,3.677,516,4.052,520,3.843,521,3.677,551,3.156,611,5.73,612,5.16,613,5.66,614,6.419,615,7.664,616,2.688,617,4.489,618,4.787,619,5.16,620,5.36,621,4.787,622,4.787]],["title/classes/CsdlIncludeAnnotations.html",[184,0.349,620,3.055]],["body/classes/CsdlIncludeAnnotations.html",[3,0.1,4,0.1,5,0.1,6,0.1,8,0.588,10,0.073,11,0.661,12,0.195,24,0.097,25,0.01,31,0.356,36,0.111,48,1.623,79,0.166,90,3.21,124,0.086,139,2.489,140,1.359,178,0.128,182,0.008,183,0.008,184,0.65,186,0.261,193,0.268,216,1.533,248,0.336,426,1.039,488,2.551,512,4.167,514,3.611,516,4.008,520,5.166,521,3.611,551,3.098,611,5.301,612,5.067,616,2.639,617,4.407,618,4.7,619,5.067,620,5.686,621,6.291,622,6.436,623,6.302,624,6.302,625,6.302,626,6.302,627,6.302]],["title/classes/CsdlKey.html",[184,0.349,555,2.742]],["body/classes/CsdlKey.html",[3,0.097,4,0.097,5,0.097,6,0.093,8,0.696,10,0.071,11,0.769,12,0.138,24,0.086,25,0.01,30,0.617,31,0.347,36,0.117,48,1.606,57,1.769,79,0.161,124,0.117,140,1.323,158,1.291,178,0.125,182,0.008,183,0.008,184,0.685,186,0.254,193,0.237,216,1.814,248,0.346,488,2.375,534,3.673,535,3.364,536,3.016,537,5.309,538,3.383,539,5.66,540,5.991,541,5.66,542,4.258,543,4.258,551,3.016,552,3.244,553,4.1,554,3.673,555,5.043,556,4.053,557,5.846,558,5.376,628,6.135,629,4.932,630,6.135]],["title/classes/CsdlNavigationProperty.html",[184,0.349,543,2.225]],["body/classes/CsdlNavigationProperty.html",[3,0.089,4,0.089,5,0.089,6,0.098,8,0.719,10,0.064,11,0.614,12,0.202,24,0.105,25,0.01,30,0.626,36,0.114,48,1.645,57,1.611,63,1.924,79,0.166,86,1,124,0.118,157,1.874,160,2.884,162,1.874,163,1.874,165,2.567,178,0.113,182,0.007,183,0.007,184,0.667,186,0.231,193,0.278,216,1.711,248,0.335,426,1.142,450,2.394,488,2.516,492,1.874,507,2.411,524,3.071,538,2.206,542,2.845,543,3.585,552,4.5,553,3.869,631,3.906,632,5.709,633,5.509,634,5.509,635,5.509,636,5.831,637,5.233,638,5.233,639,5.586,640,5.586,641,5.586,642,5.586,643,5.586,644,4.925,645,4.925,646,4.925,647,3.506]],["title/classes/CsdlNavigationPropertyBinding.html",[184,0.349,578,3.055]],["body/classes/CsdlNavigationPropertyBinding.html",[3,0.107,4,0.107,5,0.107,6,0.099,10,0.077,11,0.686,12,0.151,24,0.096,25,0.009,27,3.605,36,0.092,48,1.557,57,2.483,79,0.164,124,0.092,161,3.958,178,0.136,182,0.008,183,0.008,184,0.537,186,0.278,193,0.265,216,1.632,223,3.189,248,0.278,488,2.545,578,5.502,648,6.709,649,6.709,650,6.709,651,7.867]],["title/classes/CsdlOnDelete.html",[184,0.349,638,2.742]],["body/classes/CsdlOnDelete.html",[3,0.098,4,0.098,5,0.098,6,0.093,8,0.7,10,0.072,11,0.655,12,0.14,24,0.102,25,0.01,30,0.601,36,0.118,48,1.632,57,1.786,63,2.889,79,0.166,86,1.047,124,0.115,157,2.079,160,2.809,162,2.079,163,2.079,165,2.848,178,0.126,182,0.008,183,0.008,184,0.687,186,0.256,193,0.238,216,1.825,248,0.347,488,2.385,507,2.674,524,3.406,538,2.447,542,3.156,543,3.156,552,4.267,553,4.125,631,4.333,632,5.332,633,4.094,634,4.094,635,4.094,636,4.333,637,4.709,638,5.065,647,3.888,652,6.196,653,6.196,654,6.196]],["title/classes/CsdlParameter.html",[184,0.349,494,2.615]],["body/classes/CsdlParameter.html",[3,0.086,4,0.086,5,0.086,6,0.101,10,0.063,11,0.603,12,0.201,24,0.104,25,0.01,30,0.614,36,0.116,48,1.659,55,2.58,62,1.372,63,1.869,79,0.167,86,1.175,124,0.12,157,2.835,160,2.763,162,2.835,163,2.835,175,3.176,178,0.154,182,0.007,183,0.007,184,0.676,186,0.224,193,0.276,248,0.355,426,1.132,487,3.108,488,2.593,489,3.585,490,4.336,491,4.336,492,1.821,493,4.551,494,4.791,501,3.108,502,3.405,503,3.108,504,3.585,505,3.248,506,3.108,507,3.646,655,5.425,656,5.425,657,5.425,658,5.425,659,5.425,660,5.425,661,5.425,662,5.425]],["title/classes/CsdlProperty.html",[184,0.349,542,2.225]],["body/classes/CsdlProperty.html",[3,0.086,4,0.086,5,0.086,6,0.1,8,0.708,10,0.062,11,0.601,12,0.204,24,0.106,25,0.01,30,0.623,36,0.113,48,1.647,57,1.558,63,1.861,79,0.167,86,1.16,124,0.118,157,2.769,160,2.867,162,2.769,163,2.769,165,2.483,178,0.11,182,0.007,183,0.007,184,0.66,186,0.223,193,0.281,216,1.676,248,0.331,426,1.175,450,2.357,488,2.566,492,1.813,507,3.562,524,4.537,538,2.133,542,3.51,543,2.752,552,4.591,553,3.788,631,3.778,632,5.667,633,3.569,634,3.569,635,3.569,636,3.778,637,4.324,638,4.324,644,4.763,645,4.763,646,4.763,647,5.18,663,5.402,664,5.402,665,5.402,666,5.402,667,5.402,668,5.402,669,5.402]],["title/classes/CsdlPropertyRef.html",[184,0.349,558,2.742]],["body/classes/CsdlPropertyRef.html",[3,0.096,4,0.096,5,0.096,6,0.096,8,0.688,10,0.07,11,0.766,12,0.18,24,0.092,25,0.01,30,0.615,31,0.341,36,0.117,48,1.615,57,1.736,79,0.165,124,0.122,140,1.837,158,1.268,178,0.122,182,0.008,183,0.008,184,0.682,186,0.249,193,0.253,216,1.793,248,0.344,426,0.825,488,2.455,492,2.021,534,3.605,535,3.478,536,2.961,537,5.266,538,3.366,539,5.63,540,5.96,541,5.63,542,4.231,543,4.231,551,2.961,552,3.184,553,4.054,554,3.605,555,4.628,556,3.979,557,4.212,558,5.002,670,6.022,671,7.374]],["title/classes/CsdlReference.html",[184,0.349,617,3.055]],["body/classes/CsdlReference.html",[3,0.098,4,0.098,5,0.098,6,0.099,8,0.699,10,0.071,11,0.653,12,0.199,24,0.099,25,0.01,31,0.349,36,0.11,48,1.628,79,0.162,90,4.372,124,0.085,139,2.44,140,1.332,178,0.126,182,0.008,183,0.008,184,0.645,186,0.256,193,0.273,216,1.502,248,0.333,426,1.104,450,1.92,488,2.537,512,4.606,514,4.917,516,4.538,520,3.698,521,3.539,533,4.607,551,3.037,611,6.002,612,4.966,616,2.586,617,5.238,618,6.249,619,6.9,620,6.002,621,4.607,622,4.607,672,6.177,673,6.177,674,6.177,675,6.177,676,6.177]],["title/classes/CsdlReferentialConstraint.html",[184,0.349,637,2.742]],["body/classes/CsdlReferentialConstraint.html",[3,0.097,4,0.097,5,0.097,6,0.096,8,0.693,10,0.07,11,0.648,12,0.138,24,0.103,25,0.01,30,0.599,36,0.117,48,1.636,57,2.405,63,2.101,79,0.167,86,1.04,124,0.114,157,2.046,160,2.796,162,2.046,163,2.046,165,3.931,178,0.124,182,0.008,183,0.008,184,0.684,186,0.252,193,0.255,216,1.807,248,0.345,488,2.466,507,2.632,524,3.353,538,2.409,542,3.107,543,3.107,552,4.411,553,4.085,631,4.265,632,5.295,633,4.03,634,4.03,635,4.03,636,4.265,637,5.03,638,4.664,647,3.828,677,6.099,678,6.099,679,7.431]],["title/classes/CsdlReturnType.html",[184,0.349,493,2.615]],["body/classes/CsdlReturnType.html",[3,0.087,4,0.087,5,0.087,6,0.101,10,0.064,11,0.608,12,0.201,24,0.103,25,0.01,30,0.616,36,0.116,48,1.658,55,2.603,62,1.362,63,1.895,79,0.166,86,1.176,124,0.116,157,2.845,160,2.773,162,2.845,163,2.845,175,3.204,178,0.155,182,0.007,183,0.007,184,0.678,186,0.228,193,0.274,248,0.356,426,1.137,487,3.152,488,2.576,489,3.635,490,4.375,491,4.375,493,4.815,494,4.58,501,3.152,502,3.453,503,3.152,504,3.635,505,3.294,506,3.152,507,3.659,680,5.502,681,5.502,682,5.502,683,5.502,684,5.502,685,5.502,686,5.502,687,5.502]],["title/classes/CsdlSchema.html",[184,0.349,688,3.512]],["body/classes/CsdlSchema.html",[3,0.083,4,0.083,5,0.083,6,0.103,8,0.631,10,0.061,11,0.59,12,0.207,24,0.104,25,0.01,31,0.474,36,0.072,48,1.648,51,2.016,62,0.821,63,1.809,79,0.156,124,0.072,139,3.123,140,1.764,178,0.107,182,0.007,183,0.007,184,0.42,186,0.217,193,0.284,248,0.28,415,2.973,426,1.213,450,1.632,487,4.688,488,2.645,501,4.688,512,4.347,514,4.688,516,4.326,519,5.135,521,3.009,522,5.135,533,3.917,534,4.898,535,2.199,551,4.118,554,4.898,559,6.102,560,2.495,591,5.722,613,4.631,616,2.199,688,5.44,689,5.252,690,8.182,691,8.182,692,8.182,693,7.215,694,8.182,695,8.182,696,8.182,697,8.182,698,6.102,699,5.252,700,5.252,701,5.252,702,5.252,703,5.252,704,5.252,705,5.252,706,5.252,707,5.252,708,5.252,709,5.252,710,5.252,711,4.222,712,4.222]],["title/classes/CsdlSingleton.html",[184,0.349,567,3.258]],["body/classes/CsdlSingleton.html",[3,0.104,4,0.104,5,0.104,6,0.101,10,0.076,11,0.677,12,0.186,24,0.105,25,0.009,31,0.37,36,0.09,48,1.606,57,1.888,79,0.163,124,0.12,161,3.009,178,0.133,182,0.008,183,0.008,184,0.524,186,0.271,193,0.271,248,0.321,426,0.897,488,2.577,492,2.197,551,3.218,567,5.783,578,6.098,584,4.326,713,6.547,714,8.719,715,6.547,716,6.547,717,6.547,718,6.547]],["title/classes/CsdlStructuralProperty.html",[184,0.349,632,2.886]],["body/classes/CsdlStructuralProperty.html",[3,0.095,4,0.095,5,0.095,6,0.098,8,0.686,10,0.069,11,0.641,12,0.179,24,0.105,25,0.01,30,0.62,36,0.117,48,1.638,57,1.726,63,2.062,79,0.167,86,1.031,124,0.12,157,2.009,160,2.918,162,2.009,163,2.009,165,2.752,178,0.122,182,0.008,183,0.008,184,0.681,186,0.248,193,0.263,216,1.787,248,0.343,426,0.82,488,2.515,492,2.009,507,2.584,524,3.292,538,2.365,542,3.05,543,3.05,552,4.498,553,4.04,631,4.188,632,5.477,633,3.956,634,3.956,635,3.956,636,4.188,637,4.612,638,4.612,647,3.758,719,5.988,720,5.988,721,5.988,722,5.988]],["title/classes/CsdlStructuredType.html",[184,0.349,537,2.886]],["body/classes/CsdlStructuredType.html",[3,0.089,4,0.089,5,0.089,6,0.101,8,0.658,10,0.065,11,0.78,12,0.202,24,0.1,25,0.01,30,0.632,31,0.317,36,0.114,48,1.632,57,1.618,79,0.164,124,0.12,140,1.21,158,1.181,178,0.114,182,0.007,183,0.007,184,0.668,186,0.232,193,0.275,216,1.716,248,0.335,426,1.144,488,2.586,492,1.883,534,3.359,535,3.663,536,2.758,537,5.353,538,3.486,539,5.832,540,6.173,541,5.832,542,4.406,543,4.406,551,2.758,552,2.966,553,3.88,554,3.359,555,4.429,556,3.707,557,3.924,558,4.429,589,4.948,590,4.948,595,4.948,723,5.611,724,4.948,725,5.611,726,5.611]],["title/classes/CsdlTerm.html",[184,0.349,522,2.742]],["body/classes/CsdlTerm.html",[3,0.088,4,0.088,5,0.088,6,0.104,8,0.514,10,0.064,11,0.609,12,0.206,24,0.105,25,0.01,30,0.563,36,0.11,48,1.65,79,0.168,86,1.163,124,0.114,135,1.897,157,2.786,160,2.715,162,2.786,163,2.786,178,0.112,182,0.007,183,0.007,184,0.644,186,0.228,193,0.283,216,1.696,223,2.001,248,0.317,426,1.194,488,2.65,492,1.848,507,3.583,512,3.834,513,4.107,514,3.996,516,4.047,519,3.456,520,4.175,521,3.155,522,4.377,523,5.806,524,4.564,525,5.806,727,5.507,728,5.507,729,5.507,730,5.507,731,5.507,732,5.507,733,5.507,734,5.507,735,5.507,736,5.507,737,5.507]],["title/classes/CsdlTypeDefinition.html",[184,0.349,698,3.258]],["body/classes/CsdlTypeDefinition.html",[3,0.093,4,0.093,5,0.093,6,0.103,8,0.674,10,0.067,11,0.63,12,0.205,24,0.106,25,0.009,30,0.575,31,0.329,36,0.08,48,1.641,79,0.163,86,1.172,124,0.116,157,2.832,162,2.832,163,2.832,178,0.118,182,0.007,183,0.007,184,0.466,186,0.241,193,0.282,248,0.299,426,1.179,450,1.81,488,2.626,492,1.955,507,3.643,512,4.514,514,4.836,516,4.463,521,3.338,533,4.345,551,2.864,616,2.439,647,5.298,698,5.388,738,5.825,739,8.441,740,5.825,741,5.825,742,5.825,743,5.825,744,5.825,745,5.825,746,5.825,747,5.825]],["title/classes/DateAndTimeFunctions.html",[184,0.349,298,1.829]],["body/classes/DateAndTimeFunctions.html",[0,1.416,3,0.041,4,0.041,5,0.041,6,0.093,8,0.468,10,0.03,12,0.178,19,0.627,24,0.098,25,0.01,30,0.62,31,0.283,36,0.119,60,1.149,62,1.31,79,0.16,86,0.65,87,0.916,98,1.987,105,1.244,112,1.034,119,0.615,124,0.118,127,2.143,140,1.534,158,1.498,171,1.185,178,0.16,182,0.004,183,0.004,184,0.666,185,2.099,186,0.107,187,1.112,188,0.571,192,1.112,193,0.253,195,1.035,196,1.112,198,1.112,200,0.887,201,0.435,202,0.743,203,2.189,204,1.26,205,1.112,206,2.092,207,2.305,208,2.725,209,2.725,210,2.891,211,1.017,212,1.98,213,1.84,214,1.656,215,1.112,216,0.627,217,0.801,218,1.112,219,1.75,220,1.75,221,1.112,222,1.112,223,1.473,224,1.112,225,1.112,226,1.112,227,2.187,228,2.513,229,1.112,230,1.112,231,1.112,232,1.112,233,1.112,234,1.112,235,1.112,236,1.112,237,1.112,238,1.112,239,1.112,240,3.938,241,1.14,242,1.556,243,1.112,244,1.047,245,1.112,246,1.112,247,1.112,248,0.207,249,2.057,250,2.66,251,0.986,252,0.821,253,1.326,254,2.749,255,2.964,256,1.112,257,1.112,258,1.75,259,1.112,260,2.163,261,2.163,262,1.112,263,2.099,264,1.112,265,1.112,266,1.112,267,1.112,268,1.112,269,1.112,270,1.112,271,1.112,272,1.112,273,1.112,274,1.112,275,1.112,276,1.112,277,1.75,278,1.473,279,1.112,280,1.112,281,2.099,282,1.112,283,2.453,284,1.112,285,1.75,286,1.112,287,1.112,288,2.099,289,1.112,290,1.75,291,1.112,292,1.112,293,1.112,294,1.112,295,1.112,296,1.112,297,1.112,298,2.38,299,1.75,300,1.112,301,1.75,302,1.112,303,1.75,304,1.112,305,1.75,306,1.112,307,1.75,308,1.112,309,1.75,310,1.112,311,1.75,312,1.112,313,1.75,314,1.112,315,2.453,316,1.112,317,1.75,318,1.112,319,1.75,320,1.112,321,1.75,322,1.112,323,1.75,324,1.112,325,1.75,326,1.112,327,1.112,328,1.112,329,1.112,330,2.099,331,1.112,332,1.112,333,1.112,334,1.112,335,2.099,336,1.112,337,1.75,338,1.112,339,1.112,340,1.75,341,1.112,342,1.112,343,1.112,344,1.112,345,2.099,346,1.112,347,1.112,348,1.112,349,2.38,350,2.453,351,2.668,352,3.617,353,3.818,354,1.75,355,1.112,356,1.112,357,0.821,358,1.112,359,1.112,360,2.099,361,1.112,362,1.112,363,1.112,364,1.112,365,1.112,366,1.112,367,1.112,368,1.112,369,1.112,370,1.112,371,1.112,372,1.112,373,1.112,374,1.112,375,1.112,376,1.112,377,1.112,378,1.112,379,1.112,380,1.112,381,1.112,382,1.112,383,2.099,384,1.112,385,1.112,386,1.112,387,1.112,388,1.112,389,1.112,390,1.112,391,1.112,392,1.112,393,1.112,394,1.112,395,1.601,396,0.887,397,1.75,398,1.112,399,1.112,400,1.112,401,2.099,402,1.773,403,1.112,404,1.112,405,2.099,406,1.112,407,1.112,408,1.112,409,1.112,410,2.52,411,1.112,412,1.079,413,2.52,414,1.112,415,0.936,416,2.453,417,1.112,418,0.864,748,4.054,749,4.054,750,4.054,751,4.054,752,4.054,753,4.054,754,4.054,755,4.054,756,3.259,757,4.054,758,4.054,759,4.054,760,2.576,761,2.576,762,2.576,763,2.576,764,2.576,765,2.576,766,2.576,767,2.576,768,2.576,769,2.576,770,2.576,771,2.576,772,2.576,773,2.576]],["title/classes/ExpandExpression.html",[184,0.349,774,3.055]],["body/classes/ExpandExpression.html",[3,0.063,4,0.063,5,0.063,6,0.091,8,0.521,10,0.046,11,0.488,12,0.168,19,0.962,23,1.64,24,0.1,25,0.01,26,2.568,30,0.391,31,0.465,36,0.077,49,1.989,60,0.937,62,0.873,64,2.34,65,3.418,67,2.488,68,2.655,70,2.488,79,0.146,86,0.84,87,0.887,98,1.92,105,1.237,112,1.016,116,3.871,117,1.653,119,0.911,124,0.106,125,1.199,158,1.563,168,1.657,171,0.913,178,0.167,182,0.006,183,0.006,184,0.447,186,0.164,188,0.787,193,0.27,195,1.082,200,1.363,201,0.943,202,1.141,203,2.065,204,2.514,206,2.524,207,2.491,208,2.524,209,2.524,210,2.658,212,2.03,213,1.989,214,1.06,217,2.556,227,1.399,248,0.268,249,1.778,250,2.354,278,2.354,357,1.781,410,2.145,413,2.145,418,1.328,426,0.766,441,4.349,443,3.692,444,3.692,445,4.537,446,3.961,447,4.121,448,2.092,450,2.395,451,2.767,453,3.507,457,2.767,458,4.522,463,1.88,466,2.767,467,2.767,468,2.951,469,2.016,471,2.614,475,2.369,478,2.267,479,2.369,481,2.614,482,3.908,483,4.445,774,6.267,775,3.489,776,3.957,777,3.692,778,3.957,779,3.957,780,3.957,781,3.181,782,3.957,783,4.492,784,5.659,785,3.957,786,3.957,787,3.957,788,4.167,789,5.25,790,4.418,791,3.692,792,4.066,793,4.906,794,2.951,795,4.167,796,4.167,797,4.167,798,4.167,799,4.167,800,3.181,801,3.181,802,3.489,803,3.181,804,3.181,805,2.614,806,3.181,807,3.181,808,3.181,809,3.692,810,2.951,811,3.489,812,3.489,813,3.181,814,3.489,815,3.181,816,1.945,817,3.181,818,3.489,819,6.547,820,3.489,821,3.181,822,3.489,823,3.181,824,3.908,825,3.489,826,3.181,827,3.489,828,3.181,829,3.489,830,3.181,831,3.489,832,3.489,833,5.208,834,3.489,835,3.489,836,3.489,837,3.181,838,3.489,839,3.181,840,2.951,841,3.181,842,4.492,843,3.489,844,3.489,845,2.369,846,2.483,847,3.489,848,3.489,849,3.489]],["title/classes/ExpandField.html",[184,0.349,784,3.512]],["body/classes/ExpandField.html",[3,0.06,4,0.06,5,0.06,6,0.1,8,0.355,10,0.044,12,0.189,19,0.924,23,1.8,24,0.103,25,0.01,26,3.177,30,0.38,31,0.461,36,0.074,49,1.959,60,0.872,62,1.143,64,2.894,65,3.378,67,3.077,68,3.284,70,3.077,71,2.417,72,2.417,75,3.111,79,0.145,86,1.057,87,0.883,98,1.822,105,1.242,112,0.987,116,3.923,117,1.941,119,0.96,124,0.117,158,1.539,168,1.591,171,0.897,178,0.178,182,0.006,183,0.006,184,0.434,186,0.157,188,0.764,193,0.273,195,1.096,200,1.309,201,0.916,202,1.096,203,2.019,204,2.626,206,2.33,207,2.453,208,2.495,209,2.495,210,2.627,212,1.993,213,1.959,214,1.455,217,1.969,227,1.344,248,0.262,249,1.043,250,2.657,357,1.731,410,2.085,413,2.085,418,1.275,426,0.521,441,2.871,445,4.308,446,3.719,447,3.521,453,2.385,457,4.834,458,4.304,463,1.805,469,1.936,471,2.511,475,2.275,478,2.177,479,2.275,481,2.511,482,5.113,483,3.251,774,6.044,775,3.351,777,2.511,781,3.055,783,3.055,784,5.878,788,4.05,789,5.453,790,4.589,791,3.588,792,3.976,793,5.172,794,2.834,795,4.05,796,4.05,797,4.05,798,4.05,799,4.05,800,3.055,801,3.055,802,3.351,803,3.055,804,3.055,805,2.511,806,3.055,807,3.055,808,3.055,809,3.588,810,2.834,811,3.351,812,3.351,813,3.055,814,3.351,815,3.055,816,1.868,817,3.055,818,3.351,819,6.447,820,3.351,821,3.055,822,3.351,823,3.055,824,3.797,825,3.351,826,3.055,827,3.351,828,3.055,829,3.351,830,3.055,831,4.788,832,3.351,833,6.114,834,4.788,835,3.351,836,4.788,837,5.094,838,3.351,839,5.094,840,2.834,841,4.365,842,4.365,843,3.351,844,3.351,845,2.275,846,2.385,847,3.351,848,3.351,849,3.351,850,1.921,851,3.351,852,3.8,853,3.8,854,3.8,855,3.351,856,3.8,857,3.8,858,3.8,859,3.055,860,3.8,861,3.8,862,3.055,863,3.8,864,3.351,865,3.8,866,3.8,867,3.8,868,3.8,869,3.8]],["title/classes/Expression.html",[184,0.349,441,2.31]],["body/classes/Expression.html",[3,0.094,4,0.094,5,0.094,6,0.103,10,0.069,11,0.638,12,0.165,23,1.826,24,0.102,25,0.01,30,0.416,31,0.414,36,0.081,79,0.143,87,0.823,119,1.041,124,0.1,178,0.149,182,0.008,183,0.008,184,0.475,186,0.246,188,1.029,193,0.281,195,1.101,203,2.331,204,1.846,206,2.755,207,2.659,208,2.331,209,2.331,210,2.454,212,2.384,213,2.215,214,1.959,227,2.102,248,0.303,249,2.175,278,3.004,418,1.994,441,4.488,443,5.235,447,4.541,448,3.142,463,2.823,478,3.404,538,3.459,845,4.378,850,2.587,870,5.942,871,7.314,872,5.942,873,5.942,874,5.942,875,5.942,876,5.942,877,5.942,878,4.777,879,4.777]],["title/classes/Field.html",[98,1.088,184,0.349]],["body/classes/Field.html",[3,0.06,4,0.06,5,0.06,6,0.079,8,0.349,10,0.073,11,0.469,12,0.085,24,0.09,25,0.01,27,1.568,31,0.484,36,0.051,37,3.201,48,1.414,49,2.493,51,2.063,54,2.712,55,2.007,56,2.553,57,1.98,58,1.98,59,2.146,60,0.473,62,0.982,63,2.165,76,3.72,79,0.141,98,1.566,100,1.568,109,1.841,112,1.417,124,0.104,129,2.841,132,2.242,135,1.851,139,1.479,140,0.808,141,1.29,156,2.059,157,1.257,158,0.788,160,1.225,161,1.721,162,1.257,163,1.257,165,1.721,171,1.153,175,1.721,178,0.076,179,2.954,182,0.006,183,0.006,184,0.43,186,0.155,193,0.2,200,1.29,201,0.632,216,0.911,217,2.892,223,1.361,241,1.512,248,0.155,249,1.475,447,1.908,487,2.146,490,2.351,491,2.351,492,1.257,493,2.242,494,2.242,501,2.146,502,2.351,503,2.146,505,2.242,506,2.146,507,1.616,516,1.98,519,2.351,520,2.242,522,2.351,523,2.619,524,2.059,525,2.619,534,2.242,535,1.568,538,1.479,539,2.475,541,2.475,542,1.908,543,1.908,552,1.98,554,2.242,555,2.351,556,2.475,558,2.351,559,2.793,560,2.553,566,2.793,567,2.793,575,2.242,577,3.303,578,2.619,584,2.475,588,2.793,591,2.619,592,3.011,593,3.011,611,2.619,616,2.25,617,3.758,618,2.793,620,2.619,621,2.793,622,2.793,633,2.475,634,2.475,635,2.475,637,2.351,638,2.351,647,2.351,688,4.32,693,3.303,698,2.793,711,3.011,712,3.011,880,3.303,881,7.266,882,3.745,883,5.374,884,8.428,885,2.553,886,3.303,887,4.32,888,1.779,889,3.303,890,4.739,891,3.745,892,2.351,893,7.488,894,3.745,895,3.745,896,3.745,897,3.745,898,3.745,899,3.745,900,3.745,901,3.745,902,3.745,903,3.745,904,3.745,905,3.745,906,3.745,907,3.745,908,3.745,909,2.619,910,3.745,911,3.745,912,3.745,913,3.745,914,3.745,915,3.745,916,3.745,917,3.745,918,3.745,919,3.745,920,3.745,921,3.745,922,3.745,923,3.745,924,3.745,925,3.745,926,3.745,927,3.745,928,3.745,929,3.745,930,3.745,931,3.745,932,3.745,933,3.745,934,3.745,935,3.745,936,3.944,937,3.745,938,3.745,939,3.745,940,3.745,941,3.745,942,3.745,943,3.745,944,3.745,945,3.745,946,3.745,947,3.745,948,3.745,949,3.745,950,3.745,951,3.745,952,3.745,953,3.745,954,3.745,955,3.745,956,3.745,957,3.745,958,3.745,959,3.745,960,3.745,961,3.745,962,3.745,963,3.745,964,3.745,965,3.745,966,3.745,967,3.745,968,3.745,969,3.745,970,3.745,971,3.745,972,3.745,973,3.745,974,3.745,975,3.745,976,3.745,977,3.745,978,3.745,979,3.745,980,3.745,981,5.374,982,6.285,983,3.745,984,3.745,985,3.745,986,2.793,987,3.745,988,3.745,989,6.867,990,5.374,991,3.745,992,3.745,993,3.745,994,3.745,995,3.745,996,3.745,997,8.502,998,3.745,999,5.374,1000,3.745,1001,3.758,1002,3.745,1003,3.745,1004,2.737,1005,3.745,1006,3.745,1007,3.745,1008,3.745,1009,3.745,1010,3.745,1011,3.745,1012,3.745,1013,3.745,1014,3.745,1015,3.745,1016,3.745,1017,3.745,1018,3.745,1019,3.745,1020,4.31,1021,3.745,1022,3.011,1023,3.745,1024,3.011,1025,3.745,1026,6.285,1027,5.374,1028,5.542,1029,3.745,1030,3.745,1031,3.745,1032,3.745,1033,3.745,1034,3.745,1035,3.745,1036,3.745]],["title/classes/Field-1.html",[98,0.906,184,0.291,1037,1.436]],["body/classes/Field-1.html",[0,1.452,3,0.043,4,0.043,5,0.043,6,0.077,8,0.482,10,0.031,11,0.367,12,0.132,19,0.656,24,0.095,25,0.01,30,0.623,31,0.292,36,0.119,48,0.745,60,1.142,62,1.046,79,0.163,86,0.67,87,0.918,98,2.027,105,1.282,112,1.06,119,0.633,124,0.116,125,1.273,140,1.558,158,1.653,171,1.187,178,0.128,182,0.004,183,0.004,184,0.671,185,2.161,186,0.112,187,1.164,188,0.591,192,1.164,193,0.201,195,0.67,196,1.164,198,1.164,200,0.929,201,0.455,202,0.777,203,2.227,204,1.306,205,1.164,206,2.133,207,2.344,208,2.742,209,2.742,210,2.908,211,1.065,212,2.015,213,1.872,214,1.793,215,1.813,216,0.656,217,1.604,218,1.813,219,1.813,220,1.813,221,1.813,222,2.228,223,2.118,224,1.164,225,1.164,226,1.164,227,2.234,228,2.568,229,1.164,230,1.813,231,1.164,232,1.164,233,1.164,234,1.164,235,1.164,236,1.164,237,1.164,238,1.164,239,1.164,240,3.948,241,1.182,242,1.613,243,1.164,244,1.096,245,1.164,246,1.164,247,1.164,248,0.241,249,2.084,250,2.698,251,1.022,252,0.859,253,1.374,254,2.802,255,3.015,256,1.164,257,1.164,258,1.813,259,1.164,260,2.228,261,2.228,262,1.164,263,2.161,264,1.164,265,1.164,266,1.164,267,1.164,268,1.164,269,1.164,270,1.164,271,1.164,272,1.164,273,1.164,274,1.164,275,1.164,276,1.164,277,1.813,278,1.527,279,1.164,280,1.164,281,2.161,282,1.164,283,2.515,284,1.164,285,1.813,286,1.164,287,1.164,288,2.161,289,1.164,290,1.813,291,1.164,292,1.164,293,1.164,294,1.164,295,1.164,296,1.164,297,1.164,298,2.161,299,1.164,300,1.164,301,1.164,302,1.164,303,1.164,304,1.164,305,1.164,306,1.164,307,1.164,308,1.164,309,1.164,310,1.164,311,1.164,312,1.164,313,1.164,314,1.164,315,1.164,316,1.164,317,1.164,318,1.164,319,1.164,320,1.164,321,1.164,322,1.164,323,1.164,324,1.164,325,1.164,326,1.164,327,1.164,328,1.164,329,1.164,330,2.161,331,1.164,332,1.164,333,1.164,334,1.164,335,2.161,336,1.164,337,1.813,338,1.164,339,1.164,340,1.813,341,1.164,342,1.164,343,1.164,344,1.164,345,2.161,346,1.164,347,1.164,348,1.164,349,2.44,350,2.515,351,2.726,352,3.643,353,3.834,354,1.813,355,1.164,356,1.164,357,0.859,358,1.164,359,1.164,360,2.161,361,1.164,362,1.164,363,1.164,364,1.164,365,1.164,366,1.164,367,1.164,368,1.164,369,1.164,370,1.164,371,1.164,372,1.164,373,1.164,374,1.164,375,1.164,376,1.164,377,1.164,378,1.164,379,1.164,380,1.164,381,1.164,382,1.164,383,2.161,384,1.164,385,1.164,386,1.164,387,1.164,388,1.164,389,1.164,390,1.164,391,1.164,392,1.164,393,1.164,394,1.164,395,1.659,396,0.929,397,1.813,398,1.164,399,1.164,400,1.164,401,2.161,402,1.826,403,1.164,404,1.164,405,2.161,406,1.164,407,1.164,408,1.164,409,1.164,410,2.569,411,1.164,412,1.129,413,2.569,414,1.164,415,0.98,416,2.515,417,1.164,418,0.905,492,0.905,1038,3.133,1039,2.696,1040,2.696,1041,2.696,1042,2.696,1043,2.696]],["title/classes/Function.html",[62,0.683,184,0.349]],["body/classes/Function.html",[0,1.459,3,0.043,4,0.043,5,0.043,6,0.078,8,0.484,10,0.031,12,0.095,19,0.661,23,0.934,24,0.094,25,0.01,30,0.628,31,0.293,36,0.119,60,1.14,62,1.133,79,0.162,86,0.673,87,0.918,98,2.01,105,1.255,112,1.065,119,0.778,124,0.114,140,1.563,158,1.525,171,1.188,178,0.086,182,0.004,183,0.004,184,0.672,185,2.173,186,0.113,187,1.174,188,0.595,192,1.174,193,0.202,195,0.673,196,1.174,198,1.174,200,0.937,201,0.459,202,0.784,203,2.234,204,1.314,205,1.174,206,2.234,207,2.498,208,2.745,209,2.765,210,2.911,211,1.074,212,2.194,213,2.039,214,1.799,215,1.174,216,0.661,217,0.845,218,1.174,219,1.825,220,1.825,221,1.174,222,1.174,223,1.537,224,1.174,225,1.174,226,1.174,227,2.243,228,2.578,229,1.174,230,1.174,231,1.174,232,1.174,233,1.174,234,1.174,235,1.174,236,1.174,237,1.174,238,1.174,239,1.174,240,3.956,241,1.19,242,1.624,243,1.174,244,1.106,245,1.174,246,1.174,247,1.174,248,0.242,249,2.089,250,2.86,251,1.029,252,0.867,253,1.383,254,2.812,255,3.025,256,1.174,257,1.174,258,1.825,259,1.174,260,2.24,261,2.24,262,1.174,263,2.173,264,1.174,265,1.174,266,1.174,267,1.174,268,1.174,269,1.174,270,1.174,271,1.174,272,1.174,273,1.174,274,1.174,275,1.174,276,1.174,277,1.825,278,1.537,279,1.174,280,1.174,281,2.173,282,1.174,283,2.527,284,1.174,285,1.825,286,1.174,287,1.174,288,2.173,289,1.174,290,1.825,291,1.174,292,1.174,293,1.174,294,1.174,295,1.174,296,1.174,297,1.174,298,2.173,299,1.174,300,1.174,301,1.174,302,1.174,303,1.174,304,1.174,305,1.174,306,1.174,307,1.174,308,1.174,309,1.174,310,1.174,311,1.174,312,1.174,313,1.174,314,1.174,315,1.174,316,1.174,317,1.174,318,1.174,319,1.174,320,1.174,321,1.174,322,1.174,323,1.174,324,1.174,325,1.174,326,1.174,327,1.174,328,1.174,329,1.174,330,2.173,331,1.174,332,1.174,333,1.174,334,1.174,335,2.173,336,1.174,337,1.825,338,1.174,339,1.174,340,1.825,341,1.174,342,1.174,343,1.174,344,1.174,345,2.173,346,1.174,347,1.174,348,1.174,349,2.452,350,2.527,351,2.737,352,3.648,353,3.837,354,1.825,355,1.174,356,1.174,357,0.867,358,1.174,359,1.174,360,2.173,361,1.174,362,1.174,363,1.174,364,1.174,365,1.174,366,1.174,367,1.174,368,1.174,369,1.174,370,1.174,371,1.174,372,1.174,373,1.174,374,1.174,375,1.174,376,1.174,377,1.174,378,1.174,379,1.174,380,1.174,381,1.174,382,1.174,383,2.173,384,1.174,385,1.174,386,1.174,387,1.174,388,1.174,389,1.174,390,1.174,391,1.174,392,1.174,393,1.174,394,1.174,395,1.671,396,0.937,397,1.825,398,1.174,399,1.174,400,1.174,401,2.173,402,1.836,403,1.174,404,1.174,405,2.173,406,1.174,407,1.174,408,1.174,409,1.174,410,2.578,411,1.174,412,1.139,413,2.578,414,1.174,415,0.988,416,2.527,417,1.174,418,0.913,463,1.292,492,0.913,850,1.496,1044,2.72,1045,2.72,1046,2.72,1047,2.72,1048,2.72]],["title/classes/GeoFunctions.html",[184,0.349,335,1.829]],["body/classes/GeoFunctions.html",[0,1.459,3,0.043,4,0.043,5,0.043,6,0.068,8,0.485,10,0.031,12,0.117,19,0.662,24,0.092,25,0.01,30,0.629,31,0.294,36,0.119,60,1.143,62,1.164,79,0.162,86,0.674,87,0.918,98,2.011,105,1.288,112,1.065,119,0.637,124,0.113,140,1.563,158,1.526,171,1.188,178,0.106,182,0.004,183,0.004,184,0.672,185,2.174,186,0.113,187,1.175,188,0.596,192,1.175,193,0.165,195,0.674,196,1.175,198,1.175,200,0.938,201,0.459,202,0.785,203,2.235,204,1.315,205,1.175,206,2.141,207,2.353,208,2.745,209,2.745,210,2.911,211,1.075,212,2.022,213,1.878,214,1.7,215,1.175,216,0.662,217,0.846,218,1.175,219,1.827,220,1.827,221,1.175,222,1.175,223,1.538,224,1.175,225,1.175,226,1.175,227,2.244,228,2.579,229,1.175,230,1.175,231,1.175,232,1.175,233,1.175,234,1.175,235,1.175,236,1.175,237,1.175,238,1.175,239,1.175,240,3.962,241,1.191,242,1.625,243,1.175,244,1.107,245,1.175,246,1.175,247,1.175,248,0.215,249,2.089,250,2.706,251,1.029,252,0.868,253,1.384,254,2.813,255,3.026,256,1.175,257,1.175,258,1.827,259,1.175,260,2.241,261,2.241,262,1.175,263,2.174,264,1.175,265,1.175,266,1.175,267,1.175,268,1.175,269,1.175,270,1.175,271,1.175,272,1.175,273,1.175,274,1.175,275,1.175,276,1.175,277,1.827,278,1.538,279,1.175,280,1.175,281,2.174,282,1.175,283,2.528,284,1.175,285,1.827,286,1.175,287,1.175,288,2.174,289,1.175,290,1.827,291,1.175,292,1.175,293,1.175,294,1.175,295,1.175,296,1.175,297,1.175,298,2.174,299,1.175,300,1.175,301,1.175,302,1.175,303,1.175,304,1.175,305,1.175,306,1.175,307,1.175,308,1.175,309,1.175,310,1.175,311,1.175,312,1.175,313,1.175,314,1.175,315,1.175,316,1.175,317,1.175,318,1.175,319,1.175,320,1.175,321,1.175,322,1.175,323,1.175,324,1.175,325,1.175,326,1.175,327,1.175,328,1.175,329,1.175,330,2.174,331,1.175,332,1.175,333,1.175,334,1.175,335,2.453,336,1.827,337,2.528,338,1.175,339,1.827,340,2.528,341,1.175,342,1.827,343,1.175,344,1.827,345,2.174,346,1.175,347,1.175,348,1.175,349,2.453,350,2.528,351,2.738,352,3.649,353,3.838,354,1.827,355,1.175,356,1.175,357,0.868,358,1.175,359,1.175,360,2.174,361,1.175,362,1.175,363,1.175,364,1.175,365,1.175,366,1.175,367,1.175,368,1.175,369,1.175,370,1.175,371,1.175,372,1.175,373,1.175,374,1.175,375,1.175,376,1.175,377,1.175,378,1.175,379,1.175,380,1.175,381,1.175,382,1.175,383,2.174,384,1.175,385,1.175,386,1.175,387,1.175,388,1.175,389,1.175,390,1.175,391,1.175,392,1.175,393,1.175,394,1.175,395,1.672,396,0.938,397,1.827,398,1.175,399,1.175,400,1.175,401,2.174,402,1.837,403,1.175,404,1.175,405,2.174,406,1.175,407,1.175,408,1.175,409,1.175,410,2.579,411,1.175,412,1.14,413,2.579,414,1.175,415,0.989,416,2.528,417,1.175,418,0.913,426,0.712,1049,4.233,1050,4.233,1051,4.233,1052,2.722,1053,2.722,1054,2.722]],["title/classes/Grouping.html",[184,0.349,395,1.725]],["body/classes/Grouping.html",[0,1.464,3,0.044,4,0.044,5,0.044,6,0.078,8,0.486,10,0.032,12,0.096,19,0.666,23,0.939,24,0.094,25,0.01,30,0.624,31,0.295,36,0.119,60,1.141,62,1.053,79,0.162,86,0.676,87,0.919,98,2.013,105,1.256,112,1.068,119,0.78,124,0.112,140,1.566,158,1.529,171,1.188,178,0.086,182,0.004,183,0.004,184,0.673,185,2.182,186,0.113,187,1.182,188,0.598,192,1.182,193,0.202,195,0.676,196,1.182,198,1.182,200,0.943,201,0.462,202,0.789,203,2.239,204,1.321,205,1.182,206,2.377,207,2.503,208,2.747,209,2.747,210,2.913,211,1.081,212,2.198,213,2.042,214,1.804,215,1.182,216,0.666,217,0.851,218,1.182,219,1.835,220,1.835,221,1.182,222,1.182,223,1.545,224,1.182,225,1.182,226,1.182,227,2.25,228,2.586,229,1.182,230,1.182,231,1.182,232,1.182,233,1.182,234,1.182,235,1.182,236,1.182,237,1.182,238,1.182,239,1.182,240,3.951,241,1.196,242,1.632,243,1.182,244,1.113,245,1.182,246,1.182,247,1.182,248,0.243,249,2.093,250,2.71,251,1.034,252,0.873,253,1.39,254,2.819,255,3.032,256,1.182,257,1.182,258,1.835,259,1.182,260,2.249,261,2.249,262,1.182,263,2.182,264,1.182,265,1.182,266,1.182,267,1.182,268,1.182,269,1.182,270,1.182,271,1.182,272,1.182,273,1.182,274,1.182,275,1.182,276,1.182,277,1.835,278,1.545,279,1.182,280,1.182,281,2.182,282,1.182,283,2.536,284,1.182,285,1.835,286,1.182,287,1.182,288,2.182,289,1.182,290,1.835,291,1.182,292,1.182,293,1.182,294,1.182,295,1.182,296,1.182,297,1.182,298,2.182,299,1.182,300,1.182,301,1.182,302,1.182,303,1.182,304,1.182,305,1.182,306,1.182,307,1.182,308,1.182,309,1.182,310,1.182,311,1.182,312,1.182,313,1.182,314,1.182,315,1.182,316,1.182,317,1.182,318,1.182,319,1.182,320,1.182,321,1.182,322,1.182,323,1.182,324,1.182,325,1.182,326,1.182,327,1.182,328,1.182,329,1.182,330,2.182,331,1.182,332,1.182,333,1.182,334,1.182,335,2.182,336,1.182,337,1.835,338,1.182,339,1.182,340,1.835,341,1.182,342,1.182,343,1.182,344,1.182,345,2.182,346,1.182,347,1.182,348,1.182,349,2.46,350,2.536,351,2.746,352,3.652,353,3.84,354,1.835,355,1.182,356,1.182,357,0.873,358,1.182,359,1.182,360,2.182,361,1.182,362,1.182,363,1.182,364,1.182,365,1.182,366,1.182,367,1.182,368,1.182,369,1.182,370,1.182,371,1.182,372,1.182,373,1.182,374,1.182,375,1.182,376,1.182,377,1.182,378,1.182,379,1.182,380,1.182,381,1.182,382,1.182,383,2.182,384,1.182,385,1.182,386,1.182,387,1.182,388,1.182,389,1.182,390,1.182,391,1.182,392,1.182,393,1.182,394,1.182,395,2.321,396,0.943,397,2.536,398,1.182,399,1.182,400,1.182,401,2.182,402,1.844,403,1.182,404,1.182,405,2.182,406,1.182,407,1.182,408,1.182,409,1.182,410,2.585,411,1.182,412,1.146,413,2.585,414,1.182,415,0.995,416,2.536,417,1.182,418,0.919,463,1.301,850,1.504,1055,2.738,1056,2.738,1057,2.738,1058,2.738,1059,2.738,1060,2.738]],["title/classes/Lambda.html",[184,0.349,401,1.829]],["body/classes/Lambda.html",[0,1.46,3,0.043,4,0.043,5,0.043,6,0.078,8,0.485,10,0.031,12,0.096,19,0.662,23,0.935,24,0.094,25,0.01,30,0.624,31,0.294,36,0.119,60,1.141,62,1.05,79,0.163,86,0.674,87,0.918,98,2.011,105,1.255,112,1.065,119,0.779,124,0.112,140,1.672,158,1.526,171,1.188,178,0.086,182,0.004,183,0.004,184,0.672,185,2.175,186,0.113,187,1.175,188,0.596,192,1.175,193,0.202,195,0.674,196,1.175,198,1.175,200,0.938,201,0.46,202,0.785,203,2.235,204,1.316,205,1.175,206,2.235,207,2.499,208,2.745,209,2.745,210,2.912,211,1.076,212,2.195,213,2.039,214,1.8,215,1.175,216,0.662,217,0.846,218,1.175,219,1.827,220,1.827,221,1.175,222,1.175,223,1.539,224,1.175,225,1.175,226,1.175,227,2.245,228,2.58,229,1.175,230,1.175,231,1.175,232,1.175,233,1.175,234,1.175,235,1.175,236,1.175,237,1.175,238,1.175,239,1.175,240,3.95,241,1.191,242,1.626,243,1.175,244,1.107,245,1.175,246,1.175,247,1.175,248,0.242,249,2.09,250,2.861,251,1.03,252,0.868,253,1.385,254,2.813,255,3.026,256,1.175,257,1.175,258,1.827,259,1.175,260,2.242,261,2.242,262,1.175,263,2.175,264,1.175,265,1.175,266,1.175,267,1.175,268,1.175,269,1.175,270,1.175,271,1.175,272,1.175,273,1.175,274,1.175,275,1.175,276,1.175,277,1.827,278,1.539,279,1.175,280,1.175,281,2.175,282,1.175,283,2.529,284,1.175,285,1.827,286,1.175,287,1.175,288,2.175,289,1.175,290,1.827,291,1.175,292,1.175,293,1.175,294,1.175,295,1.175,296,1.175,297,1.175,298,2.175,299,1.175,300,1.175,301,1.175,302,1.175,303,1.175,304,1.175,305,1.175,306,1.175,307,1.175,308,1.175,309,1.175,310,1.175,311,1.175,312,1.175,313,1.175,314,1.175,315,1.175,316,1.175,317,1.175,318,1.175,319,1.175,320,1.175,321,1.175,322,1.175,323,1.175,324,1.175,325,1.175,326,1.175,327,1.175,328,1.175,329,1.175,330,2.175,331,1.175,332,1.175,333,1.175,334,1.175,335,2.175,336,1.175,337,1.827,338,1.175,339,1.175,340,1.827,341,1.175,342,1.175,343,1.175,344,1.175,345,2.175,346,1.175,347,1.175,348,1.175,349,2.453,350,2.9,351,2.739,352,3.649,353,3.838,354,1.827,355,1.175,356,1.175,357,0.868,358,1.175,359,1.175,360,2.175,361,1.175,362,1.175,363,1.175,364,1.175,365,1.175,366,1.175,367,1.175,368,1.175,369,1.175,370,1.175,371,1.175,372,1.175,373,1.175,374,1.175,375,1.175,376,1.175,377,1.175,378,1.175,379,1.175,380,1.175,381,1.175,382,1.175,383,2.175,384,1.175,385,1.175,386,1.175,387,1.175,388,1.175,389,1.175,390,1.175,391,1.175,392,1.175,393,1.175,394,1.175,395,1.672,396,0.938,397,1.827,398,1.175,399,1.175,400,1.175,401,2.657,402,1.837,403,1.175,404,1.175,405,2.175,406,1.175,407,1.175,408,1.175,409,1.175,410,2.58,411,1.175,412,1.14,413,2.58,414,1.175,415,0.99,416,2.529,417,1.175,418,0.914,426,0.373,463,1.294,850,1.498,1061,2.402,1062,2.724,1063,2.724,1064,2.724,1065,2.724,1066,2.724]],["title/classes/LambdaOperators.html",[184,0.349,405,1.829]],["body/classes/LambdaOperators.html",[0,1.47,3,0.044,4,0.044,5,0.044,6,0.06,8,0.489,10,0.032,12,0.096,19,0.671,24,0.091,25,0.01,30,0.624,31,0.296,36,0.12,60,1.146,62,1.056,79,0.162,86,0.679,87,0.919,98,2.055,105,1.281,112,1.073,119,0.642,124,0.112,140,1.703,158,1.533,171,1.189,178,0.087,182,0.004,183,0.004,184,0.674,185,2.193,186,0.114,187,1.19,188,0.602,192,1.19,193,0.136,195,0.555,196,1.19,198,1.19,200,0.95,201,0.465,202,0.795,203,2.246,204,1.329,205,1.19,206,2.153,207,2.364,208,2.75,209,2.75,210,2.916,211,1.089,212,2.031,213,1.887,214,1.71,215,1.19,216,0.671,217,0.857,218,1.19,219,1.845,220,1.845,221,1.19,222,1.19,223,1.554,224,1.19,225,1.19,226,1.19,227,2.258,228,2.595,229,1.19,230,1.19,231,1.19,232,1.19,233,1.19,234,1.19,235,1.19,236,1.19,237,1.19,238,1.19,239,1.19,240,3.952,241,1.203,242,1.642,243,1.19,244,1.121,245,1.19,246,1.19,247,1.19,248,0.217,249,2.097,250,2.716,251,1.04,252,0.879,253,1.398,254,2.828,255,3.041,256,1.19,257,1.19,258,1.845,259,1.19,260,2.26,261,2.26,262,1.19,263,2.193,264,1.19,265,1.19,266,1.19,267,1.19,268,1.19,269,1.19,270,1.19,271,1.19,272,1.19,273,1.19,274,1.19,275,1.19,276,1.19,277,1.845,278,1.554,279,1.19,280,1.19,281,2.193,282,1.19,283,2.546,284,1.19,285,1.845,286,1.19,287,1.19,288,2.193,289,1.19,290,1.845,291,1.19,292,1.19,293,1.19,294,1.19,295,1.19,296,1.19,297,1.19,298,2.193,299,1.19,300,1.19,301,1.19,302,1.19,303,1.19,304,1.19,305,1.19,306,1.19,307,1.19,308,1.19,309,1.19,310,1.19,311,1.19,312,1.19,313,1.19,314,1.19,315,1.19,316,1.19,317,1.19,318,1.19,319,1.19,320,1.19,321,1.19,322,1.19,323,1.19,324,1.19,325,1.19,326,1.19,327,1.19,328,1.19,329,1.19,330,2.193,331,1.19,332,1.19,333,1.19,334,1.19,335,2.193,336,1.19,337,1.845,338,1.19,339,1.19,340,1.845,341,1.19,342,1.19,343,1.19,344,1.19,345,2.193,346,1.19,347,1.19,348,1.19,349,2.47,350,2.546,351,2.755,352,3.656,353,3.842,354,1.845,355,1.19,356,1.19,357,0.879,358,1.19,359,1.19,360,2.193,361,1.19,362,1.19,363,1.19,364,1.19,365,1.19,366,1.19,367,1.19,368,1.19,369,1.19,370,1.19,371,1.19,372,1.19,373,1.19,374,1.19,375,1.19,376,1.19,377,1.19,378,1.19,379,1.19,380,1.19,381,1.19,382,1.19,383,2.193,384,1.19,385,1.19,386,1.19,387,1.19,388,1.19,389,1.19,390,1.19,391,1.19,392,1.19,393,1.19,394,1.19,395,1.689,396,0.95,397,1.845,398,1.19,399,1.19,400,1.19,401,2.673,402,1.852,403,1.19,404,1.19,405,2.47,406,1.845,407,1.19,408,1.845,409,1.19,410,2.593,411,1.19,412,1.155,413,2.593,414,1.19,415,1.002,416,2.546,417,1.19,418,0.926,426,0.586,1067,2.758,1068,2.758]],["title/classes/LogicalOperators.html",[184,0.349,360,1.829]],["body/classes/LogicalOperators.html",[0,1.421,3,0.041,4,0.041,5,0.041,6,0.087,8,0.469,10,0.03,12,0.165,19,0.63,24,0.096,25,0.01,30,0.635,31,0.284,36,0.119,60,1.138,62,1.029,79,0.16,86,0.653,87,0.916,98,1.989,105,1.245,112,1.037,119,0.617,124,0.116,140,1.537,158,1.501,171,1.185,178,0.149,182,0.004,183,0.004,184,0.667,185,2.107,186,0.107,187,1.118,188,0.573,192,1.118,193,0.233,195,0.951,196,1.118,198,1.118,200,0.893,201,0.437,202,0.747,203,2.194,204,1.266,205,1.118,206,2.097,207,2.31,208,2.727,209,2.727,210,2.893,211,1.023,212,1.985,213,1.844,214,1.661,215,1.118,216,0.63,217,0.805,218,1.118,219,1.758,220,1.758,221,1.118,222,1.118,223,1.48,224,1.118,225,1.118,226,1.118,227,2.193,228,2.52,229,1.118,230,1.118,231,1.118,232,1.118,233,1.118,234,1.118,235,1.118,236,1.118,237,1.118,238,1.118,239,1.118,240,3.974,241,1.146,242,1.564,243,1.118,244,1.053,245,1.118,246,1.118,247,1.118,248,0.208,249,2.06,250,2.665,251,0.99,252,0.826,253,1.332,254,2.755,255,2.971,256,1.118,257,1.118,258,1.758,259,1.118,260,2.171,261,2.171,262,1.118,263,2.107,264,1.118,265,1.118,266,1.118,267,1.118,268,1.118,269,1.118,270,1.118,271,1.118,272,1.118,273,1.118,274,1.118,275,1.118,276,1.118,277,1.758,278,1.48,279,1.118,280,1.118,281,2.107,282,1.118,283,2.461,284,1.118,285,1.758,286,1.118,287,1.118,288,2.107,289,1.118,290,1.758,291,1.118,292,1.118,293,1.118,294,1.118,295,1.118,296,1.118,297,1.118,298,2.107,299,1.118,300,1.118,301,1.118,302,1.118,303,1.118,304,1.118,305,1.118,306,1.118,307,1.118,308,1.118,309,1.118,310,1.118,311,1.118,312,1.118,313,1.118,314,1.118,315,1.118,316,1.118,317,1.118,318,1.118,319,1.118,320,1.118,321,1.118,322,1.118,323,1.118,324,1.118,325,1.118,326,1.118,327,1.118,328,1.118,329,1.118,330,2.107,331,1.118,332,1.118,333,1.118,334,1.118,335,2.107,336,1.118,337,1.758,338,1.118,339,1.118,340,1.758,341,1.118,342,1.118,343,1.118,344,1.118,345,2.107,346,1.118,347,1.118,348,1.118,349,3.303,350,2.461,351,2.675,352,3.746,353,3.903,354,1.758,355,1.118,356,1.118,357,0.826,358,1.118,359,1.118,360,2.388,361,1.758,362,1.118,363,1.758,364,1.118,365,1.758,366,1.118,367,1.758,368,1.118,369,1.758,370,1.118,371,1.758,372,1.118,373,1.118,374,1.118,375,1.118,376,1.118,377,1.758,378,1.118,379,1.758,380,1.118,381,1.758,382,1.118,383,2.107,384,1.118,385,1.118,386,1.118,387,1.118,388,1.118,389,1.118,390,1.118,391,1.118,392,1.118,393,1.118,394,1.118,395,1.608,396,0.893,397,1.758,398,1.118,399,1.118,400,1.118,401,2.107,402,1.78,403,1.118,404,1.118,405,2.107,406,1.118,407,1.118,408,1.118,409,1.118,410,2.526,411,1.118,412,1.085,413,2.526,414,1.118,415,0.942,416,2.461,417,1.118,418,0.869,426,1.005,1069,4.073,1070,4.073,1071,4.073,1072,4.073,1073,4.073,1074,4.073,1075,2.591,1076,2.591,1077,2.591,1078,2.591,1079,2.591,1080,2.591,1081,2.591,1082,2.591,1083,2.591]],["title/classes/ODataAnnotatable.html",[184,0.349,1084,2.148]],["body/classes/ODataAnnotatable.html",[3,0.089,4,0.089,5,0.089,6,0.096,10,0.065,11,0.674,12,0.174,23,1.561,24,0.1,25,0.01,30,0.495,31,0.318,36,0.097,60,1.023,62,1.208,78,2.5,79,0.158,86,0.73,87,0.831,105,1.147,112,1.285,117,1.436,119,0.948,124,0.106,134,4.087,135,2.981,136,3.223,137,3.223,138,3.223,141,2.793,171,0.917,178,0.165,182,0.007,183,0.007,184,0.565,186,0.233,188,0.995,193,0.258,195,1.106,201,0.949,248,0.233,251,1.719,616,3.765,1084,3.475,1085,4.961,1086,4.05,1087,4.05,1088,3.249,1089,7.069,1090,2.586,1091,4.417,1092,3.886,1093,4.131,1094,5.626,1095,4.192,1096,4.458,1097,4.458,1098,3.249,1099,3.886,1100,4.051,1101,5.626,1102,3.987,1103,3.147,1104,3.886,1105,4.961,1106,4.961,1107,4.961,1108,4.961,1109,3.531,1110,4.961,1111,2.673,1112,4.961,1113,4.961,1114,4.961,1115,3.093,1116,4.961,1117,4.961,1118,4.961,1119,4.961,1120,4.961,1121,4.961,1122,4.961,1123,4.961]],["title/classes/ODataAnnotation.html",[184,0.349,1091,2.31]],["body/classes/ODataAnnotation.html",[3,0.091,4,0.091,5,0.091,6,0.102,10,0.066,11,0.734,12,0.203,24,0.1,25,0.01,30,0.547,31,0.325,36,0.098,60,0.905,62,0.9,78,2.536,79,0.163,86,0.93,87,0.814,105,0.854,112,1.304,119,0.88,124,0.079,134,4.447,135,2.996,136,4.475,137,4.475,138,4.475,141,2.47,171,0.93,178,0.117,182,0.007,183,0.007,184,0.574,186,0.238,193,0.276,195,1.013,201,0.971,248,0.238,251,1.4,616,3.591,1084,2.83,1085,5.075,1088,2.646,1091,4.323,1092,3.164,1093,3.653,1095,3.84,1096,3.942,1097,3.942,1099,3.164,1100,4.074,1102,3.525,1103,2.562,1104,3.164,1105,6.323,1106,5.075,1107,5.075,1108,5.075,1109,3.612,1110,5.075,1111,2.734,1112,5.075,1113,5.075,1114,5.075,1115,3.164,1116,5.075,1117,5.075,1118,5.075,1119,5.075,1120,5.075,1121,5.075,1122,5.075,1123,5.075,1124,7.171,1125,5.756,1126,5.756,1127,5.756,1128,5.756,1129,5.756]],["title/classes/ODataAnnotations.html",[184,0.349,1130,3.055]],["body/classes/ODataAnnotations.html",[3,0.075,4,0.075,5,0.075,6,0.097,8,0.661,10,0.054,11,0.618,12,0.16,16,2.026,23,1.832,24,0.103,25,0.01,28,2.158,29,3.479,31,0.355,32,4.172,33,3.627,36,0.104,48,1.257,49,1.898,54,3.266,55,2.646,61,2.158,71,2.09,72,2.09,73,2.23,79,0.159,87,0.916,105,1.123,119,0.996,124,0.12,141,2.441,171,0.919,178,0.154,182,0.006,183,0.006,184,0.605,186,0.194,188,0.885,193,0.264,195,0.919,201,0.792,213,2.222,241,1.994,248,0.26,249,1.726,415,2.284,426,0.643,538,3.276,850,2.223,936,3.945,1100,2.23,1103,3.615,1109,4.447,1130,5.8,1131,3.501,1132,4.75,1133,4.695,1134,4.242,1135,5.001,1136,4.695,1137,4.695,1138,4.688,1139,4.695,1140,4.695,1141,5.885,1142,4.695,1143,4.695,1144,4.695,1145,4.695,1146,4.695,1147,3.501,1148,3.501,1149,3.501,1150,3.501,1151,2.392,1152,4.682,1153,5.285,1154,4.956,1155,3.501,1156,4.682,1157,3.501,1158,3.501,1159,3.501,1160,3.501,1161,3.501,1162,3.501,1163,3.501,1164,4.688,1165,4.688,1166,3.501,1167,3.501,1168,3.501,1169,3.501,1170,3.501,1171,3.501,1172,3.501,1173,3.501,1174,3.501,1175,5.285,1176,3.501,1177,3.501,1178,3.501,1179,4.688,1180,6.056,1181,4.688,1182,4.688,1183,4.688,1184,4.682,1185,3.501,1186,3.501,1187,3.501,1188,3.501,1189,3.501,1190,3.501,1191,5.285,1192,3.501,1193,4.688,1194,3.501,1195,3.501,1196,3.501]],["title/classes/ODataApiOptions.html",[184,0.349,1197,3.512]],["body/classes/ODataApiOptions.html",[1,4.412,3,0.072,4,0.072,5,0.072,6,0.102,9,2.624,10,0.052,11,0.534,12,0.191,13,4.114,14,3.816,15,3.977,16,2.996,17,4.088,18,3.697,19,1.893,20,3.816,21,3.977,22,3.67,23,1.719,24,0.103,25,0.01,26,3.191,27,2.907,28,2.811,29,3.422,30,0.605,31,0.393,33,3.577,36,0.084,37,3.792,41,2.486,44,2.478,51,2.348,54,2.996,60,0.569,74,2.384,76,3.945,77,4.092,78,2.163,79,0.153,80,2.478,81,2.478,82,2.384,83,3.977,84,3.977,85,2.478,86,0.585,87,0.691,88,2.142,89,2.583,90,2.297,93,3.314,103,3.81,104,2.906,110,3.007,124,0.062,125,2.104,178,0.092,182,0.006,183,0.006,184,0.489,186,0.186,193,0.28,201,0.761,214,1.86,248,0.186,251,1.487,252,1.949,850,2.163,888,2.142,986,4.562,1088,3.191,1090,2.072,1197,4.917,1198,3.975,1199,6.116,1200,4.508,1201,5.393,1202,4.562,1203,4.265,1204,4.508,1205,6.564,1206,4.508,1207,4.508,1208,4.917,1209,4.562,1210,4.508,1211,6.564,1212,6.564,1213,4.508,1214,4.508,1215,4.508,1216,4.508,1217,5.393,1218,4.278,1219,4.508,1220,4.508,1221,4.278,1222,5.393,1223,3.624,1224,4.508,1225,5.393,1226,5.393,1227,5.581,1228,3.624,1229,6.599,1230,7.238,1231,3.975,1232,3.363,1233,3.975,1234,3.975,1235,7.076,1236,7.076,1237,7.076,1238,7.076,1239,7.076,1240,7.076,1241,7.076,1242,3.975,1243,3.975,1244,3.975,1245,3.975,1246,3.975,1247,3.975,1248,4.917,1249,4.917,1250,4.917,1251,3.975,1252,3.975,1253,3.624,1254,3.975,1255,3.624,1256,3.975,1257,3.975,1258,3.975,1259,3.624,1260,3.975,1261,3.624,1262,3.975,1263,3.975,1264,3.975,1265,3.975,1266,3.975,1267,3.975,1268,3.975,1269,3.975,1270,3.975,1271,4.917,1272,2.583]],["title/classes/ODataBaseService.html",[184,0.349,1273,3.055]],["body/classes/ODataBaseService.html",[3,0.059,4,0.059,5,0.059,6,0.1,9,2.997,10,0.043,12,0.193,19,2.144,24,0.104,25,0.01,31,0.353,34,4,35,1.756,36,0.051,46,4.553,57,2.291,60,0.787,79,0.136,87,0.679,124,0.119,125,1.89,144,4.133,173,4.205,178,0.183,182,0.005,183,0.005,184,0.296,186,0.153,188,0.749,193,0.273,195,1.1,241,2.542,248,0.22,249,2.516,426,1.14,446,2.964,538,1.46,560,3.994,850,1.883,1273,3.723,1274,3.696,1275,6.418,1276,6.418,1277,6.037,1278,3.735,1279,3.259,1280,5.09,1281,5.501,1282,3.696,1283,5.016,1284,5.395,1285,4.817,1286,6.457,1287,6.07,1288,6.398,1289,3.696,1290,4.919,1291,3.696,1292,3.696,1293,3.696,1294,3.696,1295,5.395,1296,6.457,1297,3.696,1298,3.696,1299,3.696,1300,3.696,1301,3.696,1302,4.653,1303,6.128,1304,3.696,1305,3.696,1306,3.696,1307,3.259,1308,3.696,1309,2.757,1310,2.585,1311,2.972,1312,2.032,1313,3.696,1314,6.239,1315,6.239,1316,5.323,1317,3.696]],["title/classes/ODataBatchRequest.html",[184,0.349,1318,3.852]],["body/classes/ODataBatchRequest.html",[3,0.058,4,0.058,5,0.058,6,0.086,8,0.576,9,2.525,10,0.083,11,0.459,12,0.139,13,2.779,18,3.757,19,0.883,22,1.92,23,1.495,24,0.091,25,0.01,27,1.521,31,0.474,34,3.438,35,1.725,36,0.072,48,0.932,49,1.655,50,1.669,52,1.725,53,4.649,78,2.185,79,0.159,86,0.878,87,0.814,103,3.794,104,3.413,108,3.328,112,1.57,117,1.341,119,0.758,120,1.669,124,0.085,129,3.959,158,0.764,169,3.949,171,1.026,172,1.785,176,3.011,178,0.126,181,1.725,182,0.005,183,0.005,184,0.42,186,0.15,188,0.74,193,0.228,195,0.932,201,0.613,211,2.674,213,0.973,216,0.883,217,1.919,241,2.454,248,0.15,357,1.158,419,2.709,432,2.279,458,2.89,469,1.85,485,2.92,813,2.92,840,4.607,887,4.226,888,1.725,1004,3.147,1020,3.299,1037,2.44,1038,2.709,1115,1.997,1134,4.3,1151,3.147,1203,2.081,1218,4.735,1221,2.54,1278,3.698,1285,3.266,1287,2.4,1318,6.335,1319,3.632,1320,5.447,1321,5.256,1322,5.256,1323,3.632,1324,4.531,1325,3.632,1326,3.632,1327,5.256,1328,6.011,1329,3.632,1330,3.676,1331,5.256,1332,3.632,1333,3.632,1334,5.447,1335,5.443,1336,3.203,1337,2.54,1338,3.92,1339,5.256,1340,4.635,1341,3.632,1342,4.635,1343,3.632,1344,3.632,1345,3.632,1346,3.632,1347,4.966,1348,5.256,1349,5.256,1350,5.256,1351,3.632,1352,3.632,1353,5.256,1354,3.632,1355,3.203,1356,2.4,1357,3.632,1358,3.676,1359,3.92,1360,3.147,1361,3.632,1362,4.607,1363,3.676,1364,2.709,1365,3.632,1366,3.632,1367,4.29,1368,6.77,1369,3.632,1370,4.635,1371,2.4,1372,5.256,1373,5.256,1374,3.632,1375,5.256,1376,6.77,1377,6.177,1378,2.678,1379,3.632,1380,6.77,1381,4.607,1382,5.256,1383,6.177,1384,3.632,1385,3.632,1386,3.632,1387,3.632,1388,3.632,1389,3.632,1390,3.632,1391,4.635,1392,3.632,1393,3.632,1394,3.632,1395,3.632,1396,3.632,1397,3.203,1398,3.632,1399,4.966,1400,3.632,1401,3.632,1402,6.209,1403,3.632,1404,3.632,1405,3.632,1406,3.473,1407,3.632,1408,3.632,1409,3.632,1410,3.632,1411,6.77,1412,3.632,1413,6.177,1414,3.203,1415,6.177,1416,4.081,1417,3.203,1418,3.92,1419,3.632,1420,3.632,1421,3.632,1422,4.635,1423,3.632,1424,3.632,1425,4.635,1426,3.632,1427,3.632,1428,3.632,1429,3.632,1430,6.177,1431,4.635,1432,6.77,1433,3.632,1434,5.256,1435,3.632,1436,6.77,1437,3.632,1438,2.92,1439,3.632,1440,3.632,1441,3.632,1442,5.256,1443,3.632,1444,3.203,1445,3.632,1446,3.632,1447,3.632,1448,3.632,1449,3.632,1450,3.632,1451,3.203,1452,3.632,1453,3.632,1454,3.632,1455,3.632,1456,5.256,1457,8.059,1458,5.256,1459,6.77,1460,7.184,1461,3.632,1462,7.184,1463,6.77,1464,5.256,1465,3.632,1466,3.632,1467,3.632,1468,6.177,1469,3.632,1470,3.632,1471,3.632,1472,3.632,1473,2.4,1474,3.632,1475,3.632,1476,3.632,1477,3.632,1478,3.632,1479,3.203,1480,3.632,1481,3.632,1482,3.632,1483,3.632,1484,3.632,1485,3.632,1486,3.632,1487,3.632,1488,3.632,1489,3.632,1490,3.632,1491,3.632,1492,3.632]],["title/classes/ODataCache.html",[184,0.349,1493,2.886]],["body/classes/ODataCache.html",[0,0.914,3,0.058,4,0.058,5,0.058,6,0.101,10,0.042,11,0.462,12,0.193,23,1.812,24,0.104,25,0.01,30,0.257,31,0.408,34,3.85,35,1.744,36,0.073,41,3.335,42,1.804,43,3.597,49,2.013,50,1.687,52,1.744,60,0.784,79,0.161,86,1.005,87,0.843,103,1.634,105,1.246,112,1.526,115,3.947,117,1.841,119,1.019,124,0.122,125,1.883,158,1.582,171,0.806,178,0.177,182,0.005,183,0.005,184,0.294,186,0.152,188,0.745,193,0.276,195,1.108,201,0.619,214,1.419,248,0.219,251,0.893,432,3.9,442,1.87,446,1.744,448,1.941,538,3.06,816,3.344,888,1.744,892,5.395,1004,2.698,1037,1.45,1111,3.232,1134,2.197,1209,5.915,1290,2.197,1312,2.018,1324,5.064,1360,4.911,1367,5.095,1378,1.87,1399,4.258,1402,4.996,1406,2.425,1416,5.42,1493,3.499,1494,3.236,1495,5.38,1496,5.971,1497,4.634,1498,4.258,1499,4.758,1500,4.634,1501,4.258,1502,4.634,1503,4.634,1504,4.258,1505,4.258,1506,4.258,1507,5.737,1508,5.296,1509,3.67,1510,2.951,1511,3.67,1512,4.966,1513,3.95,1514,3.67,1515,3.67,1516,2.951,1517,3.67,1518,3.704,1519,3.67,1520,3.704,1521,3.67,1522,2.951,1523,3.67,1524,2.951,1525,3.67,1526,2.951,1527,3.67,1528,3.95,1529,3.67,1530,5.38,1531,2.951,1532,3.67,1533,3.704,1534,3.67,1535,3.95,1536,3.67,1537,3.95,1538,3.67,1539,4.258,1540,3.236,1541,3.236,1542,2.951,1543,3.236,1544,4.67,1545,4.67,1546,4.67,1547,3.95,1548,3.236,1549,3.236,1550,3.236,1551,2.951,1552,2.951,1553,2.951,1554,3.236,1555,4.67,1556,3.236,1557,3.236,1558,3.236,1559,3.236,1560,3.236,1561,3.236,1562,3.236,1563,3.236,1564,4.67,1565,3.236,1566,4.67,1567,3.236,1568,4.67,1569,3.236,1570,3.704,1571,4.67,1572,3.236,1573,3.236,1574,3.236,1575,3.236,1576,2.425,1577,3.236,1578,3.236,1579,3.236,1580,3.236,1581,3.236,1582,3.236,1583,3.236,1584,3.236,1585,3.236,1586,3.236,1587,3.236,1588,5.999,1589,3.236,1590,4.67,1591,3.236,1592,3.236,1593,3.236,1594,3.236,1595,3.236,1596,3.236,1597,3.236,1598,2.951,1599,3.236,1600,3.236,1601,3.236]],["title/interfaces/ODataCacheEntry.html",[0,1.088,1512,2.886]],["body/interfaces/ODataCacheEntry.html",[0,1.114,2,2.365,3,0.071,4,0.071,5,0.071,6,0.052,10,0.052,11,0.531,24,0.086,25,0.01,31,0.439,34,3.646,35,2.125,36,0.083,41,3.436,42,2.199,43,3.923,49,1.63,50,2.056,52,2.125,79,0.161,86,1.109,87,0.871,103,1.991,105,1.188,112,1.58,115,4.173,117,1.142,119,1.005,124,0.11,158,1.685,171,0.897,182,0.006,183,0.006,184,0.358,201,0.755,214,1.198,248,0.185,251,1.088,432,2.807,446,2.125,538,2.731,816,3.648,888,2.125,892,5.575,1004,3.099,1037,1.766,1111,3.284,1134,2.678,1209,6.216,1290,2.678,1312,2.459,1324,4.693,1360,4.646,1367,5.013,1378,2.278,1399,4.891,1402,5.558,1406,2.955,1416,4.568,1493,2.955,1494,3.944,1495,5.156,1496,6.186,1497,3.336,1499,3.128,1500,3.336,1502,3.336,1503,3.336,1507,5.829,1512,4.902,1513,3.336,1518,3.128,1520,3.128,1528,3.336,1530,5.534,1533,3.128,1535,3.336,1537,3.336,1539,4.891,1540,3.944,1541,3.944,1542,3.596,1543,3.944,1544,5.365,1545,6.843,1546,5.365,1547,4.537,1548,3.944,1549,3.944,1550,3.944,1551,3.596,1552,3.596,1553,3.596,1554,3.944,1555,5.365,1556,3.944,1557,3.944,1558,3.944,1559,3.944,1560,3.944,1561,3.944,1562,3.944,1563,3.944,1564,5.365,1565,3.944,1566,5.365,1567,3.944,1568,5.365,1569,3.944,1570,4.255,1571,5.365,1572,3.944,1573,3.944,1574,3.944,1575,3.944,1576,2.955,1577,3.944,1578,3.944,1579,3.944,1580,3.944,1581,3.944,1582,3.944,1583,3.944,1584,3.944,1585,3.944,1586,3.944,1587,3.944,1588,6.543,1589,3.944,1590,5.365,1591,3.944,1592,3.944,1593,3.944,1594,3.944,1595,3.944,1596,3.944,1597,3.944,1598,3.596,1599,3.944,1600,3.944,1601,3.944]],["title/classes/ODataCallable.html",[184,0.349,1602,3.512]],["body/classes/ODataCallable.html",[3,0.065,4,0.065,5,0.065,6,0.099,8,0.532,9,2.984,10,0.047,11,0.497,12,0.2,23,1.574,24,0.107,25,0.01,27,3.467,30,0.587,31,0.403,36,0.056,45,1.934,60,1.143,62,0.891,78,2.751,79,0.16,87,0.774,88,2.708,100,3.142,101,3.276,105,0.846,106,3.574,107,3.574,109,3.504,111,2.62,117,1.455,119,0.499,124,0.119,125,1.233,131,2.332,135,2.455,141,1.963,147,3.768,171,0.528,175,3.024,176,3.769,177,3.938,178,0.175,182,0.006,183,0.006,184,0.326,186,0.168,188,0.802,193,0.284,195,1.169,201,0.687,248,0.168,251,1.733,253,1.864,426,0.977,450,2.606,535,2.984,584,5.383,616,3.343,885,3.933,1001,2.846,1084,3.234,1086,3.266,1087,3.266,1088,2.62,1090,2.62,1091,3.014,1092,2.238,1093,3.631,1095,3.504,1096,3.134,1097,3.134,1098,3.67,1099,2.238,1100,1.934,1102,2.802,1103,1.812,1104,2.238,1602,4.583,1603,4.07,1604,5.735,1605,3.769,1606,3.987,1607,3.987,1608,3.577,1609,3.769,1610,4.709,1611,5.7,1612,4.07,1613,4.07,1614,4.07,1615,5.316,1616,3.035,1617,3.035,1618,2.437,1619,4.07,1620,5.697,1621,2.846,1622,4.07,1623,3.266,1624,4.07,1625,5.026,1626,5.984,1627,5.026,1628,5.026,1629,4.07,1630,5.026,1631,5.026,1632,4.07,1633,3.266,1634,4.07,1635,5.026,1636,4.251,1637,2.846,1638,3.035,1639,4.601,1640,2.846,1641,2.846,1642,3.035,1643,2.846,1644,2.152,1645,3.035,1646,2.332,1647,3.035,1648,2.073,1649,2.332,1650,2.332,1651,2.238,1652,2.332,1653,2.238,1654,2.332,1655,2.332,1656,2.332,1657,2.846,1658,3.035,1659,2.689,1660,2.846,1661,2.437,1662,2.437,1663,2.238,1664,6.578,1665,4.07,1666,5.7,1667,4.07,1668,4.07,1669,4.07,1670,2.689,1671,3.589,1672,3.589,1673,3.589,1674,4.07,1675,4.07,1676,4.346,1677,3.589,1678,3.589,1679,2.689,1680,2.689,1681,2.689,1682,4.07]],["title/classes/ODataCallableParser.html",[184,0.349,1615,3.258]],["body/classes/ODataCallableParser.html",[3,0.067,4,0.067,5,0.067,6,0.101,9,3.004,10,0.049,11,0.51,12,0.194,19,1.761,23,1.481,24,0.104,25,0.01,30,0.507,31,0.43,36,0.08,49,1.13,51,2.244,60,0.532,79,0.163,87,0.873,93,3.761,100,3.605,101,3.082,105,0.626,106,3.082,107,3.327,109,3.559,111,1.939,112,1.466,113,3.827,117,1.077,119,0.989,124,0.118,139,3.185,140,1.739,147,3.827,159,3.09,160,1.379,171,1.066,173,3.327,178,0.173,182,0.006,183,0.006,184,0.467,186,0.175,188,0.823,193,0.277,195,1.02,201,0.712,214,1.566,248,0.175,253,1.911,402,2.067,426,0.992,442,2.149,492,1.416,535,2.447,584,4.783,816,3.559,888,2.004,909,2.95,1020,3.668,1037,1.666,1088,2.686,1090,1.939,1111,2.004,1115,3.213,1272,2.417,1290,3.499,1378,2.149,1605,4.147,1608,3.668,1615,4.359,1621,2.95,1623,3.348,1633,2.417,1644,3.09,1670,5.431,1676,5.023,1679,2.787,1680,2.787,1681,2.787,1683,3.72,1684,5.844,1685,4.219,1686,4.219,1687,4.219,1688,5.391,1689,4.219,1690,4.219,1691,4.219,1692,4.219,1693,4.219,1694,4.219,1695,5.154,1696,4.219,1697,4.219,1698,5.154,1699,4.219,1700,6.383,1701,4.014,1702,5.001,1703,3.146,1704,3.72,1705,3.146,1706,3.72,1707,3.146,1708,3.72,1709,5.688,1710,5.023,1711,5.328,1712,4.359,1713,4.359,1714,3.72,1715,3.72,1716,3.146,1717,3.146,1718,3.146,1719,3.146,1720,3.146,1721,4.359,1722,3.146,1723,3.146,1724,3.146,1725,2.648,1726,2.648,1727,5.154,1728,3.72,1729,5.913,1730,3.72,1731,3.72,1732,2.787,1733,2.787,1734,2.648,1735,6.383,1736,7.111,1737,5.154,1738,5.154,1739,3.72,1740,3.72,1741,3.72,1742,3.72,1743,3.72,1744,3.72]],["title/classes/ODataEntitiesAnnotations.html",[184,0.349,1184,2.886]],["body/classes/ODataEntitiesAnnotations.html",[3,0.072,4,0.072,5,0.072,6,0.1,8,0.697,10,0.053,11,0.609,12,0.176,16,1.965,23,1.725,24,0.101,25,0.01,28,2.093,29,3.436,31,0.348,32,3.689,33,3.436,36,0.102,48,1.238,49,2.092,54,3.226,55,1.701,61,3.207,62,0.963,71,3.106,72,3.106,73,3.315,79,0.16,87,0.914,105,1.109,119,0.987,124,0.12,141,1.569,171,0.905,178,0.152,182,0.006,183,0.006,184,0.598,186,0.188,188,0.867,193,0.28,195,0.97,201,0.768,213,2.205,241,1.963,248,0.188,249,1.691,415,2.716,450,2.323,538,2.756,850,2.178,936,3.865,1100,2.164,1103,3.583,1109,4.379,1130,5.997,1131,3.397,1132,4.692,1134,2.726,1135,4.069,1138,4.593,1141,5.824,1147,3.397,1148,3.397,1149,3.397,1150,3.397,1151,2.32,1152,4.611,1153,5.204,1154,4.88,1155,3.397,1156,4.611,1157,3.397,1158,3.397,1159,3.397,1160,3.397,1161,3.397,1162,3.397,1163,3.397,1164,5.575,1165,4.593,1166,3.397,1167,3.397,1168,3.397,1169,3.397,1170,3.397,1171,3.397,1172,3.397,1173,3.397,1174,3.397,1175,5.204,1176,3.397,1177,3.397,1178,3.397,1179,5.575,1180,6.003,1181,4.593,1182,5.204,1183,4.593,1184,5.16,1185,3.397,1186,3.397,1187,5.204,1188,3.397,1189,5.204,1190,3.397,1191,5.204,1192,3.397,1193,4.593,1194,3.397,1195,3.397,1196,3.397,1745,4.554,1746,3.661,1747,4.554,1748,4.554,1749,4.554,1750,3.661,1751,4.016,1752,4.554,1753,4.554,1754,4.554,1755,4.554,1756,4.554,1757,4.554,1758,4.554,1759,4.554,1760,4.554,1761,4.554,1762,4.554,1763,4.554,1764,4.554,1765,4.016,1766,4.554]],["title/classes/ODataEntityAnnotations.html",[184,0.349,1156,2.886]],["body/classes/ODataEntityAnnotations.html",[3,0.07,4,0.07,5,0.07,6,0.102,8,0.688,10,0.051,11,0.673,12,0.187,16,2.96,23,1.76,24,0.102,25,0.01,28,3.152,29,3.388,31,0.34,32,3.626,33,3.388,36,0.101,48,1.216,49,2.185,54,3.181,55,1.644,57,1.735,61,2.024,62,0.941,71,1.96,72,1.96,73,2.092,79,0.161,87,0.912,105,1.094,119,0.978,124,0.121,141,1.517,171,0.89,178,0.157,182,0.006,183,0.006,184,0.59,186,0.182,188,0.847,193,0.285,195,1.001,201,0.743,213,2.185,241,1.929,248,0.182,249,1.652,415,2.678,450,2.291,538,2.709,850,2.129,936,3.778,1100,2.092,1103,3.547,1109,4.304,1130,5.959,1131,3.284,1132,4.626,1134,2.636,1135,3.977,1138,4.489,1141,5.756,1147,3.284,1148,3.284,1149,3.284,1150,3.284,1151,2.243,1152,4.531,1153,5.115,1154,4.796,1155,3.284,1156,5.1,1157,3.284,1158,3.284,1159,3.284,1160,5.115,1161,3.284,1162,5.115,1163,3.284,1164,5.498,1165,4.489,1166,5.115,1167,3.284,1168,5.115,1169,3.284,1170,5.115,1171,3.284,1172,5.115,1173,3.284,1174,5.115,1175,5.115,1176,3.284,1177,4.489,1178,3.284,1179,5.498,1180,5.943,1181,4.489,1182,5.115,1183,4.489,1184,4.531,1185,3.284,1186,3.284,1187,3.284,1188,3.284,1189,3.284,1190,3.284,1191,5.115,1192,3.284,1193,4.489,1194,3.284,1195,3.284,1196,3.284,1746,3.54,1750,3.54,1751,3.883,1765,3.883,1767,4.403,1768,4.403,1769,4.403,1770,4.403,1771,4.403,1772,4.403,1773,4.403,1774,4.403,1775,4.403,1776,4.403,1777,4.403,1778,4.403,1779,4.403,1780,4.403,1781,4.403,1782,4.403,1783,4.403,1784,4.403,1785,4.403,1786,4.403,1787,4.403,1788,4.403,1789,4.403,1790,4.403,1791,4.403,1792,4.403]],["title/classes/ODataEntityContainer.html",[184,0.349,1793,3.512]],["body/classes/ODataEntityContainer.html",[3,0.082,4,0.082,5,0.082,6,0.085,8,0.622,10,0.059,11,0.582,12,0.194,23,1.472,24,0.107,25,0.01,30,0.583,31,0.443,36,0.07,45,2.438,60,0.934,62,1.042,79,0.161,87,0.511,88,3.166,105,0.989,117,1.31,119,0.629,124,0.12,125,1.555,135,2.699,141,2.296,149,4.49,150,4.07,171,0.666,178,0.176,182,0.007,183,0.007,184,0.41,186,0.212,188,0.938,193,0.282,195,1.152,201,0.866,248,0.212,251,1.906,426,0.703,450,2.722,535,3.281,560,2.438,561,4.524,573,5.877,575,3.072,616,3.549,885,4.162,1001,3.588,1084,3.639,1086,3.819,1087,3.819,1088,3.064,1090,3.064,1091,3.524,1092,2.821,1093,3.992,1095,3.853,1096,3.664,1097,3.664,1098,3.602,1099,2.821,1100,2.438,1102,3.277,1103,2.284,1104,2.821,1111,2.438,1604,5.921,1606,4.661,1607,4.661,1608,4.183,1609,4.241,1610,5.098,1616,3.827,1617,3.827,1618,3.072,1620,4.891,1626,5.822,1637,3.588,1638,3.827,1639,5.177,1640,3.588,1641,3.588,1642,3.827,1643,3.588,1644,2.713,1645,3.827,1646,2.94,1647,3.827,1648,2.614,1649,2.94,1650,2.94,1651,2.821,1652,2.94,1653,2.821,1654,2.94,1655,2.94,1656,2.94,1657,3.588,1658,3.827,1659,3.39,1660,3.588,1661,3.072,1662,3.072,1663,2.821,1793,5.358,1794,6.528,1795,5.521,1796,5.131,1797,5.131,1798,5.131]],["title/classes/ODataEntityService.html",[184,0.349,1799,3.258]],["body/classes/ODataEntityService.html",[3,0.091,4,0.091,5,0.091,6,0.094,8,0.666,9,2.8,10,0.066,12,0.189,19,1.737,24,0.104,25,0.01,31,0.44,34,3.467,36,0.078,48,1.519,60,0.722,87,0.569,117,1.823,119,0.876,124,0.115,158,1.204,168,2.394,173,3.936,178,0.18,182,0.007,183,0.007,184,0.457,186,0.237,188,1.005,193,0.272,195,1.089,241,2.295,249,2.351,426,1.118,446,2.717,450,2.42,535,2.99,538,3.431,560,3.393,850,2.526,885,3.393,1273,5.988,1275,5.326,1276,5.326,1277,5.326,1284,4.265,1285,4.439,1286,5.326,1287,5.657,1288,5.988,1290,4.276,1295,4.265,1296,5.326,1302,4.265,1303,5.326,1312,3.144,1359,5.808,1799,5.326,1800,5.719,1801,5.326,1802,7.788,1803,5.719,1804,6.558,1805,5.719,1806,6.298,1807,5.389,1808,5.719,1809,4.598,1810,4.598,1811,4.598,1812,5.719,1813,5.719,1814,4.598,1815,4.598,1816,5.719,1817,4.598,1818,5.719]],["title/classes/ODataEntitySet.html",[184,0.349,1795,3.258]],["body/classes/ODataEntitySet.html",[3,0.081,4,0.081,5,0.081,6,0.09,8,0.621,10,0.059,11,0.58,12,0.194,19,1.244,23,1.633,24,0.107,25,0.01,30,0.582,31,0.418,36,0.07,45,2.43,60,0.933,62,1.04,79,0.162,87,0.509,88,3.16,105,0.987,117,1.305,119,0.627,124,0.12,125,1.55,135,2.696,141,2.291,151,4.484,171,0.664,178,0.176,179,4.063,180,3.765,182,0.007,183,0.007,184,0.409,186,0.212,188,0.936,193,0.283,195,1.151,201,0.863,248,0.212,251,1.904,426,0.701,450,2.721,535,3.277,576,4.112,580,4.51,583,5.865,616,3.546,885,4.123,1001,3.577,1084,3.634,1086,3.81,1087,3.81,1088,3.057,1090,2.351,1091,3.516,1092,2.812,1093,3.987,1095,3.848,1096,3.656,1097,3.656,1098,3.598,1099,2.812,1100,2.43,1102,3.27,1103,2.277,1104,2.812,1604,5.919,1606,4.651,1607,4.651,1608,4.174,1609,4.235,1610,5.092,1616,3.814,1617,3.814,1618,3.062,1620,4.884,1626,5.817,1637,3.577,1638,3.814,1639,5.169,1640,3.577,1641,3.577,1642,3.814,1643,3.577,1644,2.704,1645,3.814,1646,2.93,1647,3.814,1648,2.605,1649,2.93,1650,2.93,1651,2.812,1652,2.93,1653,2.812,1654,2.93,1655,2.93,1656,2.93,1657,3.577,1658,3.814,1659,3.379,1660,3.577,1661,3.062,1662,3.062,1663,2.812,1794,6.902,1795,4.96,1819,5.114,1820,5.114,1821,5.114,1822,5.114]],["title/classes/ODataEntitySetService.html",[184,0.349,1823,3.512]],["body/classes/ODataEntitySetService.html",[3,0.049,4,0.049,5,0.049,6,0.095,8,0.432,9,3.002,10,0.035,12,0.19,16,3.759,19,1.126,24,0.099,25,0.01,30,0.214,31,0.413,34,3.79,35,1.454,36,0.042,48,1.606,60,0.584,61,1.407,78,3.136,79,0.127,87,0.852,103,3.741,112,1.016,117,1.796,119,0.897,120,1.407,124,0.115,125,1.404,129,1.619,144,3.788,158,1.894,170,4.5,171,0.868,173,3.235,178,0.176,180,3.585,181,1.454,182,0.005,183,0.005,184,0.245,186,0.127,188,0.652,193,0.27,195,1.098,241,1.752,249,1.932,426,1.094,446,1.454,450,2.079,560,4.385,575,5.195,576,2.461,850,1.638,885,3.179,936,4.929,1098,3.668,1115,2.546,1151,4.121,1273,3.907,1275,3.454,1276,3.454,1277,3.454,1284,2.283,1285,4.277,1286,3.454,1287,4.65,1288,4.922,1290,2.773,1295,2.283,1296,3.454,1302,2.283,1303,3.454,1309,2.283,1310,2.141,1312,1.683,1334,4.084,1337,2.141,1362,6.164,1367,3.201,1371,3.06,1473,3.06,1539,5.658,1542,2.461,1648,4.001,1799,4.99,1801,5.858,1804,5.008,1806,4.084,1807,5.656,1809,2.461,1810,2.461,1811,2.461,1814,3.724,1815,2.461,1817,2.461,1823,3.724,1824,8.265,1825,4.927,1826,4.084,1827,5.587,1828,5.587,1829,5.587,1830,4.65,1831,7.038,1832,4.724,1833,5.587,1834,5.493,1835,3.062,1836,4.084,1837,5.008,1838,3.062,1839,3.062,1840,3.062,1841,7.352,1842,3.062,1843,6.416,1844,3.062,1845,3.062,1846,3.062,1847,4.927,1848,3.062,1849,5.587,1850,4.632,1851,3.062,1852,3.062,1853,3.062,1854,3.062,1855,3.062,1856,3.062,1857,3.062,1858,3.062,1859,3.062,1860,3.062,1861,3.062,1862,3.062,1863,3.062,1864,3.062,1865,3.062,1866,3.062,1867,4.632,1868,3.062,1869,3.062,1870,3.062,1871,2.7,1872,3.062,1873,3.062,1874,3.062,1875,2.7,1876,3.062,1877,4.084,1878,3.062,1879,3.062,1880,3.062,1881,5.587,1882,5.587,1883,3.062,1884,4.357,1885,2.7,1886,3.062,1887,2.7,1888,3.062,1889,3.062,1890,3.062,1891,3.062,1892,2.7,1893,3.062,1894,3.062,1895,3.062,1896,4.632,1897,3.062,1898,3.454,1899,3.062,1900,3.062,1901,3.062,1902,3.062,1903,3.062,1904,3.062,1905,3.062,1906,3.062,1907,3.062,1908,3.062,1909,3.062,1910,3.062]],["title/classes/ODataEntityTypeKey.html",[184,0.349,1911,3.512]],["body/classes/ODataEntityTypeKey.html",[3,0.04,4,0.04,5,0.04,6,0.064,8,0.368,9,2.871,10,0.029,11,0.428,12,0.111,23,0.872,24,0.097,25,0.01,28,1.145,30,0.539,31,0.383,36,0.083,49,1.495,51,1.516,57,1.609,60,1.09,64,1.043,65,1.704,78,0.881,79,0.16,86,0.789,87,0.878,93,3.224,97,3.068,98,1.919,99,2.696,100,3.315,101,1.815,105,1.16,106,1.815,107,1.815,111,1.815,112,1.506,113,2.593,119,1.088,120,2.565,124,0.115,125,0.755,127,2.088,135,1.689,139,1.937,140,1.562,145,2.171,155,3.689,157,0.836,158,0.524,159,1.317,160,0.815,161,3.48,162,0.836,163,0.836,164,1.428,165,2.565,166,1.428,168,1.043,169,1.37,171,0.982,172,1.225,173,2.975,174,3.885,178,0.051,181,2.651,182,0.004,183,0.004,184,0.446,186,0.103,193,0.156,195,0.323,200,0.858,201,0.666,202,0.718,212,0.718,214,1.058,241,1.821,242,2.142,244,1.994,248,0.252,251,0.96,252,1.939,253,1.989,402,1.735,442,1.269,447,1.269,448,1.317,483,4.21,535,2.336,536,1.225,616,1.653,756,3.175,805,1.646,809,1.646,816,3.181,885,3.841,888,1.184,909,1.743,1004,3.454,1020,2.478,1022,2.003,1037,2.556,1084,2.411,1090,2.254,1093,1.269,1095,1.225,1098,1.815,1102,1.941,1103,2.484,1111,1.876,1115,3.728,1151,3.856,1232,2.696,1272,1.428,1356,1.646,1364,1.858,1371,1.646,1378,2.499,1576,1.646,1605,2.262,1609,1.428,1623,2.81,1633,2.81,1644,1.317,1646,1.428,1648,3.297,1649,1.428,1650,1.428,1651,2.696,1652,1.428,1653,1.37,1654,1.428,1655,1.428,1656,1.428,1663,1.37,1670,5.164,1676,4.019,1679,1.646,1680,1.646,1681,1.646,1701,3.341,1702,6.216,1703,5.245,1705,3.658,1707,3.658,1709,5.432,1710,4.276,1711,4.647,1712,3.658,1713,2.945,1716,1.858,1717,2.945,1718,1.858,1719,1.858,1720,2.945,1721,2.945,1722,1.858,1723,2.945,1724,1.858,1725,1.564,1726,1.564,1732,2.609,1733,1.646,1734,1.564,1830,3.241,1832,2.478,1843,1.858,1884,1.743,1911,3.943,1912,4.486,1913,3.175,1914,2.197,1915,4.921,1916,2.197,1917,1.646,1918,1.858,1919,3.175,1920,2.945,1921,3.175,1922,5.706,1923,3.175,1924,4.486,1925,3.175,1926,2.197,1927,3.482,1928,3.175,1929,2.197,1930,2.197,1931,4.325,1932,1.858,1933,2.197,1934,2.197,1935,2.197,1936,2.197,1937,2.197,1938,5.364,1939,2.197,1940,5.364,1941,2.197,1942,3.482,1943,2.197,1944,3.482,1945,2.197,1946,2.197,1947,2.197,1948,2.197,1949,2.197,1950,2.945,1951,6.202,1952,2.197,1953,2.197,1954,2.197,1955,2.197,1956,2.197,1957,2.197,1958,2.197,1959,3.482,1960,3.482,1961,3.482,1962,3.482,1963,3.175,1964,2.197,1965,3.482,1966,4.647,1967,2.197,1968,2.197,1969,3.482,1970,2.197,1971,2.197,1972,2.197,1973,3.482,1974,2.197,1975,3.482,1976,3.482,1977,3.482,1978,3.482,1979,3.482,1980,3.482,1981,2.197,1982,5.706,1983,4.325,1984,2.197,1985,4.89,1986,4.89,1987,2.003,1988,3.943,1989,2.197,1990,2.197,1991,2.197,1992,2.197,1993,2.197,1994,2.197,1995,2.197,1996,2.197,1997,2.197,1998,2.197,1999,2.197,2000,2.197,2001,2.197,2002,2.197,2003,2.197,2004,2.197,2005,2.197,2006,2.197,2007,2.197,2008,2.197,2009,2.197,2010,2.197,2011,4.325,2012,3.482,2013,2.197,2014,2.197,2015,2.197,2016,2.197,2017,3.482,2018,2.197,2019,2.197,2020,1.858,2021,2.197,2022,2.197,2023,2.197,2024,1.743,2025,1.743,2026,2.197,2027,2.197,2028,4.921,2029,2.197,2030,2.197,2031,2.197,2032,2.197,2033,2.197,2034,2.197,2035,3.175,2036,2.197,2037,2.197,2038,2.197,2039,4.921,2040,5.386,2041,3.482,2042,3.482,2043,2.197,2044,2.197,2045,4.921,2046,2.197,2047,2.197,2048,2.197,2049,2.197,2050,2.197,2051,2.197,2052,2.197,2053,2.197,2054,2.197,2055,2.197,2056,2.197,2057,2.197,2058,2.003,2059,2.197,2060,2.197,2061,2.197,2062,2.197,2063,2.197,2064,2.197,2065,2.197,2066,2.197,2067,2.197,2068,2.197,2069,3.482,2070,3.482,2071,2.197,2072,2.197,2073,2.003,2074,2.197,2075,2.197,2076,2.197,2077,2.197,2078,2.197,2079,2.197,2080,3.482,2081,5.364,2082,2.197,2083,2.197,2084,3.482,2085,2.197,2086,3.482,2087,2.197,2088,3.482,2089,2.197,2090,3.482,2091,2.197,2092,3.482,2093,2.197,2094,2.197,2095,2.197,2096,2.197,2097,2.197,2098,4.325,2099,2.197,2100,2.197]],["title/classes/ODataEnumType.html",[184,0.349,2101,3.512]],["body/classes/ODataEnumType.html",[3,0.058,4,0.058,5,0.058,6,0.098,8,0.492,9,2.96,10,0.042,11,0.46,12,0.194,23,1.499,24,0.107,25,0.01,30,0.525,31,0.384,36,0.05,45,1.733,51,3.22,60,1.159,62,1.125,78,2.898,79,0.157,86,1.027,87,0.803,88,2.505,98,2.153,100,2.593,101,3.118,105,1.007,106,3.448,107,3.448,111,2.424,117,1.581,119,0.448,124,0.123,125,1.106,131,2.09,135,2.337,141,1.817,143,3.587,154,3.155,155,4.402,171,0.803,178,0.177,182,0.005,183,0.005,184,0.292,186,0.151,188,0.742,193,0.282,195,1.173,201,0.616,248,0.151,251,1.65,426,0.93,445,4.187,450,2.546,535,2.841,536,1.794,616,3.238,629,2.933,724,4.65,885,3.833,1001,2.552,1084,3.045,1086,3.021,1087,3.021,1088,2.424,1090,2.424,1091,2.788,1092,2.006,1093,3.456,1095,4.028,1096,2.899,1097,2.899,1098,3.814,1099,2.006,1100,1.733,1102,2.593,1103,1.624,1104,2.006,1111,2.505,1604,5.636,1605,3.887,1606,3.688,1607,3.688,1608,3.31,1609,3.548,1610,4.517,1616,2.721,1617,2.721,1618,2.184,1620,4.092,1623,3.021,1625,4.65,1626,6.105,1627,4.65,1628,4.65,1630,4.65,1631,4.65,1633,3.021,1635,4.65,1636,3.933,1637,2.552,1638,2.721,1639,4.331,1640,2.552,1641,2.552,1642,2.721,1643,2.552,1644,1.929,1645,2.721,1646,2.09,1647,2.721,1648,1.859,1649,2.09,1650,2.09,1651,2.006,1652,2.09,1653,2.006,1654,2.09,1655,2.09,1656,2.09,1657,2.552,1658,2.721,1659,2.411,1660,2.552,1661,2.184,1662,2.184,1663,2.006,1670,2.411,1671,3.218,1672,3.218,1677,3.218,1678,3.218,1679,2.411,1680,2.411,1681,2.411,1701,4.062,1913,2.933,2040,2.552,2101,4.24,2102,8.463,2103,5.274,2104,5.274,2105,5.274,2106,5.274,2107,3.649,2108,3.649,2109,3.218,2110,3.649,2111,3.649,2112,5.367,2113,5.274,2114,5.274,2115,5.274,2116,3.649,2117,6.785,2118,5.274,2119,3.649,2120,6.785,2121,5.274,2122,5.274,2123,3.649,2124,2.933,2125,2.933,2126,3.649,2127,5.274,2128,3.649,2129,3.649,2130,3.649,2131,3.649]],["title/classes/ODataEnumTypeFieldParser.html",[184,0.349,2112,3.258]],["body/classes/ODataEnumTypeFieldParser.html",[3,0.07,4,0.07,5,0.07,6,0.089,8,0.64,9,2.871,10,0.051,11,0.525,12,0.166,24,0.097,25,0.01,30,0.421,31,0.436,36,0.082,51,1.689,57,1.735,60,1.063,62,0.94,78,1.556,79,0.166,86,1.077,87,0.863,93,3.281,98,1.708,100,2.519,101,2.022,105,1.145,106,2.022,107,2.022,111,2.022,112,1.449,117,1.123,119,1,124,0.12,135,2.809,139,2.708,140,1.478,141,2.072,142,2.419,143,3.181,152,4.051,153,2.521,154,3.065,155,2.241,156,4.051,161,2.765,171,0.956,178,0.157,182,0.006,183,0.006,184,0.481,186,0.182,188,0.847,193,0.259,195,1.001,201,0.742,202,1.269,214,1.179,248,0.182,251,1.07,252,1.402,253,2.41,402,2.128,426,0.603,442,3.065,450,2.13,483,3.602,492,2.019,536,2.163,616,3.477,816,2.958,885,2.09,1004,2.241,1037,1.738,1084,4.009,1086,3.447,1087,3.447,1088,2.022,1091,3.181,1092,2.419,1093,4.058,1095,3.623,1096,3.307,1097,3.307,1098,2.765,1099,2.419,1100,2.09,1102,2.958,1103,1.959,1104,2.419,1151,3.065,1232,2.419,1272,2.521,1356,2.907,1378,2.241,1605,2.521,1609,3.928,1618,2.634,1623,2.521,1633,2.521,1636,3.282,1644,2.326,1646,3.447,1648,3.065,1649,2.521,1650,2.521,1651,3.307,1652,2.521,1653,2.419,1654,2.521,1655,2.521,1656,2.521,1661,2.634,1662,2.634,1663,2.419,1701,2.634,1709,4.869,1710,4.53,1711,4.869,1725,2.762,1726,2.762,1732,2.907,1733,2.907,1734,2.762,1830,2.907,1832,2.762,1917,2.907,1918,3.282,1932,3.282,1950,3.282,1966,3.975,2020,3.282,2024,4.208,2025,3.077,2040,3.077,2112,5.113,2124,5.511,2125,3.537,2132,6.805,2133,6.016,2134,4.4,2135,4.4,2136,3.282,2137,3.88,2138,6.498,2139,3.88,2140,3.88,2141,3.88,2142,3.88,2143,5.305,2144,3.88,2145,3.88,2146,3.88,2147,6.045,2148,3.88,2149,3.88,2150,3.88,2151,3.88,2152,3.88,2153,3.88,2154,3.88,2155,3.88,2156,3.88,2157,3.88,2158,3.88,2159,5.305]],["title/classes/ODataEnumTypeParser.html",[184,0.349,1701,2.615]],["body/classes/ODataEnumTypeParser.html",[3,0.06,4,0.06,5,0.06,6,0.101,8,0.591,9,2.939,10,0.044,11,0.474,12,0.196,23,1.68,24,0.104,25,0.01,30,0.484,31,0.414,36,0.074,51,1.46,57,1.566,60,1.056,62,0.849,78,1.345,79,0.166,86,1.057,87,0.841,93,3.486,98,0.947,100,2.654,101,2.913,105,1.227,106,2.913,107,2.913,111,2.497,112,1.383,117,1.386,119,1,124,0.121,125,1.152,135,2.758,139,3.092,140,1.688,141,1.871,142,2.09,143,3.656,152,2.986,153,3.631,154,3.522,155,3.229,156,4.021,161,2.497,171,0.897,178,0.17,182,0.006,183,0.006,184,0.435,186,0.157,188,0.765,193,0.28,195,1.096,201,0.642,202,1.096,214,1.455,248,0.157,251,0.925,252,1.212,253,2.261,402,1.921,426,1.002,442,2.767,450,1.969,483,3.252,492,1.276,536,1.869,587,3.353,616,3.412,816,2.671,885,1.806,1004,1.937,1037,1.502,1084,3.849,1086,3.112,1087,3.112,1088,2.497,1090,1.748,1091,2.872,1092,2.09,1093,3.875,1095,3.595,1096,2.986,1097,2.986,1098,2.913,1099,2.09,1100,1.806,1102,2.671,1103,1.693,1104,2.09,1151,2.767,1232,2.09,1272,2.178,1356,2.512,1378,1.937,1605,3.631,1608,3.409,1609,3.112,1618,2.276,1621,2.659,1623,3.112,1633,3.112,1636,2.836,1644,2.872,1646,2.178,1648,3.229,1649,3.112,1650,3.112,1651,3.484,1652,3.112,1653,2.986,1654,3.112,1655,3.112,1656,3.112,1661,2.276,1662,2.276,1663,2.09,1701,3.252,1709,4.568,1710,4.188,1711,4.568,1725,2.386,1726,2.386,1732,2.512,1733,2.512,1734,2.386,1830,2.512,1832,2.386,1913,3.057,1914,3.353,1917,2.512,1918,2.836,1932,2.836,1950,4.727,1966,3.589,2020,2.836,2024,3.799,2025,2.659,2040,2.659,2109,3.353,2112,4.727,2124,5.095,2125,3.057,2132,7.704,2136,2.836,2137,3.353,2138,6.097,2139,3.353,2140,3.353,2141,3.353,2142,4.79,2143,4.79,2144,3.353,2145,3.353,2146,3.353,2147,5.589,2148,3.353,2149,3.353,2150,3.353,2151,3.353,2152,3.353,2153,3.353,2154,3.353,2155,6.097,2156,3.353,2157,3.353,2158,3.353,2159,4.79,2160,5.432,2161,5.432,2162,3.802,2163,3.802,2164,3.802,2165,3.802,2166,3.802,2167,3.802,2168,3.802,2169,3.802,2170,3.802,2171,3.802,2172,3.802]],["title/classes/ODataInMemoryCache.html",[184,0.349,2173,3.852]],["body/classes/ODataInMemoryCache.html",[3,0.077,4,0.077,5,0.077,6,0.074,8,0.599,10,0.056,11,0.561,12,0.201,23,1.916,24,0.106,25,0.01,30,0.34,31,0.363,34,3.825,36,0.067,41,1.972,49,2.054,60,0.909,79,0.155,86,0.834,87,0.483,105,1.26,115,3.67,117,1.957,119,0.979,124,0.123,125,2.183,178,0.183,182,0.007,183,0.007,184,0.388,186,0.201,188,0.904,193,0.286,195,1.154,248,0.266,432,4.032,442,2.472,448,2.565,450,2.787,469,2.472,892,4.813,1111,2.305,1312,2.667,1324,5.156,1360,5.082,1367,5.073,1378,3.67,1416,5.525,1493,5.98,1495,4.792,1496,5.733,1497,4.792,1498,5.165,1499,5.038,1500,4.792,1501,5.165,1502,4.792,1503,4.792,1504,5.165,1505,5.165,1506,5.165,1507,5.733,1510,3.901,1512,4.76,1513,3.618,1516,3.901,1518,3.393,1520,4.493,1522,3.901,1524,3.901,1526,3.901,1528,3.618,1530,3.618,1531,3.901,1533,4.493,1535,3.618,1537,3.618,2173,5.666,2174,4.852,2175,4.852,2176,4.278,2177,4.278,2178,4.852,2179,4.852,2180,4.278,2181,4.278,2182,4.852,2183,4.278,2184,4.278,2185,4.278,2186,4.278,2187,4.278,2188,4.278,2189,4.278,2190,4.278,2191,4.278,2192,5.165,2193,3.901,2194,3.901,2195,3.901,2196,3.901]],["title/classes/ODataInStorageCache.html",[184,0.349,2197,3.512]],["body/classes/ODataInStorageCache.html",[0,1.111,3,0.071,4,0.071,5,0.071,6,0.092,8,0.567,10,0.051,11,0.53,12,0.199,18,2.119,23,1.887,24,0.106,25,0.01,30,0.312,31,0.343,34,3.76,36,0.061,41,1.813,49,1.985,50,3.406,60,0.871,79,0.161,86,0.896,87,0.444,104,2.119,105,1.236,108,2.193,112,1.347,115,3.517,117,2.042,119,1.004,124,0.124,125,2.092,171,0.579,178,0.181,182,0.006,183,0.006,184,0.357,186,0.184,188,0.855,193,0.287,195,1.152,241,1.708,248,0.251,253,1.985,432,3.811,442,2.272,448,2.358,450,2.759,469,2.272,892,4.651,1111,2.885,1132,4.333,1312,2.452,1324,5.107,1328,3.326,1360,4.987,1363,3.119,1367,4.978,1381,3.326,1416,5.408,1438,5.958,1493,5.929,1495,4.528,1496,5.594,1497,4.528,1498,4.881,1499,5.183,1500,4.528,1501,4.881,1502,4.528,1503,4.528,1504,4.881,1505,4.881,1506,4.881,1507,5.594,1510,3.586,1512,4.897,1513,3.326,1516,3.586,1518,3.119,1520,4.246,1522,3.586,1524,3.586,1526,3.586,1528,3.326,1530,3.326,1531,3.586,1533,4.246,1535,3.326,1537,3.326,1547,3.326,2176,3.933,2177,3.933,2180,5.354,2181,3.933,2183,3.933,2184,3.933,2185,3.933,2186,3.933,2187,3.933,2188,3.933,2189,3.933,2190,3.933,2191,3.933,2192,4.881,2193,3.586,2194,3.586,2195,3.586,2196,3.586,2197,4.881,2198,3.933,2199,7.448,2200,6.072,2201,4.46,2202,4.46,2203,4.46,2204,4.46,2205,4.46,2206,3.586,2207,3.933,2208,3.933,2209,3.933,2210,3.933,2211,5.354,2212,3.933,2213,3.933,2214,3.933,2215,3.933,2216,3.933,2217,3.933]],["title/modules/ODataModule.html",[2218,3.512,2219,3.258]],["body/modules/ODataModule.html",[3,0.101,4,0.101,5,0.101,6,0.088,12,0.144,24,0.074,25,0.01,31,0.503,36,0.105,48,1.133,62,0.998,87,0.76,121,4.894,122,4.962,124,0.088,171,0.828,178,0.13,182,0.008,183,0.008,184,0.511,188,0.899,193,0.203,195,0.828,201,1.077,217,2.374,1280,6.319,1283,5.134,1337,4.466,2219,6.098,2220,5.134,2221,6.386,2222,8.176,2223,6.319,2224,7.64,2225,6.386,2226,6.386,2227,8.176,2228,7.64,2229,7.209,2230,4.763,2231,6.386,2232,7.64,2233,6.386,2234,8.176,2235,6.386,2236,6.386,2237,6.386,2238,5.631,2239,7.64,2240,6.386,2241,6.386,2242,6.386,2243,6.386]],["title/classes/ODataParameterParser.html",[184,0.349,1688,3.512]],["body/classes/ODataParameterParser.html",[3,0.068,4,0.068,5,0.068,6,0.102,9,2.993,10,0.049,11,0.513,12,0.191,19,1.429,23,1.298,24,0.103,25,0.01,30,0.566,31,0.431,36,0.081,49,1.804,51,2.927,60,0.742,79,0.161,87,0.864,93,3.767,100,3.579,101,1.955,105,0.999,106,3.095,107,3.339,109,4.049,111,2.701,112,1.469,113,3.841,117,1.085,119,0.991,124,0.117,139,2.66,140,1.452,147,3.107,159,3.841,160,2.202,171,1.069,173,3.339,178,0.164,182,0.006,183,0.006,184,0.47,186,0.176,188,0.827,193,0.279,195,1.069,201,0.718,214,1.139,248,0.176,253,1.922,402,2.079,426,0.805,442,2.167,492,1.972,535,3.192,584,2.81,816,3.571,888,2.021,909,2.975,1020,3.689,1037,1.68,1088,1.955,1111,2.021,1115,3.231,1272,2.437,1290,2.546,1378,2.167,1605,4.162,1615,3.172,1621,2.975,1623,2.437,1633,3.367,1644,2.249,1670,5.442,1676,5.037,1679,2.81,1680,2.81,1681,2.81,1683,3.75,1688,5.414,1695,3.75,1698,3.75,1700,6.406,1701,4.349,1702,5.418,1703,3.172,1704,3.75,1705,3.172,1706,3.75,1707,3.172,1708,3.75,1709,5.696,1710,5.037,1711,5.34,1712,4.383,1713,4.383,1714,3.75,1715,3.75,1716,3.172,1717,5.418,1718,3.172,1719,5.418,1720,3.172,1721,4.383,1722,5.418,1723,3.172,1724,3.172,1725,2.669,1726,2.669,1727,5.183,1728,3.75,1729,5.939,1730,3.75,1731,3.75,1732,2.81,1733,2.81,1734,2.669,1735,6.406,1736,7.127,1737,5.183,1738,5.183,1739,3.75,1740,3.75,1741,3.75,1742,3.75,1743,3.75,1744,3.75,2244,5.877,2245,4.253,2246,4.253,2247,4.253,2248,4.253,2249,4.253,2250,4.253,2251,4.253,2252,4.253,2253,4.253,2254,4.253,2255,4.253,2256,4.253,2257,4.253]],["title/classes/ODataParserOptions.html",[184,0.349,1272,2.503]],["body/classes/ODataParserOptions.html",[1,4.021,3,0.08,4,0.08,5,0.08,6,0.093,9,2.703,10,0.058,11,0.572,12,0.165,13,3.467,14,2.751,15,2.867,16,2.159,17,3.726,18,3.115,19,1.595,20,2.751,21,2.867,22,2.645,24,0.084,25,0.01,26,3.014,27,2.745,28,2.3,29,3.362,30,0.611,31,0.414,33,3.704,36,0.09,37,3.954,41,2.034,44,2.751,51,1.921,54,2.83,74,2.645,76,3.961,77,4.267,78,2.319,79,0.155,80,2.751,81,2.751,82,2.645,83,3.756,84,3.756,85,2.751,86,0.649,87,0.728,88,2.377,89,2.867,90,2.549,93,3.455,103,3.587,104,2.377,110,2.46,124,0.069,125,1.516,178,0.102,182,0.007,183,0.007,184,0.524,186,0.207,193,0.247,201,0.844,214,1.959,248,0.207,251,1.217,252,1.595,850,2.319,888,2.377,986,4.89,1088,3.362,1090,2.3,1197,4.023,1198,4.412,1201,4.412,1202,3.732,1203,3.756,1205,5.782,1208,4.023,1209,3.732,1211,5.782,1212,5.782,1217,4.412,1218,3.499,1221,3.499,1222,4.412,1223,4.023,1225,5.782,1226,5.782,1227,5.88,1228,4.023,1229,6.773,1230,7.429,1231,4.412,1232,3.605,1233,4.412,1234,4.412,1235,7.29,1236,7.29,1237,7.29,1238,7.29,1239,7.29,1240,7.29,1241,7.29,1242,4.412,1243,4.412,1244,4.412,1245,4.412,1246,4.412,1247,4.412,1248,5.271,1249,5.271,1250,5.271,1251,4.412,1252,4.412,1253,4.023,1254,4.412,1255,4.023,1256,4.412,1257,4.412,1258,4.412,1259,4.023,1260,4.412,1261,4.023,1262,4.412,1263,4.412,1264,4.412,1265,4.412,1266,4.412,1267,4.412,1268,4.412,1269,4.412,1270,4.412,1271,5.271,1272,3.756,2258,6.557,2259,5.003,2260,5.003]],["title/classes/ODataPathSegments.html",[184,0.349,1358,3.055]],["body/classes/ODataPathSegments.html",[3,0.062,4,0.062,5,0.062,6,0.1,10,0.064,11,0.483,12,0.188,19,1.961,23,1.781,24,0.103,25,0.01,27,3.612,30,0.574,31,0.434,36,0.076,42,3.164,49,1.724,52,2.632,60,1.018,62,0.866,67,1.74,79,0.163,87,0.868,105,0.58,110,1.922,112,1.491,117,0.998,119,1.051,124,0.122,125,2.24,158,1.879,171,0.908,172,2.724,178,0.171,182,0.006,183,0.006,184,0.313,186,0.162,188,0.78,193,0.274,195,1.091,200,1.347,201,1.181,202,1.127,209,2.447,211,2.765,212,2.019,213,1.876,242,1.501,248,0.162,250,2.013,251,0.951,252,2.516,357,1.246,419,4.132,426,0.759,446,1.857,816,2.724,888,1.857,1004,4.021,1020,2.454,1024,3.143,1037,2.188,1095,3.164,1102,1.922,1232,3.046,1285,2.067,1358,4.501,1406,5.559,1431,3.447,1518,3.875,1551,4.454,1552,3.143,1553,3.143,1807,4.884,1917,2.583,1985,5.942,1986,5.942,1987,3.143,1988,5.174,2261,3.447,2262,6.436,2263,6.436,2264,4.886,2265,4.886,2266,6.203,2267,5.541,2268,5.541,2269,3.909,2270,3.909,2271,5.541,2272,6.484,2273,3.909,2274,3.909,2275,3.909,2276,3.909,2277,4.454,2278,3.909,2279,3.909,2280,3.909,2281,4.886,2282,3.909,2283,3.909,2284,3.909,2285,3.909,2286,3.909,2287,3.909,2288,3.909,2289,3.909,2290,6.174,2291,2.916,2292,3.447,2293,3.909,2294,3.909,2295,3.909,2296,5.541,2297,5.541,2298,6.436,2299,3.909,2300,3.909,2301,3.909,2302,3.909,2303,3.909,2304,3.909,2305,3.909,2306,5.541,2307,3.909,2308,3.909,2309,3.909,2310,3.909,2311,3.909,2312,3.909,2313,3.909,2314,3.909,2315,7.001,2316,3.909,2317,6.436,2318,3.909,2319,3.909,2320,3.909,2321,3.909,2322,3.909,2323,5.541,2324,6.436,2325,3.447,2326,3.447,2327,3.447,2328,3.447,2329,3.909,2330,3.909,2331,3.909,2332,5.541,2333,3.909,2334,3.909,2335,3.909,2336,3.909,2337,3.909,2338,3.909,2339,3.909,2340,3.909,2341,3.909,2342,3.909,2343,5.541,2344,3.909,2345,3.909,2346,3.909,2347,5.541,2348,3.909,2349,3.909,2350,3.909]],["title/classes/ODataPathSegmentsHandler.html",[184,0.349,2351,3.512]],["body/classes/ODataPathSegmentsHandler.html",[3,0.09,4,0.09,5,0.09,6,0.102,10,0.065,12,0.16,24,0.089,25,0.01,31,0.459,36,0.097,52,2.685,55,3.033,56,3.859,57,2.342,58,4.294,60,1.105,62,1.27,63,2.798,79,0.128,87,0.902,105,1.052,119,1.063,124,0.106,172,3.485,178,0.144,182,0.007,183,0.007,184,0.567,186,0.234,188,0.998,193,0.278,195,1.124,201,1.196,202,1.629,248,0.234,250,2.053,396,1.947,426,0.774,1285,2.988,1358,5.681,1406,5.118,1473,4.684,1807,5.641,2265,4.983,2266,5.287,2272,4.543,2277,5.699,2291,4.215,2351,5.699,2352,4.983,2353,5.651,2354,5.651,2355,5.651,2356,5.651,2357,5.651,2358,5.651,2359,5.651,2360,5.651,2361,4.543,2362,4.983,2363,4.983,2364,6.251,2365,4.983,2366,6.251,2367,4.983,2368,6.831,2369,4.983,2370,4.983,2371,4.983,2372,4.983,2373,6.831,2374,4.983,2375,4.983,2376,4.983,2377,4.983,2378,4.983,2379,4.983,2380,4.983,2381,4.983,2382,4.983,2383,4.983]],["title/classes/ODataPropertyAnnotations.html",[184,0.349,1152,2.886]],["body/classes/ODataPropertyAnnotations.html",[3,0.077,4,0.077,5,0.077,6,0.056,8,0.714,10,0.056,11,0.627,12,0.145,16,2.086,23,1.691,24,0.099,25,0.01,28,2.221,29,3.519,31,0.362,32,3.801,33,3.519,36,0.105,48,1.275,49,1.926,54,3.304,55,1.805,61,2.221,71,2.152,72,2.152,73,2.296,79,0.16,87,0.918,105,1.136,119,1.004,124,0.12,141,1.665,171,0.933,178,0.146,182,0.007,183,0.007,184,0.612,186,0.2,188,0.902,193,0.243,195,0.933,201,0.815,213,2.238,241,2.023,248,0.2,249,1.759,415,2.329,450,2.379,538,2.84,936,4.022,1100,2.296,1103,3.645,1109,4.512,1130,6.063,1131,3.604,1132,4.805,1134,2.893,1135,4.234,1138,4.779,1141,5.942,1147,3.604,1148,3.604,1149,3.604,1150,3.604,1151,2.462,1152,5.264,1153,5.362,1154,5.028,1155,3.604,1156,4.75,1157,3.604,1158,3.604,1159,3.604,1160,3.604,1161,3.604,1162,3.604,1163,3.604,1164,4.779,1165,4.779,1166,3.604,1167,3.604,1168,3.604,1169,3.604,1170,3.604,1171,3.604,1172,3.604,1173,3.604,1174,3.604,1175,5.362,1176,3.604,1177,3.604,1178,3.604,1179,4.779,1180,6.107,1181,4.779,1182,4.779,1183,4.779,1184,4.75,1185,3.604,1186,3.604,1187,3.604,1188,3.604,1189,3.604,1190,3.604,1191,5.362,1192,3.604,1193,4.779,1194,3.604,1195,3.604,1196,3.604,1746,3.885,1750,3.885,2384,4.833,2385,4.833]],["title/classes/ODataQueryOptionHandler.html",[184,0.349,2386,3.512]],["body/classes/ODataQueryOptionHandler.html",[3,0.054,4,0.054,5,0.054,6,0.099,9,1.646,10,0.058,12,0.185,23,1.549,24,0.099,25,0.01,26,3.026,27,3.257,30,0.418,31,0.429,36,0.069,49,2.084,60,1.073,64,2.756,65,2.841,66,2.661,67,2.93,68,2.391,69,3.48,70,2.93,71,2.93,72,2.93,73,3.127,74,1.81,78,1.78,79,0.16,86,1.03,87,0.892,105,1.041,108,2.935,109,1.683,116,3.929,117,1.79,119,1.004,120,2.744,124,0.12,140,1.512,171,0.444,178,0.166,181,2.836,182,0.005,183,0.005,184,0.403,186,0.142,188,0.709,193,0.272,195,1.103,200,1.179,201,0.849,202,0.987,204,2.356,212,1.898,248,0.208,250,1.829,396,1.179,410,2.292,413,2.292,426,0.69,439,5.639,445,3.878,446,3.332,456,4.439,458,4.032,482,4.604,483,3.013,575,3.013,774,4.905,781,4.047,788,3.754,789,5.231,790,4.402,791,3.326,792,4.402,793,4.634,795,2.553,796,2.553,797,2.553,798,2.553,799,2.553,824,3.52,833,4.8,850,1.78,855,4.439,859,4.047,862,4.047,864,4.439,1028,3.018,1037,1.988,1203,1.961,1229,4.8,1473,2.261,1570,3.52,1648,3.041,1920,2.553,1966,4.349,2058,2.752,2386,7.117,2387,3.423,2388,6.582,2389,5.033,2390,5.033,2391,5.804,2392,6.582,2393,5.033,2394,5.033,2395,3.423,2396,3.423,2397,3.423,2398,5.033,2399,3.423,2400,5.033,2401,3.423,2402,5.033,2403,3.423,2404,3.423,2405,3.423,2406,5.033,2407,6.582,2408,3.423,2409,5.033,2410,3.423,2411,5.033,2412,3.423,2413,5.033,2414,3.423,2415,5.033,2416,3.423,2417,3.423,2418,5.033,2419,3.423,2420,5.033,2421,3.423,2422,3.018,2423,3.423,2424,2.752,2425,3.018,2426,3.018,2427,4.047,2428,4.047,2429,3.423,2430,8.364,2431,3.423,2432,3.423,2433,5.97,2434,3.423,2435,3.423,2436,3.423,2437,3.423,2438,5.033,2439,5.033,2440,3.423,2441,3.423,2442,3.423,2443,3.423,2444,3.423,2445,7.94,2446,3.423,2447,3.423,2448,5.97,2449,3.423,2450,5.033,2451,3.423,2452,3.423,2453,3.423,2454,3.423,2455,3.423,2456,3.423,2457,3.423,2458,5.97,2459,5.97,2460,5.97,2461,5.97,2462,3.423,2463,5.033,2464,7.335,2465,7.014,2466,3.423,2467,3.423,2468,3.423,2469,3.423,2470,3.423,2471,3.423,2472,3.423,2473,3.018,2474,3.423,2475,3.423,2476,3.423,2477,3.423,2478,5.033,2479,3.423,2480,5.033,2481,3.423,2482,3.423,2483,3.423,2484,5.033,2485,3.423,2486,3.423,2487,3.423,2488,3.423,2489,3.423,2490,3.423,2491,3.423,2492,5.033,2493,3.423,2494,5.033,2495,3.423,2496,5.033,2497,3.423,2498,3.423,2499,3.423,2500,3.423,2501,3.423,2502,3.423,2503,3.423,2504,3.423,2505,3.423,2506,3.423,2507,5.033,2508,3.423,2509,5.033,2510,3.423,2511,5.033,2512,3.423,2513,5.033,2514,5.033,2515,3.423,2516,5.033,2517,3.423,2518,3.423]],["title/classes/ODataQueryOptions.html",[184,0.349,2428,3.512]],["body/classes/ODataQueryOptions.html",[3,0.07,4,0.07,5,0.07,6,0.101,9,2.607,10,0.051,11,0.526,12,0.184,19,1.465,23,1.516,24,0.101,25,0.01,26,4.092,27,2.523,30,0.516,31,0.461,36,0.083,60,1.094,64,2.874,65,2.962,66,2.331,67,3.284,68,2.095,69,3.628,70,3.055,71,1.963,72,1.963,73,2.095,79,0.154,86,0.782,87,0.848,110,2.168,112,1.095,116,3.438,117,1.752,119,0.842,124,0.12,125,1.336,158,1.678,171,0.782,178,0.171,182,0.006,183,0.006,184,0.353,186,0.182,188,0.848,193,0.277,195,1.106,200,1.519,201,1.017,202,1.271,203,1.92,204,1.37,206,1.405,208,2.187,209,1.92,211,2.913,212,2.227,213,1.976,248,0.182,250,2.494,252,1.92,254,2.874,357,1.405,426,0.94,441,4.215,442,3.069,482,5.401,575,2.64,774,4.214,789,4.493,790,3.781,792,3.781,793,3.981,795,4.493,796,4.493,797,4.493,798,4.493,799,4.493,800,4.844,801,4.844,803,3.545,804,3.545,805,3.981,806,4.844,807,3.545,808,3.545,809,4.873,815,3.545,816,2.168,817,3.545,821,3.545,823,3.545,826,3.545,828,3.545,830,3.545,839,5.517,840,3.289,841,4.844,842,6.208,1037,1.742,1473,2.913,1570,4.214,1576,3.981,2073,3.545,2264,5.313,2281,5.313,2290,5.313,2292,3.888,2325,3.888,2326,3.888,2327,3.888,2328,3.888,2386,3.545,2391,6.81,2424,3.545,2425,3.888,2426,3.888,2427,5.93,2428,5.517,2473,5.313,2519,3.888,2520,6.025,2521,7.376,2522,6.025,2523,6.025,2524,4.409,2525,4.409,2526,6.025,2527,6.208,2528,4.409,2529,6.025,2530,4.409,2531,4.409,2532,4.409,2533,4.409,2534,4.409,2535,4.409,2536,4.409,2537,4.409,2538,4.409,2539,4.409,2540,6.025,2541,6.025,2542,6.025,2543,4.409,2544,4.409,2545,4.409,2546,4.409,2547,4.409,2548,4.409,2549,4.409,2550,4.409,2551,4.409,2552,4.409,2553,4.409,2554,4.409,2555,4.409,2556,4.409,2557,4.409,2558,4.409,2559,4.409,2560,4.409]],["title/classes/ODataReferential.html",[184,0.349,1928,3.512]],["body/classes/ODataReferential.html",[3,0.04,4,0.04,5,0.04,6,0.064,8,0.369,9,2.871,10,0.029,11,0.428,12,0.056,23,0.873,24,0.097,25,0.01,28,1.146,30,0.539,31,0.384,36,0.083,49,1.496,51,1.517,57,1.867,60,1.09,64,1.044,65,1.705,78,0.882,79,0.16,86,0.789,87,0.878,93,3.225,97,3.069,98,1.919,99,2.698,100,3.315,101,1.816,105,1.16,106,1.816,107,1.816,111,1.816,112,1.506,113,2.595,119,1.088,120,2.566,124,0.114,125,0.756,127,2.089,135,1.69,139,1.938,140,1.463,145,2.172,155,3.69,157,0.837,158,0.525,159,1.319,160,0.815,161,3.48,162,0.837,163,0.837,164,1.429,165,2.976,166,1.429,168,1.044,169,1.371,171,0.982,172,1.226,173,2.976,174,3.886,178,0.051,181,2.652,182,0.004,183,0.004,184,0.447,186,0.103,193,0.156,195,0.324,200,0.859,201,0.667,202,0.719,212,0.719,214,1.059,241,1.821,242,2.143,244,1.995,248,0.252,251,0.961,252,1.939,253,1.99,402,1.736,442,1.27,447,1.27,448,1.319,483,4.211,535,2.338,536,1.226,616,1.654,629,3.177,756,3.177,805,1.648,809,1.648,816,3.182,885,3.842,888,1.185,909,1.744,1004,3.455,1020,2.48,1022,2.005,1037,2.557,1084,2.412,1090,2.256,1093,1.27,1095,1.226,1098,1.816,1102,1.943,1103,2.485,1111,1.877,1115,3.729,1151,3.857,1232,2.698,1272,1.429,1356,1.648,1364,1.86,1371,1.648,1378,2.5,1576,1.648,1605,2.264,1609,1.429,1623,2.811,1633,2.811,1644,1.319,1646,1.429,1648,3.298,1649,1.429,1650,1.429,1651,2.698,1652,1.429,1653,1.371,1654,1.429,1655,1.429,1656,1.429,1663,1.371,1670,5.165,1676,4.021,1679,1.648,1680,1.648,1681,1.648,1701,3.342,1702,6.217,1703,5.247,1705,3.66,1707,3.66,1709,5.433,1710,4.277,1711,4.648,1712,3.66,1713,2.947,1716,1.86,1717,2.947,1718,1.86,1719,1.86,1720,2.947,1721,2.947,1722,1.86,1723,2.947,1724,1.86,1725,1.565,1726,1.565,1732,2.611,1733,1.648,1734,1.565,1830,3.242,1832,2.48,1843,1.86,1884,1.744,1911,3.177,1912,4.488,1915,4.923,1916,2.199,1917,1.648,1918,1.86,1919,3.177,1920,2.947,1921,3.177,1922,5.708,1923,3.177,1924,4.488,1925,3.177,1926,2.199,1927,3.484,1928,3.945,1929,2.199,1930,2.199,1931,4.327,1932,1.86,1933,2.199,1934,2.199,1935,2.199,1936,2.199,1937,2.199,1938,5.366,1939,2.199,1940,5.366,1941,2.199,1942,3.484,1943,2.199,1944,3.484,1945,2.199,1946,2.199,1947,2.199,1948,2.199,1949,2.199,1950,2.947,1951,6.203,1952,2.199,1953,2.199,1954,2.199,1955,2.199,1956,2.199,1957,2.199,1958,2.199,1959,3.484,1960,3.484,1961,3.484,1962,3.484,1963,3.177,1964,2.199,1965,3.484,1966,4.648,1967,2.199,1968,2.199,1969,3.484,1970,2.199,1971,2.199,1972,2.199,1973,3.484,1974,2.199,1975,3.484,1976,3.484,1977,3.484,1978,3.484,1979,3.484,1980,3.484,1981,2.199,1982,5.708,1983,4.327,1984,2.199,1985,4.892,1986,4.892,1987,2.005,1988,3.945,1989,2.199,1990,2.199,1991,2.199,1992,2.199,1993,2.199,1994,2.199,1995,2.199,1996,2.199,1997,2.199,1998,2.199,1999,2.199,2000,2.199,2001,2.199,2002,2.199,2003,2.199,2004,2.199,2005,2.199,2006,2.199,2007,2.199,2008,2.199,2009,2.199,2010,2.199,2011,4.327,2012,3.484,2013,2.199,2014,2.199,2015,2.199,2016,2.199,2017,3.484,2018,2.199,2019,2.199,2020,1.86,2021,2.199,2022,2.199,2023,2.199,2024,1.744,2025,1.744,2026,2.199,2027,2.199,2028,4.923,2029,2.199,2030,2.199,2031,2.199,2032,2.199,2033,2.199,2034,2.199,2035,3.177,2036,2.199,2037,2.199,2038,2.199,2039,4.923,2040,5.387,2041,3.484,2042,3.484,2043,2.199,2044,2.199,2045,4.923,2046,2.199,2047,2.199,2048,2.199,2049,2.199,2050,2.199,2051,2.199,2052,2.199,2053,2.199,2054,2.199,2055,2.199,2056,2.199,2057,2.199,2058,2.005,2059,2.199,2060,2.199,2061,2.199,2062,2.199,2063,2.199,2064,2.199,2065,2.199,2066,2.199,2067,2.199,2068,2.199,2069,3.484,2070,3.484,2071,2.199,2072,2.199,2073,2.005,2074,2.199,2075,2.199,2076,2.199,2077,2.199,2078,2.199,2079,2.199,2080,3.484,2081,5.366,2082,2.199,2083,2.199,2084,3.484,2085,2.199,2086,3.484,2087,2.199,2088,3.484,2089,2.199,2090,3.484,2091,2.199,2092,3.484,2093,2.199,2094,2.199,2095,2.199,2096,2.199,2097,2.199,2098,4.327,2099,2.199,2100,2.199,2561,2.494]],["title/classes/ODataRequest.html",[184,0.349,1324,2.503]],["body/classes/ODataRequest.html",[3,0.055,4,0.055,5,0.055,6,0.103,10,0.04,11,0.442,12,0.172,13,2.676,14,3.632,16,1.489,17,3.366,18,3.343,19,1.896,20,3.297,22,3.493,23,1.118,24,0.1,25,0.01,26,3.037,27,3.182,30,0.566,31,0.416,36,0.047,41,3.372,42,2.948,43,3.889,49,2.351,53,1.896,54,1.489,57,1.905,60,0.834,61,1.585,64,1.444,65,1.489,67,1.535,70,1.535,71,1.535,72,1.535,78,1.22,79,0.157,80,1.896,82,1.824,85,1.896,87,0.853,104,3.343,108,2.948,110,1.696,112,1.337,119,0.976,120,2.327,124,0.096,129,1.824,141,1.188,144,2.948,178,0.07,181,2.405,182,0.005,183,0.005,184,0.276,186,0.143,188,0.713,193,0.284,195,0.778,201,0.582,202,0.994,241,1.859,242,1.324,248,0.143,251,0.839,432,4.146,560,3.343,850,1.79,888,1.639,893,7.337,1004,3.366,1037,3.276,1151,3.366,1202,2.572,1218,4.621,1221,2.412,1232,3.868,1255,2.773,1259,2.773,1261,2.773,1278,4.212,1285,3.889,1287,4.365,1324,2.9,1335,5.312,1337,2.412,1338,4.927,1347,2.773,1359,4.927,1370,5.826,1371,3.345,1391,6.205,1418,2.572,1422,5.288,1425,5.826,1444,3.041,2562,3.449,2563,5.997,2564,5.997,2565,5.997,2566,5.997,2567,5.997,2568,5.997,2569,5.997,2570,6.607,2571,6.607,2572,6.607,2573,6.607,2574,5.997,2575,5.997,2576,4.464,2577,5.062,2578,3.041,2579,3.449,2580,3.449,2581,3.449,2582,6.607,2583,3.449,2584,3.449,2585,6.607,2586,6.607,2587,3.449,2588,3.449,2589,3.449,2590,3.449,2591,3.449,2592,3.449,2593,3.449,2594,3.449,2595,3.449,2596,3.449,2597,3.449,2598,3.449,2599,3.449,2600,3.449,2601,3.449,2602,3.449,2603,3.449,2604,3.449,2605,3.449,2606,3.449,2607,3.449,2608,3.449,2609,3.449,2610,3.449,2611,3.449,2612,3.449,2613,3.449,2614,3.449,2615,3.449,2616,3.449,2617,3.449,2618,5.062,2619,5.997,2620,3.449,2621,3.041,2622,3.041,2623,3.041,2624,3.449,2625,3.449,2626,3.449,2627,3.449,2628,7.036,2629,3.449,2630,6.607,2631,5.062,2632,3.449,2633,5.062,2634,3.449,2635,3.449,2636,3.449,2637,3.449,2638,3.449,2639,5.062,2640,6.607,2641,3.449,2642,5.997,2643,5.062,2644,5.997,2645,3.449,2646,5.062,2647,3.449,2648,3.449,2649,7.036,2650,3.449,2651,3.449,2652,3.449,2653,3.449,2654,3.449,2655,5.062,2656,3.449,2657,3.449,2658,3.449,2659,3.449,2660,3.449,2661,3.449,2662,3.449,2663,3.449,2664,3.449,2665,3.449,2666,5.062,2667,3.449,2668,3.449,2669,3.449,2670,3.449,2671,3.449,2672,3.449,2673,3.449,2674,3.449,2675,5.062,2676,3.449,2677,3.449,2678,3.449,2679,5.062,2680,3.449,2681,3.449,2682,5.062,2683,3.449,2684,3.449,2685,3.449,2686,3.449,2687,3.449,2688,3.449,2689,3.449,2690,3.449,2691,6.607,2692,3.449,2693,7.355,2694,3.449,2695,3.449,2696,3.449,2697,3.449,2698,3.449,2699,3.449,2700,5.062,2701,5.062,2702,3.449,2703,5.062,2704,3.449,2705,3.449,2706,3.449,2707,3.449,2708,3.449,2709,3.449]],["title/classes/ODataResponse.html",[184,0.349,1360,2.615]],["body/classes/ODataResponse.html",[3,0.057,4,0.057,5,0.057,6,0.101,8,0.486,9,2.759,10,0.041,11,0.454,12,0.187,16,2.646,18,3.542,23,1.486,24,0.099,25,0.01,31,0.467,33,1.648,36,0.049,38,2.984,39,2.054,40,2.054,49,2.239,57,2.353,60,1.03,76,1.763,79,0.145,86,0.676,87,0.823,103,1.596,104,4.04,105,1.262,108,3.665,112,1.608,115,4.258,119,0.915,124,0.102,141,2.318,144,4.012,158,1.416,171,0.998,172,1.763,178,0.145,182,0.005,183,0.005,184,0.287,186,0.148,188,0.733,193,0.277,195,1.073,201,0.879,212,1.94,217,2.317,241,2.45,248,0.148,476,3.162,560,3.877,805,2.369,809,2.369,850,1.842,886,3.162,888,1.704,893,5.994,1037,1.416,1098,1.648,1109,3.849,1132,4.679,1134,3.671,1135,3.441,1152,3.441,1154,4.289,1156,3.441,1184,3.441,1202,5.019,1203,2.984,1218,5.707,1221,2.508,1232,3.371,1253,2.883,1278,4.606,1285,4.067,1309,4.573,1310,4.289,1311,4.93,1324,4.408,1328,5.561,1335,4.187,1336,6.575,1337,2.508,1338,5.019,1340,3.162,1347,2.883,1355,3.162,1359,5.019,1360,4.463,1367,3.513,1381,5.561,1416,4.052,1417,4.592,1418,2.674,1479,5.407,1598,4.187,2576,4.592,2578,3.162,2621,3.162,2622,3.162,2623,3.162,2710,3.586,2711,6.132,2712,6.132,2713,6.132,2714,6.132,2715,5.208,2716,6.132,2717,5.208,2718,3.586,2719,3.586,2720,5.41,2721,3.586,2722,3.586,2723,3.586,2724,3.586,2725,7.881,2726,3.586,2727,5.208,2728,3.586,2729,3.586,2730,3.586,2731,3.586,2732,3.586,2733,3.586,2734,3.586,2735,3.586,2736,3.586,2737,3.586,2738,3.586,2739,3.586,2740,3.586,2741,3.586,2742,5.208,2743,3.586,2744,3.586,2745,5.208,2746,5.208,2747,3.586,2748,3.586,2749,3.586,2750,3.586,2751,3.586,2752,3.586,2753,3.586,2754,3.586,2755,3.586,2756,3.586,2757,3.586,2758,6.132,2759,3.586,2760,3.586,2761,3.586,2762,3.586,2763,6.132,2764,3.586,2765,3.586,2766,3.586,2767,3.162,2768,3.586,2769,3.586,2770,3.586,2771,3.586,2772,6.132,2773,3.586,2774,3.586,2775,3.586,2776,4.187,2777,3.586,2778,3.586,2779,4.592,2780,3.586,2781,3.586,2782,6.132,2783,3.586,2784,3.586,2785,6.132,2786,3.586,2787,3.586,2788,7.147,2789,6.132,2790,7.147,2791,3.586,2792,5.208,2793,3.586,2794,6.132,2795,3.586,2796,6.575,2797,6.132,2798,6.132,2799,5.208,2800,5.208,2801,6.132,2802,3.586,2803,3.586,2804,3.586,2805,3.586,2806,3.586,2807,3.586]],["title/classes/ODataResponseOptions.html",[184,0.349,2720,3.512]],["body/classes/ODataResponseOptions.html",[3,0.08,4,0.08,5,0.08,6,0.104,9,2.547,10,0.058,11,0.575,12,0.205,24,0.103,25,0.01,29,3.58,30,0.58,31,0.415,33,3.58,36,0.069,37,3.967,41,3.166,47,3.778,48,1.303,49,1.968,50,3.031,54,3.17,60,0.832,76,3.829,77,4.038,79,0.162,81,4.281,82,3.883,86,0.856,87,0.656,94,4.208,95,4.397,96,4.837,112,0.918,117,1.988,124,0.111,171,0.655,178,0.164,182,0.007,183,0.007,184,0.404,186,0.209,188,0.928,193,0.285,195,1.048,201,0.852,213,2.086,214,1.767,248,0.209,251,1.604,485,5.905,850,2.333,887,4.058,888,2.398,986,4.918,1037,2.605,1088,3.031,1090,2.32,1203,2.892,1223,4.058,1227,5.302,1228,4.058,1248,4.058,1249,4.058,1250,4.058,1271,4.058,1364,3.765,1414,4.451,1576,3.335,1966,5.146,2035,5.905,2720,5.905,2767,4.451,2776,6.787,2779,4.451,2808,5.048,2809,6.595,2810,6.595,2811,6.595,2812,6.595,2813,6.595,2814,5.048,2815,5.048,2816,5.048,2817,5.048,2818,5.048,2819,5.048,2820,5.048,2821,5.048,2822,6.595,2823,5.048,2824,6.595,2825,5.048,2826,6.595,2827,5.048,2828,6.595,2829,5.048,2830,5.048,2831,5.048,2832,6.595,2833,6.595,2834,5.048,2835,5.048,2836,5.048,2837,5.048,2838,5.048,2839,5.048,2840,5.048,2841,5.048,2842,5.048,2843,5.048,2844,4.451,2845,5.048,2846,5.048,2847,5.048,2848,5.048,2849,5.048,2850,5.048,2851,5.048,2852,5.048,2853,5.048,2854,5.048,2855,5.048]],["title/classes/ODataSchema.html",[184,0.349,1610,2.742]],["body/classes/ODataSchema.html",[3,0.069,4,0.069,5,0.069,6,0.102,8,0.554,10,0.05,11,0.518,12,0.193,23,1.311,24,0.106,25,0.01,31,0.474,36,0.059,48,1.533,51,1.657,60,0.749,62,0.928,79,0.164,87,0.822,100,2.485,105,1.137,112,1.329,117,1.515,119,1.014,120,1.983,124,0.115,133,4.187,135,2.045,139,2.68,140,1.463,141,2.045,142,4.018,144,3.593,146,4.376,148,4.062,150,3.731,171,0.948,178,0.177,181,2.05,182,0.006,183,0.006,184,0.345,186,0.178,188,0.836,193,0.283,195,1.088,201,0.728,248,0.178,251,1.049,402,2.1,426,0.591,450,2.109,535,1.807,560,2.82,575,2.583,616,3.397,712,4.772,816,2.918,850,2.1,1084,3.893,1086,3.401,1087,3.401,1088,2.728,1090,3.522,1091,3.138,1092,2.372,1093,3.024,1095,3.593,1096,3.263,1097,3.263,1098,2.728,1099,2.372,1100,2.05,1102,2.918,1103,1.921,1104,2.372,1111,3.472,1203,2.472,1278,4.948,1338,5.906,1418,3.218,1602,5.876,1605,4.537,1610,3.726,1618,2.583,1620,2.851,1621,3.018,1661,2.583,1662,2.583,1663,2.372,1676,4.829,1726,2.708,1793,5.455,1795,4.427,1963,3.469,2101,5.876,2856,4.315,2857,5.936,2858,5.936,2859,5.936,2860,5.936,2861,5.936,2862,5.936,2863,4.315,2864,4.315,2865,4.315,2866,7.309,2867,4.315,2868,4.315,2869,4.315,2870,4.315,2871,5.936,2872,7.309,2873,4.315,2874,5.936,2875,4.315,2876,5.936,2877,4.315,2878,5.936,2879,4.315,2880,5.936,2881,4.315,2882,4.315,2883,4.315,2884,4.315,2885,4.315,2886,4.315,2887,4.315,2888,4.315,2889,4.315,2890,4.315,2891,4.315,2892,4.315,2893,4.315,2894,4.315,2895,4.315,2896,4.315,2897,4.315,2898,4.315,2899,4.315,2900,4.315,2901,4.315,2902,4.315,2903,4.315,2904,6.786,2905,4.315,2906,5.936,2907,4.315,2908,4.315,2909,5.936,2910,5.936,2911,4.315,2912,5.936,2913,4.315,2914,4.315,2915,4.315,2916,6.786,2917,4.315,2918,4.315,2919,4.315,2920,4.315,2921,4.315,2922,4.315]],["title/classes/ODataSchemaElement.html",[184,0.349,1604,2.886]],["body/classes/ODataSchemaElement.html",[3,0.071,4,0.071,5,0.071,6,0.099,8,0.567,10,0.051,11,0.53,12,0.188,23,1.637,24,0.108,25,0.01,30,0.612,31,0.419,36,0.061,45,2.885,60,0.871,62,0.949,78,2.742,79,0.164,87,0.841,88,3.8,105,0.901,117,1.138,119,0.547,124,0.119,125,1.351,134,3.21,135,2.819,139,2.398,140,1.672,141,2.378,178,0.172,182,0.006,183,0.006,184,0.357,186,0.184,188,0.855,193,0.276,195,1.17,201,0.752,202,1.286,248,0.251,251,2.054,252,2.2,253,1.458,426,0.611,442,2.272,450,2.145,535,3.488,616,3.536,850,2.148,885,4.058,1037,1.761,1084,3.932,1086,3.479,1087,3.479,1088,2.05,1090,2.791,1091,3.21,1092,2.452,1093,3.95,1095,3.811,1096,3.338,1097,3.338,1098,3.406,1099,2.452,1100,2.119,1102,2.985,1103,1.985,1104,2.452,1278,4.133,1307,3.933,1356,2.947,1378,2.272,1604,5.504,1606,4.246,1607,4.246,1608,3.811,1609,4.246,1610,5.02,1618,2.67,1620,5.285,1626,6.077,1637,4.246,1639,5.594,1640,4.246,1641,4.246,1643,4.246,1644,3.21,1646,3.479,1648,3.093,1649,3.479,1650,3.479,1651,3.338,1652,3.479,1653,3.338,1654,3.479,1655,3.479,1656,3.479,1657,3.119,1659,4.012,1660,4.246,1661,2.67,1662,2.67,1663,2.452,1673,5.354,1725,2.799,1734,2.799,1898,3.326,2024,3.119,2025,3.119,2923,4.46,2924,6.072,2925,4.46,2926,4.46,2927,4.46,2928,4.46,2929,4.46,2930,4.46,2931,4.46,2932,4.46,2933,4.46,2934,4.46,2935,6.072,2936,4.46,2937,6.072]],["title/injectables/ODataServiceFactory.html",[2223,3.258,2938,3.852]],["body/injectables/ODataServiceFactory.html",[3,0.093,4,0.093,5,0.093,6,0.095,8,0.674,10,0.067,12,0.177,24,0.103,25,0.01,31,0.464,36,0.08,55,2.934,56,4.187,78,2.905,79,0.163,87,0.719,105,1.073,124,0.123,171,0.938,178,0.172,180,4.184,182,0.007,183,0.007,184,0.628,188,1.018,193,0.25,195,0.938,248,0.241,396,2.008,426,0.991,560,4.221,575,5.055,1038,6.126,1098,3.323,1151,4.184,1278,4.917,1279,5.142,1280,6.126,1281,7.887,1283,6.316,1648,4.184,1823,6.603,2223,5.391,2230,4.349,2938,6.374,2939,5.142,2940,5.831,2941,5.831,2942,5.831,2943,5.831,2944,8.213,2945,5.831,2946,5.831,2947,8.213,2948,6.603,2949,7.229]],["title/classes/ODataSingletonService.html",[184,0.349,2948,3.512]],["body/classes/ODataSingletonService.html",[3,0.078,4,0.078,5,0.078,6,0.089,8,0.602,9,2.968,10,0.056,12,0.185,16,3.543,19,1.568,24,0.102,25,0.01,31,0.435,34,3.784,35,2.318,36,0.067,48,1.563,56,4.038,78,3.006,79,0.117,87,0.765,103,3.421,112,1.172,117,1.245,124,0.113,158,1.357,170,4.703,173,3.773,178,0.176,180,4.182,182,0.007,183,0.007,184,0.39,186,0.202,188,0.908,193,0.27,195,1.086,241,2.162,249,2.254,426,1.095,446,2.318,450,2.483,560,4.291,850,2.281,885,3.063,936,4.823,1098,3.532,1203,3.694,1273,5.052,1275,4.809,1276,4.809,1277,4.809,1284,3.638,1285,4.427,1286,4.809,1287,5.424,1288,5.742,1290,3.86,1295,3.638,1296,4.809,1302,3.638,1303,4.809,1310,3.412,1312,2.682,1362,5.387,1367,3.694,1371,5.28,1397,5.686,1799,5.96,1801,6.123,1804,6.178,1809,3.922,1810,3.922,1811,3.922,1814,3.922,1815,3.922,1817,3.922,1832,5.015,1834,4.302,1836,5.686,1841,7.239,1843,6.123,1871,4.302,1875,4.302,1885,4.302,1887,4.302,2948,5.184,2950,4.878,2951,6.448,2952,6.448,2953,7.223,2954,4.878,2955,4.878,2956,7.223,2957,4.878,2958,4.878,2959,4.878,2960,4.878,2961,4.878,2962,4.878,2963,4.878,2964,4.878,2965,6.448]],["title/classes/Operator.html",[184,0.349,349,1.829]],["body/classes/Operator.html",[0,1.46,3,0.043,4,0.043,5,0.043,6,0.078,8,0.485,10,0.031,12,0.096,19,0.663,23,0.936,24,0.094,25,0.01,30,0.627,31,0.294,36,0.119,60,1.141,62,1.05,79,0.162,86,0.674,87,0.918,98,2.011,105,1.255,112,1.066,119,0.779,124,0.112,140,1.564,158,1.526,171,1.188,178,0.086,182,0.004,183,0.004,184,0.672,185,2.176,186,0.113,187,1.176,188,0.596,192,1.176,193,0.202,195,0.674,196,1.176,198,1.176,200,0.939,201,0.46,202,0.786,203,2.235,204,1.316,205,1.176,206,2.235,207,2.499,208,2.746,209,2.746,210,2.912,211,1.076,212,2.195,213,2.04,214,1.8,215,1.176,216,0.663,217,0.847,218,1.176,219,1.828,220,1.828,221,1.176,222,1.176,223,1.539,224,1.176,225,1.176,226,1.176,227,2.245,228,2.58,229,1.176,230,1.176,231,1.176,232,1.176,233,1.176,234,1.176,235,1.176,236,1.176,237,1.176,238,1.176,239,1.176,240,3.956,241,1.192,242,1.626,243,1.176,244,1.108,245,1.176,246,1.176,247,1.176,248,0.242,249,2.09,250,2.861,251,1.03,252,0.868,253,1.385,254,2.814,255,3.027,256,1.176,257,1.176,258,1.828,259,1.176,260,2.242,261,2.242,262,1.176,263,2.176,264,1.176,265,1.176,266,1.176,267,1.176,268,1.176,269,1.176,270,1.176,271,1.176,272,1.176,273,1.176,274,1.176,275,1.176,276,1.176,277,1.828,278,1.539,279,1.176,280,1.176,281,2.176,282,1.176,283,2.529,284,1.176,285,1.828,286,1.176,287,1.176,288,2.176,289,1.176,290,1.828,291,1.176,292,1.176,293,1.176,294,1.176,295,1.176,296,1.176,297,1.176,298,2.176,299,1.176,300,1.176,301,1.176,302,1.176,303,1.176,304,1.176,305,1.176,306,1.176,307,1.176,308,1.176,309,1.176,310,1.176,311,1.176,312,1.176,313,1.176,314,1.176,315,1.176,316,1.176,317,1.176,318,1.176,319,1.176,320,1.176,321,1.176,322,1.176,323,1.176,324,1.176,325,1.176,326,1.176,327,1.176,328,1.176,329,1.176,330,2.176,331,1.176,332,1.176,333,1.176,334,1.176,335,2.176,336,1.176,337,1.828,338,1.176,339,1.176,340,1.828,341,1.176,342,1.176,343,1.176,344,1.176,345,2.176,346,1.176,347,1.176,348,1.176,349,2.814,350,2.9,351,2.739,352,3.649,353,3.838,354,1.828,355,1.176,356,1.176,357,0.868,358,1.176,359,1.176,360,2.176,361,1.176,362,1.176,363,1.176,364,1.176,365,1.176,366,1.176,367,1.176,368,1.176,369,1.176,370,1.176,371,1.176,372,1.176,373,1.176,374,1.176,375,1.176,376,1.176,377,1.176,378,1.176,379,1.176,380,1.176,381,1.176,382,1.176,383,2.176,384,1.176,385,1.176,386,1.176,387,1.176,388,1.176,389,1.176,390,1.176,391,1.176,392,1.176,393,1.176,394,1.176,395,1.673,396,0.939,397,1.828,398,1.176,399,1.176,400,1.176,401,2.176,402,1.838,403,1.176,404,1.176,405,2.176,406,1.176,407,1.176,408,1.176,409,1.176,410,2.58,411,1.176,412,1.141,413,2.58,414,1.176,415,0.99,416,2.529,417,1.176,418,0.914,463,1.294,850,1.498,1061,2.403,2966,2.725,2967,2.725,2968,2.725,2969,2.725,2970,2.725]],["title/interfaces/Options.html",[0,1.088,9,1.428]],["body/interfaces/Options.html",[0,2.01,1,3.217,2,2.235,3,0.067,4,0.067,5,0.067,6,0.049,7,2.422,8,0.676,9,2.689,10,0.049,11,0.586,12,0.163,13,2.235,14,2.324,15,2.422,16,1.824,17,3.42,18,2.78,19,1.762,20,2.324,21,2.422,22,2.235,24,0.104,25,0.01,26,2.69,27,1.77,28,1.943,29,3.33,30,0.635,31,0.331,32,3.094,33,2.69,34,2.988,35,2.008,36,0.124,37,3.875,38,2.422,39,2.422,40,2.422,41,3.343,42,2.078,43,3.094,44,3.217,45,2.008,46,2.422,47,3.353,48,0.75,49,1.132,50,1.943,51,2.247,52,2.008,53,3.217,54,3.127,55,2.185,56,2.78,57,1.936,58,3.094,59,3.353,60,1.087,61,3.33,62,0.915,63,2.016,64,2.45,65,2.526,66,3.094,67,2.605,68,2.78,69,3.094,70,2.605,71,2.605,72,2.605,73,2.78,74,3.094,75,3.353,76,3.74,77,3.983,78,2.07,79,0.167,80,3.217,81,3.217,82,3.094,83,2.422,84,2.422,85,2.324,86,1.083,87,0.582,88,2.008,89,2.422,90,2.153,91,2.653,92,2.653,93,3.503,94,2.422,95,2.531,96,2.531,97,3.983,98,1.053,99,3.69,100,2.811,101,3.086,102,4.213,103,2.605,104,2.78,105,1.075,106,3.086,107,2.69,108,2.078,109,3.3,110,2.078,111,1.943,112,0.769,113,2.235,114,2.653,115,2.153,116,2.605,117,1.079,118,2.653,119,0.519,120,1.943,121,2.531,122,2.422,123,2.531,124,0.114,125,1.773,126,2.653,127,2.235,128,2.653,129,2.235,130,2.653,131,2.422,132,2.531,133,3.353,134,4.348,135,1.456,136,2.422,137,2.422,138,2.422,139,1.67,140,1.262,141,2.779,142,2.324,143,3.094,144,2.078,145,3.217,146,2.531,147,3.094,148,2.531,149,3.353,150,2.324,151,3.353,152,3.217,153,2.422,154,2.153,155,2.981,156,2.324,157,1.418,158,0.89,159,3.831,160,1.914,161,1.943,162,1.418,163,1.418,164,2.422,165,1.943,166,2.422,167,2.653,168,1.77,169,2.324,170,2.422,171,0.871,172,2.078,173,1.943,174,2.422,175,1.943,176,2.422,177,2.531,178,0.086,179,2.324,180,2.153,181,2.008,182,0.006,183,0.006]],["title/interfaces/OptionsHelper.html",[0,1.088,93,1.945]],["body/interfaces/OptionsHelper.html",[0,2,1,3.177,2,2.195,3,0.066,4,0.066,5,0.066,6,0.048,7,2.378,8,0.705,9,2.677,10,0.048,11,0.58,12,0.185,13,2.195,14,2.282,15,2.378,16,1.792,17,3.387,18,2.746,19,1.748,20,2.282,21,2.378,22,2.195,24,0.105,25,0.01,26,2.656,27,1.738,28,1.908,29,3.597,30,0.638,31,0.327,32,3.801,33,3.474,34,2.96,35,1.972,36,0.124,37,3.387,38,2.378,39,2.378,40,2.378,41,3.328,42,2.041,43,3.056,44,3.177,45,1.972,46,2.378,47,3.311,48,0.736,49,1.112,50,1.908,51,2.219,52,1.972,53,3.177,54,3.465,55,2.158,56,2.746,57,1.917,58,3.056,59,3.311,60,1.083,61,3.304,62,0.903,63,1.991,64,2.42,65,2.494,66,3.056,67,2.573,68,2.746,69,3.056,70,2.573,71,2.573,72,2.573,73,2.746,74,3.056,75,3.311,76,2.841,77,2.282,78,2.044,79,0.167,80,4.155,81,4.155,82,3.996,83,2.378,84,2.378,85,2.282,86,1.079,87,0.575,88,1.972,89,2.378,90,2.115,91,2.605,92,2.605,93,3.574,94,2.378,95,2.485,96,2.485,97,3.952,98,1.034,99,3.655,100,2.784,101,3.056,102,4.173,103,2.573,104,2.746,105,1.067,106,3.056,107,2.656,108,2.041,109,3.268,110,2.041,111,1.908,112,0.755,113,2.195,114,2.605,115,2.115,116,2.573,117,1.059,118,2.605,119,0.509,120,1.908,121,2.485,122,2.378,123,2.485,124,0.114,125,1.751,126,2.605,127,2.195,128,2.605,129,2.195,130,2.605,131,2.378,132,2.485,133,3.311,134,4.329,135,1.43,136,2.378,137,2.378,138,2.378,139,1.64,140,1.246,141,2.765,142,2.282,143,3.056,144,2.041,145,3.177,146,2.485,147,3.056,148,2.485,149,3.311,150,2.282,151,3.311,152,3.177,153,2.378,154,2.115,155,2.944,156,2.282,157,1.393,158,0.874,159,3.801,160,1.89,161,1.908,162,1.393,163,1.393,164,2.378,165,1.908,166,2.378,167,2.605,168,1.738,169,2.282,170,2.378,171,0.863,172,2.041,173,1.908,174,2.378,175,1.908,176,2.378,177,2.485,178,0.084,179,2.282,180,2.115,181,1.972,182,0.006,183,0.006]],["title/classes/OrderByExpression.html",[184,0.349,790,2.742]],["body/classes/OrderByExpression.html",[3,0.077,4,0.077,5,0.077,6,0.098,8,0.597,10,0.056,11,0.559,12,0.185,23,1.759,24,0.103,25,0.01,30,0.448,31,0.406,36,0.088,49,1.925,60,0.609,62,0.754,70,3.198,79,0.144,87,0.875,98,1.984,105,1.215,116,3.198,117,1.232,119,0.881,124,0.112,125,1.462,168,2.02,171,0.932,178,0.174,182,0.007,183,0.007,184,0.512,186,0.2,188,0.901,193,0.281,195,1.134,203,2.29,204,2.232,206,2.703,207,2.672,208,2.609,209,2.609,210,2.746,212,2.206,213,2.133,214,1.293,217,2.667,227,1.707,248,0.265,249,1.972,278,2.61,357,1.538,396,1.662,418,1.619,426,0.661,441,4.538,443,4.23,444,4.23,445,4.327,446,3.888,447,4.32,448,2.551,450,2.543,451,3.375,453,3.028,457,3.375,458,4.378,463,2.292,466,3.375,467,3.375,468,3.599,469,2.458,471,3.188,475,2.889,478,2.765,479,2.889,481,3.188,777,4.23,790,5.691,794,3.599,810,3.599,845,2.889,846,3.028,859,3.879,1330,4.477,2971,4.255,2972,6.402,2973,6.402,2974,4.825,2975,4.825,2976,5.645,2977,4.825,2978,4.825,2979,5.645,2980,4.825,2981,4.825,2982,4.825,2983,4.825,2984,4.825,2985,5.147,2986,5.645,2987,5.645,2988,5.645,2989,6.335,2990,4.255,2991,4.255,2992,4.255,2993,4.775,2994,5.645]],["title/classes/OrderByField.html",[184,0.349,2985,3.512]],["body/classes/OrderByField.html",[3,0.085,4,0.085,5,0.085,6,0.097,8,0.501,10,0.062,12,0.155,23,1.517,24,0.095,25,0.01,30,0.481,31,0.428,36,0.094,49,1.44,70,2.392,79,0.149,87,0.889,98,2.053,105,1.019,116,3.057,119,1.011,124,0.094,168,2.25,171,0.982,178,0.14,182,0.007,183,0.007,184,0.549,186,0.222,188,0.967,193,0.262,195,0.982,203,2.412,204,2.134,206,2.765,207,2.765,208,2.686,209,2.686,210,2.828,212,2.299,213,2.208,214,1.84,217,2.352,227,1.901,248,0.284,249,1.475,357,1.713,396,1.851,418,1.803,441,3.631,445,4.001,446,3.595,447,4.062,458,4.16,463,2.553,469,2.738,471,3.551,475,3.217,478,3.079,479,3.217,481,3.551,777,3.551,790,5.541,794,4.008,810,4.008,845,3.217,846,3.373,850,2.429,851,4.739,1330,4.802,2971,4.739,2976,4.739,2979,4.739,2985,6.411,2986,7.266,2987,7.266,2988,7.266,2989,6.673,2990,4.739,2991,4.739,2992,4.739,2993,5.121,2994,6.055,2995,5.374,2996,5.374,2997,5.374,2998,5.374,2999,5.374]],["title/interfaces/Parser.html",[0,1.088,100,1.829]],["body/interfaces/Parser.html",[0,1.991,1,3.141,2,2.159,3,0.065,4,0.065,5,0.065,6,0.082,7,2.339,8,0.666,9,2.821,10,0.047,11,0.356,12,0.149,13,2.159,14,2.245,15,2.339,16,1.762,17,3.357,18,2.714,19,1.736,20,2.245,21,2.339,22,2.159,24,0.104,25,0.01,26,2.626,27,1.71,28,1.877,29,3.281,30,0.631,31,0.323,32,3.021,33,2.626,34,2.934,35,1.94,36,0.124,37,3.357,38,2.339,39,2.339,40,2.339,41,3.315,42,2.007,43,3.021,44,3.141,45,1.94,46,2.339,47,3.273,48,0.724,49,1.094,50,1.877,51,2.193,52,1.94,53,3.141,54,3.08,55,2.133,56,2.714,57,1.9,58,3.021,59,3.273,60,1.102,61,3.281,62,0.893,63,1.968,64,2.392,65,2.466,66,3.021,67,2.543,68,2.714,69,3.021,70,2.543,71,2.543,72,2.543,73,2.714,74,3.021,75,3.273,76,2.809,77,2.245,78,2.021,79,0.167,80,3.141,81,3.141,82,3.021,83,2.339,84,2.339,85,2.245,86,1.075,87,0.569,88,1.94,89,2.339,90,2.08,91,2.563,92,2.563,93,3.811,94,2.339,95,2.445,96,2.445,97,4.614,98,1.017,99,3.623,100,2.989,101,3.453,102,4.136,103,2.543,104,2.714,105,1.115,106,3.453,107,3.281,108,2.007,109,3.24,110,2.007,111,2.626,112,0.742,113,2.159,114,2.563,115,2.08,116,2.543,117,1.042,118,2.563,119,0.501,120,1.877,121,2.445,122,2.339,123,2.445,124,0.117,125,1.731,126,2.563,127,2.159,128,2.563,129,2.159,130,2.563,131,2.339,132,2.445,133,3.273,134,4.311,135,1.407,136,2.339,137,2.339,138,2.339,139,1.613,140,1.232,141,2.753,142,2.245,143,3.021,144,2.007,145,3.141,146,2.445,147,3.021,148,2.445,149,3.273,150,2.245,151,3.273,152,3.141,153,2.339,154,2.08,155,2.91,156,2.245,157,1.37,158,0.859,159,3.774,160,1.868,161,1.877,162,1.37,163,1.37,164,2.339,165,1.877,166,2.339,167,2.563,168,1.71,169,2.245,170,2.339,171,0.855,172,2.007,173,1.877,174,2.339,175,1.877,176,2.339,177,2.445,178,0.145,179,2.245,180,2.08,181,1.94,182,0.006,183,0.006,188,0.804,193,0.209,195,0.855,426,0.903,1623,2.339,1633,2.339,3000,4.083,3001,4.083,3002,4.083]],["title/interfaces/Renderable.html",[0,1.088,206,1.392]],["body/interfaces/Renderable.html",[0,1.47,2,1.459,3,0.044,4,0.044,5,0.044,6,0.074,8,0.489,10,0.032,12,0.062,19,0.671,23,0.945,24,0.092,25,0.01,30,0.624,31,0.296,36,0.12,60,1.142,62,1.056,79,0.162,86,0.68,87,0.919,98,2.017,105,1.257,112,1.073,119,0.643,124,0.111,140,1.57,158,1.533,171,1.189,178,0.056,182,0.004,183,0.004,184,0.674,185,2.193,187,1.191,188,0.602,192,1.191,193,0.187,195,0.766,196,1.191,198,1.191,200,0.951,201,0.466,202,0.796,203,2.246,204,1.329,205,1.191,206,2.246,207,2.509,208,2.75,209,2.75,210,2.916,211,2.331,212,2.203,213,2.047,214,1.711,215,1.191,216,0.671,217,0.858,218,1.191,219,1.846,220,1.846,221,1.191,222,1.191,223,1.554,224,1.191,225,1.191,226,1.191,227,2.259,228,2.596,229,1.191,230,1.191,231,1.191,232,1.191,233,1.191,234,1.191,235,1.191,236,1.191,237,1.191,238,1.191,239,1.191,240,3.952,241,1.203,242,1.642,243,1.191,244,1.122,245,1.191,246,1.191,247,1.191,248,0.217,249,2.097,250,2.717,251,1.04,252,0.88,253,1.399,254,2.828,255,3.041,256,1.191,257,1.191,258,1.846,259,1.191,260,2.261,261,2.261,262,1.191,263,2.193,264,1.191,265,1.191,266,1.191,267,1.191,268,1.191,269,1.191,270,1.191,271,1.191,272,1.191,273,1.191,274,1.191,275,1.191,276,1.191,277,1.846,278,1.554,279,1.191,280,1.191,281,2.193,282,1.191,283,2.547,284,1.191,285,1.846,286,1.191,287,1.191,288,2.193,289,1.191,290,1.846,291,1.191,292,1.191,293,1.191,294,1.191,295,1.191,296,1.191,297,1.191,298,2.193,299,1.191,300,1.191,301,1.191,302,1.191,303,1.191,304,1.191,305,1.191,306,1.191,307,1.191,308,1.191,309,1.191,310,1.191,311,1.191,312,1.191,313,1.191,314,1.191,315,1.191,316,1.191,317,1.191,318,1.191,319,1.191,320,1.191,321,1.191,322,1.191,323,1.191,324,1.191,325,1.191,326,1.191,327,1.191,328,1.191,329,1.191,330,2.193,331,1.191,332,1.191,333,1.191,334,1.191,335,2.193,336,1.191,337,1.846,338,1.191,339,1.191,340,1.846,341,1.191,342,1.191,343,1.191,344,1.191,345,2.193,346,1.191,347,1.191,348,1.191,349,2.471,350,2.547,351,2.756,352,3.656,353,3.842,354,1.846,355,1.191,356,1.191,357,0.88,358,1.191,359,1.191,360,2.193,361,1.191,362,1.191,363,1.191,364,1.191,365,1.191,366,1.191,367,1.191,368,1.191,369,1.191,370,1.191,371,1.191,372,1.191,373,1.191,374,1.191,375,1.191,376,1.191,377,1.191,378,1.191,379,1.191,380,1.191,381,1.191,382,1.191,383,2.193,384,1.191,385,1.191,386,1.191,387,1.191,388,1.191,389,1.191,390,1.191,391,1.191,392,1.191,393,1.191,394,1.191,395,1.69,396,0.951,397,1.846,398,1.191,399,1.191,400,1.191,401,2.193,402,1.853,403,1.191,404,1.191,405,2.193,406,1.191,407,1.191,408,1.191,409,1.191,410,2.594,411,1.191,412,1.155,413,2.594,414,1.191,415,1.003,416,2.547,417,1.191,418,0.926,463,1.311,3003,2.76,3004,2.76,3005,2.76,3006,2.76]],["title/interfaces/ResponseJson.html",[0,1.088,2206,3.512]],["body/interfaces/ResponseJson.html",[0,1.462,2,3.103,3,0.093,4,0.093,5,0.093,6,0.068,8,0.548,10,0.068,11,0.633,18,3.911,23,1.603,24,0.101,25,0.01,31,0.41,36,0.08,41,2.386,50,2.698,79,0.163,86,1.068,87,0.584,104,3.911,108,4.047,112,1.497,119,0.967,124,0.116,171,0.761,182,0.007,183,0.007,184,0.469,241,2.424,248,0.243,253,2.373,469,2.99,892,4.555,1111,2.788,1132,4.945,1312,3.227,1324,4.514,1328,6.14,1360,4.717,1363,4.105,1367,4.158,1381,6.14,1438,4.719,1493,4.796,1496,5.757,1499,4.105,1507,5.757,1512,3.878,1520,4.105,1533,4.105,1547,4.377,2192,5.835,2193,4.719,2194,4.719,2195,4.719,2196,4.719,2197,4.719,2198,5.176,2199,7.599,2206,5.835,2207,5.176,2208,5.176,2209,5.176,2210,5.176,2211,6.4,2212,5.176,2213,5.176,2214,5.176,2215,5.176,2216,5.176,2217,5.176]],["title/interfaces/ResponseOptions.html",[0,1.088,94,2.503]],["body/interfaces/ResponseOptions.html",[0,2.009,1,3.214,2,2.232,3,0.067,4,0.067,5,0.067,6,0.049,7,2.419,8,0.709,9,2.637,10,0.049,11,0.585,12,0.163,13,2.232,14,2.321,15,2.419,16,1.822,17,3.417,18,2.778,19,1.761,20,2.321,21,2.419,22,2.232,24,0.104,25,0.01,26,2.688,27,1.768,28,1.94,29,3.328,30,0.633,31,0.331,32,3.091,33,2.688,34,2.986,35,2.006,36,0.124,37,3.417,38,2.419,39,2.419,40,2.419,41,3.342,42,2.075,43,3.091,44,3.214,45,2.006,46,2.419,47,4.149,48,0.749,49,1.131,50,1.94,51,2.245,52,2.006,53,3.214,54,3.125,55,2.183,56,2.778,57,1.934,58,3.091,59,3.35,60,1.086,61,3.328,62,0.914,63,2.014,64,2.448,65,2.523,66,3.091,67,2.603,68,2.778,69,3.091,70,2.603,71,2.603,72,2.603,73,2.778,74,3.091,75,3.35,76,2.874,77,2.321,78,2.068,79,0.167,80,3.214,81,3.214,82,3.091,83,2.419,84,2.419,85,2.321,86,1.108,87,0.582,88,2.006,89,2.419,90,2.15,91,2.649,92,2.649,93,3.591,94,3.35,95,4.335,96,4.335,97,3.981,98,1.052,99,3.688,100,2.809,101,3.083,102,4.21,103,2.603,104,2.778,105,1.075,106,3.083,107,2.688,108,2.075,109,3.298,110,2.075,111,1.94,112,0.768,113,2.232,114,2.649,115,2.15,116,2.603,117,1.077,118,2.649,119,0.518,120,1.94,121,2.527,122,2.419,123,2.527,124,0.114,125,1.772,126,2.649,127,2.232,128,2.649,129,2.232,130,2.649,131,2.419,132,2.527,133,3.35,134,4.347,135,1.454,136,2.419,137,2.419,138,2.419,139,1.667,140,1.261,141,2.778,142,2.321,143,3.091,144,2.075,145,3.214,146,2.527,147,3.091,148,2.527,149,3.35,150,2.321,151,3.35,152,3.214,153,2.419,154,2.15,155,2.979,156,2.321,157,1.417,158,0.889,159,3.828,160,1.912,161,1.94,162,1.417,163,1.417,164,2.419,165,1.94,166,2.419,167,2.649,168,1.768,169,2.321,170,2.419,171,0.87,172,2.075,173,1.94,174,2.419,175,1.94,176,2.419,177,2.527,178,0.086,179,2.321,180,2.15,181,2.006,182,0.006,183,0.006]],["title/classes/SearchExpression.html",[184,0.349,792,2.742]],["body/classes/SearchExpression.html",[3,0.064,4,0.064,5,0.064,6,0.099,8,0.526,10,0.046,11,0.492,12,0.186,23,1.648,24,0.103,25,0.01,30,0.557,31,0.4,36,0.089,49,2.211,60,0.942,62,0.627,68,3.1,79,0.14,87,0.872,105,0.837,112,0.729,116,2.905,117,1.023,119,0.869,124,0.113,125,1.709,135,1.943,168,1.679,171,1.004,178,0.172,182,0.006,183,0.006,184,0.451,186,0.166,188,0.794,193,0.281,195,1.124,201,0.677,202,1.156,203,2.08,204,2.028,206,2.587,207,2.504,208,2.467,209,2.467,210,2.597,212,2.152,213,1.999,214,1.074,217,2.405,227,1.418,228,1.63,248,0.233,249,1.548,251,0.975,252,1.278,278,2.371,357,1.278,395,1.584,396,1.381,418,1.346,426,0.773,441,4.362,443,3.727,444,4.312,445,3.744,447,4.461,448,2.12,450,2.405,451,2.804,453,4.857,457,2.804,458,4.102,463,1.905,466,2.804,467,2.804,469,2.043,475,2.401,478,3.232,479,2.401,777,2.649,791,5.683,792,5.765,824,6.276,845,4.633,846,2.517,862,3.224,878,4.535,879,3.224,1004,2.043,1037,2.797,1115,3.588,1330,3.945,1363,2.804,2136,2.991,2527,5.693,2993,2.991,3007,3.224,3008,5.754,3009,5.754,3010,7.525,3011,5.641,3012,4.01,3013,4.01,3014,4.974,3015,4.01,3016,4.01,3017,4.01,3018,4.974,3019,4.01,3020,4.01,3021,4.974,3022,4.01,3023,4.974,3024,4.01,3025,4.01,3026,4.01,3027,4.974,3028,4.01,3029,4.01,3030,4.535,3031,3.536,3032,3.536,3033,7.276,3034,6.58,3035,3.536,3036,3.536,3037,4.974,3038,3.536,3039,3.536,3040,4.974,3041,4.974,3042,4.974,3043,4.974,3044,4.974,3045,3.536,3046,4.974,3047,3.536,3048,3.536,3049,3.536,3050,3.536,3051,3.536]],["title/classes/SearchTerm.html",[184,0.349,3030,3.512]],["body/classes/SearchTerm.html",[3,0.074,4,0.074,5,0.074,6,0.093,8,0.434,10,0.054,12,0.141,23,1.379,24,0.097,25,0.01,30,0.528,31,0.426,36,0.097,49,1.889,60,0.951,68,2.209,79,0.154,87,0.888,112,0.845,116,2.78,119,0.993,124,0.086,168,1.947,171,1.051,178,0.127,182,0.006,183,0.006,184,0.5,186,0.192,188,0.879,193,0.25,195,0.915,201,0.784,202,1.341,203,2.248,204,1.941,206,2.581,207,2.639,208,2.581,209,2.581,210,2.717,212,2.268,213,2.107,214,1.673,217,1.941,227,1.644,228,1.89,248,0.258,251,1.131,252,1.482,357,1.482,395,1.836,396,1.601,418,1.56,441,3.302,444,3.072,445,3.302,447,4.456,453,4.936,458,3.877,463,2.209,469,2.368,475,2.783,478,3.578,479,2.783,791,5.35,792,5.685,824,6.242,845,4.848,846,2.918,850,2.209,878,5.021,879,3.738,1004,2.368,1037,2.977,1115,3.877,1330,4.368,1363,3.252,2136,3.467,2527,3.738,2993,3.467,3007,3.738,3008,4.1,3009,4.1,3010,7.416,3014,4.1,3018,4.1,3021,4.1,3023,4.1,3027,4.1,3030,6.061,3031,4.1,3032,4.1,3033,7.512,3034,6.935,3035,4.1,3036,4.1,3037,5.507,3038,4.1,3039,4.1,3040,5.507,3041,5.507,3042,5.507,3043,5.507,3044,5.507,3045,4.1,3046,5.507,3047,4.1,3048,4.1,3049,4.1,3050,4.1,3051,4.1,3052,4.649,3053,4.649,3054,4.649,3055,4.649,3056,4.649,3057,4.649]],["title/classes/SegmentHandler.html",[184,0.349,2291,3.258]],["body/classes/SegmentHandler.html",[3,0.086,4,0.086,5,0.086,6,0.103,10,0.062,12,0.186,24,0.102,25,0.01,27,2.882,30,0.482,31,0.451,36,0.094,52,2.562,55,2.014,56,2.562,57,1.555,58,2.851,60,1.128,62,0.843,63,1.857,79,0.153,87,0.897,105,1.272,117,1.756,119,1.012,124,0.119,158,1.449,178,0.178,182,0.007,183,0.007,184,0.55,186,0.223,188,0.969,193,0.281,195,1.126,201,1.161,202,1.555,248,0.223,396,1.857,426,1.094,850,2.434,1285,2.851,1358,4.813,1406,4.547,1473,4.547,1807,5.665,2266,5.955,2272,5.533,2277,4.335,2291,5.133,2351,4.335,2352,4.755,2361,4.335,2362,4.755,2363,6.069,2364,6.069,2365,6.069,2366,6.069,2367,6.069,2368,6.684,2369,7.041,2370,4.755,2371,7.041,2372,6.069,2373,6.684,2374,7.041,2375,4.755,2376,7.041,2377,4.755,2378,4.755,2379,4.755,2380,4.755,2381,4.755,2382,4.755,2383,4.755,2422,4.755,3058,5.393,3059,5.393,3060,5.393,3061,5.393,3062,5.393,3063,5.393,3064,5.393,3065,5.393,3066,5.393,3067,5.393,3068,5.393]],["title/classes/SelectExpression.html",[184,0.349,793,2.886]],["body/classes/SelectExpression.html",[3,0.082,4,0.082,5,0.082,6,0.098,8,0.626,10,0.06,11,0.585,12,0.184,23,1.8,24,0.104,25,0.01,30,0.363,31,0.421,36,0.071,49,1.993,60,0.654,62,0.81,64,3.114,79,0.135,87,0.845,98,1.96,105,1.239,117,1.323,119,0.912,124,0.112,125,1.57,168,2.17,171,0.87,178,0.175,182,0.007,183,0.007,184,0.415,186,0.214,188,0.944,193,0.282,195,1.139,203,2.138,204,2.444,206,2.66,207,2.496,208,2.371,209,2.371,210,2.496,212,2.145,213,2.107,217,2.704,248,0.278,249,1.841,278,2.703,357,1.652,418,1.739,426,0.71,441,4.6,443,4.432,444,4.432,445,4.413,446,3.965,447,4.386,448,2.74,450,2.594,451,3.624,453,3.252,458,4.325,463,2.462,466,3.624,467,3.624,468,5.003,469,2.64,471,3.424,475,3.102,478,2.969,479,3.102,481,3.424,777,4.432,783,5.393,793,6.031,845,3.102,846,3.252,1837,4.166,3069,5.182,3070,5.182,3071,5.182,3072,5.182,3073,5.182,3074,5.182,3075,5.182,3076,5.182,3077,6.708,3078,5.182,3079,5.182,3080,5.182,3081,5.182,3082,5.182]],["title/classes/StringAndCollectionFunctions.html",[184,0.349,263,1.829]],["body/classes/StringAndCollectionFunctions.html",[0,1.432,3,0.042,4,0.042,5,0.042,6,0.083,8,0.474,10,0.03,12,0.156,19,0.64,24,0.095,25,0.01,30,0.632,31,0.287,36,0.119,60,1.149,62,1.237,79,0.161,86,0.898,87,0.917,98,2.095,105,1.248,112,1.045,119,0.623,124,0.115,140,1.545,158,1.508,171,1.186,178,0.141,182,0.004,183,0.004,184,0.669,185,2.127,186,0.109,187,1.135,188,0.58,192,1.135,193,0.22,195,0.898,196,1.135,198,1.135,200,0.906,201,0.444,202,0.758,203,2.206,204,1.281,205,1.135,206,2.111,207,2.323,208,2.733,209,2.733,210,2.899,211,1.039,212,1.996,213,1.855,214,1.673,215,1.135,216,0.64,217,0.817,218,1.135,219,1.778,220,1.778,221,1.135,222,1.135,223,1.497,224,1.135,225,1.135,226,1.135,227,2.208,228,2.538,229,1.135,230,1.135,231,1.135,232,1.135,233,1.135,234,1.135,235,1.135,236,1.135,237,1.135,238,1.135,239,1.135,240,3.967,241,1.159,242,1.582,243,1.135,244,1.069,245,1.135,246,1.135,247,1.135,248,0.21,249,2.069,250,2.677,251,1.002,252,0.838,253,1.347,254,2.773,255,2.988,256,1.135,257,1.135,258,1.778,259,1.135,260,2.193,261,2.193,262,1.135,263,2.408,264,1.778,265,1.135,266,1.778,267,1.135,268,1.778,269,1.135,270,1.778,271,1.135,272,1.778,273,1.135,274,1.778,275,1.135,276,1.778,277,2.481,278,2.406,279,1.135,280,1.135,281,2.127,282,1.135,283,2.481,284,1.135,285,1.778,286,1.135,287,1.135,288,2.127,289,1.135,290,1.778,291,1.135,292,1.135,293,1.135,294,1.135,295,1.135,296,1.135,297,1.135,298,2.127,299,1.135,300,1.135,301,1.135,302,1.135,303,1.135,304,1.135,305,1.135,306,1.135,307,1.135,308,1.135,309,1.135,310,1.135,311,1.135,312,1.135,313,1.135,314,1.135,315,1.135,316,1.135,317,1.135,318,1.135,319,1.135,320,1.135,321,1.135,322,1.135,323,1.135,324,1.135,325,1.135,326,1.135,327,1.135,328,1.135,329,1.135,330,2.127,331,1.135,332,1.135,333,1.135,334,1.135,335,2.127,336,1.135,337,1.778,338,1.135,339,1.135,340,1.778,341,1.135,342,1.135,343,1.135,344,1.135,345,2.127,346,1.135,347,1.135,348,1.135,349,2.408,350,2.481,351,2.694,352,3.629,353,3.826,354,1.778,355,1.135,356,1.135,357,0.838,358,1.135,359,1.135,360,2.127,361,1.135,362,1.135,363,1.135,364,1.135,365,1.135,366,1.135,367,1.135,368,1.135,369,1.135,370,1.135,371,1.135,372,1.135,373,1.135,374,1.135,375,1.135,376,1.135,377,1.135,378,1.135,379,1.135,380,1.135,381,1.135,382,1.135,383,2.127,384,1.135,385,1.135,386,1.135,387,1.135,388,1.135,389,1.135,390,1.135,391,1.135,392,1.135,393,1.135,394,1.135,395,1.628,396,0.906,397,1.778,398,1.135,399,1.135,400,1.135,401,2.127,402,1.797,403,1.135,404,1.135,405,2.127,406,1.135,407,1.135,408,1.135,409,1.135,410,2.543,411,1.135,412,1.101,413,2.543,414,1.135,415,0.956,416,2.481,417,1.135,418,0.883,426,0.949,3083,4.121,3084,4.121,3085,4.121,3086,4.121,3087,4.121,3088,4.121,3089,2.631,3090,2.631,3091,2.631,3092,2.631,3093,2.631,3094,2.631,3095,2.631]],["title/classes/StringFunctions.html",[184,0.349,288,1.829]],["body/classes/StringFunctions.html",[0,1.459,3,0.043,4,0.043,5,0.043,6,0.073,8,0.484,10,0.031,12,0.132,19,0.661,24,0.093,25,0.01,30,0.624,31,0.293,36,0.119,60,1.145,62,1.189,79,0.162,86,0.673,87,0.918,98,2.01,105,1.296,112,1.065,119,0.637,124,0.114,140,1.563,158,1.525,171,1.188,178,0.119,182,0.004,183,0.004,184,0.672,185,2.173,186,0.113,187,1.174,188,0.595,192,1.174,193,0.186,195,0.76,196,1.174,198,1.174,200,0.937,201,0.459,202,0.784,203,2.234,204,1.314,205,1.174,206,2.14,207,2.352,208,2.745,209,2.745,210,2.911,211,1.074,212,2.021,213,1.878,214,1.699,215,1.174,216,0.661,217,0.845,218,1.174,219,1.825,220,1.825,221,1.174,222,1.174,223,1.537,224,1.174,225,1.174,226,1.174,227,2.243,228,2.578,229,1.174,230,1.174,231,1.174,232,1.174,233,1.174,234,1.174,235,1.174,236,1.174,237,1.174,238,1.174,239,1.174,240,3.949,241,1.19,242,1.624,243,1.174,244,1.106,245,1.174,246,1.174,247,1.174,248,0.215,249,2.089,250,2.705,251,1.029,252,0.867,253,1.383,254,2.812,255,3.025,256,1.174,257,1.174,258,1.825,259,1.174,260,2.24,261,2.24,262,1.174,263,2.173,264,1.174,265,1.174,266,1.174,267,1.174,268,1.174,269,1.174,270,1.174,271,1.174,272,1.174,273,1.174,274,1.174,275,1.174,276,1.174,277,1.825,278,1.537,279,1.174,280,1.174,281,2.173,282,1.174,283,2.527,284,1.174,285,1.825,286,1.174,287,1.174,288,2.452,289,1.825,290,2.527,291,1.174,292,1.825,293,1.174,294,1.825,295,1.174,296,1.825,297,1.174,298,2.173,299,1.174,300,1.174,301,1.174,302,1.174,303,1.174,304,1.174,305,1.174,306,1.174,307,1.174,308,1.174,309,1.174,310,1.174,311,1.174,312,1.174,313,1.174,314,1.174,315,1.174,316,1.174,317,1.174,318,1.174,319,1.174,320,1.174,321,1.174,322,1.174,323,1.174,324,1.174,325,1.174,326,1.174,327,1.174,328,1.174,329,1.174,330,2.173,331,1.174,332,1.174,333,1.174,334,1.174,335,2.173,336,1.174,337,1.825,338,1.174,339,1.174,340,1.825,341,1.174,342,1.174,343,1.174,344,1.174,345,2.173,346,1.174,347,1.174,348,1.174,349,2.452,350,2.527,351,2.737,352,3.648,353,3.837,354,1.825,355,1.174,356,1.174,357,0.867,358,1.174,359,1.174,360,2.173,361,1.174,362,1.174,363,1.174,364,1.174,365,1.174,366,1.174,367,1.174,368,1.174,369,1.174,370,1.174,371,1.174,372,1.174,373,1.174,374,1.174,375,1.174,376,1.174,377,1.174,378,1.174,379,1.174,380,1.174,381,1.174,382,1.174,383,2.173,384,1.174,385,1.174,386,1.174,387,1.174,388,1.174,389,1.174,390,1.174,391,1.174,392,1.174,393,1.174,394,1.174,395,1.671,396,0.937,397,1.825,398,1.174,399,1.174,400,1.174,401,2.173,402,1.836,403,1.174,404,1.174,405,2.173,406,1.174,407,1.174,408,1.174,409,1.174,410,2.578,411,1.174,412,1.139,413,2.578,414,1.174,415,0.988,416,2.527,417,1.174,418,0.913,2844,3.73,3096,4.23,3097,4.23,3098,4.23,3099,2.72,3100,2.72,3101,2.72,3102,2.72]],["title/interfaces/StructuredTypeFieldOptions.html",[0,1.088,97,2.402]],["body/interfaces/StructuredTypeFieldOptions.html",[0,2.013,1,3.231,2,2.249,3,0.068,4,0.068,5,0.068,6,0.049,7,2.437,8,0.711,9,2.643,10,0.049,11,0.588,13,2.249,14,2.338,15,2.437,16,1.836,17,3.431,18,2.792,19,1.767,20,2.338,21,2.437,22,2.249,24,0.104,25,0.01,26,2.701,27,1.781,28,1.955,29,3.339,30,0.633,31,0.332,32,3.107,33,2.701,34,2.998,35,2.021,36,0.124,37,3.431,38,2.437,39,2.437,40,2.437,41,3.348,42,2.091,43,3.107,44,3.231,45,2.021,46,2.437,47,3.367,48,0.754,49,1.139,50,1.955,51,2.256,52,2.021,53,3.231,54,3.135,55,2.195,56,2.792,57,1.942,58,3.107,59,3.367,60,1.088,61,3.339,62,0.919,63,2.024,64,2.461,65,2.536,66,3.107,67,2.616,68,2.792,69,3.107,70,2.616,71,2.616,72,2.616,73,2.792,74,3.107,75,3.367,76,2.889,77,2.338,78,2.079,79,0.167,80,3.231,81,3.231,82,3.107,83,2.437,84,2.437,85,2.338,86,1.085,87,0.585,88,2.021,89,2.437,90,2.167,91,2.669,92,2.669,93,3.598,94,2.437,95,2.546,96,2.546,97,4.191,98,1.81,99,4.191,100,2.82,101,3.095,102,4.227,103,2.616,104,2.792,105,1.078,106,3.095,107,2.701,108,2.091,109,3.311,110,2.091,111,1.955,112,0.773,113,2.249,114,2.669,115,2.167,116,2.616,117,1.085,118,2.669,119,0.522,120,1.955,121,2.546,122,2.437,123,2.546,124,0.115,125,1.781,126,2.669,127,2.249,128,2.669,129,2.249,130,2.669,131,2.437,132,2.546,133,3.367,134,4.355,135,1.465,136,2.437,137,2.437,138,2.437,139,1.68,140,1.267,141,2.784,142,2.338,143,3.107,144,2.091,145,3.231,146,2.546,147,3.107,148,2.546,149,3.367,150,2.338,151,3.367,152,3.231,153,2.437,154,2.167,155,2.994,156,2.338,157,1.427,158,0.895,159,3.841,160,1.922,161,1.955,162,1.427,163,1.427,164,2.437,165,1.955,166,2.437,167,2.669,168,1.781,169,2.338,170,2.437,171,0.874,172,2.091,173,1.955,174,2.437,175,1.955,176,2.437,177,2.546,178,0.086,179,2.338,180,2.167,181,2.021,182,0.006,183,0.006]],["title/classes/TypeFunctions.html",[184,0.349,330,1.829]],["body/classes/TypeFunctions.html",[0,1.467,3,0.044,4,0.044,5,0.044,6,0.06,8,0.488,10,0.032,12,0.096,19,0.668,24,0.095,25,0.01,30,0.624,31,0.295,36,0.119,60,1.144,62,1.137,79,0.163,86,0.678,87,0.919,98,2.015,105,1.28,112,1.071,119,0.641,124,0.112,140,1.568,158,1.531,171,1.189,178,0.087,182,0.004,183,0.004,184,0.673,185,2.188,186,0.114,187,1.186,188,0.6,192,1.186,193,0.136,195,0.553,196,1.186,198,1.186,200,0.947,201,0.464,202,0.793,203,2.243,204,1.325,205,1.186,206,2.149,207,2.361,208,2.749,209,2.749,210,2.915,211,1.086,212,2.029,213,1.885,214,1.707,215,1.186,216,0.668,217,0.854,218,1.186,219,1.84,220,1.84,221,1.186,222,1.186,223,1.55,224,1.186,225,1.186,226,1.186,227,2.254,228,2.591,229,1.186,230,1.186,231,1.186,232,1.186,233,1.186,234,1.186,235,1.186,236,1.186,237,1.186,238,1.186,239,1.186,240,3.952,241,1.2,242,1.637,243,1.186,244,1.117,245,1.186,246,1.186,247,1.186,248,0.216,249,2.095,250,2.713,251,1.037,252,0.876,253,1.394,254,2.824,255,3.037,256,1.186,257,1.186,258,1.84,259,1.186,260,2.255,261,2.255,262,1.186,263,2.188,264,1.186,265,1.186,266,1.186,267,1.186,268,1.186,269,1.186,270,1.186,271,1.186,272,1.186,273,1.186,274,1.186,275,1.186,276,1.186,277,1.84,278,1.55,279,1.186,280,1.186,281,2.188,282,1.186,283,2.541,284,1.186,285,1.84,286,1.186,287,1.186,288,2.188,289,1.186,290,1.84,291,1.186,292,1.186,293,1.186,294,1.186,295,1.186,296,1.186,297,1.186,298,2.188,299,1.186,300,1.186,301,1.186,302,1.186,303,1.186,304,1.186,305,1.186,306,1.186,307,1.186,308,1.186,309,1.186,310,1.186,311,1.186,312,1.186,313,1.186,314,1.186,315,1.186,316,1.186,317,1.186,318,1.186,319,1.186,320,1.186,321,1.186,322,1.186,323,1.186,324,1.186,325,1.186,326,1.186,327,1.186,328,1.186,329,1.186,330,2.465,331,1.84,332,1.186,333,1.84,334,1.186,335,2.188,336,1.186,337,1.84,338,1.186,339,1.186,340,1.84,341,1.186,342,1.186,343,1.186,344,1.186,345,2.188,346,1.186,347,1.186,348,1.186,349,2.465,350,2.541,351,2.751,352,3.654,353,3.841,354,1.84,355,1.186,356,1.186,357,0.876,358,1.186,359,1.186,360,2.188,361,1.186,362,1.186,363,1.186,364,1.186,365,1.186,366,1.186,367,1.186,368,1.186,369,1.186,370,1.186,371,1.186,372,1.186,373,1.186,374,1.186,375,1.186,376,1.186,377,1.186,378,1.186,379,1.186,380,1.186,381,1.186,382,1.186,383,2.188,384,1.186,385,1.186,386,1.186,387,1.186,388,1.186,389,1.186,390,1.186,391,1.186,392,1.186,393,1.186,394,1.186,395,1.684,396,0.947,397,1.84,398,1.186,399,1.186,400,1.186,401,2.188,402,1.848,403,1.186,404,1.186,405,2.188,406,1.186,407,1.186,408,1.186,409,1.186,410,2.589,411,1.186,412,1.151,413,2.589,414,1.186,415,0.999,416,2.541,417,1.186,418,0.922,426,0.584,3103,4.265,3104,4.265,3105,2.749,3106,2.749]],["title/dependencies.html",[3107,3.636,3108,4.639]],["body/dependencies.html",[25,0.009,35,3.308,182,0.008,183,0.008,2230,5.193,3108,6.14,3109,6.963,3110,9.093,3111,6.963,3112,6.963,3113,6.963,3114,8.039,3115,8.039,3116,6.963,3117,6.963,3118,6.963,3119,6.963,3120,6.963,3121,6.963,3122,6.963]],["title/miscellaneous/enumerations.html",[3123,2.712,3124,4.639]],["body/miscellaneous/enumerations.html",[6,0.096,7,3.511,10,0.071,24,0.086,25,0.01,26,3.426,52,3.541,53,4.098,54,3.217,55,2.783,56,3.541,57,2.149,58,3.941,59,4.27,60,1.179,61,3.841,62,1.165,63,2.567,64,3.121,65,3.217,66,3.941,67,3.318,68,3.541,69,3.941,70,3.318,71,3.318,72,3.318,73,3.541,74,3.941,75,4.27,140,1.321,182,0.008,183,0.008,837,5.992,880,5.404,881,6.572,889,5.404,890,5.404,1342,5.404,1917,4.049,3123,4.571,3124,5.404,3125,6.129,3126,7.453,3127,5.404,3128,6.572,3129,7.453,3130,6.572,3131,7.453,3132,5.404,3133,6.129,3134,6.129,3135,6.129,3136,6.129,3137,5.404,3138,5.404,3139,7.453,3140,7.453,3141,7.453,3142,7.453]],["title/index.html",[10,0.042,3143,3.207,3144,3.207]],["body/index.html",[17,2.27,25,0.01,31,0.483,36,0.095,41,2.805,42,2.191,45,2.117,50,2.048,61,2.048,64,2.541,65,2.619,67,3.298,76,3.393,110,4.023,120,2.048,123,3.633,124,0.061,141,2.819,144,4.324,158,0.938,171,0.578,180,3.092,182,0.006,183,0.006,184,0.552,204,2.409,213,2.143,251,1.678,445,2.356,560,2.883,711,5.956,885,3.52,892,2.797,1024,3.583,1038,4.526,1090,3.172,1203,5.087,1208,7.107,1232,2.45,1278,3.633,1280,3.324,1285,4.403,1312,2.45,1378,2.27,1451,3.93,1651,2.45,1653,2.45,1826,3.93,1847,3.93,1877,6.085,1884,3.117,1892,3.93,1898,5.526,2218,6.43,2219,5.781,2223,4.526,2229,6.533,2230,5.147,2238,5.351,2361,3.583,2424,3.583,2776,4.879,2796,7.756,3145,8.445,3146,4.457,3147,4.457,3148,4.457,3149,4.457,3150,4.457,3151,4.457,3152,4.457,3153,6.069,3154,4.457,3155,4.457,3156,7.409,3157,4.457,3158,4.457,3159,4.457,3160,6.069,3161,6.069,3162,6.533,3163,4.457,3164,6.069,3165,4.457,3166,6.069,3167,6.069,3168,4.457,3169,4.457,3170,6.069,3171,4.457,3172,4.457,3173,4.457,3174,6.069,3175,6.069,3176,4.457,3177,4.457,3178,6.069,3179,4.457,3180,4.457,3181,4.457,3182,4.457,3183,4.457,3184,4.457,3185,4.457,3186,4.457,3187,4.457,3188,4.457,3189,4.457,3190,4.457,3191,6.069,3192,9.042,3193,4.457,3194,4.457,3195,4.457,3196,6.901,3197,8.328,3198,4.457,3199,4.457,3200,4.457,3201,6.901,3202,4.457,3203,4.457,3204,4.457,3205,4.457,3206,6.901,3207,6.069,3208,6.069,3209,4.457,3210,6.069,3211,6.069,3212,7.409,3213,5.351,3214,6.069,3215,4.457,3216,6.069,3217,4.457,3218,4.457,3219,4.457,3220,4.457,3221,4.457,3222,8.445,3223,4.457,3224,4.457,3225,4.457,3226,7.409,3227,4.457,3228,6.901,3229,4.457,3230,4.457,3231,4.457,3232,4.457,3233,4.457,3234,4.457,3235,4.457,3236,4.457,3237,4.457,3238,4.457,3239,4.457,3240,4.457,3241,4.457,3242,4.457,3243,4.457,3244,4.457,3245,3.93,3246,4.457,3247,4.457,3248,4.457,3249,4.457,3250,4.457,3251,4.457,3252,4.457,3253,6.069,3254,6.069,3255,4.457,3256,4.457,3257,4.457,3258,4.457,3259,4.457]],["title/license.html",[3143,3.207,3144,3.207,3260,3.207]],["body/license.html",[25,0.008,63,2.255,182,0.008,183,0.008,1320,5.773,1659,5.123,1830,4.326,1837,5.263,1884,5.778,1898,5.783,3162,5.773,3260,5.773,3261,6.547,3262,8.262,3263,6.547,3264,6.547,3265,6.547,3266,6.547,3267,7.754,3268,6.547,3269,6.547,3270,6.547,3271,6.547,3272,6.547,3273,6.547,3274,7.754,3275,9.053,3276,6.547,3277,6.547,3278,6.547,3279,6.547,3280,6.547,3281,6.547,3282,6.547,3283,6.547,3284,6.547,3285,6.547,3286,6.547,3287,6.547,3288,7.754,3289,6.547,3290,6.547,3291,6.547,3292,6.547,3293,6.547,3294,6.547,3295,7.754,3296,7.754,3297,6.547,3298,6.547,3299,6.547,3300,6.547,3301,6.547,3302,6.547,3303,6.547,3304,6.547,3305,6.547,3306,6.547,3307,6.547,3308,6.547,3309,6.547,3310,6.547,3311,6.547,3312,6.547,3313,6.547,3314,6.547,3315,6.547,3316,6.547,3317,6.547,3318,6.547,3319,6.547,3320,6.547,3321,6.547,3322,6.547,3323,6.547,3324,6.547,3325,6.547,3326,6.547]],["title/modules.html",[2220,4.813]],["body/modules.html",[25,0.008,182,0.008,183,0.008,2219,5.398,2220,5.819,3327,7.238]],["title/overview.html",[3328,5.279]],["body/overview.html",[2,3.8,25,0.008,182,0.008,183,0.008,186,0.297,1037,2.839,2218,5.779,2939,6.338,3245,6.338,3328,6.338,3329,7.188,3330,7.188]],["title/miscellaneous/typealiases.html",[3123,2.712,3331,5.261]],["body/miscellaneous/typealiases.html",[6,0.103,7,2.906,10,0.059,17,3.37,23,2.041,24,0.107,25,0.01,29,3.041,30,0.355,37,3.37,38,2.906,39,2.906,40,2.906,41,3.29,42,2.494,43,3.498,44,2.789,45,2.41,46,2.906,47,3.79,48,0.9,49,1.359,50,2.332,60,0.835,64,2.77,65,2.855,67,2.945,69,3.498,70,2.945,79,0.153,86,0.858,99,3.637,103,2.258,109,3.252,122,3.79,127,2.682,133,3.79,134,3.498,143,3.498,145,3.637,147,3.498,149,3.79,151,3.79,152,3.637,182,0.007,183,0.007,203,2.487,208,1.617,419,3.783,536,4.08,788,4.934,791,4.371,1135,4.371,1288,4.627,1309,4.934,1310,4.627,1311,5.319,1362,4.934,1570,3.548,1801,3.783,1807,4.371,1825,4.473,1832,3.184,1912,4.078,1919,5.319,1920,3.783,1921,5.319,1923,5.319,1924,5.319,1925,5.319,2261,4.473,2266,4.934,2427,5.319,2519,4.473,3007,4.078,3123,3.783,3127,7.856,3128,7.996,3130,8.016,3132,4.473,3137,4.473,3138,5.834,3213,4.473,3332,6.616,3333,5.073,3334,5.073,3335,7.362,3336,6.616,3337,7.803,3338,5.073,3339,7.803,3340,6.616,3341,8.093,3342,6.616,3343,6.616,3344,7.362,3345,5.073,3346,6.616,3347,6.616,3348,6.616,3349,6.616,3350,6.616,3351,6.616,3352,6.616,3353,6.616,3354,5.073,3355,7.362,3356,7.803,3357,6.616,3358,5.073,3359,7.803,3360,6.616,3361,5.073,3362,5.073,3363,5.073,3364,5.073,3365,5.073,3366,5.073,3367,5.073,3368,5.073,3369,5.073]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":1004,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["0.11.4",{"_index":3122,"title":{},"body":{"dependencies.html":{}}}],["07/schema",{"_index":2077,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["1",{"_index":1037,"title":{"classes/Field-1.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"overview.html":{}}}],["11",{"_index":3330,"title":{},"body":{"overview.html":{}}}],["120",{"_index":3329,"title":{},"body":{"overview.html":{}}}],["13.2.5",{"_index":3110,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":3245,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.0",{"_index":38,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["2.3.0",{"_index":3120,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1379,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["2019",{"_index":3263,"title":{},"body":{"license.html":{}}}],["3",{"_index":3244,"title":{},"body":{"index.html":{}}}],["3.0",{"_index":39,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["4",{"_index":3239,"title":{},"body":{"index.html":{}}}],["4.0",{"_index":40,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["404",{"_index":1895,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["7.4.0",{"_index":3118,"title":{},"body":{"dependencies.html":{}}}],["9a",{"_index":1985,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["_add",{"_index":444,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["_add(name",{"_index":452,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["_add(node",{"_index":777,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["_annotations",{"_index":2711,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_body",{"_index":2563,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_children",{"_index":443,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["_connector",{"_index":3008,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["_context",{"_index":2712,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_functions",{"_index":1179,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_headers",{"_index":2564,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_method",{"_index":2565,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_name",{"_index":220,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["_negated",{"_index":3009,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["_options",{"_index":2713,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_params",{"_index":2566,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_path",{"_index":2567,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_payload",{"_index":2714,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_properties",{"_index":1174,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_querybody",{"_index":2568,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_requests",{"_index":1401,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responsetype",{"_index":2569,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_segments",{"_index":2262,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["above",{"_index":3294,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":1366,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["abstract",{"_index":538,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["acc",{"_index":816,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["acc.params",{"_index":2310,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["acc.paths.push(path",{"_index":2309,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["accept",{"_index":13,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["accept.length",{"_index":2661,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push",{"_index":2655,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`odata.metadata=${this.api.options.accept?.metadata",{"_index":2652,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`streaming=${this.api.options.accept?.streaming",{"_index":2658,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accessors",{"_index":850,"title":{},"body":{"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByField.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{}}}],["action",{"_index":63,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["action.ts",{"_index":489,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["action.ts:1",{"_index":599,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:12",{"_index":495,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:14",{"_index":498,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:15",{"_index":500,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:16",{"_index":497,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:17",{"_index":496,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:18",{"_index":499,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:22",{"_index":606,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:24",{"_index":610,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:25",{"_index":608,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:26",{"_index":607,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:27",{"_index":609,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:3",{"_index":603,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:31",{"_index":508,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:33",{"_index":511,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:34",{"_index":509,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:35",{"_index":510,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:39",{"_index":655,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:4",{"_index":605,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:41",{"_index":657,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:42",{"_index":662,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:43",{"_index":658,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:44",{"_index":656,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:45",{"_index":659,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:46",{"_index":660,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:47",{"_index":661,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:5",{"_index":601,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:51",{"_index":681,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:53",{"_index":687,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:54",{"_index":683,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:55",{"_index":682,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:56",{"_index":684,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:57",{"_index":685,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:58",{"_index":686,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:6",{"_index":600,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:7",{"_index":602,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:8",{"_index":604,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["actionimport",{"_index":932,"title":{},"body":{"classes/Field.html":{}}}],["actionimports",{"_index":562,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["actions",{"_index":690,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["add",{"_index":419,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"miscellaneous/typealiases.html":{}}}],["add(ctx",{"_index":1433,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["add(left",{"_index":384,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["add(name",{"_index":2268,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["added",{"_index":3133,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["additionalitems",{"_index":2005,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["addressinfo",{"_index":3227,"title":{},"body":{"index.html":{}}}],["again",{"_index":3201,"title":{},"body":{"index.html":{}}}],["aggregate",{"_index":3332,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["airport",{"_index":3200,"title":{},"body":{"index.html":{}}}],["airports",{"_index":3192,"title":{},"body":{"index.html":{}}}],["airports.entity(\"cyyz\").fetch",{"_index":3204,"title":{},"body":{"index.html":{}}}],["airports.fetch",{"_index":3235,"title":{},"body":{"index.html":{}}}],["airports.fetch().subscribe",{"_index":3195,"title":{},"body":{"index.html":{}}}],["airports.query((q",{"_index":3214,"title":{},"body":{"index.html":{}}}],["airports.tojson",{"_index":3217,"title":{},"body":{"index.html":{}}}],["airportsservice",{"_index":3190,"title":{},"body":{"index.html":{}}}],["airportsservice.entities",{"_index":3194,"title":{},"body":{"index.html":{}}}],["alias",{"_index":140,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["alias(value",{"_index":2463,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["aliases",{"_index":208,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["all(field",{"_index":408,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["allows",{"_index":1424,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["along",{"_index":3172,"title":{},"body":{"index.html":{}}}],["and(exp",{"_index":3014,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["and(left",{"_index":373,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["and/or",{"_index":3286,"title":{},"body":{"license.html":{}}}],["angular",{"_index":3145,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":3109,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":3111,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":1337,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"modules/ODataModule.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["angular/compiler",{"_index":3112,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":2230,"title":{},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":3113,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":3114,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":3117,"title":{},"body":{"dependencies.html":{}}}],["angularodataentity",{"_index":3157,"title":{},"body":{"index.html":{}}}],["annot",{"_index":1100,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annot.bool",{"_index":1120,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.int",{"_index":1121,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.permissions",{"_index":1122,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.properties",{"_index":1123,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.string",{"_index":1119,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annot.term",{"_index":1107,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["annotatable",{"_index":1097,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue",{"_index":1086,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotatedvalue(term",{"_index":1092,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation",{"_index":616,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["annotation.ts",{"_index":513,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{}}}],["annotation.ts:1",{"_index":517,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:15",{"_index":527,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:16",{"_index":528,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:19",{"_index":727,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:2",{"_index":518,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:21",{"_index":732,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:22",{"_index":737,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:23",{"_index":729,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:24",{"_index":730,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:25",{"_index":728,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:26",{"_index":733,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:27",{"_index":731,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:28",{"_index":734,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:29",{"_index":735,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:30",{"_index":736,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:5",{"_index":530,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:7",{"_index":532,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:9",{"_index":531,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotationconfig",{"_index":134,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["annotationlist",{"_index":514,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["annotations",{"_index":141,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["annotations=${this.api.options.prefer?.includeannotations",{"_index":2673,"title":{},"body":{"classes/ODataRequest.html":{}}}],["annotationslist",{"_index":691,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["annots",{"_index":2796,"title":{},"body":{"classes/ODataResponse.html":{},"index.html":{}}}],["annots.data(payload",{"_index":2798,"title":{},"body":{"classes/ODataResponse.html":{}}}],["any(field",{"_index":406,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["any)['_name",{"_index":224,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["any)[f.name",{"_index":2045,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["any[]).map((v",{"_index":1968,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["api",{"_index":1278,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["apiconfig",{"_index":122,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"modules/ODataModule.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["apinameorentitytype",{"_index":1281,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["apioptions",{"_index":1,"title":{"interfaces/ApiOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["app",{"_index":3181,"title":{},"body":{"index.html":{}}}],["app.component.css",{"_index":3186,"title":{},"body":{"index.html":{}}}],["app.component.html",{"_index":3184,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":3187,"title":{},"body":{"index.html":{}}}],["application",{"_index":3166,"title":{},"body":{"index.html":{}}}],["application/json;${accept.join",{"_index":2663,"title":{},"body":{"classes/ODataRequest.html":{}}}],["application_http",{"_index":1339,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["application_json",{"_index":1340,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["appliesto",{"_index":525,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["apply(query",{"_index":2506,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["applymixins(derivedctor",{"_index":232,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatafunctions",{"_index":414,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odataoperators",{"_index":411,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatasyntax",{"_index":417,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["appmodule",{"_index":3170,"title":{},"body":{"index.html":{}}}],["arising",{"_index":3323,"title":{},"body":{"license.html":{}}}],["arithmeticfunctions",{"_index":185,"title":{"classes/ArithmeticFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arithmeticoperators",{"_index":383,"title":{"classes/ArithmeticOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arr",{"_index":2443,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.find((v",{"_index":2446,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.push(obj",{"_index":2447,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["array",{"_index":1920,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["array.isarray(config.keys",{"_index":2016,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["array.isarray(right",{"_index":355,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["array.isarray(this.keys",{"_index":2054,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["array.isarray(value",{"_index":1712,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["arraybuffer",{"_index":2585,"title":{},"body":{"classes/ODataRequest.html":{}}}],["asc",{"_index":2987,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["ascending",{"_index":2972,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["ascending(field",{"_index":2976,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["assertarray",{"_index":2388,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject",{"_index":2389,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject(create",{"_index":2398,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign",{"_index":2390,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign(values",{"_index":2400,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["associated",{"_index":3276,"title":{},"body":{"license.html":{}}}],["at(index",{"_index":2402,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["attach",{"_index":1801,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["attach(model",{"_index":1834,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach(value",{"_index":1803,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>(model",{"_index":1871,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach>(value",{"_index":1816,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>>(model",{"_index":1872,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["attr",{"_index":1028,"title":{},"body":{"classes/Field.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["attr?.nodevalue",{"_index":1030,"title":{},"body":{"classes/Field.html":{}}}],["attribute",{"_index":889,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["attribute_abstract",{"_index":972,"title":{},"body":{"classes/Field.html":{}}}],["attribute_action",{"_index":969,"title":{},"body":{"classes/Field.html":{}}}],["attribute_alias",{"_index":939,"title":{},"body":{"classes/Field.html":{}}}],["attribute_applies_to",{"_index":977,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_term",{"_index":976,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_type",{"_index":947,"title":{},"body":{"classes/Field.html":{}}}],["attribute_contains_target",{"_index":961,"title":{},"body":{"classes/Field.html":{}}}],["attribute_default_value",{"_index":956,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set",{"_index":970,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set_path",{"_index":963,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_type",{"_index":965,"title":{},"body":{"classes/Field.html":{}}}],["attribute_extends",{"_index":975,"title":{},"body":{"classes/Field.html":{}}}],["attribute_function",{"_index":968,"title":{},"body":{"classes/Field.html":{}}}],["attribute_has_stream",{"_index":960,"title":{},"body":{"classes/Field.html":{}}}],["attribute_include_in_service_document",{"_index":971,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_bound",{"_index":962,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_composable",{"_index":964,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_flags",{"_index":974,"title":{},"body":{"classes/Field.html":{}}}],["attribute_max_length",{"_index":951,"title":{},"body":{"classes/Field.html":{}}}],["attribute_name",{"_index":945,"title":{},"body":{"classes/Field.html":{}}}],["attribute_namespace",{"_index":940,"title":{},"body":{"classes/Field.html":{}}}],["attribute_nullable",{"_index":950,"title":{},"body":{"classes/Field.html":{}}}],["attribute_open_type",{"_index":948,"title":{},"body":{"classes/Field.html":{}}}],["attribute_partner",{"_index":957,"title":{},"body":{"classes/Field.html":{}}}],["attribute_path",{"_index":966,"title":{},"body":{"classes/Field.html":{}}}],["attribute_precision",{"_index":952,"title":{},"body":{"classes/Field.html":{}}}],["attribute_property",{"_index":958,"title":{},"body":{"classes/Field.html":{}}}],["attribute_qualifier",{"_index":942,"title":{},"body":{"classes/Field.html":{}}}],["attribute_referenced_property",{"_index":959,"title":{},"body":{"classes/Field.html":{}}}],["attribute_scale",{"_index":953,"title":{},"body":{"classes/Field.html":{}}}],["attribute_srid",{"_index":955,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target",{"_index":967,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target_namespace",{"_index":943,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term",{"_index":944,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term_namespace",{"_index":941,"title":{},"body":{"classes/Field.html":{}}}],["attribute_type",{"_index":949,"title":{},"body":{"classes/Field.html":{}}}],["attribute_underlying_type",{"_index":973,"title":{},"body":{"classes/Field.html":{}}}],["attribute_unicode",{"_index":954,"title":{},"body":{"classes/Field.html":{}}}],["attribute_uri",{"_index":938,"title":{},"body":{"classes/Field.html":{}}}],["attribute_value",{"_index":946,"title":{},"body":{"classes/Field.html":{}}}],["attribute_version",{"_index":937,"title":{},"body":{"classes/Field.html":{}}}],["attributes",{"_index":936,"title":{},"body":{"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{}}}],["attributes(data",{"_index":1138,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["attributes.getnameditem('version",{"_index":1029,"title":{},"body":{"classes/Field.html":{}}}],["attrs",{"_index":1843,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{}}}],["attrs[field.name",{"_index":2097,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["authors",{"_index":3313,"title":{},"body":{"license.html":{}}}],["average",{"_index":3141,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["b",{"_index":3077,"title":{},"body":{"classes/SelectExpression.html":{}}}],["backward",{"_index":2336,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["base",{"_index":168,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["base64",{"_index":1991,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["baseterm",{"_index":523,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["basetype",{"_index":539,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["basic",{"_index":3241,"title":{},"body":{"index.html":{}}}],["batch",{"_index":53,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["batch(\"trippin",{"_index":3233,"title":{},"body":{"index.html":{}}}],["batch._requests",{"_index":1410,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batch.request.method",{"_index":1462,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batch_prefix",{"_index":1341,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batchboundary",{"_index":1456,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["binary",{"_index":1342,"title":{},"body":{"classes/ODataBatchRequest.html":{},"miscellaneous/enumerations.html":{}}}],["binding",{"_index":584,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["binding.ts",{"_index":648,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:1",{"_index":650,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:2",{"_index":651,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["bindingstructuredtype",{"_index":2906,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingstructuredtype.issubtypeof(callablebindingstructuredtype",{"_index":2914,"title":{},"body":{"classes/ODataSchema.html":{}}}],["bindingtype",{"_index":2872,"title":{},"body":{"classes/ODataSchema.html":{}}}],["blob",{"_index":2586,"title":{},"body":{"classes/ODataRequest.html":{}}}],["body",{"_index":104,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bodyparams",{"_index":2699,"title":{},"body":{"classes/ODataRequest.html":{}}}],["bodyparams.tostring",{"_index":2702,"title":{},"body":{"classes/ODataRequest.html":{}}}],["bodyqueryoptions",{"_index":14,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bool",{"_index":136,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boolean",{"_index":30,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["boolean(f.value",{"_index":2130,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["boolean(field.collection",{"_index":1943,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["boolean(field.navigation",{"_index":1945,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["bound",{"_index":176,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boundary",{"_index":1460,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix",{"_index":1343,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${batchboundary}${boundary_prefix_suffix",{"_index":1476,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${changesetboundary}${boundary_prefix_suffix",{"_index":1464,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["break",{"_index":2035,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["browse",{"_index":3327,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3115,"title":{},"body":{"dependencies.html":{}}}],["buildbody",{"_index":1455,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildentry",{"_index":1497,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildentry(payload",{"_index":1510,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["builder",{"_index":204,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["builders",{"_index":3248,"title":{},"body":{"index.html":{}}}],["buildkey",{"_index":1498,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildkey(names",{"_index":1513,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildpathandquery",{"_index":2290,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["c",{"_index":1837,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/SelectExpression.html":{},"license.html":{}}}],["c.binding()?.type",{"_index":2911,"title":{},"body":{"classes/ODataSchema.html":{}}}],["c.clone",{"_index":479,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["c.istypeof(type",{"_index":1963,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["c.tojson",{"_index":879,"title":{},"body":{"classes/Expression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["cache",{"_index":41,"title":{"interfaces/Cache.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["cache_control",{"_index":2743,"title":{},"body":{"classes/ODataResponse.html":{}}}],["cache_key_separator",{"_index":1543,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cacheability",{"_index":95,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["cachecacheability",{"_index":47,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["cachecontrol",{"_index":2779,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["cachecontrol.split(',').foreach((directive",{"_index":2848,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["cached",{"_index":1588,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["california",{"_index":3216,"title":{},"body":{"index.html":{}}}],["callable",{"_index":1620,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["callable.configure",{"_index":2922,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callable_binding_parameter",{"_index":1700,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["callablebindingstructuredtype",{"_index":2912,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callablebindingtype",{"_index":2910,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callableconfig",{"_index":147,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["callables",{"_index":146,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["callaction",{"_index":1275,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callaction(params",{"_index":1284,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction",{"_index":1276,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction(params",{"_index":1295,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["can't",{"_index":1907,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["case",{"_index":485,"title":{},"body":{"classes/ConditionalFunctions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["case(condition",{"_index":346,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["cast",{"_index":3103,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["cast(value",{"_index":331,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["catch",{"_index":1019,"title":{},"body":{"classes/Field.html":{}}}],["catcherror",{"_index":1866,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["catcherror((error",{"_index":1893,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["caught",{"_index":130,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ceiling",{"_index":189,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["ceiling(value",{"_index":192,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["ch",{"_index":2032,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ch.findchildparser(predicate",{"_index":2034,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["change",{"_index":3213,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["changed",{"_index":3135,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["changeset",{"_index":1459,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changeset_prefix",{"_index":1344,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetboundary",{"_index":1457,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetendline",{"_index":1488,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetid",{"_index":1458,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetresponses",{"_index":1486,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["channel",{"_index":1388,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["charge",{"_index":3271,"title":{},"body":{"license.html":{}}}],["check",{"_index":1024,"title":{},"body":{"classes/Field.html":{},"classes/ODataPathSegments.html":{},"index.html":{}}}],["checkversion(document",{"_index":1023,"title":{},"body":{"classes/Field.html":{}}}],["childparser",{"_index":2036,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["childparser((c",{"_index":1962,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["children",{"_index":447,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["children.push(exp",{"_index":3039,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["children.push(new",{"_index":3037,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["children[index",{"_index":477,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["chunks",{"_index":1478,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["city",{"_index":3208,"title":{},"body":{"index.html":{}}}],["claim",{"_index":3316,"title":{},"body":{"license.html":{}}}],["class",{"_index":184,"title":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["classes",{"_index":186,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"overview.html":{}}}],["clean",{"_index":1443,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["clear",{"_index":2391,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["clearkey",{"_index":2371,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["clearpaging",{"_index":2502,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["clearparameters",{"_index":2376,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["client",{"_index":1283,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{}}}],["clone",{"_index":213,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["close",{"_index":1461,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["code",{"_index":1376,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["collection",{"_index":159,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["collectionfunctions",{"_index":281,"title":{"classes/CollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["complete.html#_toc406398229",{"_index":1242,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398230",{"_index":1243,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398236",{"_index":1246,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398237",{"_index":1247,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398238",{"_index":1244,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398240",{"_index":1245,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complextype",{"_index":912,"title":{},"body":{"classes/Field.html":{}}}],["complextypes",{"_index":692,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["compodoc",{"_index":3252,"title":{},"body":{"index.html":{}}}],["component",{"_index":3178,"title":{},"body":{"index.html":{}}}],["composable",{"_index":177,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["composite",{"_index":1901,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["compute",{"_index":66,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["compute(opts",{"_index":456,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["computed",{"_index":1915,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["computeexpression",{"_index":439,"title":{"classes/ComputeExpression.html":{}},"body":{"classes/ComputeExpression.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["computeexpression.compute",{"_index":2474,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["computeexpression.e",{"_index":473,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["computeexpression.s",{"_index":472,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["concat",{"_index":3083,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["concat(field",{"_index":264,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["condition",{"_index":348,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["conditionalfunctions",{"_index":345,"title":{"classes/ConditionalFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["conditions",{"_index":3293,"title":{},"body":{"license.html":{}}}],["config",{"_index":1090,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["config.accept",{"_index":1264,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.alias",{"_index":2886,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.annotations",{"_index":1110,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["config.base",{"_index":2013,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.bodyqueryoptions",{"_index":1262,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.bound",{"_index":1667,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.composable",{"_index":1669,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.configure",{"_index":2920,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.containers",{"_index":2897,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.deleterefby",{"_index":1270,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.entities",{"_index":2891,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.entitysetpath",{"_index":1665,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.entitysets",{"_index":1797,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["config.entitytype",{"_index":1820,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.enums",{"_index":2888,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.etag",{"_index":1266,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.fetchpolicy",{"_index":1260,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.fields",{"_index":2022,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.flags",{"_index":2139,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.headers",{"_index":1254,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.keys.map((key",{"_index":2018,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.members",{"_index":2125,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.name",{"_index":1725,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["config.namespace",{"_index":2885,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.open",{"_index":2015,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["config.params",{"_index":1252,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.prefer",{"_index":1268,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.return",{"_index":1728,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["config.service",{"_index":1822,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.stringasenum",{"_index":1250,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["config.stripmetadata",{"_index":1258,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.version",{"_index":1248,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["config.withcredentials",{"_index":1256,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["configs",{"_index":121,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"modules/ODataModule.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["configure",{"_index":1605,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["configure(undefined",{"_index":1621,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSchema.html":{}}}],["connection",{"_index":3325,"title":{},"body":{"license.html":{}}}],["connector",{"_index":824,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["console.log",{"_index":3212,"title":{},"body":{"index.html":{}}}],["console.log(\"airport",{"_index":3205,"title":{},"body":{"index.html":{}}}],["console.log(\"airports",{"_index":3196,"title":{},"body":{"index.html":{}}}],["console.log(\"all",{"_index":3199,"title":{},"body":{"index.html":{}}}],["const",{"_index":112,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["constants",{"_index":888,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["constructor",{"_index":248,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(action",{"_index":652,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["constructor(annot",{"_index":1105,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["constructor(annotationlist",{"_index":515,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["constructor(client",{"_index":1279,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["constructor(config",{"_index":1088,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["constructor(field",{"_index":851,"title":{},"body":{"classes/ExpandField.html":{},"classes/OrderByField.html":{}}}],["constructor(group",{"_index":1055,"title":{},"body":{"classes/Grouping.html":{}}}],["constructor(helper",{"_index":1133,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["constructor(init",{"_index":2576,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["constructor(name",{"_index":492,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{}}}],["constructor(namespace",{"_index":613,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlSchema.html":{}}}],["constructor(o",{"_index":2395,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["constructor(op",{"_index":1061,"title":{},"body":{"classes/Lambda.html":{},"classes/Operator.html":{}}}],["constructor(options",{"_index":2522,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["constructor(path",{"_index":649,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["constructor(private",{"_index":2361,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["constructor(property",{"_index":677,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["constructor(propertyrefs",{"_index":628,"title":{},"body":{"classes/CsdlKey.html":{}}}],["constructor(protected",{"_index":396,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(public",{"_index":216,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(request",{"_index":1323,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["constructor(segment",{"_index":3058,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["constructor(segments",{"_index":2265,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{}}}],["constructor(target",{"_index":529,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["constructor(term",{"_index":526,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["constructor(termnamespace",{"_index":623,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["constructor(type",{"_index":680,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["constructor(undefined",{"_index":448,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/ODataCache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["constructor(uri",{"_index":672,"title":{},"body":{"classes/CsdlReference.html":{}}}],["constructor(value",{"_index":3052,"title":{},"body":{"classes/SearchTerm.html":{}}}],["constructor(xml",{"_index":979,"title":{},"body":{"classes/Field.html":{}}}],["constructors",{"_index":233,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructors.foreach((basector",{"_index":234,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["container",{"_index":712,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataSchema.html":{}}}],["container.entitysets",{"_index":2902,"title":{},"body":{"classes/ODataSchema.html":{}}}],["container.ts",{"_index":561,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:10",{"_index":574,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:11",{"_index":572,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:12",{"_index":569,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:5",{"_index":568,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:7",{"_index":573,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:8",{"_index":571,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:9",{"_index":570,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["containers",{"_index":148,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contains",{"_index":3084,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["contains(field",{"_index":266,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["containstarget",{"_index":633,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["content",{"_index":1330,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["content.join(newline",{"_index":1392,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_id",{"_index":1345,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_transfer_encoding",{"_index":1346,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_type",{"_index":1347,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["contentid",{"_index":1487,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["contents",{"_index":3159,"title":{},"body":{"index.html":{}}}],["contenttype",{"_index":1479,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["contenttype.indexof(application_json",{"_index":2766,"title":{},"body":{"classes/ODataResponse.html":{}}}],["context",{"_index":1134,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["context.entityset",{"_index":1555,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.entityset}(${context.key",{"_index":1558,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.key",{"_index":1557,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.type",{"_index":1559,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["continueonerror",{"_index":89,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contract",{"_index":3320,"title":{},"body":{"license.html":{}}}],["conventions.html#sec_parameteraliases",{"_index":2462,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptioncompute",{"_index":2472,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptionformat",{"_index":2477,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["copies",{"_index":3288,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3274,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3262,"title":{},"body":{"license.html":{}}}],["count",{"_index":61,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["countdistinct",{"_index":3142,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["countryregion",{"_index":3209,"title":{},"body":{"index.html":{}}}],["create",{"_index":1648,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{}}}],["create(attrs",{"_index":1840,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["create/update/patch",{"_index":1904,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["createsettings",{"_index":2242,"title":{},"body":{"modules/ODataModule.html":{}}}],["createsettings(configs",{"_index":2236,"title":{},"body":{"modules/ODataModule.html":{}}}],["creating",{"_index":1653,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["creation",{"_index":126,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["credentials",{"_index":1222,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["csdl",{"_index":551,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdl/csdl",{"_index":884,"title":{},"body":{"classes/Field.html":{}}}],["csdlaction",{"_index":487,"title":{"classes/CsdlAction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlactionimport",{"_index":506,"title":{"classes/CsdlActionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlannotable",{"_index":512,"title":{"classes/CsdlAnnotable.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotable:2",{"_index":533,"title":{},"body":{"classes/CsdlAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotation",{"_index":516,"title":{"classes/CsdlAnnotation.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["csdlannotations",{"_index":519,"title":{"classes/CsdlAnnotations.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdlcomplextype",{"_index":534,"title":{"classes/CsdlComplexType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlentitycontainer",{"_index":559,"title":{"classes/CsdlEntityContainer.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlentityset",{"_index":566,"title":{"classes/CsdlEntitySet.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["csdlentitytype",{"_index":554,"title":{"classes/CsdlEntityType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlenummember",{"_index":588,"title":{"classes/CsdlEnumMember.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["csdlenumtype",{"_index":591,"title":{"classes/CsdlEnumType.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunction",{"_index":501,"title":{"classes/CsdlFunction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunctionimport",{"_index":503,"title":{"classes/CsdlFunctionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlinclude",{"_index":611,"title":{"classes/CsdlInclude.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlincludeannotations",{"_index":620,"title":{"classes/CsdlIncludeAnnotations.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlkey",{"_index":555,"title":{"classes/CsdlKey.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationproperty",{"_index":543,"title":{"classes/CsdlNavigationProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationpropertybinding",{"_index":578,"title":{"classes/CsdlNavigationPropertyBinding.html":{}},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlondelete",{"_index":638,"title":{"classes/CsdlOnDelete.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlparameter",{"_index":494,"title":{"classes/CsdlParameter.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlproperty",{"_index":542,"title":{"classes/CsdlProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlpropertyref",{"_index":558,"title":{"classes/CsdlPropertyRef.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlreference",{"_index":617,"title":{"classes/CsdlReference.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlreferentialconstraint",{"_index":637,"title":{"classes/CsdlReferentialConstraint.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlreturntype",{"_index":493,"title":{"classes/CsdlReturnType.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlschema",{"_index":688,"title":{"classes/CsdlSchema.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlsingleton",{"_index":567,"title":{"classes/CsdlSingleton.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlstructuralproperty",{"_index":632,"title":{"classes/CsdlStructuralProperty.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["csdlstructuralproperty:3",{"_index":644,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:4",{"_index":646,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:5",{"_index":645,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuredtype",{"_index":537,"title":{"classes/CsdlStructuredType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["csdlstructuredtype:10",{"_index":548,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:11",{"_index":546,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:12",{"_index":549,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:13",{"_index":545,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:8",{"_index":547,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:9",{"_index":550,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlterm",{"_index":522,"title":{"classes/CsdlTerm.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdltypedefinition",{"_index":698,"title":{"classes/CsdlTypeDefinition.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["ctx",{"_index":1430,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ctx(this",{"_index":1437,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["current",{"_index":458,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["custom",{"_index":1926,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["customheaders",{"_index":2643,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[accept",{"_index":2662,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_match_header",{"_index":2647,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_none_match_header",{"_index":2650,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[prefer",{"_index":2678,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customizations",{"_index":3247,"title":{},"body":{"index.html":{}}}],["customize",{"_index":1201,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["customparams",{"_index":2682,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$expand",{"_index":2685,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$select",{"_index":2683,"title":{},"body":{"classes/ODataRequest.html":{}}}],["damages",{"_index":3317,"title":{},"body":{"license.html":{}}}],["data",{"_index":1132,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["data(data",{"_index":1141,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["dataservices",{"_index":1000,"title":{},"body":{"classes/Field.html":{}}}],["date",{"_index":127,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["date(value",{"_index":299,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["date.now",{"_index":1561,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["dateandtimefunctions",{"_index":298,"title":{"classes/DateAndTimeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["day",{"_index":748,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["day(value",{"_index":301,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["deal",{"_index":3278,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":3326,"title":{},"body":{"license.html":{}}}],["deep",{"_index":3246,"title":{},"body":{"index.html":{}}}],["def",{"_index":2407,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["default",{"_index":125,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/Field-1.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["default_fetch_policy",{"_index":1225,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["default_strip_metadata",{"_index":1226,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["default_timeout",{"_index":1544,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["default_version",{"_index":1227,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["defaults",{"_index":2067,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["defaultvalue",{"_index":524,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["defined",{"_index":193,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["definition",{"_index":711,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"index.html":{}}}],["definition.ts",{"_index":738,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:10",{"_index":747,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:11",{"_index":745,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:3",{"_index":740,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:5",{"_index":742,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:6",{"_index":746,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:7",{"_index":741,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:8",{"_index":743,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:9",{"_index":744,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["delete",{"_index":1473,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/SegmentHandler.html":{}}}],["delete'].indexof(this._method",{"_index":2646,"title":{},"body":{"classes/ODataRequest.html":{}}}],["deleterefby",{"_index":15,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deleting",{"_index":3149,"title":{},"body":{"index.html":{}}}],["delivered",{"_index":1387,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deltalink",{"_index":1189,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["demo",{"_index":3154,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3108,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deps",{"_index":2243,"title":{},"body":{"modules/ODataModule.html":{}}}],["derivedctor.prototype",{"_index":237,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["desc",{"_index":2988,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["descending",{"_index":2973,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["descending(field",{"_index":2979,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["description",{"_index":1098,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{}}}],["deseialize",{"_index":1625,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialization",{"_index":1627,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialize",{"_index":101,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deserialize(value",{"_index":1623,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["deserialized",{"_index":1628,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["destroy",{"_index":1825,"title":{},"body":{"classes/ODataEntitySetService.html":{},"miscellaneous/typealiases.html":{}}}],["destroy(key",{"_index":1844,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["diego",{"_index":3264,"title":{},"body":{"license.html":{}}}],["directive",{"_index":2855,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["directive.startswith(max_age",{"_index":2849,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["distribute",{"_index":3284,"title":{},"body":{"license.html":{}}}],["div",{"_index":420,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["div(left",{"_index":390,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["document",{"_index":982,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement",{"_index":993,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.attributes",{"_index":990,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.getelementsbytagname",{"_index":1002,"title":{},"body":{"classes/Field.html":{}}}],["documentation",{"_index":3162,"title":{},"body":{"index.html":{},"license.html":{}}}],["domparser",{"_index":981,"title":{},"body":{"classes/Field.html":{}}}],["down",{"_index":2437,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["duration",{"_index":3138,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["dynamic",{"_index":3116,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":445,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEnumType.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"index.html":{}}}],["e().eq(\"emails",{"_index":3229,"title":{},"body":{"index.html":{}}}],["e(connector",{"_index":3018,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["e.istypeof(type",{"_index":2904,"title":{},"body":{"classes/ODataSchema.html":{}}}],["editlink",{"_index":1166,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["edm.binary",{"_index":1980,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.boolean'].indexof(this.type",{"_index":2002,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.byte",{"_index":1996,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.date",{"_index":1976,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.datetimeoffset",{"_index":1978,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.decimal",{"_index":2000,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.double'].indexof(this.type",{"_index":2001,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.guid",{"_index":1979,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.int16",{"_index":1995,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.int32",{"_index":1994,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.int64",{"_index":1993,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.sbyte'].indexof",{"_index":1997,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.string",{"_index":1975,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edm.timeofday",{"_index":1977,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["edmx:dataservices",{"_index":897,"title":{},"body":{"classes/Field.html":{}}}],["edmx:edmx",{"_index":895,"title":{},"body":{"classes/Field.html":{}}}],["edmx:include",{"_index":901,"title":{},"body":{"classes/Field.html":{}}}],["edmx:includeannotations",{"_index":903,"title":{},"body":{"classes/Field.html":{}}}],["edmx:reference",{"_index":899,"title":{},"body":{"classes/Field.html":{}}}],["element",{"_index":1001,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["empty",{"_index":2392,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["encode",{"_index":107,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encode(params",{"_index":1695,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["encode(value",{"_index":111,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encoded",{"_index":1631,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["encoding",{"_index":1630,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["endline",{"_index":1482,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["endregion",{"_index":181,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["endswith",{"_index":3085,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["endswith(field",{"_index":268,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["entities",{"_index":144,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["entities'].indexof(this._responsetype",{"_index":2697,"title":{},"body":{"classes/ODataRequest.html":{}}}],["entity",{"_index":560,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["entity(\"cyyz",{"_index":3202,"title":{},"body":{"index.html":{}}}],["entity(key",{"_index":1806,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{}}}],["entitycontainer",{"_index":693,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["entitycontainerconfig",{"_index":149,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityContainer.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entityid",{"_index":2794,"title":{},"body":{"classes/ODataResponse.html":{}}}],["entitykey",{"_index":1807,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["entityset",{"_index":55,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["entityset(entitysetname",{"_index":2942,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetconfig",{"_index":151,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySet.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entitysetname",{"_index":2944,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetpath",{"_index":175,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysets",{"_index":150,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysetschema",{"_index":1833,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["entitytype",{"_index":179,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{},"classes/ODataEntitySet.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitytypes",{"_index":694,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["entries",{"_index":1495,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry",{"_index":1530,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry.lastread",{"_index":1582,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.payload",{"_index":1569,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.tags.indexof(t",{"_index":1580,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["enu.configure",{"_index":2918,"title":{},"body":{"classes/ODataSchema.html":{}}}],["enum",{"_index":51,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enumerations",{"_index":3124,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":142,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enums.toname(this.members",{"_index":2150,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tonames(this.members",{"_index":2146,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalue(this.members",{"_index":2145,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalues(this.members",{"_index":2143,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enumtype",{"_index":909,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["enumtypeconfig",{"_index":143,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypefieldconfig",{"_index":152,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypes",{"_index":695,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["eq",{"_index":1069,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["eq(left",{"_index":361,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["errata02",{"_index":1238,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["error",{"_index":129,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["error(\"batch",{"_index":1423,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error(\"save",{"_index":1906,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error('batch",{"_index":1419,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('destroy",{"_index":1888,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error('field",{"_index":1721,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["error('modify",{"_index":1886,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error('no",{"_index":1591,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["error('odata",{"_index":1026,"title":{},"body":{"classes/Field.html":{}}}],["error('unable",{"_index":1021,"title":{},"body":{"classes/Field.html":{}}}],["error('update",{"_index":1883,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["error(`no",{"_index":2349,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["error.status",{"_index":1894,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["errorhandler",{"_index":128,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["errors",{"_index":1951,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`maxlength",{"_index":1958,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors.push(`required",{"_index":1956,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errors[field.name",{"_index":2100,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["errs",{"_index":2098,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["escape",{"_index":209,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["etag",{"_index":16,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["etag_headers",{"_index":2745,"title":{},"body":{"classes/ODataResponse.html":{}}}],["event",{"_index":3312,"title":{},"body":{"license.html":{}}}],["events",{"_index":1422,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["examples",{"_index":3155,"title":{},"body":{"index.html":{}}}],["exec",{"_index":1451,"title":{},"body":{"classes/ODataBatchRequest.html":{},"index.html":{}}}],["execute",{"_index":1432,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["existing",{"_index":1836,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["exp",{"_index":2527,"title":{},"body":{"classes/ODataQueryOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.children",{"_index":3048,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.connector",{"_index":3049,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["exp.length",{"_index":3036,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["expand",{"_index":65,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expand(opts",{"_index":781,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["expandexpression",{"_index":774,"title":{"classes/ExpandExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["expandexpression.e",{"_index":844,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandexpression.expand",{"_index":2469,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expandexpression.expand(opts",{"_index":822,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandexpression.s",{"_index":843,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield",{"_index":784,"title":{"classes/ExpandField.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield(field",{"_index":847,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandfield(this.field.clone",{"_index":818,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expandobject",{"_index":3335,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandoptions",{"_index":3336,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandtype",{"_index":3337,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expand}(${object.keys(params",{"_index":812,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["expired",{"_index":1571,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["exponentialdecimals",{"_index":80,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["exponentialdecimals=${this.api.options.accept?.exponentialdecimals",{"_index":2660,"title":{},"body":{"classes/ODataRequest.html":{}}}],["export",{"_index":36,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["express",{"_index":3303,"title":{},"body":{"license.html":{}}}],["expression",{"_index":441,"title":{"classes/Expression.html":{}},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["expression(name",{"_index":2526,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expression).render",{"_index":808,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["expression:125",{"_index":3025,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:140",{"_index":3016,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:148",{"_index":3029,"title":{},"body":{"classes/SearchExpression.html":{}}}],["expression:194",{"_index":786,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:208",{"_index":779,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["expression:30",{"_index":466,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:34",{"_index":467,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:38",{"_index":468,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:49",{"_index":464,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:5",{"_index":451,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["expression:52",{"_index":3072,"title":{},"body":{"classes/SelectExpression.html":{}}}],["expression:66",{"_index":455,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["expression:74",{"_index":2983,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expression:89",{"_index":2978,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["expressions",{"_index":2424,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"index.html":{}}}],["expressions/expand",{"_index":2425,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["expressions/select",{"_index":2426,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["extend",{"_index":563,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["extends",{"_index":8,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["extra",{"_index":1211,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["f",{"_index":483,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{}}}],["f.configure",{"_index":2051,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.default",{"_index":2069,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.deserialize(value[f.name",{"_index":2043,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.isstructuredtype",{"_index":2070,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.name",{"_index":2040,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["f.navigation",{"_index":2080,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.nullable",{"_index":2094,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.serialize((value",{"_index":2046,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.structured().defaults",{"_index":2072,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.tojsonschema(expand",{"_index":2087,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f.value",{"_index":2128,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["f]{12",{"_index":1989,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["f]{12}$/.test",{"_index":2304,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["f]{4",{"_index":1988,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["f]{8",{"_index":1987,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["fa",{"_index":1986,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["factory",{"_index":1038,"title":{},"body":{"classes/Field-1.html":{},"classes/ODataBatchRequest.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["factory(api",{"_index":1405,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["factory(name",{"_index":218,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["false",{"_index":252,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["features",{"_index":2767,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["features.split(';').foreach((o",{"_index":2835,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["fetch",{"_index":1208,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"index.html":{}}}],["fetchall",{"_index":1826,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["fetchall(options",{"_index":1850,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchmany",{"_index":1827,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchmany(options",{"_index":1852,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchnavigationproperty",{"_index":1277,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchnavigationproperty(resource",{"_index":1302,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchone",{"_index":1828,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchone(key",{"_index":1854,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate",{"_index":1829,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate(key",{"_index":1856,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchpolicy",{"_index":17,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["field",{"_index":98,"title":{"classes/Field.html":{},"classes/Field-1.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["field(field",{"_index":783,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/SelectExpression.html":{}}}],["field(name",{"_index":461,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["field(odatametadata.attribute_alias",{"_index":1009,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_namespace",{"_index":1008,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_uri",{"_index":995,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_version",{"_index":988,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_action",{"_index":1014,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotation",{"_index":999,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotations",{"_index":1018,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_complex_type",{"_index":1011,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_container",{"_index":1015,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_type",{"_index":1012,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_enum_type",{"_index":1010,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_function",{"_index":1013,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include",{"_index":996,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include_annotations",{"_index":998,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_term",{"_index":1017,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_type_definition",{"_index":1016,"title":{},"body":{"classes/Field.html":{}}}],["field.default",{"_index":1939,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.encode(v",{"_index":2064,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.factory",{"_index":471,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["field.factory(name",{"_index":226,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["field.isstructuredtype",{"_index":2060,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.maxlength",{"_index":1941,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.name",{"_index":2063,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.nullable",{"_index":1942,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.precision",{"_index":1947,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.referentials",{"_index":1936,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.scale",{"_index":1949,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.structured",{"_index":2061,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.type",{"_index":1934,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.validate(value",{"_index":2099,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["field.value",{"_index":2137,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fieldnames",{"_index":1034,"title":{},"body":{"classes/Field.html":{}}}],["fields",{"_index":155,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["fields.reduce",{"_index":2042,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fields.reduce((acc",{"_index":2071,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["fieldtype",{"_index":881,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["fieldtype.attribute",{"_index":989,"title":{},"body":{"classes/Field.html":{}}}],["fieldtype.tag",{"_index":997,"title":{},"body":{"classes/Field.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["files",{"_index":3277,"title":{},"body":{"license.html":{}}}],["filter",{"_index":67,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["filter((f",{"_index":2091,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["filter((k",{"_index":2558,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["filter((key",{"_index":803,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["filter((p",{"_index":1735,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["filter((r",{"_index":1599,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["filter((t",{"_index":2318,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["filter(opts",{"_index":855,"title":{},"body":{"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["filterconnector",{"_index":788,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"miscellaneous/typealiases.html":{}}}],["filterexpression",{"_index":789,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["filterexpression.filter",{"_index":2485,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["filterexpression.filter(opts",{"_index":825,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["filtertype",{"_index":3339,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["find",{"_index":1095,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["find((p",{"_index":2769,"title":{},"body":{"classes/ODataResponse.html":{}}}],["find(predicate",{"_index":2271,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["findannotation",{"_index":1087,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findannotation(predicate",{"_index":1099,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["findcallablefortype",{"_index":2857,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findcallablefortype(type",{"_index":2871,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findchildparser",{"_index":2030,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["findentitysetfortype",{"_index":2858,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findentitysetfortype(type",{"_index":2874,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype",{"_index":2859,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype(type",{"_index":2876,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findfieldbyname",{"_index":2103,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldbyname(name",{"_index":2113,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldbyvalue",{"_index":2104,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldbyvalue(value",{"_index":2114,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldsbyvalue",{"_index":2105,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldsbyvalue(value",{"_index":2115,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findoptionsfortype",{"_index":2916,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findstructuredtypefortype",{"_index":2860,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findstructuredtypefortype(type",{"_index":2878,"title":{},"body":{"classes/ODataSchema.html":{}}}],["first",{"_index":42,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["first(undefined",{"_index":2274,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["fitness",{"_index":3308,"title":{},"body":{"license.html":{}}}],["flag",{"_index":2117,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["flags",{"_index":153,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["floor",{"_index":190,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["floor(value",{"_index":196,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["fluent",{"_index":3146,"title":{},"body":{"index.html":{}}}],["flush",{"_index":1499,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["following",{"_index":3292,"title":{},"body":{"license.html":{}}}],["forget",{"_index":1500,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forget(undefined",{"_index":1516,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forkjoin",{"_index":3234,"title":{},"body":{"index.html":{}}}],["format",{"_index":74,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["format(opts",{"_index":2478,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["format/v4.01/odata",{"_index":1233,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["forroot",{"_index":2224,"title":{},"body":{"modules/ODataModule.html":{}}}],["forroot(configs",{"_index":2225,"title":{},"body":{"modules/ODataModule.html":{}}}],["found",{"_index":2350,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["fractionalseconds",{"_index":749,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["fractionalseconds(value",{"_index":303,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["free",{"_index":3270,"title":{},"body":{"license.html":{}}}],["friends",{"_index":3226,"title":{},"body":{"index.html":{}}}],["fromhttpresponse",{"_index":2715,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromhttpresponse(req",{"_index":2727,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson",{"_index":2716,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson(req",{"_index":2729,"title":{},"body":{"classes/ODataResponse.html":{}}}],["full",{"_index":45,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["func",{"_index":2297,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["function",{"_index":62,"title":{"classes/Function.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["function('case",{"_index":347,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('cast",{"_index":332,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('ceiling",{"_index":327,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('concat",{"_index":265,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('contains",{"_index":267,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('date",{"_index":300,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('day",{"_index":302,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('endswith",{"_index":269,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('floor",{"_index":328,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('fractionalseconds",{"_index":304,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.distance",{"_index":338,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.intersects",{"_index":341,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('geo.length",{"_index":343,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubsequence",{"_index":287,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubset",{"_index":284,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hour",{"_index":306,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('indexof",{"_index":271,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('isof",{"_index":334,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('length",{"_index":273,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('matchespattern",{"_index":291,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('maxdatetime",{"_index":308,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('mindatetime",{"_index":310,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('minute",{"_index":312,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('month",{"_index":314,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('now",{"_index":316,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('round",{"_index":329,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('second",{"_index":318,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('startswith",{"_index":275,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('substring",{"_index":280,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('time",{"_index":320,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('tolower",{"_index":293,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totaloffsetminutes",{"_index":322,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totalseconds",{"_index":324,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('toupper",{"_index":295,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('trim",{"_index":297,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('year",{"_index":326,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function(name",{"_index":1182,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["functionimport",{"_index":930,"title":{},"body":{"classes/Field.html":{}}}],["functionimports",{"_index":564,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["functionname",{"_index":504,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["functions",{"_index":415,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["furnished",{"_index":3291,"title":{},"body":{"license.html":{}}}],["ge",{"_index":1070,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ge(left",{"_index":367,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["generate",{"_index":3171,"title":{},"body":{"index.html":{}}}],["generated",{"_index":3250,"title":{},"body":{"index.html":{}}}],["generator",{"_index":3153,"title":{},"body":{"index.html":{}}}],["geodistance",{"_index":1049,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geodistance(value",{"_index":336,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geofunctions",{"_index":335,"title":{"classes/GeoFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geointersects",{"_index":1050,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geointersects(value",{"_index":339,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["geolength",{"_index":1051,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["geolength(line",{"_index":342,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["get'].indexof(this._method",{"_index":2649,"title":{},"body":{"classes/ODataRequest.html":{}}}],["get(key",{"_index":118,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["get(name",{"_index":1518,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{}}}],["get(path",{"_index":2406,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["get(target",{"_index":221,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["getannotations",{"_index":2740,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getapi",{"_index":1307,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataSchemaElement.html":{}}}],["getbody",{"_index":2604,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcontext",{"_index":2738,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getcount",{"_index":1753,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getdeltalink",{"_index":1757,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["geteditlink",{"_index":1782,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getentityset",{"_index":1143,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["getentitysets",{"_index":2882,"title":{},"body":{"classes/ODataSchema.html":{}}}],["getentitysetschema",{"_index":1864,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["getetag",{"_index":1775,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getfunctions",{"_index":1765,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getheaders",{"_index":2608,"title":{},"body":{"classes/ODataRequest.html":{}}}],["gethelper",{"_index":1223,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["getid",{"_index":1773,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediacontenttype",{"_index":1788,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaeditlink",{"_index":1786,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaetag",{"_index":1777,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediareadlink",{"_index":1784,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmetadataetag",{"_index":1779,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmethod",{"_index":2602,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getname",{"_index":2422,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/SegmentHandler.html":{}}}],["getnextlink",{"_index":1755,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getobjects",{"_index":1032,"title":{},"body":{"classes/Field.html":{}}}],["getoptions",{"_index":2734,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getparams",{"_index":2606,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpath",{"_index":2600,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpathwithparams",{"_index":2610,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpayload",{"_index":2736,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getproperties",{"_index":1790,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getreadlink",{"_index":1751,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getresponse",{"_index":1501,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["getresponse(req",{"_index":1520,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["getresponsetype",{"_index":2598,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getsingletonschema",{"_index":2961,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["getskip",{"_index":1761,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getskiptoken",{"_index":1763,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getstructuredtypeschema",{"_index":1812,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["getting",{"_index":3143,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettop",{"_index":1759,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["gettype",{"_index":1145,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["geturl",{"_index":2612,"title":{},"body":{"classes/ODataRequest.html":{}}}],["geturlwithparams",{"_index":2614,"title":{},"body":{"classes/ODataRequest.html":{}}}],["given",{"_index":1626,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["granted",{"_index":3269,"title":{},"body":{"license.html":{}}}],["group",{"_index":397,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["groupby",{"_index":3340,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grouping",{"_index":395,"title":{"classes/Grouping.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["grouping(exp",{"_index":3038,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["grouping(node",{"_index":3043,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["grouping(objects.clone(this.group",{"_index":400,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["gt",{"_index":1071,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["gt(left",{"_index":365,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["guid",{"_index":2303,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["haaster",{"_index":3266,"title":{},"body":{"license.html":{}}}],["hack",{"_index":2302,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["handle",{"_index":2725,"title":{},"body":{"classes/ODataResponse.html":{}}}],["handlefetch",{"_index":1502,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlefetch(req",{"_index":1522,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate",{"_index":1503,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate(req",{"_index":1524,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handler",{"_index":840,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataQueryOptions.html":{}}}],["handlerequest",{"_index":1504,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlerequest(req",{"_index":1526,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handleresponse",{"_index":1477,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["handlers",{"_index":2292,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["has(left",{"_index":379,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["has(name",{"_index":2529,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["has(path",{"_index":2409,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["has(target",{"_index":230,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["hashmap",{"_index":2441,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["haskey",{"_index":2369,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasparameters",{"_index":2374,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasreferentials",{"_index":2009,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["hasstream",{"_index":556,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["hassubsequence",{"_index":435,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubsequence(s1",{"_index":286,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["hassubset",{"_index":436,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubset(s1",{"_index":282,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["header",{"_index":1202,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["headers",{"_index":18,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["headers.getall(key",{"_index":1374,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["helper",{"_index":33,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["here",{"_index":3254,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":3268,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3314,"title":{},"body":{"license.html":{}}}],["hour",{"_index":750,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["hour(value",{"_index":305,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["htmlcollection",{"_index":1035,"title":{},"body":{"classes/Field.html":{}}}],["http",{"_index":1221,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["http.boundarydelimiter(contenttype",{"_index":1481,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.boundaryend(batchboundary",{"_index":1483,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders",{"_index":1444,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["http.mergehttpheaders(this._headers",{"_index":2704,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams",{"_index":2688,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.parseresponsestatus(chunk[0",{"_index":1491,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.resolveheaderkey(this.headers",{"_index":2772,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.splithttpparams",{"_index":2700,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.withouthttpparams(params",{"_index":2692,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http11",{"_index":1348,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http://docs.oasis",{"_index":1230,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["http://json",{"_index":2075,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["httpclientmodule",{"_index":2228,"title":{},"body":{"modules/ODataModule.html":{}}}],["httperrorresponse",{"_index":1334,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{}}}],["httpheaders",{"_index":1335,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["httpheaders(json.headers",{"_index":2754,"title":{},"body":{"classes/ODataResponse.html":{}}}],["httpparams",{"_index":2582,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httpresponse",{"_index":1336,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["https://diegomvh.github.io/angular",{"_index":3255,"title":{},"body":{"index.html":{}}}],["https://docs.oasis",{"_index":2458,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["https://github.com/diegomvh/angular",{"_index":3258,"title":{},"body":{"index.html":{}}}],["https://github.com/odata/webapi/issues/1647",{"_index":92,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://github.com/odata/webapi/issues/1974",{"_index":91,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["https://json",{"_index":1971,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["https://services.odata.org/v4/(s(4m0tuxtnhcfctl4gzem3gr10))/trippinservicerw",{"_index":3169,"title":{},"body":{"index.html":{}}}],["https://www.odata.org/getting",{"_index":1396,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["id",{"_index":28,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754",{"_index":2653,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ieee754compatible",{"_index":81,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754compatible=${this.api.options.accept?.ieee754compatible",{"_index":2656,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_match_header",{"_index":2616,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_none_match_header",{"_index":2617,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ifmatch",{"_index":83,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ifnonematch",{"_index":84,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["implements",{"_index":214,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["implied",{"_index":3304,"title":{},"body":{"license.html":{}}}],["import",{"_index":31,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["imports",{"_index":2238,"title":{},"body":{"modules/ODataModule.html":{},"index.html":{}}}],["in(left",{"_index":381,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["includeannotations",{"_index":90,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["included",{"_index":3297,"title":{},"body":{"license.html":{}}}],["includeinservicedocument",{"_index":505,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["includes",{"_index":619,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["including",{"_index":1659,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{},"license.html":{}}}],["incorporates",{"_index":3240,"title":{},"body":{"index.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indexof",{"_index":3086,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["indexof(field",{"_index":270,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["indexof(s.name",{"_index":2341,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["indexof(this.type",{"_index":1981,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["indicating",{"_index":1639,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["inherited",{"_index":450,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{}}}],["init",{"_index":2578,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.api",{"_index":2623,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.body",{"_index":2631,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.bodyqueryoptions",{"_index":2637,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.etag",{"_index":2644,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.fetchpolicy",{"_index":2635,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.headers",{"_index":2681,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.method",{"_index":2620,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.observe",{"_index":2627,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.params",{"_index":2690,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.reportprogress",{"_index":2625,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.resource",{"_index":2622,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.responsetype",{"_index":2629,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.withcredentials",{"_index":2633,"title":{},"body":{"classes/ODataRequest.html":{}}}],["inject",{"_index":3177,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":2938,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"injectables/ODataServiceFactory.html":{}}}],["injectables",{"_index":2939,"title":{},"body":{"injectables/ODataServiceFactory.html":{},"overview.html":{}}}],["inside",{"_index":1096,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["install",{"_index":3163,"title":{},"body":{"index.html":{}}}],["installation",{"_index":3160,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1115,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["instead",{"_index":2934,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["int",{"_index":137,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["integer",{"_index":1999,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"overview.html":{}}}],["invalid",{"_index":3365,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["isbatch",{"_index":2571,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isbound",{"_index":490,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["iscallabletype",{"_index":2909,"title":{},"body":{"classes/ODataSchema.html":{}}}],["iscomposable",{"_index":502,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["isedmtype",{"_index":1717,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isenumtype",{"_index":1719,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["isexpired",{"_index":1505,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isexpired(entry",{"_index":1528,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isfetch",{"_index":2572,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isflags",{"_index":593,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["iskey",{"_index":2006,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["ismutate",{"_index":2573,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isnamespaceof",{"_index":2861,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isnamespaceof(type",{"_index":2880,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isof",{"_index":3104,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["isof(value",{"_index":333,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["isstructuredtype",{"_index":1722,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["issubtypeof",{"_index":1606,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(schema",{"_index":1637,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issubtypeof(type",{"_index":2026,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["issupertypeof",{"_index":1607,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["issupertypeof(schema",{"_index":1641,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["istypeof",{"_index":1608,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchemaElement.html":{}}}],["istypeof(type",{"_index":1644,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["items",{"_index":2004,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["john",{"_index":3231,"title":{},"body":{"index.html":{}}}],["john@example.com\").or(e().eq(\"username",{"_index":3230,"title":{},"body":{"index.html":{}}}],["join",{"_index":357,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["json",{"_index":1232,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"index.html":{}}}],["json.body",{"_index":2753,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.key",{"_index":2331,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parameters",{"_index":2333,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parse(this.storage.getitem(this.name",{"_index":2214,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.status",{"_index":2755,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.statustext",{"_index":2756,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.stringify(array.from(this.entries.entries",{"_index":2213,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.type",{"_index":2330,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.url",{"_index":2757,"title":{},"body":{"classes/ODataResponse.html":{}}}],["jsonschemacustom",{"_index":1921,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaexpand",{"_index":1923,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaoptions",{"_index":1924,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemarequired",{"_index":1925,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaselect",{"_index":1919,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["k",{"_index":1576,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["k.name",{"_index":2008,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["k.name.split",{"_index":2056,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["k.startswith(key",{"_index":1577,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["k.trim",{"_index":2837,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["keep",{"_index":2520,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(...names",{"_index":2556,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(names",{"_index":2531,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["key",{"_index":158,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["key(value",{"_index":2367,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["key[k.alias",{"_index":2062,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["keyof",{"_index":174,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys",{"_index":172,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys(values",{"_index":2277,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["key}=${params[key",{"_index":814,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["key}=${value",{"_index":2328,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["kind",{"_index":3302,"title":{},"body":{"license.html":{}}}],["lambda",{"_index":401,"title":{"classes/Lambda.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('all",{"_index":409,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('any",{"_index":407,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambdaoperators",{"_index":405,"title":{"classes/LambdaOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["last",{"_index":2263,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["last(undefined",{"_index":2279,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["lastread",{"_index":1545,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["le",{"_index":1072,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["le(left",{"_index":371,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left",{"_index":352,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left.split('/').pop().tolowercase()[0",{"_index":403,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op}(${alias}:${render(right",{"_index":404,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length",{"_index":278,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length(value",{"_index":272,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["levels",{"_index":75,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["levels(n",{"_index":836,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["liability",{"_index":3318,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3315,"title":{},"body":{"license.html":{}}}],["library",{"_index":3156,"title":{},"body":{"index.html":{}}}],["license",{"_index":3260,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":3280,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3305,"title":{},"body":{"license.html":{}}}],["line",{"_index":344,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lines",{"_index":1484,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["link",{"_index":1229,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["literal",{"_index":23,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":3218,"title":{},"body":{"index.html":{}}}],["location",{"_index":2776,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"index.html":{}}}],["location_header",{"_index":2744,"title":{},"body":{"classes/ODataResponse.html":{}}}],["logicaloperators",{"_index":360,"title":{"classes/LogicalOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["long_description",{"_index":1916,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["looking",{"_index":1650,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["lt",{"_index":1073,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["lt(left",{"_index":369,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["m",{"_index":1804,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["mainly",{"_index":3238,"title":{},"body":{"index.html":{}}}],["map",{"_index":1111,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"interfaces/ResponseJson.html":{}}}],["map(([key",{"_index":2327,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["map((f",{"_index":2086,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["map((key",{"_index":813,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{}}}],["map((n",{"_index":846,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["map((name",{"_index":476,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataResponse.html":{}}}],["map((s",{"_index":2316,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["map((v",{"_index":356,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["mapfields",{"_index":2106,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["mapfields(mapper",{"_index":2118,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["mapped",{"_index":2122,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["mapper",{"_index":2120,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["maps",{"_index":2121,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["match",{"_index":1103,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["match(/[&?]{1}\\$skip=(\\d",{"_index":1194,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match(/[&?]{1}\\$skiptoken=([\\d\\w\\s",{"_index":1195,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match(/[&?]{1}\\$top=(\\d",{"_index":1192,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match[1",{"_index":1196,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["matches",{"_index":1104,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["matchespattern",{"_index":3096,"title":{},"body":{"classes/StringFunctions.html":{}}}],["matchespattern(value",{"_index":289,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["matching",{"_index":183,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["max",{"_index":837,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"miscellaneous/enumerations.html":{}}}],["max_age",{"_index":2831,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["maxage",{"_index":96,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxdatetime",{"_index":751,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["maxdatetime(value",{"_index":307,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["maxlength",{"_index":157,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxpagesize",{"_index":85,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["meant",{"_index":1652,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["mediacontenttype",{"_index":1172,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaeditlink",{"_index":1170,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaetag",{"_index":1160,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediareadlink",{"_index":1168,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["member",{"_index":156,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members",{"_index":154,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members.some((member",{"_index":2158,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["merchantability",{"_index":3307,"title":{},"body":{"license.html":{}}}],["merge",{"_index":3282,"title":{},"body":{"license.html":{}}}],["message",{"_index":1377,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["metadata",{"_index":54,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["metadataetag",{"_index":1162,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["method",{"_index":1151,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{}}}],["methods",{"_index":188,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["microsoft.odata.sampleservice.models.trippin.airport",{"_index":3193,"title":{},"body":{"index.html":{}}}],["microsoft.odata.sampleservice.models.trippin.person",{"_index":3223,"title":{},"body":{"index.html":{}}}],["min",{"_index":3140,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mindatetime",{"_index":752,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["mindatetime(value",{"_index":309,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["minimal",{"_index":44,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["minute",{"_index":753,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["minute(value",{"_index":311,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["miscellaneous",{"_index":3123,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":2159,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mit",{"_index":3261,"title":{},"body":{"license.html":{}}}],["mod",{"_index":421,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mod(left",{"_index":392,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["model",{"_index":170,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["model.attach(this.entities",{"_index":1874,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entities().entity",{"_index":1873,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entity",{"_index":2964,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["modelfieldoptions",{"_index":3342,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modeloptions",{"_index":3343,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["models/collection",{"_index":1868,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["models/model",{"_index":1815,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["modify",{"_index":1830,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"license.html":{}}}],["modify(key",{"_index":1858,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["module",{"_index":2218,"title":{"modules/ODataModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":2220,"title":{"modules.html":{}},"body":{"modules/ODataModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":2227,"title":{},"body":{"modules/ODataModule.html":{}}}],["month",{"_index":754,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["month(value",{"_index":313,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["mul",{"_index":422,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mul(left",{"_index":388,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["multipart_mixed",{"_index":1349,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary",{"_index":1350,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary}${changesetboundary",{"_index":1467,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["n",{"_index":833,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["n.render",{"_index":475,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["name",{"_index":124,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["namednodemap",{"_index":1025,"title":{},"body":{"classes/Field.html":{}}}],["names",{"_index":442,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ODataCache.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["names.foreach((name",{"_index":2555,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["names.indexof(k",{"_index":2559,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["names.indexof(type",{"_index":1734,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["names.join",{"_index":2149,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["names.join(cache_key_separator",{"_index":1562,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["names.push(`${this.alias}.${this.name",{"_index":1733,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["names.push(`${this.schema.alias}.${this.name",{"_index":2936,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["namespace",{"_index":139,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["namespace/alias",{"_index":1660,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["name}/${key",{"_index":229,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["navigation",{"_index":161,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["navigationproperties",{"_index":540,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["navigationproperty",{"_index":58,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["navigationpropertybinding",{"_index":577,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["navigationpropertybindings",{"_index":714,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["ne",{"_index":1074,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ne(left",{"_index":363,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["neg",{"_index":423,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["neg(value",{"_index":394,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["negated",{"_index":3010,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["nestedexpandoptions",{"_index":3344,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["network",{"_index":43,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":171,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["newline",{"_index":1351,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["newline_regexp",{"_index":1352,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["nextlink",{"_index":1187,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["ngmodule",{"_index":2229,"title":{},"body":{"modules/ODataModule.html":{},"index.html":{}}}],["nicer",{"_index":1649,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["node",{"_index":453,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["node.children",{"_index":3042,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.connector",{"_index":3040,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.length",{"_index":3041,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["node.negated",{"_index":3044,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["none",{"_index":46,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["none_parser",{"_index":113,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["noninfringement",{"_index":3311,"title":{},"body":{"license.html":{}}}],["normalize",{"_index":240,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["normalizevalue",{"_index":205,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["normalizevalue(value",{"_index":247,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["not(exp",{"_index":3021,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["not(value",{"_index":377,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["notexp",{"_index":3047,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["notice",{"_index":3295,"title":{},"body":{"license.html":{}}}],["now",{"_index":315,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["npm",{"_index":3164,"title":{},"body":{"index.html":{}}}],["null",{"_index":241,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["nullable",{"_index":160,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["number",{"_index":86,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["number(directive.split('=')[1",{"_index":2850,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["number(match[1",{"_index":1193,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["number.isnan(maxage",{"_index":2851,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["o",{"_index":482,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["o.split",{"_index":2836,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["obj",{"_index":2445,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["object",{"_index":244,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.assign",{"_index":2085,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.assign(acc",{"_index":809,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["object.assign(acc.params",{"_index":2311,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["object.assign(customparams",{"_index":2687,"title":{},"body":{"classes/ODataRequest.html":{}}}],["object.assign(this",{"_index":1108,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["object.assign(this.etag",{"_index":1265,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["object.create(null",{"_index":239,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.defineproperty",{"_index":236,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.entries",{"_index":2021,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["object.entries(config.fields).map",{"_index":2140,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["object.entries(config.parameters",{"_index":1730,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["object.entries(params",{"_index":2326,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["object.getownpropertydescriptor(basector.prototype",{"_index":238,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.getownpropertynames(basector.prototype).foreach((name",{"_index":235,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.keys(this.values",{"_index":2557,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["object.keys(this.values).reduce",{"_index":815,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["object.keys(this.values).reduce((acc",{"_index":2543,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["objects",{"_index":200,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["objects.clone(this._segments",{"_index":2334,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["objects.clone(this.values[key",{"_index":817,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["objects.clone(v",{"_index":261,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["objects.get(obj",{"_index":2451,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.has(obj",{"_index":2455,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.merge(obj",{"_index":2456,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.resolvekey(key",{"_index":2066,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["objects.set(obj",{"_index":2449,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.unset(obj",{"_index":2452,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["obs",{"_index":1436,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["observable",{"_index":34,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["observe",{"_index":1425,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["obtaining",{"_index":3273,"title":{},"body":{"license.html":{}}}],["odata",{"_index":1203,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["odata.include",{"_index":2672,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata.mergecallableparameters(config.callables",{"_index":2894,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata.metadata",{"_index":2838,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata.streaming",{"_index":2840,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/docs",{"_index":3256,"title":{},"body":{"index.html":{}}}],["odata/src/lib/cache/cache.ts",{"_index":1494,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odata/src/lib/cache/cache.ts:108",{"_index":1515,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:113",{"_index":1529,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:117",{"_index":1527,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:128",{"_index":1523,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:15",{"_index":1509,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:16",{"_index":1508,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:163",{"_index":1525,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:23",{"_index":1521,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:24",{"_index":1534,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:26",{"_index":1536,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:38",{"_index":1538,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:50",{"_index":1511,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:62",{"_index":1514,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:66",{"_index":1532,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:81",{"_index":1519,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:89",{"_index":1517,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/memory.ts",{"_index":2174,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/memory.ts:4",{"_index":2175,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/storage.ts",{"_index":2198,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odata/src/lib/cache/storage.ts:13",{"_index":2201,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:14",{"_index":2200,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:32",{"_index":2205,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:39",{"_index":2204,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/helper.ts",{"_index":3367,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/models/options.ts",{"_index":3132,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/module.ts",{"_index":2221,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata/src/lib/module.ts:18",{"_index":2226,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata/src/lib/options.ts",{"_index":1198,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:106",{"_index":1224,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:112",{"_index":2259,"title":{},"body":{"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:113",{"_index":2258,"title":{},"body":{"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:120",{"_index":2260,"title":{},"body":{"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:22",{"_index":1219,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:26",{"_index":1215,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:30",{"_index":1216,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:34",{"_index":1207,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:38",{"_index":1213,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:42",{"_index":1210,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:46",{"_index":1220,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:50",{"_index":1204,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:55",{"_index":1200,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:61",{"_index":1206,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:71",{"_index":1214,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:89",{"_index":1199,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/resources/path/handlers.ts",{"_index":2352,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:11",{"_index":3067,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:15",{"_index":3066,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:19",{"_index":3064,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:23",{"_index":3062,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:26",{"_index":3060,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:29",{"_index":3065,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:33",{"_index":3063,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:36",{"_index":3061,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:41",{"_index":2353,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:43",{"_index":2355,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:46",{"_index":2360,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:49",{"_index":2354,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:52",{"_index":2356,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:55",{"_index":2357,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:58",{"_index":2359,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:6",{"_index":3059,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:61",{"_index":2358,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:8",{"_index":3068,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/segments.ts",{"_index":2261,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/path/segments.ts:112",{"_index":2270,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:117",{"_index":2273,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:122",{"_index":2284,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:136",{"_index":2275,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:141",{"_index":2280,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:146",{"_index":2269,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:152",{"_index":2276,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:48",{"_index":2267,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:54",{"_index":2282,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:67",{"_index":2288,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:73",{"_index":2278,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:88",{"_index":2286,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:99",{"_index":2285,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/query/builder.ts",{"_index":3137,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts",{"_index":870,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:14",{"_index":877,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:18",{"_index":875,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:28",{"_index":873,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:30",{"_index":872,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:34",{"_index":874,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:38",{"_index":876,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/base.ts:5",{"_index":871,"title":{},"body":{"classes/Expression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts",{"_index":440,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:13",{"_index":449,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:25",{"_index":460,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:29",{"_index":465,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:33",{"_index":459,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:73",{"_index":454,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/compute.ts:79",{"_index":462,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts",{"_index":775,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:102",{"_index":856,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:119",{"_index":863,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:130",{"_index":860,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:142",{"_index":866,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:146",{"_index":868,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:150",{"_index":857,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:155",{"_index":858,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:161",{"_index":776,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:17",{"_index":852,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:170",{"_index":780,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:174",{"_index":787,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:178",{"_index":782,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:214",{"_index":778,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:219",{"_index":785,"title":{},"body":{"classes/ExpandExpression.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:23",{"_index":869,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:27",{"_index":867,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:33",{"_index":861,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:69",{"_index":853,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:78",{"_index":865,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/expand.ts:90",{"_index":854,"title":{},"body":{"classes/ExpandField.html":{}}}],["odata/src/lib/resources/query/expressions/filter.ts",{"_index":3363,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts",{"_index":2971,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:12",{"_index":2998,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:19",{"_index":2997,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:31",{"_index":2996,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:36",{"_index":2974,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:45",{"_index":2981,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:49",{"_index":2984,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:5",{"_index":2995,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:53",{"_index":2982,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:69",{"_index":2975,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:8",{"_index":2999,"title":{},"body":{"classes/OrderByField.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:95",{"_index":2977,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/orderby.ts:99",{"_index":2980,"title":{},"body":{"classes/OrderByExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts",{"_index":3007,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:11",{"_index":3057,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:15",{"_index":3056,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:156",{"_index":3017,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:160",{"_index":3020,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:164",{"_index":3024,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:168",{"_index":3015,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:172",{"_index":3022,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:182",{"_index":3028,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:22",{"_index":3055,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:34",{"_index":3054,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:40",{"_index":3012,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:41",{"_index":3011,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:56",{"_index":3019,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:60",{"_index":3026,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:77",{"_index":3013,"title":{},"body":{"classes/SearchExpression.html":{}}}],["odata/src/lib/resources/query/expressions/search.ts:8",{"_index":3053,"title":{},"body":{"classes/SearchTerm.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts",{"_index":3069,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:14",{"_index":3073,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:18",{"_index":3075,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:22",{"_index":3079,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:5",{"_index":3070,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:58",{"_index":3071,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/select.ts:63",{"_index":3074,"title":{},"body":{"classes/SelectExpression.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts",{"_index":187,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:100",{"_index":1044,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:108",{"_index":1048,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:112",{"_index":1047,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:121",{"_index":1046,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:142",{"_index":1045,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:15",{"_index":3006,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:153",{"_index":3089,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:157",{"_index":3090,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:16",{"_index":3005,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:161",{"_index":3091,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:165",{"_index":3092,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:169",{"_index":3093,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:17",{"_index":3003,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:173",{"_index":3094,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:177",{"_index":3095,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:187",{"_index":438,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:190",{"_index":437,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:196",{"_index":3099,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:199",{"_index":3100,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:20",{"_index":1039,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:202",{"_index":3101,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:205",{"_index":3102,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:21",{"_index":1040,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:211",{"_index":760,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:214",{"_index":761,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:217",{"_index":762,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:220",{"_index":763,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:223",{"_index":764,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:226",{"_index":765,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:229",{"_index":766,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:23",{"_index":1041,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:232",{"_index":767,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:235",{"_index":768,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:238",{"_index":769,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:241",{"_index":770,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:244",{"_index":771,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:247",{"_index":772,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:250",{"_index":773,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:256",{"_index":194,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:259",{"_index":197,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:262",{"_index":199,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:268",{"_index":3105,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:27",{"_index":1042,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:272",{"_index":3106,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:278",{"_index":1052,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:281",{"_index":1053,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:284",{"_index":1054,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:290",{"_index":486,"title":{},"body":{"classes/ConditionalFunctions.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:295",{"_index":2966,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:302",{"_index":2970,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:306",{"_index":2969,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:315",{"_index":2968,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:350",{"_index":2967,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:360",{"_index":1075,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:363",{"_index":1082,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:366",{"_index":1077,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:369",{"_index":1076,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:372",{"_index":1081,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:375",{"_index":1080,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:386",{"_index":1083,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:389",{"_index":1078,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:392",{"_index":1079,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:398",{"_index":425,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:401",{"_index":431,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:404",{"_index":429,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:407",{"_index":427,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:410",{"_index":428,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:413",{"_index":430,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:418",{"_index":1056,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:421",{"_index":1060,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:425",{"_index":1059,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:432",{"_index":1058,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:444",{"_index":1057,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:449",{"_index":1062,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:456",{"_index":1066,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:460",{"_index":1065,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:469",{"_index":1064,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:489",{"_index":1063,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:499",{"_index":1068,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:50",{"_index":1043,"title":{},"body":{"classes/Field-1.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:503",{"_index":1067,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/expressions/syntax.ts:6",{"_index":3004,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/handlers.ts",{"_index":2387,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:103",{"_index":2401,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:109",{"_index":2404,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:18",{"_index":2396,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:24",{"_index":2423,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:28",{"_index":2417,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:32",{"_index":2405,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:37",{"_index":2421,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:43",{"_index":2397,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:49",{"_index":2412,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:53",{"_index":2414,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:59",{"_index":2403,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:65",{"_index":2399,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:78",{"_index":2416,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:83",{"_index":2408,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:88",{"_index":2419,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:98",{"_index":2410,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/options.ts",{"_index":2519,"title":{},"body":{"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/options.ts:106",{"_index":2525,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:116",{"_index":2528,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:122",{"_index":2533,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:128",{"_index":2530,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:132",{"_index":2536,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:138",{"_index":2532,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:145",{"_index":2524,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:37",{"_index":2523,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:44",{"_index":2534,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:71",{"_index":2539,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:82",{"_index":2537,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:91",{"_index":2538,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/request.ts",{"_index":2562,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:17",{"_index":2588,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:18",{"_index":2591,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:19",{"_index":2592,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:20",{"_index":2594,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:21",{"_index":2589,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:211",{"_index":2599,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:22",{"_index":2590,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:220",{"_index":2601,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:224",{"_index":2603,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:228",{"_index":2605,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:240",{"_index":2607,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:252",{"_index":2609,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:260",{"_index":2611,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:268",{"_index":2613,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:272",{"_index":2615,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:276",{"_index":2595,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:28",{"_index":2593,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:280",{"_index":2596,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:284",{"_index":2597,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:29",{"_index":2587,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:38",{"_index":2581,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:39",{"_index":2579,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:40",{"_index":2580,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:41",{"_index":2583,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:42",{"_index":2584,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:43",{"_index":2577,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/resource.ts",{"_index":3362,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/responses/annotations.ts",{"_index":1131,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:100",{"_index":1772,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:104",{"_index":1767,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:105",{"_index":1792,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:112",{"_index":1771,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:12",{"_index":1139,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:130",{"_index":1752,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:134",{"_index":1754,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:138",{"_index":1756,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:142",{"_index":1758,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:146",{"_index":1760,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:151",{"_index":1762,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:156",{"_index":1764,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:16",{"_index":1144,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:161",{"_index":1745,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:162",{"_index":1766,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:168",{"_index":1749,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:20",{"_index":1146,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:25",{"_index":1140,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:26",{"_index":1142,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:5",{"_index":1136,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:56",{"_index":1774,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:60",{"_index":1776,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:64",{"_index":1778,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:68",{"_index":1780,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:7",{"_index":1137,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:72",{"_index":1781,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:76",{"_index":1783,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:80",{"_index":1785,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:84",{"_index":1787,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:88",{"_index":1789,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:92",{"_index":1768,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:93",{"_index":1791,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/csdl/csdl",{"_index":488,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["odata/src/lib/resources/responses/metadata.ts",{"_index":880,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:47",{"_index":882,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:48",{"_index":883,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/options.ts",{"_index":2808,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:19",{"_index":2820,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:20",{"_index":2818,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:22",{"_index":2817,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:23",{"_index":2819,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:24",{"_index":2815,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:26",{"_index":2816,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:28",{"_index":2814,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:29",{"_index":2813,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:36",{"_index":2830,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:40",{"_index":2821,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:44",{"_index":2825,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:61",{"_index":2829,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:67",{"_index":2827,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:72",{"_index":2823,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/response.ts",{"_index":2710,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:125",{"_index":2722,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:126",{"_index":2737,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:136",{"_index":2719,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:137",{"_index":2739,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:146",{"_index":2718,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:147",{"_index":2741,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:169",{"_index":2726,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:193",{"_index":2724,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:212",{"_index":2731,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:236",{"_index":2733,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:29",{"_index":2723,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:30",{"_index":2717,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:46",{"_index":2728,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:58",{"_index":2730,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:79",{"_index":2732,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:92",{"_index":2721,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:93",{"_index":2735,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/types.ts",{"_index":3368,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/types/batch.ts",{"_index":1319,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:136",{"_index":1329,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:38",{"_index":1325,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:39",{"_index":1326,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:43",{"_index":1333,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:69",{"_index":1332,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/options.ts",{"_index":3369,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/annotation.ts",{"_index":1085,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:18",{"_index":1089,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:30",{"_index":1101,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:39",{"_index":1094,"title":{},"body":{"classes/ODataAnnotatable.html":{}}}],["odata/src/lib/schema/annotation.ts:4",{"_index":1129,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:5",{"_index":1128,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:6",{"_index":1125,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:7",{"_index":1126,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:8",{"_index":1127,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:9",{"_index":1124,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/callable.ts",{"_index":1603,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:10",{"_index":1611,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:24",{"_index":1632,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:36",{"_index":1622,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:50",{"_index":1624,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:60",{"_index":1634,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:7",{"_index":1614,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:70",{"_index":1629,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:78",{"_index":1619,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:8",{"_index":1612,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:9",{"_index":1613,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/element.ts",{"_index":2923,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:19",{"_index":2931,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:29",{"_index":2929,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:38",{"_index":2930,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:47",{"_index":2928,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:58",{"_index":2926,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:68",{"_index":2927,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:7",{"_index":2925,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/element.ts:8",{"_index":2924,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["odata/src/lib/schema/entity",{"_index":1794,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{}}}],["odata/src/lib/schema/enum",{"_index":2102,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["odata/src/lib/schema/parsers/callable.ts",{"_index":1683,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:106",{"_index":1697,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:113",{"_index":1694,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:122",{"_index":1699,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:140",{"_index":1696,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:15",{"_index":2246,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:157",{"_index":1693,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:16",{"_index":2249,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:17",{"_index":2248,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:170",{"_index":1692,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:18",{"_index":2245,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:19",{"_index":2247,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:20",{"_index":2244,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:30",{"_index":2256,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:41",{"_index":2251,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:51",{"_index":2250,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:62",{"_index":2253,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:66",{"_index":2254,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:70",{"_index":2252,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:75",{"_index":2255,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:79",{"_index":2257,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:87",{"_index":1686,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:88",{"_index":1687,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:89",{"_index":1685,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:90",{"_index":1691,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:91",{"_index":1690,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:92",{"_index":1689,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/callable.ts:93",{"_index":1684,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/schema/parsers/enum",{"_index":2132,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odata/src/lib/schema/parsers/structured",{"_index":1912,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/schema.ts",{"_index":2856,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:12",{"_index":2864,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:13",{"_index":2869,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:14",{"_index":2863,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:15",{"_index":2868,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:16",{"_index":2867,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:17",{"_index":2865,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:18",{"_index":2862,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:39",{"_index":2881,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:46",{"_index":2883,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:54",{"_index":2877,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:60",{"_index":2879,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:66",{"_index":2873,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:87",{"_index":2875,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:92",{"_index":2870,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/services/base.ts",{"_index":1274,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:103",{"_index":1305,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:108",{"_index":1306,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:13",{"_index":1282,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:20",{"_index":1308,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:24",{"_index":1297,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:30",{"_index":1298,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:36",{"_index":1299,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:42",{"_index":1300,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:48",{"_index":1301,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:61",{"_index":1289,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:67",{"_index":1291,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:73",{"_index":1292,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:79",{"_index":1293,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:85",{"_index":1294,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:98",{"_index":1304,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/entity",{"_index":1824,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odata/src/lib/services/entity.ts",{"_index":1800,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:12",{"_index":1813,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:6",{"_index":1808,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:7",{"_index":1805,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/factory.ts",{"_index":2940,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:15",{"_index":2943,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:30",{"_index":2946,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:7",{"_index":2941,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/singleton.ts",{"_index":2950,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:34",{"_index":2962,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:44",{"_index":2960,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:58",{"_index":2958,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/types.ts",{"_index":7,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/types.ts:103",{"_index":3002,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:108",{"_index":3001,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:118",{"_index":434,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/types.ts:119",{"_index":433,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/types.ts:98",{"_index":3000,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/utils/durations.ts",{"_index":3361,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/wiki",{"_index":3259,"title":{},"body":{"index.html":{}}}],["odata_configurations",{"_index":2234,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata_entityid_headers",{"_index":2746,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata_etag",{"_index":3179,"title":{},"body":{"index.html":{}}}],["odata_version",{"_index":1353,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata_version_headers",{"_index":2742,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataactionresource",{"_index":1286,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataannotatable",{"_index":1084,"title":{"classes/ODataAnnotatable.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:18",{"_index":1618,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:30",{"_index":1662,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotatable:39",{"_index":1661,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation",{"_index":1091,"title":{"classes/ODataAnnotation.html":{}},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataannotation(annot",{"_index":1112,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["odataannotations",{"_index":1130,"title":{"classes/ODataAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:118",{"_index":1747,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:12",{"_index":1750,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:126",{"_index":1748,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:30",{"_index":2384,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:38",{"_index":2385,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:44",{"_index":1769,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:52",{"_index":1770,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:7",{"_index":1746,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataapi",{"_index":1338,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["odataapioptions",{"_index":1197,"title":{"classes/ODataApiOptions.html":{}},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["odatabaseservice",{"_index":1273,"title":{"classes/ODataBaseService.html":{}},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:24",{"_index":1810,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:61",{"_index":1809,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:98",{"_index":1811,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabatchrequest",{"_index":1318,"title":{"classes/ODataBatchRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchrequest(req",{"_index":1427,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource",{"_index":1399,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odatabatchresource(api",{"_index":1408,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildbody",{"_index":1454,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildbody(bound",{"_index":1446,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.handleresponse(requests",{"_index":1450,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatacache",{"_index":1493,"title":{"classes/ODataCache.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacache:108",{"_index":2182,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:113",{"_index":2188,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:117",{"_index":2187,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:128",{"_index":2185,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:15",{"_index":2177,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:16",{"_index":2176,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:163",{"_index":2186,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:19",{"_index":2178,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:26",{"_index":2190,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:38",{"_index":2191,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:45",{"_index":2202,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:50",{"_index":2180,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:60",{"_index":2203,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:62",{"_index":2181,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:66",{"_index":2189,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:81",{"_index":2184,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:89",{"_index":2183,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:9",{"_index":2179,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacacheentry",{"_index":1512,"title":{"interfaces/ODataCacheEntry.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacallable",{"_index":1602,"title":{"classes/ODataCallable.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataSchema.html":{}}}],["odatacallable(config",{"_index":2895,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatacallableparser",{"_index":1615,"title":{"classes/ODataCallableParser.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataclient",{"_index":1280,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["odatacollection",{"_index":1867,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odatacontext",{"_index":1135,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentities",{"_index":1309,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentitiesannotations",{"_index":1184,"title":{"classes/ODataEntitiesAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentitiesoptions",{"_index":3346,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentity",{"_index":1310,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataentityannotations",{"_index":1156,"title":{"classes/ODataEntityAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentitycontainer",{"_index":1793,"title":{"classes/ODataEntityContainer.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{}}}],["odataentitycontainer(config",{"_index":2898,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataentityoptions",{"_index":3347,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentityresource",{"_index":1849,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityservice",{"_index":1799,"title":{"classes/ODataEntityService.html":{}},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataentityservice:19",{"_index":2955,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityservice:27",{"_index":2954,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityservice:28",{"_index":1848,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityservice:36",{"_index":1835,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityset",{"_index":1795,"title":{"classes/ODataEntitySet.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataSchema.html":{}}}],["odataentityset(config",{"_index":1798,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["odataentitysetresource",{"_index":1847,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["odataentitysetservice",{"_index":1823,"title":{"classes/ODataEntitySetService.html":{}},"body":{"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{}}}],["odataentitytypekey",{"_index":1911,"title":{"classes/ODataEntityTypeKey.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataentitytypekey(key",{"_index":2019,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odataenumtype",{"_index":2101,"title":{"classes/ODataEnumType.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["odataenumtype(config",{"_index":2889,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataenumtypefieldparser",{"_index":2112,"title":{"classes/ODataEnumTypeFieldParser.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypefieldparser(name",{"_index":2141,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypeparser",{"_index":1701,"title":{"classes/ODataEnumTypeParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatafunctionresource",{"_index":1296,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatafunctions",{"_index":413,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odatahelper",{"_index":1228,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["odatahelper[this.version",{"_index":1271,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["odatainmemorycache",{"_index":2173,"title":{"classes/ODataInMemoryCache.html":{}},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatainstoragecache",{"_index":2197,"title":{"classes/ODataInStorageCache.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatametadata",{"_index":891,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_data_services",{"_index":1003,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_reference",{"_index":994,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_schema",{"_index":1007,"title":{},"body":{"classes/Field.html":{}}}],["odatametadatatype",{"_index":29,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odatamodel",{"_index":1814,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatamodelentry",{"_index":3348,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodeleventtype",{"_index":3349,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelfieldoptions",{"_index":3350,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelrelation",{"_index":3351,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelstate",{"_index":3126,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odatamodule",{"_index":2219,"title":{"modules/ODataModule.html":{}},"body":{"modules/ODataModule.html":{},"index.html":{},"modules.html":{}}}],["odatamodule.forroot",{"_index":3168,"title":{},"body":{"index.html":{}}}],["odatamodule.forroot(trippinconfig",{"_index":3176,"title":{},"body":{"index.html":{}}}],["odatanavigationpropertyresource",{"_index":1303,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatanoneoptions",{"_index":3352,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataoperators",{"_index":410,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odataoptions",{"_index":1362,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataparameterparser",{"_index":1688,"title":{"classes/ODataParameterParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataparameterparser(name",{"_index":1731,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataparseroptions",{"_index":1272,"title":{"classes/ODataParserOptions.html":{}},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{}}}],["odataparseroptions(options",{"_index":1710,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatapathsegments",{"_index":1358,"title":{"classes/ODataPathSegments.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odatapathsegments(segments",{"_index":2335,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odatapathsegmentshandler",{"_index":2351,"title":{"classes/ODataPathSegmentsHandler.html":{}},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odataproperty",{"_index":1311,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odatapropertyannotations",{"_index":1152,"title":{"classes/ODataPropertyAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odatapropertyoptions",{"_index":3353,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataqueryarguments",{"_index":2427,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryargumentsoptions",{"_index":1288,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryoptionhandler",{"_index":2386,"title":{"classes/ODataQueryOptionHandler.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionhandler(this.values",{"_index":2552,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions",{"_index":2428,"title":{"classes/ODataQueryOptions.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions(options",{"_index":2551,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionshandler",{"_index":2457,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odatareferential",{"_index":1928,"title":{"classes/ODataReferential.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatareferential(referential",{"_index":1937,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatarequest",{"_index":1324,"title":{"classes/ODataRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresource",{"_index":1359,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["odataresponse",{"_index":1360,"title":{"classes/ODataResponse.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponse.fromjson(req",{"_index":2217,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponseoptions",{"_index":2720,"title":{"classes/ODataResponseOptions.html":{}},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this",{"_index":2834,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this.api.options",{"_index":2764,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataschema",{"_index":1610,"title":{"classes/ODataSchema.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement",{"_index":1604,"title":{"classes/ODataSchemaElement.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["odataschemaelement:29",{"_index":1647,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:38",{"_index":1658,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:47",{"_index":1645,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:58",{"_index":1638,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:68",{"_index":1642,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:7",{"_index":1616,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odataschemaelement:8",{"_index":1617,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["odatasegment",{"_index":2266,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["odataservicefactory",{"_index":2223,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["odatasettings",{"_index":2232,"title":{},"body":{"modules/ODataModule.html":{}}}],["odatasettings(...configs",{"_index":2237,"title":{},"body":{"modules/ODataModule.html":{}}}],["odatasingletonresource",{"_index":2956,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odatasingletonservice",{"_index":2948,"title":{"classes/ODataSingletonService.html":{}},"body":{"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{}}}],["odatastructuredtype",{"_index":2866,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtype(config",{"_index":2892,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtypefieldparser",{"_index":1922,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypefieldparser(name",{"_index":2023,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["odatastructuredtypeparser",{"_index":1702,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["odatasyntax",{"_index":416,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odataversion",{"_index":37,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataversionhelper",{"_index":32,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["odatawithout",{"_index":3165,"title":{},"body":{"index.html":{}}}],["of(cached",{"_index":1590,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["ondelete",{"_index":634,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["one",{"_index":2436,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["onerror",{"_index":1321,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onerror(content",{"_index":1327,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload",{"_index":1322,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload(content",{"_index":1331,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["op",{"_index":350,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["open",{"_index":169,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["open.org/odata/odata",{"_index":1231,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["open.org/odata/odata/v4.0/errata02/os/complete/part1",{"_index":1235,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["open.org/odata/odata/v4.01/odata",{"_index":2459,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["opentype",{"_index":541,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["operator",{"_index":349,"title":{"classes/Operator.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('add",{"_index":385,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('and",{"_index":374,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('div",{"_index":391,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('eq",{"_index":362,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ge",{"_index":368,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('gt",{"_index":366,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('has",{"_index":380,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('in",{"_index":382,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('le",{"_index":372,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('lt",{"_index":370,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mod",{"_index":393,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mul",{"_index":389,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ne",{"_index":364,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('not",{"_index":378,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('or",{"_index":376,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('sub",{"_index":387,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operators",{"_index":412,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["option",{"_index":839,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["option(name",{"_index":841,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["optional",{"_index":12,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["options",{"_index":9,"title":{"interfaces/Options.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["options.custom",{"_index":2088,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.custom[f.name",{"_index":2089,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.expand",{"_index":2081,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.headers",{"_index":1445,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["options.helper",{"_index":2797,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.annotations(this.payload",{"_index":2791,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(data",{"_index":2800,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(payload",{"_index":2806,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.etag(this._annotations",{"_index":2793,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.id(this._annotations",{"_index":2795,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.params",{"_index":1447,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["options.required",{"_index":2092,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.required[f.name",{"_index":2093,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.select",{"_index":2082,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.select).indexof(f.name",{"_index":2083,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["options.withcredentials",{"_index":1448,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["options?.helper.type(value",{"_index":1961,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["optionshelper",{"_index":93,"title":{"interfaces/OptionsHelper.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["opts",{"_index":116,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["opts(node",{"_index":848,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["or(exp",{"_index":3023,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["or(left",{"_index":375,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["order",{"_index":2986,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderby",{"_index":70,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["orderby(opts",{"_index":859,"title":{},"body":{"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/OrderByExpression.html":{}}}],["orderbyexpression",{"_index":790,"title":{"classes/OrderByExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyexpression.e",{"_index":2992,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyexpression.orderby",{"_index":2489,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["orderbyexpression.orderby(opts",{"_index":829,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["orderbyexpression.s",{"_index":2991,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyfield",{"_index":2985,"title":{"classes/OrderByField.html":{}},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyfield(field",{"_index":2994,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyfield(this.field.clone",{"_index":2990,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["orderbyobject",{"_index":3355,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["orderbytype",{"_index":3356,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["original",{"_index":1434,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["os",{"_index":1239,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["otherwise",{"_index":3322,"title":{},"body":{"license.html":{}}}],["out",{"_index":3324,"title":{},"body":{"license.html":{}}}],["output",{"_index":1655,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["override",{"_index":1363,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["overview",{"_index":3328,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":173,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["p.configure",{"_index":1743,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.encode(params[p.name",{"_index":1740,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.name",{"_index":1736,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.serialize(params[p.name",{"_index":1739,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.startswith(application_json",{"_index":2770,"title":{},"body":{"classes/ODataResponse.html":{}}}],["package",{"_index":3107,"title":{"dependencies.html":{}},"body":{}}],["paging",{"_index":2498,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["param",{"_index":78,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parameter",{"_index":109,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["parameter.collection",{"_index":1708,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.nullable",{"_index":1706,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.type",{"_index":1704,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameters",{"_index":178,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["parameters(value",{"_index":2372,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["parameters.reduce",{"_index":1738,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["params",{"_index":19,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["params[p.name",{"_index":1737,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parent",{"_index":2011,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parent.children.push(this",{"_index":2049,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parentelement",{"_index":1033,"title":{},"body":{"classes/Field.html":{}}}],["parentelement.children",{"_index":1036,"title":{},"body":{"classes/Field.html":{}}}],["parse",{"_index":1022,"title":{},"body":{"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parser",{"_index":100,"title":{"interfaces/Parser.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parser.deserialize(value",{"_index":1964,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parser.parsefromstring(xml",{"_index":983,"title":{},"body":{"classes/Field.html":{}}}],["parser.serialize(value",{"_index":1967,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parserfortype",{"_index":1676,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["parserfortype(this.base",{"_index":2048,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["parserfortype(this.return.type",{"_index":1741,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parserfortype(this.type",{"_index":1716,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["parseroptions",{"_index":1709,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["parseroptions?.stringasenum",{"_index":2147,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["parsers",{"_index":131,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["part1",{"_index":1240,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["part2",{"_index":2461,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["partial",{"_index":1841,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["particular",{"_index":3309,"title":{},"body":{"license.html":{}}}],["partner",{"_index":635,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["patch",{"_index":1371,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["patch'].indexof(this._method",{"_index":2666,"title":{},"body":{"classes/ODataRequest.html":{}}}],["patch(attrs",{"_index":2957,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["path",{"_index":27,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["path(value",{"_index":2365,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["path.slice(1",{"_index":2300,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.startswith(path_separator",{"_index":2299,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path_separator",{"_index":2289,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathandparams",{"_index":2264,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["pathandparams(escape",{"_index":2281,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["paths",{"_index":2312,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames",{"_index":52,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["pathsegmentnames.entityset",{"_index":1552,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.function",{"_index":2295,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.navigationproperty",{"_index":2339,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.property",{"_index":2340,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder",{"_index":2293,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder(segment",{"_index":2308,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathwithparams",{"_index":2574,"title":{},"body":{"classes/ODataRequest.html":{}}}],["path}?${this._params",{"_index":2706,"title":{},"body":{"classes/ODataRequest.html":{}}}],["pattern",{"_index":290,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["payload",{"_index":115,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["people",{"_index":3222,"title":{},"body":{"index.html":{}}}],["people.fetch",{"_index":3236,"title":{},"body":{"index.html":{}}}],["peopleservice",{"_index":3221,"title":{},"body":{"index.html":{}}}],["peopleservice.entities",{"_index":3224,"title":{},"body":{"index.html":{}}}],["permission",{"_index":3267,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":138,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["permit",{"_index":3289,"title":{},"body":{"license.html":{}}}],["person",{"_index":3272,"title":{},"body":{"license.html":{}}}],["persons",{"_index":3290,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":1892,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["please",{"_index":3150,"title":{},"body":{"index.html":{}}}],["point",{"_index":337,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["policy",{"_index":1209,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataParserOptions.html":{}}}],["polygon",{"_index":340,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["portions",{"_index":3299,"title":{},"body":{"license.html":{}}}],["post",{"_index":1370,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["post'].indexof(this._method",{"_index":2675,"title":{},"body":{"classes/ODataRequest.html":{}}}],["precision",{"_index":162,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["predicate",{"_index":1102,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["predicate(this",{"_index":2031,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["prefer",{"_index":20,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["prefer.length",{"_index":2677,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push",{"_index":2671,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.continue",{"_index":2676,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxpagesize",{"_index":2669,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`return=${this.api.options.prefer?.return",{"_index":2667,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefix",{"_index":210,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["prefix}/${name",{"_index":225,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["pretty",{"_index":1654,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["primitive",{"_index":2432,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["private",{"_index":49,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["project",{"_index":3152,"title":{},"body":{"index.html":{}}}],["projects/.../builder.ts",{"_index":3130,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../durations.ts",{"_index":3333,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../filter.ts",{"_index":3338,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../helper.ts",{"_index":3345,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../metadata.ts",{"_index":3125,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../options.ts",{"_index":3127,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../resource.ts",{"_index":3334,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../search.ts",{"_index":3358,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../segments.ts",{"_index":3354,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../structured",{"_index":3341,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../types.ts",{"_index":3128,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["properties",{"_index":11,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["property",{"_index":57,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["property(name",{"_index":1177,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["property.enum",{"_index":2156,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["property.ts",{"_index":631,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["property.ts:1",{"_index":719,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:14",{"_index":665,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:15",{"_index":666,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:16",{"_index":667,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:17",{"_index":669,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:18",{"_index":668,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:19",{"_index":664,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:25",{"_index":639,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:3",{"_index":720,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:30",{"_index":642,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:31",{"_index":640,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:32",{"_index":643,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:33",{"_index":641,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:39",{"_index":678,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:4",{"_index":722,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:40",{"_index":679,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:43",{"_index":653,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:44",{"_index":654,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:5",{"_index":721,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:9",{"_index":663,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["propertyref",{"_index":917,"title":{},"body":{"classes/Field.html":{}}}],["propertyrefs",{"_index":557,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["protected",{"_index":249,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["protocol",{"_index":1241,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["protocol/odata",{"_index":1236,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["provide",{"_index":2239,"title":{},"body":{"modules/ODataModule.html":{}}}],["provided",{"_index":3300,"title":{},"body":{"license.html":{}}}],["providers",{"_index":2222,"title":{},"body":{"modules/ODataModule.html":{}}}],["proxy",{"_index":219,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["proxyhandler",{"_index":215,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["public",{"_index":48,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"modules/ODataModule.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["publish",{"_index":3283,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":3310,"title":{},"body":{"license.html":{}}}],["push",{"_index":2393,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["push(value",{"_index":2411,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["put",{"_index":432,"title":{},"body":{"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{}}}],["put(key",{"_index":114,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["put(name",{"_index":1531,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse",{"_index":1506,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse(req",{"_index":1533,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["q.apply(options",{"_index":1315,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["q.expand",{"_index":3225,"title":{},"body":{"index.html":{}}}],["q.filter",{"_index":3207,"title":{},"body":{"index.html":{}}}],["q.filter().clear",{"_index":3220,"title":{},"body":{"index.html":{}}}],["q.filter().push",{"_index":3215,"title":{},"body":{"index.html":{}}}],["qualifier",{"_index":520,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["queries",{"_index":3189,"title":{},"body":{"index.html":{}}}],["query",{"_index":110,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["query((q",{"_index":3206,"title":{},"body":{"index.html":{}}}],["query.expand",{"_index":2509,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.filter",{"_index":2514,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.orderby",{"_index":2516,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.search",{"_index":2513,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.select",{"_index":2507,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.transform",{"_index":2511,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["querycustomtype",{"_index":203,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["querycustomtypes",{"_index":3129,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["querying",{"_index":3147,"title":{},"body":{"index.html":{}}}],["queryoptionnames",{"_index":26,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["queryoptionnames.compute",{"_index":2473,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.expand",{"_index":796,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.filter",{"_index":797,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.format",{"_index":2542,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.levels",{"_index":802,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["queryoptionnames.orderby",{"_index":799,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.search",{"_index":798,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.select",{"_index":795,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.skip",{"_index":800,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.skiptoken",{"_index":2541,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.top",{"_index":801,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.transform",{"_index":2540,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptions",{"_index":3357,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["queryparams",{"_index":2703,"title":{},"body":{"classes/ODataRequest.html":{}}}],["r",{"_index":1290,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSingletonService.html":{}}}],["r.ismutate",{"_index":1600,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["r.request",{"_index":1404,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["range",{"_index":1998,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw",{"_index":1917,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"miscellaneous/enumerations.html":{}}}],["raw(`'${serialized",{"_index":2153,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(json.stringify(this.serialize(value",{"_index":2047,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["raw(key",{"_index":2305,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["raw(serialized",{"_index":2154,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["readlink",{"_index":1164,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["readonly",{"_index":893,"title":{},"body":{"classes/Field.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["reduce",{"_index":1550,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["reduce((acc",{"_index":805,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{}}}],["reference",{"_index":59,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["reference.ts",{"_index":612,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["reference.ts:14",{"_index":614,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:15",{"_index":615,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:18",{"_index":624,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:20",{"_index":627,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:21",{"_index":625,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:22",{"_index":626,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:3",{"_index":673,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:5",{"_index":676,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:6",{"_index":675,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:7",{"_index":674,"title":{},"body":{"classes/CsdlReference.html":{}}}],["referenced",{"_index":167,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referencedproperty",{"_index":165,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["references",{"_index":978,"title":{},"body":{"classes/Field.html":{}}}],["referential",{"_index":166,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referentialconstraint",{"_index":920,"title":{},"body":{"classes/Field.html":{}}}],["referentialconstraints",{"_index":636,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["referentials",{"_index":164,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["reg",{"_index":1114,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["reg.test(a.term",{"_index":1118,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["regexp",{"_index":1093,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["regexp(`^${term",{"_index":1116,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["region",{"_index":120,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["related",{"_index":3151,"title":{},"body":{"index.html":{}}}],["relative",{"_index":1365,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["remove",{"_index":1570,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["remove(...names",{"_index":2554,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(names",{"_index":2535,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(value",{"_index":2413,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["removed",{"_index":3134,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["render",{"_index":207,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render'].includes(key",{"_index":231,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(field",{"_index":256,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(left",{"_index":354,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(right",{"_index":358,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(this.field",{"_index":810,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["render(this.group",{"_index":399,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(this.value",{"_index":3031,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["render(undefined",{"_index":463,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["render(v",{"_index":258,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value(syntax",{"_index":243,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value.render",{"_index":246,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["renderable",{"_index":206,"title":{"interfaces/Renderable.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["replace(/\\;/g",{"_index":2774,"title":{},"body":{"classes/ODataResponse.html":{}}}],["reportprogress",{"_index":2570,"title":{},"body":{"classes/ODataRequest.html":{}}}],["representation",{"_index":88,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataParserOptions.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["req",{"_index":1416,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{}}}],["req.api",{"_index":1417,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["req.fetchpolicy",{"_index":1587,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isbatch",{"_index":1597,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isfetch",{"_index":1583,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.ismutate",{"_index":1585,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.observe",{"_index":1421,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["req.onload(chunk.slice(1",{"_index":1492,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["req.resource",{"_index":1598,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponse.html":{}}}],["req.resource.clonesegments",{"_index":1548,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["request",{"_index":103,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["requester",{"_index":1415,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests",{"_index":1402,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["requests[index",{"_index":1490,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["require",{"_index":1902,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["required",{"_index":1927,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["res",{"_index":1367,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{}}}],["res$.pipe",{"_index":1592,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res$.pipe(startwith(cached",{"_index":1596,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.body",{"_index":2748,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.context",{"_index":1554,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.destroy(options",{"_index":1889,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.haskey",{"_index":1882,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.headers",{"_index":2749,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.join(newline",{"_index":1375,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.length",{"_index":1475,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.modify(attrs",{"_index":1887,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.options.cacheability",{"_index":1594,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.options.maxage",{"_index":2195,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.push",{"_index":1463,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${batch",{"_index":1472,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${batchboundary",{"_index":1465,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${changesetboundary",{"_index":1469,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_id",{"_index":1471,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_transfer_encoding",{"_index":1470,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_type",{"_index":1372,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${newline}${json.stringify(batch.request.body",{"_index":1474,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(newline",{"_index":1468,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.status",{"_index":2750,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.statustext",{"_index":2751,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.tojson",{"_index":2216,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.update(attrs",{"_index":1885,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.url",{"_index":2752,"title":{},"body":{"classes/ODataResponse.html":{}}}],["reset",{"_index":3364,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resolve",{"_index":2846,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["resolvekey(value",{"_index":2052,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["resource",{"_index":1285,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["resource.call(params",{"_index":1316,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.fetch",{"_index":1317,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.query((q",{"_index":1314,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resourceparams",{"_index":2640,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$expand",{"_index":2686,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$select",{"_index":2684,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourcepath",{"_index":2639,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resources",{"_index":1312,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["resources/query",{"_index":1918,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["response",{"_index":1218,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["response.body.split(newline_regexp",{"_index":1485,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.headers.get(content_type",{"_index":1480,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsejson",{"_index":2206,"title":{"interfaces/ResponseJson.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["responseoptions",{"_index":94,"title":{"interfaces/ResponseOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["responses",{"_index":1361,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsetype",{"_index":1287,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["restore",{"_index":1438,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["restorerequester",{"_index":1429,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["restriction",{"_index":3279,"title":{},"body":{"license.html":{}}}],["result",{"_index":1431,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{}}}],["result.params",{"_index":2314,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["result.paths.join(path_separator",{"_index":2313,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["results",{"_index":182,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":87,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["returns",{"_index":195,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["returntype",{"_index":491,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["right",{"_index":353,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["rights",{"_index":3281,"title":{},"body":{"license.html":{}}}],["root",{"_index":3182,"title":{},"body":{"index.html":{}}}],["round",{"_index":191,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["round(value",{"_index":198,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["rxjs",{"_index":35,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1542,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{}}}],["s",{"_index":446,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["s.key",{"_index":2324,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.name",{"_index":1551,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.parameters",{"_index":2332,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.path",{"_index":1553,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.type",{"_index":2317,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s1",{"_index":285,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["s2",{"_index":283,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["same",{"_index":1420,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["save",{"_index":1831,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["save(attrs",{"_index":1860,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["scale",{"_index":163,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["schema",{"_index":885,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["schema.alias",{"_index":1672,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.contentencoding",{"_index":1990,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.default",{"_index":2003,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.format",{"_index":1983,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.iscompoundkey",{"_index":1900,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.maxlength",{"_index":1992,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.namespace",{"_index":1671,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.org",{"_index":1972,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.org/draft",{"_index":2076,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.pattern",{"_index":1984,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.properties",{"_index":2084,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.required",{"_index":2090,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schema.resolvekey(attrs",{"_index":1905,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.ts",{"_index":689,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:13",{"_index":699,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:15",{"_index":708,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:16",{"_index":701,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:17",{"_index":706,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:18",{"_index":703,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:19",{"_index":705,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:20",{"_index":707,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:21",{"_index":700,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:22",{"_index":704,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:23",{"_index":710,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:24",{"_index":709,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:25",{"_index":702,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.type",{"_index":1982,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["schemaconfig",{"_index":133,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["schemas",{"_index":132,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["scope",{"_index":1507,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["scope(req",{"_index":1535,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["scope.length",{"_index":1573,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["scope.push(name",{"_index":1572,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["search",{"_index":68,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["search(opts",{"_index":862,"title":{},"body":{"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SearchExpression.html":{}}}],["searchconnector",{"_index":791,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"miscellaneous/typealiases.html":{}}}],["searchexpression",{"_index":792,"title":{"classes/SearchExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchexpression.e",{"_index":3035,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchexpression.search",{"_index":2482,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["searchexpression.search(opts",{"_index":827,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["searchterm",{"_index":3030,"title":{"classes/SearchTerm.html":{}},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchterm(this.value",{"_index":3032,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["searchterm(value",{"_index":3051,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["second",{"_index":755,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["second(value",{"_index":317,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["segment",{"_index":2272,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segment.clearkey",{"_index":2321,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key",{"_index":2301,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key(key",{"_index":2322,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.name",{"_index":2294,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.parameters",{"_index":2296,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.path",{"_index":2298,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler",{"_index":2291,"title":{"classes/SegmentHandler.html":{}},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segmenthandler(s",{"_index":2342,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler(segment",{"_index":2347,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments",{"_index":1406,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segments(undefined",{"_index":2283,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.add(pathsegmentnames.batch",{"_index":1407,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["segments.filter",{"_index":2338,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.foreach((segment",{"_index":2319,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.length",{"_index":2343,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.map((s",{"_index":2323,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.segments",{"_index":1549,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["segments[0",{"_index":2344,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments[segments.length",{"_index":2345,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["select",{"_index":64,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["select(builder",{"_index":3076,"title":{},"body":{"classes/SelectExpression.html":{}}}],["select(opts",{"_index":864,"title":{},"body":{"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["selectexpression",{"_index":793,"title":{"classes/SelectExpression.html":{}},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/SelectExpression.html":{}}}],["selectexpression.e",{"_index":3081,"title":{},"body":{"classes/SelectExpression.html":{}}}],["selectexpression.s",{"_index":3080,"title":{},"body":{"classes/SelectExpression.html":{}}}],["selectexpression.select",{"_index":2466,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["selectexpression.select(opts",{"_index":820,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["selector",{"_index":3180,"title":{},"body":{"index.html":{}}}],["selecttype",{"_index":3359,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["sell",{"_index":3287,"title":{},"body":{"license.html":{}}}],["send",{"_index":1205,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["send(options",{"_index":1440,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["sent",{"_index":1212,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["serialization",{"_index":1635,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["serialize",{"_index":106,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["serialize(params",{"_index":1698,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["serialize(value",{"_index":1633,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"interfaces/Parser.html":{}}}],["serialized",{"_index":1636,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["server",{"_index":1390,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["service",{"_index":180,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["servicerooturl",{"_index":123,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["services/index",{"_index":2231,"title":{},"body":{"modules/ODataModule.html":{}}}],["sessionstorage",{"_index":2207,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["set",{"_index":575,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{}}}],["set(path",{"_index":2415,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["set.ts",{"_index":576,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{}}}],["set.ts:104",{"_index":1863,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:122",{"_index":1859,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:139",{"_index":1845,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:157",{"_index":1857,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:177",{"_index":1861,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:20",{"_index":1846,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:3",{"_index":579,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:37",{"_index":1838,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:38",{"_index":1839,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:49",{"_index":1865,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:5",{"_index":582,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:57",{"_index":1851,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:6",{"_index":580,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:66",{"_index":1853,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:7",{"_index":583,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:78",{"_index":1855,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:8",{"_index":581,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:90",{"_index":1842,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["setcache",{"_index":2809,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setcache(cachecontrol",{"_index":2822,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures",{"_index":2810,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures(features",{"_index":2824,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation",{"_index":2811,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation(location",{"_index":2826,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["settings",{"_index":2233,"title":{},"body":{"modules/ODataModule.html":{}}}],["setup",{"_index":3167,"title":{},"body":{"index.html":{}}}],["setversion",{"_index":2812,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setversion(version",{"_index":2828,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["shall",{"_index":3296,"title":{},"body":{"license.html":{}}}],["shortcuts",{"_index":1890,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["singleton",{"_index":56,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"classes/ODataPathSegmentsHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["singleton(singletonname",{"_index":2945,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singleton.ts",{"_index":713,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:3",{"_index":715,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:5",{"_index":716,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:6",{"_index":718,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:7",{"_index":717,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singletonname",{"_index":2947,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singletons",{"_index":565,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["singletonschema",{"_index":2953,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["skip",{"_index":72,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["skip(n",{"_index":831,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["skip(opts",{"_index":2494,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["skiptoken",{"_index":73,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["skiptoken(opts",{"_index":2496,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["software",{"_index":3275,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["specific",{"_index":1903,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["specified",{"_index":1027,"title":{},"body":{"classes/Field.html":{}}}],["split",{"_index":2768,"title":{},"body":{"classes/ODataResponse.html":{}}}],["srid",{"_index":507,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["standardaggregatemethods",{"_index":3131,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["start",{"_index":277,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["started",{"_index":3144,"title":{"index.html":{},"license.html":{}},"body":{}}],["started/advanced",{"_index":1397,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataSingletonService.html":{}}}],["startindex",{"_index":1489,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["startswith",{"_index":3087,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["startswith(field",{"_index":274,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["startwith",{"_index":1540,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["states",{"_index":3211,"title":{},"body":{"index.html":{}}}],["static",{"_index":217,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"modules/ODataModule.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["status",{"_index":1328,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["status.code",{"_index":1380,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["status.message",{"_index":1382,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["status.text",{"_index":1393,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["statustext",{"_index":1381,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["storage",{"_index":2199,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["store",{"_index":50,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["store'].indexof(directive",{"_index":2853,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["storerequester",{"_index":1412,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["streaming",{"_index":82,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["string",{"_index":79,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["stringandcollectionfunctions",{"_index":263,"title":{"classes/StringAndCollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["stringasenum",{"_index":77,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["stringfunctions",{"_index":288,"title":{"classes/StringFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["strings",{"_index":1356,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["strings.titlecase(this.name",{"_index":2025,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["strings.uniqueid(batch_prefix",{"_index":1442,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strings.uniqueid(changeset_prefix",{"_index":1466,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strip",{"_index":1217,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["stripmetadata",{"_index":21,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structural",{"_index":552,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["structured",{"_index":535,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["structured.fields.find((f",{"_index":2057,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["structuredtype",{"_index":1931,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["structuredtypeconfig",{"_index":145,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldconfig",{"_index":99,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldoptions",{"_index":97,"title":{"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structuredtypeschema",{"_index":1802,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["strucuturedtype",{"_index":1724,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["styleurls",{"_index":3185,"title":{},"body":{"index.html":{}}}],["sub",{"_index":424,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["sub(left",{"_index":386,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["subject",{"_index":1320,"title":{},"body":{"classes/ODataBatchRequest.html":{},"license.html":{}}}],["sublicense",{"_index":3285,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":3197,"title":{},"body":{"index.html":{}}}],["subscribe((airports",{"_index":3198,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":3298,"title":{},"body":{"license.html":{}}}],["substring",{"_index":3088,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["substring(field",{"_index":276,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["subtype",{"_index":1640,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["sum",{"_index":3139,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["super",{"_index":469,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/ResponseJson.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["super(annotationlist",{"_index":521,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["super(config",{"_index":1663,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{}}}],["super(field",{"_index":1932,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["super(init",{"_index":2747,"title":{},"body":{"classes/ODataResponse.html":{}}}],["super(name",{"_index":553,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{}}}],["super.clone",{"_index":1409,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["super.flush",{"_index":2215,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["supertype",{"_index":1643,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["support",{"_index":3242,"title":{},"body":{"index.html":{}}}],["supported",{"_index":1031,"title":{},"body":{"classes/Field.html":{}}}],["switch",{"_index":1414,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["switchmap",{"_index":3203,"title":{},"body":{"index.html":{}}}],["symbol",{"_index":222,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["symbol.tostringtag",{"_index":227,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["sync",{"_index":3366,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["syntax",{"_index":418,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["t",{"_index":105,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["table",{"_index":3158,"title":{},"body":{"index.html":{}}}],["tag",{"_index":890,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["tag_action",{"_index":925,"title":{},"body":{"classes/Field.html":{}}}],["tag_action_import",{"_index":931,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotation",{"_index":906,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotations",{"_index":905,"title":{},"body":{"classes/Field.html":{}}}],["tag_complex_type",{"_index":911,"title":{},"body":{"classes/Field.html":{}}}],["tag_data_services",{"_index":896,"title":{},"body":{"classes/Field.html":{}}}],["tag_edmx",{"_index":894,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_container",{"_index":926,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_set",{"_index":927,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_type",{"_index":913,"title":{},"body":{"classes/Field.html":{}}}],["tag_enum_type",{"_index":908,"title":{},"body":{"classes/Field.html":{}}}],["tag_function",{"_index":922,"title":{},"body":{"classes/Field.html":{}}}],["tag_function_import",{"_index":929,"title":{},"body":{"classes/Field.html":{}}}],["tag_include",{"_index":900,"title":{},"body":{"classes/Field.html":{}}}],["tag_include_annotations",{"_index":902,"title":{},"body":{"classes/Field.html":{}}}],["tag_key",{"_index":915,"title":{},"body":{"classes/Field.html":{}}}],["tag_member",{"_index":910,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property",{"_index":918,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property_binding",{"_index":933,"title":{},"body":{"classes/Field.html":{}}}],["tag_on_delete",{"_index":921,"title":{},"body":{"classes/Field.html":{}}}],["tag_parameter",{"_index":924,"title":{},"body":{"classes/Field.html":{}}}],["tag_property",{"_index":914,"title":{},"body":{"classes/Field.html":{}}}],["tag_property_ref",{"_index":916,"title":{},"body":{"classes/Field.html":{}}}],["tag_reference",{"_index":898,"title":{},"body":{"classes/Field.html":{}}}],["tag_referential_constraint",{"_index":919,"title":{},"body":{"classes/Field.html":{}}}],["tag_return_type",{"_index":923,"title":{},"body":{"classes/Field.html":{}}}],["tag_schema",{"_index":907,"title":{},"body":{"classes/Field.html":{}}}],["tag_singleton",{"_index":928,"title":{},"body":{"classes/Field.html":{}}}],["tag_term",{"_index":904,"title":{},"body":{"classes/Field.html":{}}}],["tag_type_definition",{"_index":934,"title":{},"body":{"classes/Field.html":{}}}],["tags",{"_index":892,"title":{},"body":{"classes/Field.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["tags(req",{"_index":1537,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["tags.length",{"_index":1578,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push",{"_index":1556,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push(context.type",{"_index":1560,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.some((t",{"_index":1579,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap",{"_index":1541,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap((res",{"_index":1593,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["target",{"_index":223,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlTerm.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["targetnamespace",{"_index":622,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["templateurl",{"_index":3183,"title":{},"body":{"index.html":{}}}],["term",{"_index":135,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["term(value",{"_index":3027,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["termnamespace",{"_index":621,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["terms",{"_index":696,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["text",{"_index":1391,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["text/plain",{"_index":2664,"title":{},"body":{"classes/ODataRequest.html":{}}}],["text/xml",{"_index":984,"title":{},"body":{"classes/Field.html":{}}}],["text_plain",{"_index":2618,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._add(exp",{"_index":3046,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._add(field",{"_index":3082,"title":{},"body":{"classes/SelectExpression.html":{}}}],["this._add(name",{"_index":484,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this._add(new",{"_index":2993,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._add(node",{"_index":849,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this._add(notexp",{"_index":3050,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._annotations",{"_index":2789,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._body",{"_index":2630,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._children",{"_index":845,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["this._children.length",{"_index":878,"title":{},"body":{"classes/Expression.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._children.map((c",{"_index":478,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{}}}],["this._children.map((n",{"_index":474,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this._children.push",{"_index":3045,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._children.push(node",{"_index":481,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"classes/SelectExpression.html":{}}}],["this._connector",{"_index":3033,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._context",{"_index":2785,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._functions",{"_index":1180,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._headers",{"_index":2679,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._method",{"_index":2619,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._negated",{"_index":3034,"title":{},"body":{"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this._options",{"_index":2763,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setcache(cachecontrol",{"_index":2781,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setfeatures(features",{"_index":2771,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setlocation(location",{"_index":2778,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setversion(version",{"_index":2775,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._params",{"_index":2691,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.has(`$${name",{"_index":2696,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.keys().length",{"_index":2705,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path",{"_index":2642,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path.endswith($batch",{"_index":2709,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}/${$query",{"_index":2698,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._payload",{"_index":2782,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._properties",{"_index":1175,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._querybody",{"_index":2693,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._requests",{"_index":1411,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.length",{"_index":1441,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.map((r",{"_index":1403,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.push(new",{"_index":1426,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests[this._requests.length",{"_index":1428,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responsetype",{"_index":2628,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._segments",{"_index":2306,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.map((s",{"_index":2329,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.push(segment",{"_index":2346,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.reduce",{"_index":2307,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments].reverse().find(predicate",{"_index":2337,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.accept",{"_index":1263,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.add(ctx",{"_index":1452,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.alias",{"_index":402,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.annotatedvalue(computed",{"_index":1955,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(long_description",{"_index":2079,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.annotatedvalue(term",{"_index":2024,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["this.annotations",{"_index":1109,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["this.annotations.find(predicate",{"_index":1113,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.api",{"_index":1418,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["this.api.findentitysetbyname(this.name",{"_index":1875,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.api.findentitysetfortype(this.parser.return.type)?.name",{"_index":1675,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.api.findstructuredtypefortype(bindingtype",{"_index":2907,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(callablebindingtype",{"_index":2913,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.api.findstructuredtypefortype(this.apinameorentitytype",{"_index":1818,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["this.api.options",{"_index":1678,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.api.options.accept?.exponentialdecimals",{"_index":2659,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.ieee754compatible",{"_index":2654,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.metadata",{"_index":2651,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.streaming",{"_index":2657,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.bodyqueryoptions",{"_index":2638,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifmatch",{"_index":2645,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifnonematch",{"_index":2648,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.fetchpolicy",{"_index":2636,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.headers",{"_index":2680,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.params",{"_index":2689,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.continueonerror",{"_index":2674,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.includeannotations",{"_index":2670,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.maxpagesize",{"_index":2668,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.return",{"_index":2665,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.stripmetadata",{"_index":2801,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.api.options.withcredentials",{"_index":2634,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.request",{"_index":1413,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.request(request).subscribe((response",{"_index":1449,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.servicerooturl}${this._path",{"_index":2707,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.servicerooturl}${this.pathwithparams",{"_index":2708,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.apinameorentitytype",{"_index":1817,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.assertarray",{"_index":2444,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().filter((v",{"_index":2435,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().push(value",{"_index":2434,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray()[index",{"_index":2440,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(false",{"_index":2450,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(true",{"_index":2448,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.base",{"_index":2012,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.body",{"_index":2758,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.body)['d",{"_index":2784,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.bodyqueryoptions",{"_index":1261,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.length",{"_index":2694,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.map((name",{"_index":2701,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.some((name",{"_index":2695,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bound",{"_index":1666,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.buildentry(payload",{"_index":1563,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey([...(scope",{"_index":1564,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey(scope",{"_index":1574,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.cacheability",{"_index":2854,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.callables",{"_index":2893,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.find((c",{"_index":2908,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.foreach((callable",{"_index":2921,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.checkversion(document",{"_index":985,"title":{},"body":{"classes/Field.html":{}}}],["this.children",{"_index":2033,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.client",{"_index":2949,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["this.client.apifor(this.apinameorentitytype",{"_index":1313,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["this.client.entityset(this.name",{"_index":1869,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.client.singleton(this.name",{"_index":2963,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.collection",{"_index":1707,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.complete",{"_index":1385,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.composable",{"_index":1668,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.containers",{"_index":2896,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.containers.reduce",{"_index":2901,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.context",{"_index":1154,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["this.context?.entityset",{"_index":1148,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.context?.type",{"_index":1150,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.create(attrs",{"_index":1896,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.default",{"_index":1938,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.deleterefby",{"_index":1269,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.deserialize(this.default",{"_index":1970,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.entities",{"_index":2890,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities().create(attrs",{"_index":1880,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().entity(key",{"_index":1870,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetch(options",{"_index":1878,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetchall(options",{"_index":1876,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities.find((e",{"_index":2905,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities.foreach((config",{"_index":2919,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entity",{"_index":2965,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.entity(key",{"_index":1881,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entity(key).fetch(options",{"_index":1879,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entitysetpath",{"_index":1664,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.entitysets",{"_index":1796,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["this.entitysets.find((e",{"_index":2915,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entitytype",{"_index":1819,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.entries",{"_index":1547,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.entries.delete(k",{"_index":1581,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.foreach((entry",{"_index":1575,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.get(key",{"_index":1567,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.set(key",{"_index":1565,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.enum().validate(value",{"_index":1954,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.enums",{"_index":2887,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.find((e",{"_index":2903,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.foreach((enu",{"_index":2917,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.error",{"_index":1389,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.error(res",{"_index":1395,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.escape",{"_index":262,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.factory.entityset",{"_index":3191,"title":{},"body":{"index.html":{}}}],["this.fetchone(key",{"_index":1891,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.fetchpolicy",{"_index":1259,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{}}}],["this.field.tojson",{"_index":794,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["this.fields",{"_index":2020,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["this.fields().filter((f",{"_index":2129,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.fields().find((f",{"_index":2127,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.fields().map(mapper",{"_index":2131,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.fields.filter",{"_index":2039,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.fields.filter((f",{"_index":2096,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.fields.foreach((f",{"_index":2050,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.fields.map((f",{"_index":2157,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.find((s",{"_index":2348,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.findannotation((a",{"_index":1117,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.findchildparser(predicate",{"_index":2037,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.flags",{"_index":2138,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.forget",{"_index":1566,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.functions[name",{"_index":1183,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.get(req.pathwithparams",{"_index":2196,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.getfieldvaluebyattribute",{"_index":987,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects",{"_index":992,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects(dataservices",{"_index":1006,"title":{},"body":{"classes/Field.html":{}}}],["this.getresponse(req",{"_index":1589,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.group.tojson",{"_index":398,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.handlefetch(req",{"_index":1584,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.handlemutate(req",{"_index":1586,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.headers",{"_index":1253,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponse.html":{}}}],["this.headers.get(cache_control",{"_index":2780,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(content_type",{"_index":2765,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(header",{"_index":2773,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(key",{"_index":2792,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(location_header",{"_index":2777,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.getall(name",{"_index":2759,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.helper",{"_index":1153,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.attributes(data",{"_index":1147,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.count(this.annotations",{"_index":1186,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.deltalink(this.annotations",{"_index":1190,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.editlink(this.annotations",{"_index":1167,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entities(data",{"_index":1185,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entity(data",{"_index":1157,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.etag(this.annotations",{"_index":1159,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.functions(this.annotations",{"_index":1181,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.id(this.annotations",{"_index":1158,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediacontenttype(this.annotations",{"_index":1173,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaeditlink(this.annotations",{"_index":1171,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaetag(this.annotations",{"_index":1161,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediareadlink(this.annotations",{"_index":1169,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.metadataetag(this.annotations",{"_index":1163,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.nextlink(this.annotations",{"_index":1188,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.properties(this.annotations",{"_index":1176,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.property(data",{"_index":1155,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.readlink(this.annotations",{"_index":1165,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.type(this.annotations",{"_index":1149,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.ieee754compatible",{"_index":2842,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.isenumtype",{"_index":1720,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.isexpired(entry",{"_index":1568,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.isstructuredtype",{"_index":1723,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.istypeof(schema.type",{"_index":2937,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.istypeof(type",{"_index":2027,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.keys",{"_index":2017,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.keys.length",{"_index":2055,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.location",{"_index":2847,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxage",{"_index":2852,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxlength",{"_index":1940,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.members",{"_index":2124,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.metadata",{"_index":2839,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.modify(key",{"_index":1909,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.n",{"_index":2429,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.name",{"_index":253,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.names",{"_index":470,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this.names.push(name",{"_index":480,"title":{},"body":{"classes/ComputeExpression.html":{}}}],["this.namespace",{"_index":1726,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{}}}],["this.namespace}.${this.name",{"_index":1732,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.namespace}.${this.name}'${name",{"_index":2151,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.namespace}.${this.name}'${names.join",{"_index":2148,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.name}(${params.join",{"_index":259,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.navigation",{"_index":1944,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.next(odataresponse.fromhttpresponse(this.request",{"_index":1384,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.nextlink",{"_index":1191,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.normalize",{"_index":255,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.nullable",{"_index":1705,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.o[this.n",{"_index":2430,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o[this.n].filter((v",{"_index":2453,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o[this.n].length",{"_index":2438,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o[this.n][0",{"_index":2439,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.observe",{"_index":2626,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.odata",{"_index":3232,"title":{},"body":{"index.html":{}}}],["this.odata.fromjson(json",{"_index":3219,"title":{},"body":{"index.html":{}}}],["this.op",{"_index":351,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.open",{"_index":2014,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.option",{"_index":819,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoptionnames.levels",{"_index":838,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoptionnames.skip",{"_index":832,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.option(queryoptionnames.top",{"_index":835,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["this.options",{"_index":2790,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.expression",{"_index":2465,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoptionnames.compute",{"_index":2475,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoptionnames.expand",{"_index":2470,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoptionnames.filter",{"_index":2486,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoptionnames.orderby",{"_index":2490,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoptionnames.search",{"_index":2483,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.expression(queryoptionnames.select",{"_index":2467,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.helper.context",{"_index":2786,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.option",{"_index":2488,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.compute",{"_index":2476,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.expand",{"_index":2510,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.filter",{"_index":2515,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.format",{"_index":2479,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.orderby",{"_index":2517,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.search",{"_index":2484,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.select",{"_index":2508,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.skip",{"_index":2495,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.skiptoken",{"_index":2497,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.top",{"_index":2493,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.transform",{"_index":2512,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.expand",{"_index":2471,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.filter",{"_index":2487,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.orderby",{"_index":2491,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.select",{"_index":2468,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.transform",{"_index":2481,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.version",{"_index":2783,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.optionshelper",{"_index":1711,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.op}(${left",{"_index":359,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.order",{"_index":2989,"title":{},"body":{"classes/OrderByExpression.html":{},"classes/OrderByField.html":{}}}],["this.paging(query",{"_index":2518,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.parameters",{"_index":1729,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.find((p",{"_index":1744,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.foreach((p",{"_index":1742,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.params",{"_index":1251,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.parent",{"_index":2028,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.deserialize(value",{"_index":2038,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.issubtypeof(type",{"_index":2029,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent.serialize(value",{"_index":2044,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent?.defaults",{"_index":2068,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent?.resolvekey(value",{"_index":2053,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent?.tojsonschema(options",{"_index":2074,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parent?.validate(attrs",{"_index":2095,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parse(parser",{"_index":1965,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.parser",{"_index":1670,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.binding",{"_index":1682,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.configure",{"_index":1677,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.parser.deserialize(value",{"_index":1679,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.encode(v",{"_index":1715,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.encode(value",{"_index":1681,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.fields",{"_index":2126,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.return",{"_index":1674,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.serialize(v",{"_index":1714,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.serialize(value",{"_index":1680,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.parser.tojsonschema(options",{"_index":1974,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.pathandparams",{"_index":2325,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["this.payload",{"_index":2788,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.precision",{"_index":1946,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.prefer",{"_index":1267,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.properties[name",{"_index":1178,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.property",{"_index":1929,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.put(req.pathwithparams",{"_index":2194,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.putresponse(req",{"_index":1595,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.queries",{"_index":3188,"title":{},"body":{"index.html":{}}}],["this.referencedproperty",{"_index":1930,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.references",{"_index":991,"title":{},"body":{"classes/Field.html":{}}}],["this.referentials",{"_index":1935,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.referentials.length",{"_index":2010,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.reportprogress",{"_index":2624,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.request.headers",{"_index":1373,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.method",{"_index":1368,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.pathwithparams",{"_index":1369,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.urlwithparams",{"_index":1383,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.resource",{"_index":2621,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entities",{"_index":2803,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entity",{"_index":2802,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(property",{"_index":2804,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(value",{"_index":2807,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.pathandparams",{"_index":2641,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.resource.serialize(this._body",{"_index":2632,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.restore",{"_index":2209,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.restorerequester(handler",{"_index":1439,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.return",{"_index":1727,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.scale",{"_index":1948,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.schema",{"_index":2932,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.alias",{"_index":2935,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.api",{"_index":2933,"title":{},"body":{"classes/ODataSchemaElement.html":{}}}],["this.schema.namespace}.${this.name",{"_index":1673,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataSchemaElement.html":{}}}],["this.schemas",{"_index":1005,"title":{},"body":{"classes/Field.html":{}}}],["this.scope(r",{"_index":1601,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.scope(req",{"_index":2192,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.segment.key",{"_index":2368,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.name",{"_index":2362,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.parameters",{"_index":2373,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.path",{"_index":2366,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.type",{"_index":2364,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments",{"_index":2315,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.segments.get(pathsegmentnames.action",{"_index":2379,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.entityset",{"_index":2377,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.function",{"_index":2380,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.navigationproperty",{"_index":2383,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.property",{"_index":2382,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.singleton",{"_index":2378,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.keys(values",{"_index":2381,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.send(options",{"_index":1453,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.serialize(value",{"_index":2152,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.service",{"_index":1821,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.skip().clear",{"_index":2503,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skip(skip",{"_index":2500,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skiptoken().clear",{"_index":2505,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skiptoken(skiptoken",{"_index":2499,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.status",{"_index":2760,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.statustext",{"_index":2761,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.storage",{"_index":2208,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storage.setitem",{"_index":2212,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.store",{"_index":2211,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storerequester",{"_index":1435,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.streaming",{"_index":2841,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.stringasenum",{"_index":1249,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["this.stripmetadata",{"_index":1257,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.structured().validate(value",{"_index":1953,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtype",{"_index":1933,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtype.keys?.find((k",{"_index":2007,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.structuredtypeschema",{"_index":1899,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.tags(req",{"_index":2193,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.term",{"_index":1106,"title":{},"body":{"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{}}}],["this.timeout",{"_index":1546,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.titleize(description",{"_index":2078,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.tojson(parser",{"_index":1969,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.top().clear",{"_index":2504,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.top(top",{"_index":2501,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.type",{"_index":1703,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.type.startswith('edm",{"_index":1718,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["this.update(key",{"_index":1910,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.url",{"_index":2762,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.validate(v",{"_index":1952,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["this.value",{"_index":2136,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{}}}],["this.values",{"_index":254,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.values.map((v",{"_index":260,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.values[k",{"_index":2560,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values[key",{"_index":806,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["this.values[name",{"_index":842,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["this.values[queryoptionnames.compute",{"_index":2547,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values[queryoptionnames.expand",{"_index":823,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["this.values[queryoptionnames.filter",{"_index":826,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["this.values[queryoptionnames.orderby",{"_index":830,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["this.values[queryoptionnames.search",{"_index":828,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["this.values[queryoptionnames.select",{"_index":821,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["this.values[queryoptionnames.skip",{"_index":2549,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values[queryoptionnames.skiptoken",{"_index":2550,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values[queryoptionnames.top",{"_index":2548,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.values[queryoptionnames.transform",{"_index":2546,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.version",{"_index":986,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["this.withcredentials",{"_index":1255,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{}}}],["throw",{"_index":1020,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{}}}],["throwerror",{"_index":1539,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{}}}],["throwerror(error",{"_index":1897,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["time",{"_index":756,"title":{},"body":{"classes/DateAndTimeFunctions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["time(value",{"_index":319,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["timeout",{"_index":1496,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["title",{"_index":1651,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["titleize",{"_index":1609,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleize(term",{"_index":1646,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["titleized",{"_index":1656,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{}}}],["todo",{"_index":1364,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["tojson",{"_index":212,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/Operator.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tojsonschema",{"_index":2155,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["tojsonschema(options",{"_index":1973,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["tokens",{"_index":2235,"title":{},"body":{"modules/ODataModule.html":{}}}],["tolower",{"_index":3097,"title":{},"body":{"classes/StringFunctions.html":{}}}],["tolower(value",{"_index":292,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tools",{"_index":2553,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["top",{"_index":71,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ExpandField.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["top(n",{"_index":834,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["top(opts",{"_index":2492,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["toqueryarguments",{"_index":2521,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["tort",{"_index":3321,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":211,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["totaloffsetminutes",{"_index":757,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totaloffsetminutes(value",{"_index":321,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["totalseconds",{"_index":758,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totalseconds(value",{"_index":323,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["toupper",{"_index":3098,"title":{},"body":{"classes/StringFunctions.html":{}}}],["toupper(value",{"_index":294,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["transform",{"_index":69,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["transform(opts",{"_index":2480,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["trim",{"_index":2844,"title":{},"body":{"classes/ODataResponseOptions.html":{},"classes/StringFunctions.html":{}}}],["trim(value",{"_index":296,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["trippin",{"_index":3175,"title":{},"body":{"index.html":{}}}],["trippinconfig",{"_index":3173,"title":{},"body":{"index.html":{}}}],["trippinmodule",{"_index":3174,"title":{},"body":{"index.html":{}}}],["trips",{"_index":3228,"title":{},"body":{"index.html":{}}}],["true",{"_index":251,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["try",{"_index":980,"title":{},"body":{"classes/Field.html":{}}}],["tslib",{"_index":3119,"title":{},"body":{"dependencies.html":{}}}],["ttitelize",{"_index":2160,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["ttitelize(term",{"_index":2142,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["tutorial/#batch",{"_index":1398,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#singleton",{"_index":2952,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["type",{"_index":24,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["type(undefined",{"_index":1657,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchemaElement.html":{}}}],["type(value",{"_index":2363,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["type,c",{"_index":3078,"title":{},"body":{"classes/SelectExpression.html":{}}}],["type,current",{"_index":457,"title":{},"body":{"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/OrderByExpression.html":{},"classes/SearchExpression.html":{}}}],["type.startswith(this.alias",{"_index":2900,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.startswith(this.namespace",{"_index":2899,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.ts",{"_index":536,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"miscellaneous/typealiases.html":{}}}],["type.ts:1",{"_index":594,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:10",{"_index":589,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:11",{"_index":590,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:111",{"_index":2166,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:12",{"_index":725,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:123",{"_index":2169,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:13",{"_index":723,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:132",{"_index":2172,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:14",{"_index":2134,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:15",{"_index":2133,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:17",{"_index":544,"title":{},"body":{"classes/CsdlComplexType.html":{}}}],["type.ts:19",{"_index":2108,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:23",{"_index":2135,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:27",{"_index":2111,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:3",{"_index":597,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:30",{"_index":585,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:32",{"_index":2164,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:33",{"_index":587,"title":{},"body":{"classes/CsdlEntityType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:34",{"_index":2162,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:35",{"_index":1914,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:36",{"_index":1913,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:37",{"_index":2163,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:38",{"_index":2161,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:39",{"_index":586,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:4",{"_index":596,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:44",{"_index":2561,"title":{},"body":{"classes/ODataReferential.html":{}}}],["type.ts:45",{"_index":629,"title":{},"body":{"classes/CsdlKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{}}}],["type.ts:46",{"_index":630,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:49",{"_index":670,"title":{},"body":{"classes/CsdlPropertyRef.html":{}}}],["type.ts:5",{"_index":598,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:50",{"_index":671,"title":{},"body":{"classes/CsdlPropertyRef.html":{}}}],["type.ts:54",{"_index":2116,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:58",{"_index":2170,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:6",{"_index":595,"title":{},"body":{"classes/CsdlEnumType.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:62",{"_index":2165,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:63",{"_index":2119,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:66",{"_index":2167,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:7",{"_index":2107,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:73",{"_index":2109,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:8",{"_index":724,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:83",{"_index":2123,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:9",{"_index":726,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:90",{"_index":2168,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:93",{"_index":2110,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["typealiases",{"_index":3331,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedefinition",{"_index":935,"title":{},"body":{"classes/Field.html":{}}}],["typedefinitions",{"_index":697,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["typefunctions",{"_index":330,"title":{"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["typeof",{"_index":242,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types",{"_index":201,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types(undefined",{"_index":2287,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["types.isarray(this.o[this.n",{"_index":2433,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(errors",{"_index":1959,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.isempty(key",{"_index":2065,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.isempty(params",{"_index":811,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{}}}],["types.isempty(this.o[this.n",{"_index":2431,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(this.segment.key",{"_index":2370,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.segment.parameters",{"_index":2375,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.values[key",{"_index":804,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["types.isempty(v",{"_index":2454,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(value",{"_index":2073,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{}}}],["types.isfunction(opts",{"_index":2464,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isobject(value",{"_index":2544,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isplainobject(data",{"_index":2799,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(payload",{"_index":2805,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(this.o[this.n",{"_index":2442,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isplainobject(this.payload",{"_index":2787,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(v",{"_index":2058,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{}}}],["types.isplainobject(value",{"_index":1960,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["types.rawtype(this",{"_index":228,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types.rawtype(value).endswith('expression",{"_index":807,"title":{},"body":{"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataQueryOptions.html":{}}}],["unchanged",{"_index":3136,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":119,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Expression.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"classes/OrderByField.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["underlayingtype",{"_index":739,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["underlyingtype",{"_index":592,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["unicode",{"_index":647,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["united",{"_index":3210,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":1394,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["unpacked",{"_index":3360,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unset",{"_index":2394,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unset(path",{"_index":2418,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unsuccessful",{"_index":1386,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["update",{"_index":1832,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["update(attrs",{"_index":2959,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["update(key",{"_index":1862,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["update/patch",{"_index":1908,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["updating",{"_index":3148,"title":{},"body":{"index.html":{}}}],["uri",{"_index":618,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["url",{"_index":108,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["urlwithparams",{"_index":2575,"title":{},"body":{"classes/ODataRequest.html":{}}}],["usage",{"_index":3161,"title":{},"body":{"index.html":{}}}],["use",{"_index":1898,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSchemaElement.html":{},"index.html":{},"license.html":{}}}],["usefactory",{"_index":2241,"title":{},"body":{"modules/ODataModule.html":{}}}],["usevalue",{"_index":2240,"title":{},"body":{"modules/ODataModule.html":{}}}],["using",{"_index":3251,"title":{},"body":{"index.html":{}}}],["utils",{"_index":202,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["utils/http",{"_index":1355,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["utils/odata",{"_index":2884,"title":{},"body":{"classes/ODataSchema.html":{}}}],["utils/strings",{"_index":1357,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/types",{"_index":886,"title":{},"body":{"classes/Field.html":{},"classes/ODataResponse.html":{}}}],["v",{"_index":1966,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{}}}],["v4",{"_index":3249,"title":{},"body":{"index.html":{}}}],["v4.0",{"_index":1237,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["v4.01",{"_index":2460,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["v4.01.html#sec_requestingthejsonformat",{"_index":1234,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["v[field.name",{"_index":2059,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["validate",{"_index":1950,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{}}}],["validate(member",{"_index":2171,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["value",{"_index":60,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ComputeExpression.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SearchTerm.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["value(v",{"_index":2420,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["value).reduce",{"_index":2144,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["value.length",{"_index":1957,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["value.map((v",{"_index":1713,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{}}}],["value.render",{"_index":245,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["value.tojson",{"_index":2545,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value/s",{"_index":102,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["value[f.name",{"_index":2041,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{}}}],["values",{"_index":250,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values.map((v",{"_index":257,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values.push(length",{"_index":279,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values[index",{"_index":2320,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["van",{"_index":3265,"title":{},"body":{"license.html":{}}}],["var",{"_index":1378,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchemaElement.html":{},"index.html":{}}}],["variables",{"_index":1400,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["version",{"_index":76,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["version.replace(/\\;/g",{"_index":2843,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_2_0",{"_index":2832,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_3_0",{"_index":2833,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_4_0",{"_index":887,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["version_4_0].indexof(value",{"_index":2845,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["versions",{"_index":3243,"title":{},"body":{"index.html":{}}}],["viewed",{"_index":3253,"title":{},"body":{"index.html":{}}}],["void",{"_index":117,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ComputeExpression.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/ODataAnnotatable.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["warranties",{"_index":3306,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3301,"title":{},"body":{"license.html":{}}}],["whether",{"_index":3319,"title":{},"body":{"license.html":{}}}],["wiki",{"_index":3257,"title":{},"body":{"index.html":{}}}],["window.addeventlistener('beforeunload",{"_index":2210,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["withcount",{"_index":1877,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["withcredentials",{"_index":22,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["without",{"_index":1884,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"index.html":{},"license.html":{}}}],["works",{"_index":3237,"title":{},"body":{"index.html":{}}}],["www.odata.org/getting",{"_index":2951,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["xssi_prefix",{"_index":1354,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["year",{"_index":759,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["year(value",{"_index":325,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field-1.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["yes",{"_index":426,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/ComputeExpression.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/ExpandExpression.html":{},"classes/ExpandField.html":{},"classes/GeoFunctions.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSchemaElement.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/OrderByExpression.html":{},"interfaces/Parser.html":{},"classes/SearchExpression.html":{},"classes/SegmentHandler.html":{},"classes/SelectExpression.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/TypeFunctions.html":{}}}],["zone.js",{"_index":3121,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiOptions.html":{"url":"interfaces/ApiOptions.html","title":"interface - ApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Options\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accept\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodyQueryOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            deleteRefBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            etag\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetchPolicy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            params\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prefer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stripMetadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            withCredentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accept\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accept:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodyQueryOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodyQueryOptions:         QueryOptionNames[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QueryOptionNames[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deleteRefBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deleteRefBy:     \"path\" | \"id\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"path\" | \"id\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        etag\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        etag:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetchPolicy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetchPolicy:         FetchPolicy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FetchPolicy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefer:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stripMetadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stripMetadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticFunctions.html":{"url":"classes/ArithmeticFunctions.html","title":"class - ArithmeticFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ceiling\n                            \n                            \n                                floor\n                            \n                            \n                                round\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ceiling\n                        \n                    \n                \n            \n            \n                \nceiling(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        floor\n                        \n                    \n                \n            \n            \n                \nfloor(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:259\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        round\n                        \n                    \n                \n            \n            \n                \nround(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:262\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticOperators.html":{"url":"classes/ArithmeticOperators.html","title":"class - ArithmeticOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                div\n                            \n                            \n                                mod\n                            \n                            \n                                mul\n                            \n                            \n                                neg\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:398\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        div\n                        \n                    \n                \n            \n            \n                \ndiv(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:407\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mod\n                        \n                    \n                \n            \n            \n                \nmod(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:410\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mul\n                        \n                    \n                \n            \n            \n                \nmul(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:404\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neg\n                        \n                    \n                \n            \n            \n                \nneg(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:413\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n            \n                \nsub(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:401\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cache.html":{"url":"interfaces/Cache.html","title":"interface - Cache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        get\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:119\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, payload: T, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:118\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionFunctions.html":{"url":"classes/CollectionFunctions.html","title":"class - CollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasSubsequence\n                            \n                            \n                                hasSubset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubsequence\n                        \n                    \n                \n            \n            \n                \nhasSubsequence(s1: T, s2: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s1\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    s2\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubset\n                        \n                    \n                \n            \n            \n                \nhasSubset(s1: T, s2: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s1\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    s2\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ComputeExpression.html":{"url":"classes/ComputeExpression.html","title":"class - ComputeExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComputeExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/compute.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                names\n                            \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                compute\n                            \n                            \n                                    Static\n                                e\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                    Static\n                                s\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        names\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(name: string, node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ComputeExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:66\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ComputeExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        compute\n                        \n                    \n                \n            \n            \n                \n                    \n                    compute(opts: (builder: literal type,current: ComputeExpression) => void, current?: ComputeExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:33\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                            ComputeExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ComputeExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        e\n                        \n                    \n                \n            \n            \n                \n                    \n                    e()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:25\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :     ComputeExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(name: string, opts: (e: literal type) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:79\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ComputeExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:49\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        s\n                        \n                    \n                \n            \n            \n                \n                    \n                    s()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/compute.ts:29\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :     T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport {\n  Field,\n  functions,\n  ODataFunctions,\n  ODataOperators,\n  operators,\n  Renderable,\n} from './syntax';\n\nexport class ComputeExpression extends Expression {\n  names: string[];\n  constructor({\n    children,\n    names,\n  }: {\n    children?: Renderable[];\n    names?: string[];\n  } = {}) {\n    super({ children });\n    this.names = names || [];\n  }\n\n  static e() {\n    return new ComputeExpression();\n  }\n\n  static s(): T {\n    return Field.factory();\n  }\n\n  static compute(\n    opts: (\n      builder: { s: T; e: () => ComputeExpression },\n      current?: ComputeExpression\n    ) => ComputeExpression,\n    current?: ComputeExpression\n  ): ComputeExpression {\n    return opts(\n      {\n        s: ComputeExpression.s(),\n        e: ComputeExpression.e,\n      },\n      current\n    ) as ComputeExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let children = this._children.map((n) =>\n      n.render({ aliases, escape, prefix })\n    );\n    return this.names\n      .map((name, index) => `${children[index]} as ${name}`)\n      .join(',');\n  }\n\n  clone() {\n    return new ComputeExpression({\n      children: this._children.map((c) => c.clone()),\n      names: [...this.names],\n    });\n  }\n\n  private _add(name: string, node: Renderable): ComputeExpression {\n    this.names.push(name);\n    this._children.push(node);\n    return this;\n  }\n\n  field(\n    name: string,\n    opts: (e: { o: ODataOperators; f: ODataFunctions }) => Renderable\n  ): ComputeExpression {\n    const node = opts({\n      o: operators as ODataOperators,\n      f: functions as ODataFunctions,\n    });\n    return this._add(name, node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConditionalFunctions.html":{"url":"classes/ConditionalFunctions.html","title":"class - ConditionalFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConditionalFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                case\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        case\n                        \n                    \n                \n            \n            \n                \ncase(condition: T | string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:290\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    condition\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAction.html":{"url":"classes/CsdlAction.html","title":"class - CsdlAction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                    Optional\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType?: CsdlReturnType, isBound?: boolean, entitySetPath?: string, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlActionImport.html":{"url":"classes/CsdlActionImport.html","title":"class - CsdlActionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlActionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, action: string, entitySet?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotable.html":{"url":"classes/CsdlAnnotable.html","title":"class - CsdlAnnotable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotation.html":{"url":"classes/CsdlAnnotation.html","title":"class - CsdlAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(term: string, qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        term\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotations.html":{"url":"classes/CsdlAnnotations.html","title":"class - CsdlAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(target: string, annotationList: CsdlAnnotation[], qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlComplexType.html":{"url":"classes/CsdlComplexType.html","title":"class - CsdlComplexType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlComplexType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityContainer.html":{"url":"classes/CsdlEntityContainer.html","title":"class - CsdlEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actionImports\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySets\n                            \n                            \n                                    Public\n                                    Optional\n                                extend\n                            \n                            \n                                    Public\n                                    Optional\n                                functionImports\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                singletons\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, extend?: string, entitySets?: CsdlEntitySet[], singletons?: CsdlSingleton[], functionImports?: CsdlFunctionImport[], actionImports?: CsdlActionImport[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        extend\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySets\n                                                  \n                                                        \n                                                                        CsdlEntitySet[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        singletons\n                                                  \n                                                        \n                                                                        CsdlSingleton[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionImports\n                                                  \n                                                        \n                                                                    CsdlFunctionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actionImports\n                                                  \n                                                        \n                                                                    CsdlActionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlActionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        extend\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunctionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        singletons\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlSingleton[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlEntitySet } from './csdl-entity-set';\nimport { CsdlSingleton } from './csdl-singleton';\nimport { CsdlFunctionImport, CsdlActionImport } from './csdl-function-action';\n\nexport class CsdlEntityContainer {\n  constructor(\n    public name: string,\n    public extend?: string,\n    public entitySets?: CsdlEntitySet[],\n    public singletons?: CsdlSingleton[],\n    public functionImports?: CsdlFunctionImport[],\n    public actionImports?: CsdlActionImport[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntitySet.html":{"url":"classes/CsdlEntitySet.html","title":"class - CsdlEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                entityType\n                            \n                            \n                                    Public\n                                    Optional\n                                includeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBinding\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, entityType: string, navigationPropertyBinding?: CsdlNavigationPropertyBinding[], includeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBinding\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlEntitySet {\n  constructor(\n    public name: string,\n    public entityType: string,\n    public navigationPropertyBinding?: CsdlNavigationPropertyBinding[],\n    public includeInServiceDocument?: boolean\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityType.html":{"url":"classes/CsdlEntityType.html","title":"class - CsdlEntityType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                hasStream\n                            \n                            \n                                    Public\n                                    Optional\n                                key\n                            \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, key?: CsdlKey, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean, hasStream?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        CsdlKey\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        hasStream\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        hasStream\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlKey\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumMember.html":{"url":"classes/CsdlEnumMember.html","title":"class - CsdlEnumMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value?: number)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(public name: string, public value?: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumType.html":{"url":"classes/CsdlEnumType.html","title":"class - CsdlEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                isFlags\n                            \n                            \n                                    Public\n                                members\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                underlyingType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, members: CsdlEnumMember[], underlyingType?: string, isFlags?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        members\n                                                  \n                                                        \n                                                                        CsdlEnumMember[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlyingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isFlags\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isFlags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumMember[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        underlyingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(public name: string, public value?: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunction.html":{"url":"classes/CsdlFunction.html","title":"class - CsdlFunction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                    Optional\n                                isComposable\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType: CsdlReturnType, isBound?: boolean, entitySetPath?: string, isComposable?: boolean, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isComposable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isComposable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunctionImport.html":{"url":"classes/CsdlFunctionImport.html","title":"class - CsdlFunctionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunctionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                functionName\n                            \n                            \n                                    Public\n                                    Optional\n                                IncludeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, functionName: string, entitySet?: string, IncludeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        IncludeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        functionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        IncludeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlInclude.html":{"url":"classes/CsdlInclude.html","title":"class - CsdlInclude","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlInclude\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                namespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlIncludeAnnotations.html":{"url":"classes/CsdlIncludeAnnotations.html","title":"class - CsdlIncludeAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlIncludeAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                    Optional\n                                targetNamespace\n                            \n                            \n                                    Public\n                                termNamespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(termNamespace: string, qualifier?: string, targetNamespace?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        termNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        targetNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        termNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlKey.html":{"url":"classes/CsdlKey.html","title":"class - CsdlKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                propertyRefs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(propertyRefs: CsdlPropertyRef[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        propertyRefs\n                                                  \n                                                        \n                                                                    CsdlPropertyRef[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        propertyRefs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlPropertyRef[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationProperty.html":{"url":"classes/CsdlNavigationProperty.html","title":"class - CsdlNavigationProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                containsTarget\n                            \n                            \n                                    Public\n                                    Optional\n                                onDelete\n                            \n                            \n                                    Public\n                                    Optional\n                                partner\n                            \n                            \n                                    Public\n                                    Optional\n                                referentialConstraints\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, partner?: string, containsTarget?: boolean, referentialConstraints?: CsdlReferentialConstraint[], onDelete?: CsdlOnDelete)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        partner\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        containsTarget\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        referentialConstraints\n                                                  \n                                                        \n                                                                        CsdlReferentialConstraint[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        onDelete\n                                                  \n                                                        \n                                                                        CsdlOnDelete\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        containsTarget\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onDelete\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlOnDelete\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        partner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        referentialConstraints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReferentialConstraint[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationPropertyBinding.html":{"url":"classes/CsdlNavigationPropertyBinding.html","title":"class - CsdlNavigationPropertyBinding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationPropertyBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                path\n                            \n                            \n                                    Public\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(path: string, target: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlNavigationPropertyBinding {\n  constructor(public path: string, public target: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlOnDelete.html":{"url":"classes/CsdlOnDelete.html","title":"class - CsdlOnDelete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlOnDelete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(action: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlParameter.html":{"url":"classes/CsdlParameter.html","title":"class - CsdlParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlProperty.html":{"url":"classes/CsdlProperty.html","title":"class - CsdlProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, defaultValue?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlPropertyRef.html":{"url":"classes/CsdlPropertyRef.html","title":"class - CsdlPropertyRef","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlPropertyRef\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReference.html":{"url":"classes/CsdlReference.html","title":"class - CsdlReference","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReference\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                includeAnnotations\n                            \n                            \n                                    Public\n                                    Optional\n                                includes\n                            \n                            \n                                    Public\n                                uri\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uri: string, includes?: CsdlInclude[], includeAnnotations?: CsdlIncludeAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uri\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        includes\n                                                  \n                                                        \n                                                                        CsdlInclude[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeAnnotations\n                                                  \n                                                        \n                                                                    CsdlIncludeAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeAnnotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlIncludeAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlInclude[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReferentialConstraint.html":{"url":"classes/CsdlReferentialConstraint.html","title":"class - CsdlReferentialConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReferentialConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                property\n                            \n                            \n                                    Public\n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(property: string, referencedProperty: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        property\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        referencedProperty\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReturnType.html":{"url":"classes/CsdlReturnType.html","title":"class - CsdlReturnType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReturnType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:51\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSchema.html":{"url":"classes/CsdlSchema.html","title":"class - CsdlSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actions\n                            \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationsList\n                            \n                            \n                                    Public\n                                    Optional\n                                complexTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                entityContainer\n                            \n                            \n                                    Public\n                                    Optional\n                                entityTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                enumTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                functions\n                            \n                            \n                                    Public\n                                namespace\n                            \n                            \n                                    Public\n                                    Optional\n                                terms\n                            \n                            \n                                    Public\n                                    Optional\n                                typeDefinitions\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string, enumTypes?: CsdlEnumType[], complexTypes?: CsdlComplexType[], entityTypes?: CsdlEntityType[], functions?: CsdlFunction[], actions?: CsdlAction[], entityContainer?: CsdlEntityContainer, typeDefinitions?: CsdlTypeDefinition[], terms?: CsdlTerm[], annotationsList?: CsdlAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        enumTypes\n                                                  \n                                                        \n                                                                        CsdlEnumType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        complexTypes\n                                                  \n                                                        \n                                                                        CsdlComplexType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityTypes\n                                                  \n                                                        \n                                                                        CsdlEntityType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functions\n                                                  \n                                                        \n                                                                    CsdlFunction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions\n                                                  \n                                                        \n                                                                        CsdlAction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityContainer\n                                                  \n                                                        \n                                                                        CsdlEntityContainer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        typeDefinitions\n                                                  \n                                                        \n                                                                        CsdlTypeDefinition[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        terms\n                                                  \n                                                        \n                                                                        CsdlTerm[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationsList\n                                                  \n                                                        \n                                                                    CsdlAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        complexTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlComplexType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityContainer\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        enumTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        terms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTerm[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        typeDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTypeDefinition[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAnnotation,\n  CsdlAnnotable,\n  CsdlTerm,\n  CsdlAnnotations,\n} from './csdl-annotation';\nimport { CsdlTypeDefinition } from './csdl-type-definition';\nimport { CsdlEnumType } from './csdl-enum-type';\nimport { CsdlEntityType, CsdlComplexType } from './csdl-structured-type';\nimport { CsdlFunction, CsdlAction } from './csdl-function-action';\nimport { CsdlEntityContainer } from './csdl-entity-container';\n\nexport class CsdlSchema extends CsdlAnnotable {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n    public enumTypes?: CsdlEnumType[],\n    public complexTypes?: CsdlComplexType[],\n    public entityTypes?: CsdlEntityType[],\n    public functions?: CsdlFunction[],\n    public actions?: CsdlAction[],\n    public entityContainer?: CsdlEntityContainer,\n    public typeDefinitions?: CsdlTypeDefinition[],\n    public terms?: CsdlTerm[],\n    public annotationsList?: CsdlAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSingleton.html":{"url":"classes/CsdlSingleton.html","title":"class - CsdlSingleton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSingleton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBindings\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, navigationPropertyBindings?: CsdlNavigationPropertyBinding[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBindings\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlSingleton {\n  constructor(\n    public name: string,\n    public type: string,\n    public navigationPropertyBindings?: CsdlNavigationPropertyBinding[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuralProperty.html":{"url":"classes/CsdlStructuralProperty.html","title":"class - CsdlStructuralProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuralProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuredType.html":{"url":"classes/CsdlStructuredType.html","title":"class - CsdlStructuredType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuredType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                        CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlNavigationProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTerm.html":{"url":"classes/CsdlTerm.html","title":"class - CsdlTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appliesTo\n                            \n                            \n                                    Public\n                                    Optional\n                                baseTerm\n                            \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, baseTerm?: string, defaultValue?: string, appliesTo?: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseTerm\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        appliesTo\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appliesTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTypeDefinition.html":{"url":"classes/CsdlTypeDefinition.html","title":"class - CsdlTypeDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTypeDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                underlayingType\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, underlayingType: string, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlayingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        underlayingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlTypeDefinition extends CsdlAnnotable {\n  constructor(\n    public name: string,\n    public underlayingType: string,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DateAndTimeFunctions.html":{"url":"classes/DateAndTimeFunctions.html","title":"class - DateAndTimeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateAndTimeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                day\n                            \n                            \n                                fractionalseconds\n                            \n                            \n                                hour\n                            \n                            \n                                maxdatetime\n                            \n                            \n                                mindatetime\n                            \n                            \n                                minute\n                            \n                            \n                                month\n                            \n                            \n                                now\n                            \n                            \n                                second\n                            \n                            \n                                time\n                            \n                            \n                                totaloffsetminutes\n                            \n                            \n                                totalseconds\n                            \n                            \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n            \n                \ndate(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:211\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        day\n                        \n                    \n                \n            \n            \n                \nday(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:214\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fractionalseconds\n                        \n                    \n                \n            \n            \n                \nfractionalseconds(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hour\n                        \n                    \n                \n            \n            \n                \nhour(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:220\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxdatetime\n                        \n                    \n                \n            \n            \n                \nmaxdatetime(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:223\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mindatetime\n                        \n                    \n                \n            \n            \n                \nmindatetime(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:226\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        minute\n                        \n                    \n                \n            \n            \n                \nminute(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        month\n                        \n                    \n                \n            \n            \n                \nmonth(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:232\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        now\n                        \n                    \n                \n            \n            \n                \nnow()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:235\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        second\n                        \n                    \n                \n            \n            \n                \nsecond(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:238\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time\n                        \n                    \n                \n            \n            \n                \ntime(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:241\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totaloffsetminutes\n                        \n                    \n                \n            \n            \n                \ntotaloffsetminutes(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:244\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalseconds\n                        \n                    \n                \n            \n            \n                \ntotalseconds(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:247\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        year\n                        \n                    \n                \n            \n            \n                \nyear(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:250\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpandExpression.html":{"url":"classes/ExpandExpression.html","title":"class - ExpandExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpandExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                e\n                            \n                            \n                                    Static\n                                expand\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                    Static\n                                s\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:161\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:214\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpandExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:208\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ExpandExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        e\n                        \n                    \n                \n            \n            \n                \n                    \n                    e()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:170\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :         ExpandExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        expand\n                        \n                    \n                \n            \n            \n                \n                    \n                    expand(opts: (builder: literal type,current: ExpandExpression) => void, current?: ExpandExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:178\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                                ExpandExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpandExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: F, opts?: (e?: ExpandField) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:219\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        F\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            F\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ExpandExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:194\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        s\n                        \n                    \n                \n            \n            \n                \n                    \n                    s()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:174\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :     T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { QueryOptionNames } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterConnector, FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchConnector, SearchExpression } from './search';\nimport { SelectExpression } from './select';\nimport {\n  Field,\n  ODataFunctions,\n  ODataOperators,\n  render,\n  Renderable,\n} from './syntax';\n\nexport class ExpandField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    const params: { [key: string]: string } = [\n      QueryOptionNames.select,\n      QueryOptionNames.expand,\n      QueryOptionNames.filter,\n      QueryOptionNames.search,\n      QueryOptionNames.orderBy,\n      QueryOptionNames.skip,\n      QueryOptionNames.top,\n      QueryOptionNames.levels,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({ aliases, prefix, escape });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let expand = `${render(this.field, { aliases, escape, prefix })}`;\n    if (!Types.isEmpty(params)) {\n      expand = `${expand}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return expand;\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new ExpandField(this.field.clone(), values);\n  }\n\n  select(\n    opts: (\n      builder: { s: T; e: () => SelectExpression },\n      current?: SelectExpression\n    ) => SelectExpression\n  ): SelectExpression {\n    return this.option(\n      QueryOptionNames.select,\n      SelectExpression.select(opts, this.values[QueryOptionNames.select])\n    );\n  }\n\n  expand(\n    opts: (\n      builder: { s: T; e: () => ExpandExpression },\n      current?: ExpandExpression\n    ) => ExpandExpression\n  ) {\n    return this.option(\n      QueryOptionNames.expand,\n      ExpandExpression.expand(opts, this.values[QueryOptionNames.expand])\n    );\n  }\n\n  filter(\n    opts: (\n      builder: {\n        s: T;\n        e: (connector?: FilterConnector) => FilterExpression;\n        o: ODataOperators;\n        f: ODataFunctions;\n      },\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOptionNames.filter,\n      FilterExpression.filter(opts, this.values[QueryOptionNames.filter])\n    );\n  }\n\n  search(\n    opts: (builder: {\n      e: (connector?: SearchConnector) => SearchExpression;\n    }) => SearchExpression\n  ) {\n    return this.option(\n      QueryOptionNames.search,\n      SearchExpression.search(opts, this.values[QueryOptionNames.search])\n    );\n  }\n\n  orderBy(\n    opts: (\n      builder: { s: T; e: () => OrderByExpression },\n      current?: OrderByExpression\n    ) => OrderByExpression\n  ) {\n    return this.option(\n      QueryOptionNames.orderBy,\n      OrderByExpression.orderBy(opts, this.values[QueryOptionNames.orderBy])\n    );\n  }\n\n  skip(n: number) {\n    return this.option(QueryOptionNames.skip, n);\n  }\n\n  top(n: number) {\n    return this.option(QueryOptionNames.top, n);\n  }\n\n  levels(n: number | 'max') {\n    return this.option(QueryOptionNames.levels, n);\n  }\n\n  // Option Handler\n  private option(name: QueryOptionNames, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport class ExpandExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static e() {\n    return new ExpandExpression();\n  }\n\n  static s(): T {\n    return Field.factory();\n  }\n\n  static expand(\n    opts: (\n      builder: { s: T; e: () => ExpandExpression },\n      current?: ExpandExpression\n    ) => ExpandExpression,\n    current?: ExpandExpression\n  ): ExpandExpression {\n    return opts(\n      {\n        s: ExpandExpression.s(),\n        e: ExpandExpression.e,\n      },\n      current\n    ) as ExpandExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(',');\n  }\n\n  clone() {\n    return new ExpandExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): ExpandExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(field: F, opts?: (e: ExpandField) => void): ExpandExpression {\n    let node = new ExpandField(field);\n    if (opts !== undefined) opts(node);\n    return this._add(node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpandField.html":{"url":"classes/ExpandField.html","title":"class - ExpandField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpandField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/expand.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                expand\n                            \n                            \n                                filter\n                            \n                            \n                                levels\n                            \n                            \n                                    Private\n                                option\n                            \n                            \n                                orderBy\n                            \n                            \n                                render\n                            \n                            \n                                search\n                            \n                            \n                                select\n                            \n                            \n                                skip\n                            \n                            \n                                toJSON\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: any, values: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ExpandField\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expand\n                        \n                    \n                \n            \n            \n                \nexpand(opts: (builder: literal type,current: ExpandExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:90\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filter\n                        \n                    \n                \n            \n            \n                \nfilter(opts: (builder: literal type,current: FilterExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:102\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        levels\n                        \n                    \n                \n            \n            \n                \nlevels(n: number | \"max\")\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                            number | \"max\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        option\n                        \n                    \n                \n            \n            \n                \n                    \n                    option(name: QueryOptionNames, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:155\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        orderBy\n                        \n                    \n                \n            \n            \n                \norderBy(opts: (builder: literal type,current: OrderByExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:130\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        search\n                        \n                    \n                \n            \n            \n                \nsearch(opts: (builder: literal type) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:119\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(opts: (builder: literal type,current: SelectExpression) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:78\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skip\n                        \n                    \n                \n            \n            \n                \nskip(n: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { field: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        top\n                        \n                    \n                \n            \n            \n                \ntop(n: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/expand.ts:23\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { QueryOptionNames } from '../../../types';\nimport { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { FilterConnector, FilterExpression } from './filter';\nimport { OrderByExpression } from './orderby';\nimport { SearchConnector, SearchExpression } from './search';\nimport { SelectExpression } from './select';\nimport {\n  Field,\n  ODataFunctions,\n  ODataOperators,\n  render,\n  Renderable,\n} from './syntax';\n\nexport class ExpandField implements Renderable {\n  constructor(\n    protected field: any,\n    private values: { [name: string]: any } = {}\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'ExpandField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    const params: { [key: string]: string } = [\n      QueryOptionNames.select,\n      QueryOptionNames.expand,\n      QueryOptionNames.filter,\n      QueryOptionNames.search,\n      QueryOptionNames.orderBy,\n      QueryOptionNames.skip,\n      QueryOptionNames.top,\n      QueryOptionNames.levels,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({ aliases, prefix, escape });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n    let expand = `${render(this.field, { aliases, escape, prefix })}`;\n    if (!Types.isEmpty(params)) {\n      expand = `${expand}(${Object.keys(params)\n        .map((key) => `$${key}=${params[key]}`)\n        .join(';')})`;\n    }\n    return expand;\n  }\n\n  clone() {\n    const values = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new ExpandField(this.field.clone(), values);\n  }\n\n  select(\n    opts: (\n      builder: { s: T; e: () => SelectExpression },\n      current?: SelectExpression\n    ) => SelectExpression\n  ): SelectExpression {\n    return this.option(\n      QueryOptionNames.select,\n      SelectExpression.select(opts, this.values[QueryOptionNames.select])\n    );\n  }\n\n  expand(\n    opts: (\n      builder: { s: T; e: () => ExpandExpression },\n      current?: ExpandExpression\n    ) => ExpandExpression\n  ) {\n    return this.option(\n      QueryOptionNames.expand,\n      ExpandExpression.expand(opts, this.values[QueryOptionNames.expand])\n    );\n  }\n\n  filter(\n    opts: (\n      builder: {\n        s: T;\n        e: (connector?: FilterConnector) => FilterExpression;\n        o: ODataOperators;\n        f: ODataFunctions;\n      },\n      current?: FilterExpression\n    ) => FilterExpression\n  ) {\n    return this.option(\n      QueryOptionNames.filter,\n      FilterExpression.filter(opts, this.values[QueryOptionNames.filter])\n    );\n  }\n\n  search(\n    opts: (builder: {\n      e: (connector?: SearchConnector) => SearchExpression;\n    }) => SearchExpression\n  ) {\n    return this.option(\n      QueryOptionNames.search,\n      SearchExpression.search(opts, this.values[QueryOptionNames.search])\n    );\n  }\n\n  orderBy(\n    opts: (\n      builder: { s: T; e: () => OrderByExpression },\n      current?: OrderByExpression\n    ) => OrderByExpression\n  ) {\n    return this.option(\n      QueryOptionNames.orderBy,\n      OrderByExpression.orderBy(opts, this.values[QueryOptionNames.orderBy])\n    );\n  }\n\n  skip(n: number) {\n    return this.option(QueryOptionNames.skip, n);\n  }\n\n  top(n: number) {\n    return this.option(QueryOptionNames.top, n);\n  }\n\n  levels(n: number | 'max') {\n    return this.option(QueryOptionNames.levels, n);\n  }\n\n  // Option Handler\n  private option(name: QueryOptionNames, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return this.values[name];\n  }\n}\n\nexport class ExpandExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static e() {\n    return new ExpandExpression();\n  }\n\n  static s(): T {\n    return Field.factory();\n  }\n\n  static expand(\n    opts: (\n      builder: { s: T; e: () => ExpandExpression },\n      current?: ExpandExpression\n    ) => ExpandExpression,\n    current?: ExpandExpression\n  ): ExpandExpression {\n    return opts(\n      {\n        s: ExpandExpression.s(),\n        e: ExpandExpression.e,\n      },\n      current\n    ) as ExpandExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(',');\n  }\n\n  clone() {\n    return new ExpandExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): ExpandExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(field: F, opts?: (e: ExpandField) => void): ExpandExpression {\n    let node = new ExpandField(field);\n    if (opts !== undefined) opts(node);\n    return this._add(node);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Expression.html":{"url":"classes/Expression.html","title":"class - Expression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Expression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/base.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                children\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                length\n                            \n                            \n                                    Abstract\n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                    \n                    clone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Expression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/base.ts:14\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Renderable } from './syntax';\n\nexport abstract class Expression implements Renderable {\n  protected _children: Renderable[];\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    this._children = children || [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Expression';\n  }\n\n  abstract render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  }): string;\n\n  abstract clone(): Expression;\n\n  children() {\n    return this._children;\n  }\n\n  length() {\n    return this._children.length;\n  }\n\n  toJSON() {\n    return {\n      children: this._children.map((c) => c.toJSON()),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/metadata.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fieldType\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, fieldType: FieldType)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fieldType\n                                                  \n                                                        \n                                                                        FieldType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fieldType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FieldType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAction,\n  CsdlActionImport,\n  CsdlFunction,\n  CsdlFunctionImport,\n  CsdlParameter,\n  CsdlReturnType,\n} from './csdl/csdl-function-action';\nimport {\n  CsdlAnnotation,\n  CsdlAnnotations,\n  CsdlTerm,\n} from './csdl/csdl-annotation';\nimport {\n  CsdlComplexType,\n  CsdlEntityType,\n  CsdlKey,\n  CsdlPropertyRef,\n} from './csdl/csdl-structured-type';\nimport { CsdlEnumMember, CsdlEnumType } from './csdl/csdl-enum-type';\nimport {\n  CsdlInclude,\n  CsdlIncludeAnnotations,\n  CsdlReference,\n} from './csdl/csdl-reference';\nimport {\n  CsdlNavigationProperty,\n  CsdlOnDelete,\n  CsdlProperty,\n  CsdlReferentialConstraint,\n} from './csdl/csdl-structural-property';\n\nimport { CsdlEntityContainer } from './csdl/csdl-entity-container';\nimport { CsdlEntitySet } from './csdl/csdl-entity-set';\nimport { CsdlNavigationPropertyBinding } from './csdl/csdl-navigation-property-binding';\nimport { CsdlSchema } from './csdl/csdl-schema';\nimport { CsdlSingleton } from './csdl/csdl-singleton';\nimport { CsdlTypeDefinition } from './csdl/csdl-type-definition';\nimport { Types } from '../../utils/types';\nimport { VERSION_4_0 } from '../../constants';\n\nenum FieldType {\n  ATTRIBUTE,\n  TAG,\n}\n\nclass Field {\n  constructor(public name: string, public fieldType: FieldType) {}\n}\n\nexport class ODataMetadata {\n  // TAGS\n  private static readonly TAG_EDMX = 'edmx:Edmx';\n  private static readonly TAG_DATA_SERVICES = 'edmx:DataServices';\n  private static readonly TAG_REFERENCE = 'edmx:Reference';\n  private static readonly TAG_INCLUDE = 'edmx:Include';\n  private static readonly TAG_INCLUDE_ANNOTATIONS = 'edmx:IncludeAnnotations';\n  private static readonly TAG_TERM = 'Term';\n  private static readonly TAG_ANNOTATIONS = 'Annotations';\n  private static readonly TAG_ANNOTATION = 'Annotation';\n  private static readonly TAG_SCHEMA = 'Schema';\n  private static readonly TAG_ENUM_TYPE = 'EnumType';\n  private static readonly TAG_MEMBER = 'Member';\n  private static readonly TAG_COMPLEX_TYPE = 'ComplexType';\n  private static readonly TAG_ENTITY_TYPE = 'EntityType';\n  private static readonly TAG_PROPERTY = 'Property';\n  private static readonly TAG_KEY = 'Key';\n  private static readonly TAG_PROPERTY_REF = 'PropertyRef';\n  private static readonly TAG_NAVIGATION_PROPERTY = 'NavigationProperty';\n  private static readonly TAG_REFERENTIAL_CONSTRAINT = 'ReferentialConstraint';\n  private static readonly TAG_ON_DELETE = 'OnDelete';\n  private static readonly TAG_FUNCTION = 'Function';\n  private static readonly TAG_RETURN_TYPE = 'ReturnType';\n  private static readonly TAG_PARAMETER = 'Parameter';\n  private static readonly TAG_ACTION = 'Action';\n  private static readonly TAG_ENTITY_CONTAINER = 'EntityContainer';\n  private static readonly TAG_ENTITY_SET = 'EntitySet';\n  private static readonly TAG_SINGLETON = 'Singleton';\n  private static readonly TAG_FUNCTION_IMPORT = 'FunctionImport';\n  private static readonly TAG_ACTION_IMPORT = 'ActionImport';\n  private static readonly TAG_NAVIGATION_PROPERTY_BINDING =\n    'NavigationPropertyBinding';\n  private static readonly TAG_TYPE_DEFINITION = 'TypeDefinition';\n\n  // ATTRIBUTES\n  private static readonly ATTRIBUTE_VERSION = 'Version';\n  private static readonly ATTRIBUTE_URI = 'Uri';\n  private static readonly ATTRIBUTE_ALIAS = 'Alias';\n  private static readonly ATTRIBUTE_NAMESPACE = 'Namespace';\n  private static readonly ATTRIBUTE_TERM_NAMESPACE = 'TermNamespace';\n  private static readonly ATTRIBUTE_QUALIFIER = 'Qualifier';\n  private static readonly ATTRIBUTE_TARGET_NAMESPACE = 'TargetNamespace';\n  private static readonly ATTRIBUTE_TERM = 'Term';\n  private static readonly ATTRIBUTE_NAME = 'Name';\n  private static readonly ATTRIBUTE_VALUE = 'Value';\n  private static readonly ATTRIBUTE_BASE_TYPE = 'BaseType';\n  private static readonly ATTRIBUTE_OPEN_TYPE = 'OpenType';\n  private static readonly ATTRIBUTE_TYPE = 'Type';\n  private static readonly ATTRIBUTE_NULLABLE = 'Nullable';\n  private static readonly ATTRIBUTE_MAX_LENGTH = 'MaxLength';\n  private static readonly ATTRIBUTE_PRECISION = 'Precision';\n  private static readonly ATTRIBUTE_SCALE = 'Scale';\n  private static readonly ATTRIBUTE_UNICODE = 'Unicode';\n  private static readonly ATTRIBUTE_SRID = 'SRID';\n  private static readonly ATTRIBUTE_DEFAULT_VALUE = 'DefaultValue';\n  private static readonly ATTRIBUTE_PARTNER = 'Partner';\n  private static readonly ATTRIBUTE_PROPERTY = 'Property';\n  private static readonly ATTRIBUTE_REFERENCED_PROPERTY = 'ReferencedProperty';\n  private static readonly ATTRIBUTE_HAS_STREAM = 'HasStream';\n  private static readonly ATTRIBUTE_CONTAINS_TARGET = 'ContainsTarget';\n  private static readonly ATTRIBUTE_IS_BOUND = 'IsBound';\n  private static readonly ATTRIBUTE_ENTITY_SET_PATH = 'EntitySetPath';\n  private static readonly ATTRIBUTE_IS_COMPOSABLE = 'IsComposable';\n  private static readonly ATTRIBUTE_ENTITY_TYPE = 'EntityType';\n  private static readonly ATTRIBUTE_PATH = 'Path';\n  private static readonly ATTRIBUTE_TARGET = 'Target';\n  private static readonly ATTRIBUTE_FUNCTION = 'Function';\n  private static readonly ATTRIBUTE_ACTION = 'Action';\n  private static readonly ATTRIBUTE_ENTITY_SET = 'EntitySet';\n  private static readonly ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT =\n    'IncludeInServiceDocument';\n  private static readonly ATTRIBUTE_ABSTRACT = 'Abstract';\n  private static readonly ATTRIBUTE_UNDERLYING_TYPE = 'UnderlyingType';\n  private static readonly ATTRIBUTE_IS_FLAGS = 'IsFlags';\n  private static readonly ATTRIBUTE_EXTENDS = 'Extends';\n  private static readonly ATTRIBUTE_BASE_TERM = 'BaseTerm';\n  private static readonly ATTRIBUTE_APPLIES_TO = 'AppliesTo';\n\n  public readonly version: string;\n  public readonly references: CsdlReference[];\n  public readonly schemas: CsdlSchema[];\n\n  constructor(xml: string) {\n    try {\n      const parser: DOMParser = new DOMParser();\n      const document: Document = parser.parseFromString(xml, 'text/xml');\n\n      this.checkVersion(document);\n\n      this.version = this.getFieldValueByAttribute(\n        new Field(ODataMetadata.ATTRIBUTE_VERSION, FieldType.ATTRIBUTE),\n        document.documentElement.attributes\n      );\n\n      this.references = this.getObjects(\n        document.documentElement,\n        ODataMetadata.TAG_REFERENCE,\n        [\n          new Field(ODataMetadata.ATTRIBUTE_URI, FieldType.ATTRIBUTE),\n          new Field(ODataMetadata.TAG_INCLUDE, FieldType.TAG),\n          new Field(ODataMetadata.TAG_INCLUDE_ANNOTATIONS, FieldType.TAG),\n          new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n        ]\n      );\n\n      const dataServices: Element =\n        document.documentElement.getElementsByTagName(\n          ODataMetadata.TAG_DATA_SERVICES\n        )[0];\n      this.schemas = this.getObjects(dataServices, ODataMetadata.TAG_SCHEMA, [\n        new Field(ODataMetadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.TAG_ENUM_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_COMPLEX_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_FUNCTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ACTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_CONTAINER, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TYPE_DEFINITION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TERM, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATIONS, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n      ]);\n    } catch (error) {\n      throw new Error('Unable to parse metadata, ' + error);\n    }\n  }\n\n  protected checkVersion(document: Document) {\n    // check version\n    const attributes: NamedNodeMap = document.documentElement.attributes;\n    if (!attributes) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const attr: Attr | null = attributes.getNamedItem('Version');\n    if (attr === null) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const odataVersion = attr?.nodeValue;\n    if (odataVersion !== VERSION_4_0) {\n      throw new Error('OData version \"' + odataVersion + '\" is not supported');\n    }\n  }\n\n  protected getObjects(\n    parentElement: Element,\n    tag: string,\n    fieldNames: Field[]\n  ): any[] {\n    let objects: any[] = [];\n\n    const children: HTMLCollection = parentElement.children;\n    for (let index = 0; index \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field-1.html":{"url":"classes/Field-1.html","title":"class - Field-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ProxyHandler\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                factory\n                            \n                            \n                                get\n                            \n                            \n                                has\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        factory\n                        \n                    \n                \n            \n            \n                \n                    \n                    factory(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:23\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(target: T, key: string | symbol)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                            string | symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(target: T, key: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    target\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Function.html":{"url":"classes/Function.html","title":"class - Function","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Function\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, values: any[], normalize: boolean, escape: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:100\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        escape\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; name: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:108\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeoFunctions.html":{"url":"classes/GeoFunctions.html","title":"class - GeoFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeoFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                geoDistance\n                            \n                            \n                                geoIntersects\n                            \n                            \n                                geoLength\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        geoDistance\n                        \n                    \n                \n            \n            \n                \ngeoDistance(value: T, point: string, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:278\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    point\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoIntersects\n                        \n                    \n                \n            \n            \n                \ngeoIntersects(value: T, polygon: string, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:281\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    polygon\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoLength\n                        \n                    \n                \n            \n            \n                \ngeoLength(line: T, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:284\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    line\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grouping.html":{"url":"classes/Grouping.html","title":"class - Grouping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grouping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(group: Renderable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:418\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:444\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Grouping\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:432\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:425\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; group: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:421\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Lambda.html":{"url":"classes/Lambda.html","title":"class - Lambda","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Lambda\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:449\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:489\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Lambda\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:469\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:460\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { $type: any; op: string; values: {}; alias: string; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:456\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LambdaOperators.html":{"url":"classes/LambdaOperators.html","title":"class - LambdaOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LambdaOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                all\n                            \n                            \n                                any\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        all\n                        \n                    \n                \n            \n            \n                \nall(field: T, value: any, alias?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:503\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        any\n                        \n                    \n                \n            \n            \n                \nany(field: T, value: any, alias?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:499\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    alias\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogicalOperators.html":{"url":"classes/LogicalOperators.html","title":"class - LogicalOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogicalOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                eq\n                            \n                            \n                                ge\n                            \n                            \n                                gt\n                            \n                            \n                                has\n                            \n                            \n                                in\n                            \n                            \n                                le\n                            \n                            \n                                lt\n                            \n                            \n                                ne\n                            \n                            \n                                not\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        eq\n                        \n                    \n                \n            \n            \n                \neq(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:360\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ge\n                        \n                    \n                \n            \n            \n                \nge(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:369\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gt\n                        \n                    \n                \n            \n            \n                \ngt(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:366\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:389\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        in\n                        \n                    \n                \n            \n            \n                \nin(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:392\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        le\n                        \n                    \n                \n            \n            \n                \nle(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:375\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lt\n                        \n                    \n                \n            \n            \n                \nlt(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:372\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ne\n                        \n                    \n                \n            \n            \n                \nne(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:363\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        not\n                        \n                    \n                \n            \n            \n                \nnot(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:386\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotatable.html":{"url":"classes/ODataAnnotatable.html","title":"class - ODataAnnotatable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotatable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:18\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/annotation.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/annotation.ts:30\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotation.html":{"url":"classes/ODataAnnotation.html","title":"class - ODataAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bool\n                            \n                            \n                                    Optional\n                                int\n                            \n                            \n                                    Optional\n                                permissions\n                            \n                            \n                                    Optional\n                                properties\n                            \n                            \n                                    Optional\n                                string\n                            \n                            \n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annot: AnnotationConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annot\n                                                  \n                                                        \n                                                                        AnnotationConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bool\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        int\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        string\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\nexport class ODataAnnotatable {\n  annotations: ODataAnnotation[];\n  constructor(config: { annotations?: AnnotationConfig[] }) {\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Find an annotation inside the annotatable.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Find an annotation inside the annotatable and return its value.\n   * @param term The term of the annotation to find.\n   * @returns The value of the annotation.\n   */\n  annotatedValue(term: string | RegExp): T | undefined {\n    const reg = term instanceof RegExp ? term : new RegExp(`^${term}$`);\n    const annot = this.findAnnotation((a) => reg.test(a.term));\n    if (!annot) {\n      return undefined;\n    }\n    return (annot.string ||\n      annot.bool ||\n      annot.int ||\n      annot.permissions ||\n      annot.properties) as any;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotations.html":{"url":"classes/ODataAnnotations.html","title":"class - ODataAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attributes\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                    Abstract\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySet\n                                \n                                \n                                    type\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(helper: ODataVersionHelper, annotations: literal type, context?: ODataContext)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        helper\n                                                  \n                                                        \n                                                                        ODataVersionHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotations\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        ODataContext\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:12\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                    \n                    clone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        data\n                        \n                    \n                \n            \n            \n                \n                    \n                    data(data: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySet\n                    \n                \n\n                \n                    \n                        getentitySet()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:16\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:20\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataApiOptions.html":{"url":"classes/ODataApiOptions.html","title":"class - ODataApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ApiOptions\n                            OptionsHelper\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accept\n                            \n                            \n                                bodyQueryOptions\n                            \n                            \n                                deleteRefBy\n                            \n                            \n                                etag\n                            \n                            \n                                fetchPolicy\n                            \n                            \n                                headers\n                            \n                            \n                                params\n                            \n                            \n                                    Optional\n                                prefer\n                            \n                            \n                                    Optional\n                                stringAsEnum\n                            \n                            \n                                stripMetadata\n                            \n                            \n                                version\n                            \n                            \n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/options.ts:89\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accept\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:55\n                        \n                    \n\n            \n                \n                    Customize accept header with OData options\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOptionNames[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:50\n                        \n                    \n\n            \n                \n                    Send query options in the request body\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteRefBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"path\" | \"id\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        etag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : { ifMatch: true, ifNoneMatch: false }\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FetchPolicy\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:34\n                        \n                    \n\n            \n                \n                    Cache fetch policy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:42\n                        \n                    \n\n            \n                \n                    Extra headers to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:38\n                        \n                    \n\n            \n                \n                    Extra params to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        prefer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:26\n                        \n                    \n\n            \n                \n                    Send enum as string in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stripMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:30\n                        \n                    \n\n            \n                \n                    Strip metadata from the response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:22\n                        \n                    \n\n            \n                \n                    Default OData version\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:46\n                        \n                    \n\n            \n                \n                    Http request with credentials\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:106\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ApiOptions,\n  FetchPolicy,\n  ODataMetadataType,\n  ODataVersion,\n  Options,\n  OptionsHelper,\n  QueryOptionNames,\n} from './types';\nimport {\n  DEFAULT_FETCH_POLICY,\n  DEFAULT_STRIP_METADATA,\n  DEFAULT_VERSION,\n} from './constants';\n\nimport { ODataHelper } from './helper';\n\nexport class ODataApiOptions implements ApiOptions, OptionsHelper {\n  /**\n   * Default OData version\n   */\n  version: ODataVersion;\n  /**\n   * Send enum as string in the request\n   */\n  stringAsEnum?: boolean;\n  /**\n   * Strip metadata from the response\n   */\n  stripMetadata: ODataMetadataType;\n  /**\n   * Cache fetch policy\n   */\n  fetchPolicy: FetchPolicy;\n  /**\n   * Extra params to be sent in the request\n   */\n  params: { [param: string]: string | string[] };\n  /**\n   * Extra headers to be sent in the request\n   */\n  headers: { [param: string]: string | string[] };\n  /**\n   * Http request with credentials\n   */\n  withCredentials?: boolean;\n  /**\n   * Send query options in the request body\n   */\n  bodyQueryOptions: QueryOptionNames[];\n  /**\n   * Customize accept header with OData options\n   * @link http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_RequestingtheJSONFormat\n   */\n  accept?: {\n    exponentialDecimals?: boolean;\n    ieee754Compatible?: boolean;\n    metadata?: ODataMetadataType;\n    streaming?: boolean;\n  };\n  etag: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398229\n     */\n    ifMatch: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398230\n     */\n    ifNoneMatch: boolean;\n  } = { ifMatch: true, ifNoneMatch: false };\n  prefer?: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398238\n     */\n    maxPageSize?: number;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398240\n     */\n    return?: 'representation' | 'minimal';\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398236\n     */\n    continueOnError?: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398237\n     */\n    includeAnnotations?: string;\n  };\n  deleteRefBy: 'path' | 'id';\n\n  constructor(config: ApiOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n    this.params = config.params || {};\n    this.headers = config.headers || {};\n    this.withCredentials = config.withCredentials;\n    this.stripMetadata = config.stripMetadata || DEFAULT_STRIP_METADATA;\n    this.fetchPolicy = config.fetchPolicy || DEFAULT_FETCH_POLICY;\n    this.bodyQueryOptions = config.bodyQueryOptions || [];\n    this.accept = config.accept;\n    Object.assign(this.etag, config.etag || {});\n    this.prefer = config.prefer;\n    this.deleteRefBy = config.deleteRefBy || 'path';\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\nexport class ODataParserOptions implements OptionsHelper {\n  version: ODataVersion;\n  stringAsEnum?: boolean;\n\n  constructor(config: Options) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBaseService.html":{"url":"classes/ODataBaseService.html","title":"class - ODataBaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/base.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient, name: string, apiNameOrEntityType?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/base.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        apiNameOrEntityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:61\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:67\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:73\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:79\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:85\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:24\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:30\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:36\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:42\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:48\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:98\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:103\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType: \"entity\" | \"entities\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:108\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"entity\" | \"entities\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/base.ts:20\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport { ODataClient } from '../client';\nimport {\n  ODataActionResource,\n  ODataEntities,\n  ODataEntity,\n  ODataFunctionResource,\n  ODataNavigationPropertyResource,\n  ODataProperty,\n  ODataQueryArgumentsOptions,\n} from '../resources';\n\nexport abstract class ODataBaseService {\n  constructor(\n    protected client: ODataClient,\n    protected name: string,\n    protected apiNameOrEntityType?: string\n  ) {}\n\n  get api() {\n    return this.client.apiFor(this.apiNameOrEntityType);\n  }\n\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'none',\n    options?: ODataQueryArgumentsOptions\n  ): Observable;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'none',\n    options?: ODataQueryArgumentsOptions\n  ): Observable;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity' | 'entities',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.fetch({ responseType: responseType as any, ...options });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBatchRequest.html":{"url":"classes/ODataBatchRequest.html","title":"class - ODataBatchRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBatchRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/types/batch.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Subject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                request\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onError\n                            \n                            \n                                onLoad\n                            \n                            \n                                    \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: ODataRequest)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        ODataRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataRequest\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:39\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onError\n                        \n                    \n                \n            \n            \n                \nonError(content: string[], status: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onLoad\n                        \n                    \n                \n            \n            \n                \nonLoad(content: string[], status: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        toString\n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  HttpErrorResponse,\n  HttpHeaders,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { ODataApi } from '../../api';\nimport {\n  $BATCH,\n  ACCEPT,\n  APPLICATION_HTTP,\n  APPLICATION_JSON,\n  BATCH_PREFIX,\n  BINARY,\n  BOUNDARY_PREFIX_SUFFIX,\n  CHANGESET_PREFIX,\n  CONTENT_ID,\n  CONTENT_TRANSFER_ENCODING,\n  CONTENT_TYPE,\n  HTTP11,\n  MULTIPART_MIXED,\n  MULTIPART_MIXED_BOUNDARY,\n  NEWLINE,\n  NEWLINE_REGEXP,\n  ODATA_VERSION,\n  VERSION_4_0,\n  XSSI_PREFIX,\n} from '../../constants';\nimport { PathSegmentNames } from '../../types';\nimport { Http } from '../../utils/http';\nimport { Strings } from '../../utils/strings';\nimport { ODataPathSegments } from '../path';\nimport { ODataRequest } from '../request';\nimport { ODataResource } from '../resource';\nimport { ODataResponse } from '../responses';\nimport { ODataOptions } from './options';\n\nexport class ODataBatchRequest extends Subject> {\n  constructor(public request: ODataRequest) {\n    super();\n  }\n\n  override toString() {\n    //TODO: Relative or Absolute url ?\n    let res = [\n      `${this.request.method} ${this.request.pathWithParams} ${HTTP11}`,\n    ];\n    if (\n      this.request.method === 'POST' ||\n      this.request.method === 'PATCH' ||\n      this.request.method === 'PUT'\n    ) {\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_JSON}`);\n    }\n\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res = [\n        ...res,\n        ...headers\n          .keys()\n          .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`),\n      ];\n    }\n\n    return res.join(NEWLINE);\n  }\n\n  onLoad(content: string[], status: { code: number; message: string }) {\n    let headers: HttpHeaders = new HttpHeaders();\n    var index = 1;\n    for (; index = 200 && status.code ({\n        body,\n        headers,\n        status: status.code,\n        statusText: status.message,\n        url: this.request.urlWithParams,\n      });\n      this.next(ODataResponse.fromHttpResponse(this.request, res));\n      this.complete();\n    } else {\n      // An unsuccessful request is delivered on the error channel.\n      this.error(\n        new HttpErrorResponse({\n          // The error in this case is the response body (error from the server).\n          error: body,\n          headers,\n          status: status.code,\n          statusText: status.message,\n          url: this.request.urlWithParams,\n        })\n      );\n    }\n  }\n\n  onError(content: string[], status: { code: number; text: string }) {\n    const res = new HttpErrorResponse({\n      error: content.join(NEWLINE),\n      status: status.code || 0,\n      statusText: status.text || 'Unknown Error',\n      url: this.request.urlWithParams || undefined,\n    });\n    this.error(res);\n  }\n}\n\n/**\n * OData Batch Resource\n * https://www.odata.org/getting-started/advanced-tutorial/#batch\n */\nexport class ODataBatchResource extends ODataResource {\n  // VARIABLES\n  private _requests: ODataBatchRequest[] = [];\n  requests() {\n    return this._requests.map((r) => r.request);\n  }\n\n  //#region Factory\n  static factory(api: ODataApi) {\n    let segments = new ODataPathSegments();\n    segments.add(PathSegmentNames.batch, $BATCH);\n    return new ODataBatchResource(api, { segments });\n  }\n\n  override clone(): ODataBatchResource {\n    const batch = super.clone() as ODataBatchResource;\n    batch._requests = [...this._requests];\n    return batch;\n  }\n  //#endregion\n\n  private storeRequester() {\n    const current = this.api.request;\n    // Switch to the batch requester\n    this.api.request = (req: ODataRequest): Observable => {\n      if (req.api !== this.api)\n        throw new Error('Batch Request are for the same api.');\n      if (req.observe === 'events')\n        throw new Error(\"Batch Request does not allows observe == 'events'.\");\n      this._requests.push(new ODataBatchRequest(req));\n      return this._requests[this._requests.length - 1];\n    };\n    return current;\n  }\n\n  private restoreRequester(\n    handler: (req: ODataRequest) => Observable\n  ) {\n    this.api.request = handler;\n  }\n\n  /**\n   * Add to batch request\n   * @param ctx The context for the request\n   * @returns The result of execute the context\n   */\n  add(ctx: (batch: this) => Observable): Observable {\n    // Store original requester\n    var handler = this.storeRequester();\n    // Execute the context\n    const obs$ = ctx(this);\n    // Restore original requester\n    this.restoreRequester(handler);\n\n    return obs$;\n  }\n\n  send(options?: ODataOptions) {\n    if (this._requests.length >= 0) {\n      const bound = Strings.uniqueId(BATCH_PREFIX);\n      const requests = this._requests;\n      // Clean requests\n      this._requests = [];\n      const headers = Http.mergeHttpHeaders(\n        (options && options.headers) || {},\n        {\n          [ODATA_VERSION]: VERSION_4_0,\n          [CONTENT_TYPE]: MULTIPART_MIXED_BOUNDARY + bound,\n          [ACCEPT]: MULTIPART_MIXED,\n        }\n      );\n      const request = new ODataRequest({\n        method: 'POST',\n        body: ODataBatchResource.buildBody(bound, requests),\n        api: this.api,\n        resource: this,\n        observe: 'response',\n        responseType: 'text',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      });\n      this.api.request(request).subscribe((response) => {\n        ODataBatchResource.handleResponse(requests, response);\n      });\n    }\n  }\n\n  /**\n   * Execute the batch request\n   * @param ctx The context for the request\n   * @param options The options of the batch request\n   * @returns The result of execute the context\n   */\n  exec(\n    ctx: (batch: this) => Observable,\n    options?: ODataOptions\n  ): Observable {\n    const obs$ = this.add(ctx);\n    this.send(options);\n\n    return obs$;\n  }\n\n  body() {\n    return ODataBatchResource.buildBody(\n      Strings.uniqueId(BATCH_PREFIX),\n      this._requests\n    );\n  }\n\n  static buildBody(\n    batchBoundary: string,\n    requests: ODataBatchRequest[]\n  ): string {\n    let res = [];\n    let changesetBoundary: string | null = null;\n    let changesetId = 1;\n\n    for (const batch of requests) {\n      // if method is GET and there is a changeset boundary open then close it\n      if (batch.request.method === 'GET' && changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n\n      // if there is no changeset boundary open then open a batch boundary\n      if (changesetBoundary === null) {\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}`);\n      }\n\n      // if method is not GET and there is no changeset boundary open then open a changeset boundary\n      if (batch.request.method !== 'GET') {\n        if (changesetBoundary === null) {\n          changesetBoundary = Strings.uniqueId(CHANGESET_PREFIX);\n          res.push(\n            `${CONTENT_TYPE}: ${MULTIPART_MIXED_BOUNDARY}${changesetBoundary}`\n          );\n          res.push(NEWLINE);\n        }\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}`);\n      }\n\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_HTTP}`);\n      res.push(`${CONTENT_TRANSFER_ENCODING}: ${BINARY}`);\n\n      if (batch.request.method !== 'GET') {\n        res.push(`${CONTENT_ID}: ${changesetId++}`);\n      }\n\n      res.push(NEWLINE);\n      res.push(`${batch}`);\n\n      if (batch.request.method === 'GET' || batch.request.method === 'DELETE') {\n        res.push(NEWLINE);\n      } else {\n        res.push(`${NEWLINE}${JSON.stringify(batch.request.body)}`);\n      }\n    }\n\n    if (res.length) {\n      if (changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n      res.push(\n        `${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n      );\n    }\n    return res.join(NEWLINE);\n  }\n\n  static handleResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse\n  ) {\n    let chunks: string[][] = [];\n    const contentType: string = response.headers.get(CONTENT_TYPE) || '';\n    const batchBoundary: string = Http.boundaryDelimiter(contentType);\n    const endLine: string = Http.boundaryEnd(batchBoundary);\n\n    const lines: string[] = response.body.split(NEWLINE_REGEXP);\n\n    let changesetResponses: string[][] | null = null;\n    let contentId: number | null = null;\n    let changesetBoundary: string | null = null;\n    let changesetEndLine: string | null = null;\n    let startIndex: number | null = null;\n    for (let index = 0; index  {\n      const req = requests[index];\n      const { code, message } = Http.parseResponseStatus(chunk[0]);\n      req.onLoad(chunk.slice(1), { code, message });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCache.html":{"url":"classes/ODataCache.html","title":"class - ODataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Cache\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Abstract\n                                getResponse\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                    Abstract\n                                putResponse\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:50\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:81\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    getResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:66\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        putResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    putResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegmentNames } from '../types';\n\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegmentNames.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request']\n    );\n  }\n\n  tags(req: ODataRequest, res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key ? `${context.entitySet}(${context.key})` : context.entitySet\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] }\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {}\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    // Remove expired cache entries\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  flush() {\n    // Remove all cache entries\n    this.entries = new Map>();\n  }\n\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError(() => new Error('No Cached'));\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        })\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ODataCacheEntry.html":{"url":"interfaces/ODataCacheEntry.html","title":"interface - ODataCacheEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ODataCacheEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lastRead\n                                        \n                                \n                                \n                                        \n                                            payload\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastRead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastRead:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\nimport { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Cache, PathSegmentNames } from '../types';\n\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegmentNames.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request']\n    );\n  }\n\n  tags(req: ODataRequest, res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key ? `${context.entitySet}(${context.key})` : context.entitySet\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] }\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {}\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    // Remove expired cache entries\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  flush() {\n    // Remove all cache entries\n    this.entries = new Map>();\n  }\n\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError(() => new Error('No Cached'));\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        })\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallable.html":{"url":"classes/ODataCallable.html","title":"class - ODataCallable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/callable.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bound\n                            \n                            \n                                    Optional\n                                composable\n                            \n                            \n                                    Optional\n                                entitySetPath\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                path\n                            \n                            \n                                serialize\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        composable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallableParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:78\n                \n            \n\n\n            \n                \n                    Returns the binding parameter of the callable.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The binding parameter of the callable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:50\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:70\n                \n            \n\n\n            \n                \n                    Encode the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:60\n                \n            \n\n\n            \n                \n                    Serialize the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CallableConfig, Options, Parser } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataCallableParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataCallable extends ODataSchemaElement {\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parser: ODataCallableParser;\n\n  constructor(config: CallableConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySetPath = config.entitySetPath;\n    this.bound = config.bound;\n    this.composable = config.composable;\n    this.parser = new ODataCallableParser(\n      config,\n      schema.namespace,\n      schema.alias\n    );\n  }\n\n  path() {\n    let path: string;\n    if (this.entitySetPath) path = this.entitySetPath;\n    else if (this.bound) path = `${this.schema.namespace}.${this.name}`;\n    else\n      path = this.parser.return\n        ? this.api.findEntitySetForType(this.parser.return.type)?.name ||\n          this.name\n        : this.name;\n    return path;\n  }\n\n  configure({\n    parserForType,\n  }: {\n    parserForType: (type: string) => Parser;\n  }) {\n    this.parser.configure({ options: this.api.options, parserForType });\n  }\n\n  /**\n   * Deseialize the given value from the callable.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: Options): any {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the callable.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: any, options?: Options): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the callable.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: any, options?: Options): any {\n    return this.parser.encode(value, options);\n  }\n\n  /**\n   * Returns the binding parameter of the callable.\n   * @returns The binding parameter of the callable.\n   */\n  binding() {\n    return this.parser.binding();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallableParser.html":{"url":"classes/ODataCallableParser.html","title":"class - ODataCallableParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallableParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                            \n                                parameters\n                            \n                            \n                                parser\n                            \n                            \n                                    Optional\n                                return\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:93\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataParameterParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        return\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:90\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(params: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(params: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport { ODataParserOptions } from '../../options';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  Options,\n  OptionsHelper,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  optionsHelper?: OptionsHelper;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): R {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) => p.configure({ parserForType, options }));\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitiesAnnotations.html":{"url":"classes/ODataEntitiesAnnotations.html","title":"class - ODataEntitiesAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitiesAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                attributes\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    readLink\n                                \n                                \n                                    count\n                                \n                                \n                                    nextLink\n                                \n                                \n                                    deltaLink\n                                \n                                \n                                    top\n                                \n                                \n                                    skip\n                                \n                                \n                                    skiptoken\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:118\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntitiesAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:126\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:130\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        count\n                    \n                \n\n                \n                    \n                        getcount()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:134\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        nextLink\n                    \n                \n\n                \n                    \n                        getnextLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:138\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        deltaLink\n                    \n                \n\n                \n                    \n                        getdeltaLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:142\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n\n                \n                    \n                        gettop()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:146\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:151\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skiptoken\n                    \n                \n\n                \n                    \n                        getskiptoken()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:156\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:162\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityAnnotations.html":{"url":"classes/ODataEntityAnnotations.html","title":"class - ODataEntityAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Private\n                                    Optional\n                                _properties\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                property\n                            \n                            \n                                attributes\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    id\n                                \n                                \n                                    etag\n                                \n                                \n                                    mediaEtag\n                                \n                                \n                                    metadataEtag\n                                \n                                \n                                    readLink\n                                \n                                \n                                    editLink\n                                \n                                \n                                    mediaReadLink\n                                \n                                \n                                    mediaEditLink\n                                \n                                \n                                    mediaContentType\n                                \n                                \n                                    properties\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:44\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntityAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:52\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n\n                \n                    \n                        getid()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:56\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        etag\n                    \n                \n\n                \n                    \n                        getetag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:60\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEtag\n                    \n                \n\n                \n                    \n                        getmediaEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:64\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadataEtag\n                    \n                \n\n                \n                    \n                        getmetadataEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:68\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:72\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        editLink\n                    \n                \n\n                \n                    \n                        geteditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:76\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaReadLink\n                    \n                \n\n                \n                    \n                        getmediaReadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:80\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEditLink\n                    \n                \n\n                \n                    \n                        getmediaEditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:84\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaContentType\n                    \n                \n\n                \n                    \n                        getmediaContentType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:88\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        properties\n                    \n                \n\n                \n                    \n                        getproperties()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:93\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:105\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityContainer.html":{"url":"classes/ODataEntityContainer.html","title":"class - ODataEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-container.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entitySets\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntityContainerConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntityContainerConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityContainerConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntityContainer extends ODataSchemaElement {\n  entitySets: ODataEntitySet[];\n\n  constructor(config: EntityContainerConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entitySets = (config.entitySets || []).map(\n      (config) => new ODataEntitySet(config, schema)\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityService.html":{"url":"classes/ODataEntityService.html","title":"class - ODataEntityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataBaseService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                attach\n                            \n                            \n                                    Public\n                                    Abstract\n                                entity\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    structuredTypeSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(value: M)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:7\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:61\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:24\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:98\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        structuredTypeSchema\n                    \n                \n\n                \n                    \n                        getstructuredTypeSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity.ts:12\n                                \n                            \n                    \n                        \n                                The schema for the structured type.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ODataModel } from '../models/model';\nimport { EntityKey, ODataResource } from '../resources';\nimport { ODataBaseService } from './base';\n\nexport abstract class ODataEntityService extends ODataBaseService {\n  public abstract entity(key?: EntityKey): ODataResource;\n  public abstract attach>(value: M): void;\n\n  /**\n   * The schema for the structured type.\n   */\n  get structuredTypeSchema() {\n    return this.apiNameOrEntityType !== undefined\n      ? this.api.findStructuredTypeForType(this.apiNameOrEntityType)\n      : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySet.html":{"url":"classes/ODataEntitySet.html","title":"class - ODataEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entityType\n                            \n                            \n                                service\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntitySetConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntitySetConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        service\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntitySetConfig } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntitySet extends ODataSchemaElement {\n  entityType: string;\n  service: { new (...params: any[]): any };\n  constructor(config: EntitySetConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.entityType = config.entityType;\n    this.service = config.service;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySetService.html":{"url":"classes/ODataEntitySetService.html","title":"class - ODataEntitySetService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                create\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                entities\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                fetchAll\n                            \n                            \n                                    Public\n                                fetchMany\n                            \n                            \n                                    Public\n                                fetchOne\n                            \n                            \n                                    Public\n                                fetchOrCreate\n                            \n                            \n                                    Public\n                                modify\n                            \n                            \n                                    Public\n                                save\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySetSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:36\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:37\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(attrs: Partial, options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:90\n                \n            \n\n\n            \n                \n                    Create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        destroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy(key: EntityKey, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:139\n                \n            \n\n\n            \n                \n                    Delete an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entities\n                        \n                    \n                \n            \n            \n                \n                    \n                    entities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:20\n                \n            \n\n\n            \n                \n                    Get the entity set resource for this service.\n\n\n                    \n                        Returns :         ODataEntitySetResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:28\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAll(options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:57\n                \n            \n\n\n            \n                \n                    Get all entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchMany(options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:66\n                \n            \n\n\n            \n                \n                    Get entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOne(key: EntityKey, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:78\n                \n            \n\n\n            \n                \n                    Get an entity from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOrCreate(key: EntityKey, attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:157\n                \n            \n\n\n            \n                \n                    Get or create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        modify\n                        \n                    \n                \n            \n            \n                \n                    \n                    modify(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:122\n                \n            \n\n\n            \n                \n                    Patch an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:177\n                \n            \n\n\n            \n                \n                    Save an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:104\n                \n            \n\n\n            \n                \n                    Update an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:61\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:24\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:98\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySetSchema\n                    \n                \n\n                \n                    \n                        getentitySetSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:49\n                                \n                            \n                    \n                        \n                                The schema for the entity set.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ODataCollection } from '../models/collection';\nimport { ODataModel } from '../models/model';\nimport {\n  EntityKey,\n  ODataEntities,\n  ODataEntity,\n  ODataEntityResource,\n  ODataEntitySetResource,\n  ODataOptions,\n} from '../resources';\nimport { ODataEntityService } from './entity';\n\nexport class ODataEntitySetService extends ODataEntityService {\n  /**\n   * Get the entity set resource for this service.\n   */\n  public entities(): ODataEntitySetResource {\n    return this.client.entitySet(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(key?: EntityKey): ODataEntityResource {\n    return this.entities().entity(key);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M): void;\n  public attach>>(model: C): void;\n  public attach(model: any): void {\n    if (model instanceof ODataModel) {\n      model.attach(this.entities().entity());\n    } else if (model instanceof ODataCollection) {\n      model.attach(this.entities());\n    }\n  }\n\n  /**\n   * The schema for the entity set.\n   */\n  get entitySetSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Get all entities from the entity set.\n   * @param options The options for the request.\n   */\n  public fetchAll(options?: ODataOptions): Observable {\n    return this.entities().fetchAll(options);\n  }\n\n  /**\n   * Get entities from the entity set.\n   * @param withCount Get the count of the entities.\n   * @param options The options for the request.\n   */\n  public fetchMany(\n    options?: ODataOptions & { withCount?: boolean }\n  ): Observable> {\n    return this.entities().fetch(options);\n  }\n\n  /**\n   * Get an entity from the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOne(\n    key: EntityKey,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    return this.entity(key).fetch(options);\n  }\n\n  /**\n   * Create an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param options The options for the request.\n   */\n  public create(\n    attrs: Partial,\n    options?: ODataOptions\n  ): Observable> {\n    return this.entities().create(attrs, options);\n  }\n\n  /**\n   * Update an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey())\n      return throwError(() => new Error('update: Resource without key'));\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public modify(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey())\n      return throwError(() => new Error('modify: Resource without key'));\n    return res.modify(attrs, options);\n  }\n\n  /**\n   * Delete an entity in the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public destroy(\n    key: EntityKey,\n    options?: ODataOptions & { etag?: string }\n  ) {\n    const res = this.entity(key);\n    if (!res.hasKey())\n      return throwError(() => new Error('destroy: Resource without key'));\n    return res.destroy(options);\n  }\n\n  //#region Shortcuts\n  /**\n   * Get or create an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOrCreate(\n    key: EntityKey,\n    attrs: Partial,\n    { etag, ...options }: { etag?: string } & ODataOptions = {}\n  ): Observable> {\n    return this.fetchOne(key, { etag, ...options }).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 404) return this.create(attrs, options);\n        else return throwError(error);\n      })\n    );\n  }\n\n  /**\n   * Save an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param method The method to use.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public save(\n    attrs: Partial,\n    {\n      etag,\n      method,\n      ...options\n    }: {\n      etag?: string;\n      method?: 'create' | 'update' | 'modify';\n    } & ODataOptions = {}\n  ) {\n    let schema = this.structuredTypeSchema;\n    if (method === undefined && schema !== undefined && schema.isCompoundKey())\n      return throwError(\n        () =>\n          new Error(\n            'save: Composite key require a specific method, use create/update/patch'\n          )\n      );\n    let key = schema && schema.resolveKey(attrs);\n    if (method === undefined) method = key !== undefined ? 'update' : 'create';\n    if ((method === 'update' || method === 'modify') && key === undefined)\n      return throwError(\n        () => new Error(\"save: Can't update/patch entity without key\")\n      );\n    return method === 'create'\n      ? this.create(attrs, options)\n      : method === 'modify'\n      ? this.modify(key, attrs, { etag, ...options })\n      : this.update(key, attrs, { etag, ...options });\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityTypeKey.html":{"url":"classes/ODataEntityTypeKey.html","title":"class - ODataEntityTypeKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityTypeKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { COMPUTED, DESCRIPTION, LONG_DESCRIPTION } from '../../constants';\nimport { ODataParserOptions } from '../../options';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  Options,\n  OptionsHelper,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string;\n  private parser: Parser;\n  default?: any;\n  maxLength?: number;\n  collection: boolean;\n  nullable: boolean;\n  navigation: boolean;\n  precision?: number;\n  scale?: number;\n  referentials: ODataReferential[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable !== undefined ? field.nullable : true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        'Edm.String',\n        'Edm.Date',\n        'Edm.TimeOfDay',\n        'Edm.DateTimeOffset',\n        'Edm.Guid',\n        'Edm.Binary',\n      ].indexOf(this.type) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === 'Edm.Date') schema.format = 'date';\n      else if (this.type === 'Edm.TimeOfDay') schema.format = 'time';\n      else if (this.type === 'Edm.DateTimeOffset') schema.format = 'date-time';\n      else if (this.type === 'Edm.Guid')\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === 'Edm.Binary') schema.contentEncoding = 'base64';\n      else if (this.type === 'Edm.String' && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      ['Edm.Int64', 'Edm.Int32', 'Edm.Int16', 'Edm.Byte', 'Edm.SByte'].indexOf(\n        this.type\n      ) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (['Edm.Decimal', 'Edm.Double'].indexOf(this.type) !== -1) {\n      schema.type = 'number';\n    } else if (['Edm.Boolean'].indexOf(this.type) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType.keys?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  keys?: ODataEntityTypeKey[];\n  fields: ODataStructuredTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this.keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    this.fields = Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).map(\n      ([name, config]) => new ODataStructuredTypeFieldParser(name, this, config)\n    );\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.deserialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.serialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this.fields.forEach((f) => f.configure({ parserForType, options }));\n  }\n\n  resolveKey(value: any): any {\n    let key = this.parent?.resolveKey(value) || {};\n    if (Array.isArray(this.keys) && this.keys.length > 0) {\n      for (var k of this.keys) {\n        let v = value as any;\n        let structured = this as ODataStructuredTypeParser | undefined;\n        let field: ODataStructuredTypeFieldParser | undefined;\n        for (let name of k.name.split('/')) {\n          if (structured === undefined) break;\n          field = structured.fields.find((f) => f.name === name);\n          if (field !== undefined) {\n            v = Types.isPlainObject(v) ? v[field.name] : v;\n            structured = field.isStructuredType()\n              ? field.structured()\n              : undefined;\n          }\n        }\n        if (field !== undefined && v !== undefined) {\n          key[k.alias || field.name] = field.encode(v);\n        }\n      }\n    }\n    if (Types.isEmpty(key)) return undefined;\n    return Objects.resolveKey(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let value = this.parent?.defaults() || {};\n    let fields = this.fields.filter(\n      (f) => f.default !== undefined || f.isStructuredType()\n    );\n    return {\n      ...value,\n      ...fields.reduce((acc, f) => {\n        let value = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = this.parent?.toJsonSchema(options) || {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields.filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = (this.parent?.validate(attrs, { method, navigation }) ||\n      {}) as { [name: string]: any };\n    const fields = this.fields.filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumType.html":{"url":"classes/ODataEnumType.html","title":"class - ODataEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataSchemaElement\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                            \n                                parser\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                fields\n                            \n                            \n                                findFieldByName\n                            \n                            \n                                findFieldByValue\n                            \n                            \n                                findFieldsByValue\n                            \n                            \n                                mapFields\n                            \n                            \n                                serialize\n                            \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataSchemaElement\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataSchemaElement:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:73\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:93\n                \n            \n\n\n            \n                \n                    Encode the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:27\n                \n            \n\n\n            \n                \n                    Returns the fields of the enum type.\n\n\n                    \n                    \n                    \n                        Returns :         ODataEnumTypeFieldParser[]\n\n                    \n                    \n                        The fields of the enum type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findFieldByName\n                        \n                    \n                \n            \n            \n                \nfindFieldByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:36\n                \n            \n\n\n            \n                \n                    Find a field by name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the field\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The field with the given name\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findFieldByValue\n                        \n                    \n                \n            \n            \n                \nfindFieldByValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:45\n                \n            \n\n\n            \n                \n                    Find a field by value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value of the field\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The field with the given value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findFieldsByValue\n                        \n                    \n                \n            \n            \n                \nfindFieldsByValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:54\n                \n            \n\n\n            \n                \n                    Find a fields by flag.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value of the field\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The fields with the given flag\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:63\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Map the fields of the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mapper\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that maps the value to the new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The fields mapped by the mapper\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:83\n                \n            \n\n\n            \n                \n                    Serialize the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:58\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:68\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:47\n\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:29\n\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataSchemaElement\n\n                \n            \n            \n                \n                        Defined in         ODataSchemaElement:38\n\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EnumTypeConfig, Options } from '../types';\nimport { ODataSchemaElement } from './element';\nimport { ODataEnumTypeFieldParser, ODataEnumTypeParser } from './parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataEnumType extends ODataSchemaElement {\n  parser: ODataEnumTypeParser;\n  members: { [name: string]: number } | { [value: number]: string };\n  constructor(config: EnumTypeConfig, schema: ODataSchema) {\n    super(config, schema);\n    this.members = config.members;\n    this.parser = new ODataEnumTypeParser(\n      config,\n      schema.namespace,\n      schema.alias\n    );\n  }\n\n  configure() {\n    this.parser.configure({ options: this.api.options });\n  }\n\n  /**\n   * Returns the fields of the enum type.\n   * @returns The fields of the enum type.\n   */\n  fields(): ODataEnumTypeFieldParser[] {\n    return this.parser.fields;\n  }\n\n  /**\n   * Find a field by name.\n   * @param name The name of the field\n   * @returns The field with the given name\n   */\n  findFieldByName(name: string) {\n    return this.fields().find((f) => f.name === name);\n  }\n\n  /**\n   * Find a field by value.\n   * @param value The value of the field\n   * @returns The field with the given value\n   */\n  findFieldByValue(value: number) {\n    return this.fields().find((f) => f.value === value);\n  }\n\n  /**\n   * Find a fields by flag.\n   * @param value The value of the field\n   * @returns The fields with the given flag\n   */\n  findFieldsByValue(value: number) {\n    return this.fields().filter((f) => Boolean(f.value & value));\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => T) {\n    return this.fields().map(mapper);\n  }\n\n  /**\n   * Deseialize the given value from the enum type.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: Options): E {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the enum type.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: E, options?: Options): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the enum type.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: E, options?: Options): any {\n    return this.parser.encode(value, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeFieldParser.html":{"url":"classes/ODataEnumTypeFieldParser.html","title":"class - ODataEnumTypeFieldParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeFieldParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                value\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                titleize\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, field: EnumTypeFieldConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        EnumTypeFieldConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataParserOptions } from '../../options';\nimport { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  Options,\n  OptionsHelper,\n  Parser,\n} from '../../types';\nimport { Enums, Strings } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: number;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: ODataEnumTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this.fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f)\n    );\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  ttitelize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  configure({ options }: { options: OptionsHelper }) {\n    this.optionsHelper = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: Options): T {\n    // string -> number\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): string {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      const names = Enums.toNames(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      const name = Enums.toName(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const serialized = this.serialize(value, parserOptions);\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this.fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeParser.html":{"url":"classes/ODataEnumTypeParser.html","title":"class - ODataEnumTypeParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/enum-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                fields\n                            \n                            \n                                    Optional\n                                flags\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                serialize\n                            \n                            \n                                toJsonSchema\n                            \n                            \n                                ttitelize\n                            \n                            \n                                validate\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeFieldParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: string, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJsonSchema\n                        \n                    \n                \n            \n            \n                \ntoJsonSchema()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ttitelize\n                        \n                    \n                \n            \n            \n                \nttitelize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:58\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(member: string | number, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/enum-type.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    member\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [] | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataParserOptions } from '../../options';\nimport { raw } from '../../resources/query';\nimport {\n  EnumTypeConfig,\n  EnumTypeFieldConfig,\n  Options,\n  OptionsHelper,\n  Parser,\n} from '../../types';\nimport { Enums, Strings } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\n\nexport class ODataEnumTypeFieldParser extends ODataAnnotatable {\n  name: string;\n  value: number;\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    super(field);\n    this.name = name;\n    this.value = field.value;\n  }\n\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || this.name;\n  }\n}\n\nexport class ODataEnumTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: ODataEnumTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    super(config);\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this.fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f)\n    );\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  ttitelize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  configure({ options }: { options: OptionsHelper }) {\n    this.optionsHelper = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: Options): T {\n    // string -> number\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): string {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      const names = Enums.toNames(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      const name = Enums.toName(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const serialized = this.serialize(value, parserOptions);\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this.fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInMemoryCache.html":{"url":"classes/ODataInMemoryCache.html","title":"class - ODataInMemoryCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInMemoryCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/memory.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/memory.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:15\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:19\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:9\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:50\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:108\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:81\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:128\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:66\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache } from './cache';\n\nexport class ODataInMemoryCache extends ODataCache {\n  constructor({ timeout }: { timeout?: number } = {}) {\n    super({ timeout });\n  }\n\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    var scope = this.scope(req);\n    var tags = this.tags(req, res);\n    this.put(req.pathWithParams, res, {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    var scope = this.scope(req);\n    return this.get(req.pathWithParams, { scope });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInStorageCache.html":{"url":"classes/ODataInStorageCache.html","title":"class - ODataInStorageCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInStorageCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                storage\n                            \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                flush\n                            \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                restore\n                            \n                            \n                                store\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Storage\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:15\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        flush\n                        \n                    \n                \n            \n            \n                \n                    \n                    flush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:60\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:50\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restore\n                        \n                    \n                \n            \n            \n                \nrestore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:50\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:81\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:128\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:66\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries()))\n    );\n  }\n\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]')\n    );\n  }\n\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(req, res);\n    this.put(req.pathWithParams, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.pathWithParams, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ODataModule.html":{"url":"modules/ODataModule.html","title":"module - ODataModule","body":"\n                   \n\n\n\n\n    Modules\n    ODataModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ODataClient\n                        \n                        \n                            ODataServiceFactory\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(configs: ApiConfig[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/module.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configs\n                                    \n                                                ApiConfig[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpClientModule } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ODataClient } from './client';\nimport { ODataServiceFactory } from './services/index';\nimport { ODataSettings } from './settings';\nimport { ODATA_CONFIGURATIONS } from './tokens';\nimport { ApiConfig } from './types';\n\nexport function createSettings(configs: ApiConfig[]) {\n  return new ODataSettings(...configs);\n}\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  public static forRoot(\n    ...configs: ApiConfig[]\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        { provide: ODATA_CONFIGURATIONS, useValue: configs },\n        {\n          provide: ODataSettings,\n          useFactory: createSettings,\n          deps: [ODATA_CONFIGURATIONS],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataParameterParser.html":{"url":"classes/ODataParameterParser.html","title":"class - ODataParameterParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataParameterParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/callable.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                collection\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                nullable\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                            \n                                    Private\n                                parser\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                encode\n                            \n                            \n                                enum\n                            \n                            \n                                isEdmType\n                            \n                            \n                                isEnumType\n                            \n                            \n                                isStructuredType\n                            \n                            \n                                serialize\n                            \n                            \n                                structured\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, parameter: Parameter)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameter\n                                                  \n                                                        \n                                                                        Parameter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:16\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enum\n                        \n                    \n                \n            \n            \n                \nenum()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEnumTypeParser\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEdmType\n                        \n                    \n                \n            \n            \n                \nisEdmType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnumType\n                        \n                    \n                \n            \n            \n                \nisEnumType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isStructuredType\n                        \n                    \n                \n            \n            \n                \nisStructuredType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        structured\n                        \n                    \n                \n            \n            \n                \nstructured()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/parsers/callable.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataStructuredTypeParser\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CALLABLE_BINDING_PARAMETER } from '../../constants';\nimport { ODataParserOptions } from '../../options';\nimport {\n  CallableConfig,\n  NONE_PARSER,\n  Options,\n  OptionsHelper,\n  Parameter,\n  Parser,\n} from '../../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  optionsHelper?: OptionsHelper;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): R {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) => p.configure({ parserForType, options }));\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataParserOptions.html":{"url":"classes/ODataParserOptions.html","title":"class - ODataParserOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataParserOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            OptionsHelper\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                stringAsEnum\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: Options)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/options.ts:113\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        Options\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:112\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:120\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ApiOptions,\n  FetchPolicy,\n  ODataMetadataType,\n  ODataVersion,\n  Options,\n  OptionsHelper,\n  QueryOptionNames,\n} from './types';\nimport {\n  DEFAULT_FETCH_POLICY,\n  DEFAULT_STRIP_METADATA,\n  DEFAULT_VERSION,\n} from './constants';\n\nimport { ODataHelper } from './helper';\n\nexport class ODataApiOptions implements ApiOptions, OptionsHelper {\n  /**\n   * Default OData version\n   */\n  version: ODataVersion;\n  /**\n   * Send enum as string in the request\n   */\n  stringAsEnum?: boolean;\n  /**\n   * Strip metadata from the response\n   */\n  stripMetadata: ODataMetadataType;\n  /**\n   * Cache fetch policy\n   */\n  fetchPolicy: FetchPolicy;\n  /**\n   * Extra params to be sent in the request\n   */\n  params: { [param: string]: string | string[] };\n  /**\n   * Extra headers to be sent in the request\n   */\n  headers: { [param: string]: string | string[] };\n  /**\n   * Http request with credentials\n   */\n  withCredentials?: boolean;\n  /**\n   * Send query options in the request body\n   */\n  bodyQueryOptions: QueryOptionNames[];\n  /**\n   * Customize accept header with OData options\n   * @link http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_RequestingtheJSONFormat\n   */\n  accept?: {\n    exponentialDecimals?: boolean;\n    ieee754Compatible?: boolean;\n    metadata?: ODataMetadataType;\n    streaming?: boolean;\n  };\n  etag: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398229\n     */\n    ifMatch: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398230\n     */\n    ifNoneMatch: boolean;\n  } = { ifMatch: true, ifNoneMatch: false };\n  prefer?: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398238\n     */\n    maxPageSize?: number;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398240\n     */\n    return?: 'representation' | 'minimal';\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398236\n     */\n    continueOnError?: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398237\n     */\n    includeAnnotations?: string;\n  };\n  deleteRefBy: 'path' | 'id';\n\n  constructor(config: ApiOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n    this.params = config.params || {};\n    this.headers = config.headers || {};\n    this.withCredentials = config.withCredentials;\n    this.stripMetadata = config.stripMetadata || DEFAULT_STRIP_METADATA;\n    this.fetchPolicy = config.fetchPolicy || DEFAULT_FETCH_POLICY;\n    this.bodyQueryOptions = config.bodyQueryOptions || [];\n    this.accept = config.accept;\n    Object.assign(this.etag, config.etag || {});\n    this.prefer = config.prefer;\n    this.deleteRefBy = config.deleteRefBy || 'path';\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\nexport class ODataParserOptions implements OptionsHelper {\n  version: ODataVersion;\n  stringAsEnum?: boolean;\n\n  constructor(config: Options) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegments.html":{"url":"classes/ODataPathSegments.html","title":"class - ODataPathSegments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/segments.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _segments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                clone\n                            \n                            \n                                find\n                            \n                            \n                                first\n                            \n                            \n                                get\n                            \n                            \n                                keys\n                            \n                            \n                                last\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                segments\n                            \n                            \n                                toJSON\n                            \n                            \n                                toString\n                            \n                            \n                                types\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments?: ODataSegment[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataSegment[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _segments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSegment[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:48\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(name: string, path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:146\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPathSegments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(predicate: (segment: ODataSegment) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first\n                        \n                    \n                \n            \n            \n                \nfirst(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last\n                        \n                    \n                \n            \n            \n                \nlast(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(escape: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    escape\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        segments\n                        \n                    \n                \n            \n            \n                \nsegments(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        types\n                        \n                    \n                \n            \n            \n                \ntypes(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PATH_SEPARATOR } from '../../constants';\nimport { PathSegmentNames } from '../../types';\nimport { Objects } from '../../utils';\nimport { buildPathAndQuery, raw } from '../query';\nimport { EntityKey } from '../resource';\nimport { SegmentHandler } from './handlers';\n\nexport type ODataSegment = {\n  name: PathSegmentNames;\n  path: string;\n  type?: string;\n  key?: any;\n  parameters?: any;\n};\n\nfunction pathSegmentsBuilder(\n  segment: ODataSegment,\n  escape: boolean = false\n): [string, { [name: string]: any }] {\n  if (segment.name === PathSegmentNames.function) {\n    let [path, params] = segment.parameters\n      ? buildPathAndQuery({\n          func: { [segment.path]: segment.parameters },\n          escape,\n        })\n      : buildPathAndQuery({ func: segment.path, escape });\n    if (path.startsWith(PATH_SEPARATOR)) {\n      path = path.slice(1);\n    }\n    return [path, params];\n  } else {\n    let key = segment.key;\n    // HACK: Check guid string\n    if (\n      typeof key === 'string' &&\n      /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(\n        key\n      )\n    ) {\n      key = raw(key);\n    }\n    let [path, params] = key ? buildPathAndQuery({ key, escape }) : ['', {}];\n    return [segment.path + path, params];\n  }\n}\n\nexport class ODataPathSegments {\n  private _segments: ODataSegment[];\n\n  constructor(segments?: ODataSegment[]) {\n    this._segments = segments || [];\n  }\n\n  pathAndParams(escape: boolean = false): [string, { [name: string]: any }] {\n    const result = this._segments.reduce(\n      (acc, segment) => {\n        const [path, params] = pathSegmentsBuilder(segment, escape);\n        acc.paths.push(path);\n        acc.params = Object.assign(acc.params, params);\n        return acc;\n      },\n      { paths: [] as string[], params: {} as { [name: string]: any } }\n    );\n    return [result.paths.join(PATH_SEPARATOR), result.params];\n  }\n\n  types({ key = false }: { key?: boolean } = {}): string[] {\n    return this.segments({ key })\n      .map((s) => s.type())\n      .filter((t) => t !== undefined) as string[];\n  }\n\n  keys(values?: (EntityKey | undefined)[]) {\n    const segments = this.segments({ key: true });\n    if (values !== undefined) {\n      segments.forEach((segment, index) => {\n        const key = values[index];\n        if (key === undefined) {\n          segment.clearKey();\n        } else {\n          segment.key(key);\n        }\n      });\n    }\n    return segments.map((s) => s.key() as EntityKey | undefined);\n  }\n\n  toString(): string {\n    const [path, params] = this.pathAndParams();\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => value)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return this._segments.map((s) => {\n      let json = {\n        name: s.name as string,\n        path: s.path,\n      } as any;\n      if (s.type !== undefined) json.type = s.type;\n      if (s.key !== undefined) json.key = s.key;\n      if (s.parameters !== undefined) json.parameters = s.parameters;\n      return json;\n    });\n  }\n\n  clone() {\n    const segments = Objects.clone(this._segments);\n    return new ODataPathSegments(segments);\n  }\n\n  find(predicate: (segment: ODataSegment) => boolean) {\n    //Backward Find\n    return [...this._segments].reverse().find(predicate);\n  }\n\n  segments({ key = false }: { key?: boolean } = {}) {\n    let segments = [...this._segments];\n    if (key)\n      segments = segments.filter(\n        (s) =>\n          [\n            PathSegmentNames.entitySet,\n            PathSegmentNames.navigationProperty,\n            PathSegmentNames.property,\n          ].indexOf(s.name) !== -1\n      );\n    return segments.map((s) => new SegmentHandler(s));\n  }\n\n  first({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[0] : undefined;\n  }\n\n  last({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[segments.length - 1] : undefined;\n  }\n\n  add(name: string, path: string) {\n    const segment = { name, path } as ODataSegment;\n    this._segments.push(segment);\n    return new SegmentHandler(segment);\n  }\n\n  get(name: string) {\n    let segment = this.find((s) => s.name === name);\n    if (segment === undefined)\n      throw Error(`No Segment for name ${name} was found`);\n    return new SegmentHandler(segment);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegmentsHandler.html":{"url":"classes/ODataPathSegmentsHandler.html","title":"class - ODataPathSegmentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegmentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                action\n                            \n                            \n                                entitySet\n                            \n                            \n                                function\n                            \n                            \n                                keys\n                            \n                            \n                                navigationProperty\n                            \n                            \n                                property\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments: ODataPathSegments)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataPathSegments\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        action\n                        \n                    \n                \n            \n            \n                \naction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigationProperty\n                        \n                    \n                \n            \n            \n                \nnavigationProperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PathSegmentNames } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegmentNames.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegmentNames.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegmentNames.action);\n  }\n  function() {\n    return this.segments.get(PathSegmentNames.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegmentNames.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegmentNames.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPropertyAnnotations.html":{"url":"classes/ODataPropertyAnnotations.html","title":"class - ODataPropertyAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPropertyAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                attributes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPropertyAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptionHandler.html":{"url":"classes/ODataQueryOptionHandler.html","title":"class - ODataQueryOptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                assertArray\n                            \n                            \n                                    Private\n                                assertObject\n                            \n                            \n                                assign\n                            \n                            \n                                at\n                            \n                            \n                                clear\n                            \n                            \n                                empty\n                            \n                            \n                                get\n                            \n                            \n                                has\n                            \n                            \n                                push\n                            \n                            \n                                remove\n                            \n                            \n                                set\n                            \n                            \n                                toJSON\n                            \n                            \n                                unset\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(o: literal type, n: QueryOptionNames)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        o\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        n\n                                                  \n                                                        \n                                                                        QueryOptionNames\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertArray()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     any[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertObject(create: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    create\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        assign\n                        \n                    \n                \n            \n            \n                \nassign(values: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        at\n                        \n                    \n                \n            \n            \n                \nat(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        empty\n                        \n                    \n                \n            \n            \n                \nempty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(path: string, def?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    def\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        push\n                        \n                    \n                \n            \n            \n                \npush(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(path: string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unset\n                        \n                    \n                \n            \n            \n                \nunset(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue(v?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:24\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { QueryOptionNames } from '../../types';\nimport { Objects, Types } from '../../utils';\nimport { alias, Expand, Filter, OrderBy, Select, Transform } from './builder';\nimport {\n  ComputeExpression,\n  FilterConnector,\n  FilterExpression,\n  OrderByExpression,\n  SearchConnector,\n  SearchExpression,\n  ODataFunctions,\n  ODataOperators,\n} from './expressions';\nimport { ExpandExpression } from './expressions/expand';\nimport { SelectExpression } from './expressions/select';\nimport type { ODataQueryArguments, ODataQueryOptions } from './options';\n\nexport class ODataQueryOptionHandler {\n  constructor(\n    private o: { [name: string]: any },\n    private n: QueryOptionNames\n  ) {}\n\n  get name() {\n    return this.n;\n  }\n\n  toJSON() {\n    return this.o[this.n];\n  }\n\n  empty() {\n    return Types.isEmpty(this.o[this.n]);\n  }\n\n  //#region Primitive Value\n  value(v?: any) {\n    return (v !== undefined && (this.o[this.n] = v)) || this.o[this.n];\n  }\n  //#endregion\n\n  //#region Array Value\n  private assertArray(): any[] {\n    if (!Types.isArray(this.o[this.n]))\n      this.o[this.n] = this.o[this.n] !== undefined ? [this.o[this.n]] : [];\n    return this.o[this.n];\n  }\n\n  push(value: any) {\n    this.assertArray().push(value);\n  }\n\n  remove(value: any) {\n    this.o[this.n] = this.assertArray().filter((v) => v !== value);\n    // If only one... down to value\n    if (this.o[this.n].length === 1) this.o[this.n] = this.o[this.n][0];\n  }\n\n  at(index: number) {\n    return this.assertArray()[index];\n  }\n  //#endregion\n\n  //#region HashMap Value\n  private assertObject(create: boolean): { [name: string]: any } {\n    if (!Types.isArray(this.o[this.n]) && Types.isPlainObject(this.o[this.n])) {\n      return this.o[this.n];\n    }\n    let arr = this.assertArray();\n    let obj = arr.find((v) => Types.isPlainObject(v));\n    if (!obj && create) {\n      obj = {};\n      arr.push(obj);\n    }\n    return obj;\n  }\n\n  set(path: string, value: any) {\n    let obj = this.assertObject(true);\n    Objects.set(obj, path, value);\n  }\n\n  get(path: string, def?: any): any {\n    let obj = this.assertObject(false) || {};\n    return Objects.get(obj, path, def);\n  }\n\n  unset(path: string) {\n    let obj = this.assertObject(true);\n    Objects.unset(obj, path);\n\n    if (Types.isArray(this.o[this.n])) {\n      this.o[this.n] = this.o[this.n].filter((v: any) => !Types.isEmpty(v));\n      if (this.o[this.n].length === 1) this.o[this.n] = this.o[this.n][0];\n    }\n  }\n\n  has(path: string) {\n    let obj = this.assertObject(false) || {};\n    return Objects.has(obj, path);\n  }\n\n  assign(values: { [attr: string]: any }) {\n    let obj = this.assertObject(true);\n    return Objects.merge(obj, values);\n  }\n  //#endregion\n\n  clear() {\n    delete this.o[this.n];\n  }\n}\n\nexport class ODataQueryOptionsHandler {\n  constructor(protected options: ODataQueryOptions) {}\n\n  /**\n   * Create a new odata alias parameter\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_ParameterAliases\n   * @param value The value of the alias\n   * @param name The name of the alias\n   * @returns The alias\n   */\n  alias(value: any, name?: string) {\n    return alias(value, name);\n  }\n\n  select(\n    opts: (\n      builder: { s: T; e: () => SelectExpression },\n      current?: SelectExpression\n    ) => SelectExpression\n  ): SelectExpression;\n  select(opts: Select): ODataQueryOptionHandler;\n  select(): ODataQueryOptionHandler;\n  select(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.select,\n        SelectExpression.select(\n          opts,\n          this.options.expression(QueryOptionNames.select)\n        )\n      );\n    }\n    return this.options.option>(QueryOptionNames.select, opts);\n  }\n\n  expand(\n    opts: (\n      builder: { s: T; e: () => ExpandExpression },\n      current?: ExpandExpression\n    ) => ExpandExpression\n  ): ExpandExpression;\n  expand(opts: Expand): ODataQueryOptionHandler;\n  expand(): ODataQueryOptionHandler;\n  expand(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.expand,\n        ExpandExpression.expand(\n          opts,\n          this.options.expression(QueryOptionNames.expand)\n        )\n      );\n    }\n    return this.options.option>(QueryOptionNames.expand, opts);\n  }\n\n  /**\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptioncompute\n   */\n  compute(\n    opts: (\n      builder: {\n        s: T;\n        e: () => ComputeExpression;\n        o: ODataOperators;\n        f: ODataFunctions;\n      },\n      current?: ComputeExpression\n    ) => ComputeExpression\n  ): ComputeExpression;\n  compute(opts: string): ODataQueryOptionHandler;\n  compute(): ODataQueryOptionHandler;\n  compute(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.compute,\n        ComputeExpression.compute(\n          opts,\n          this.options.expression(QueryOptionNames.compute)\n        )\n      );\n    }\n    return this.options.option(QueryOptionNames.compute, opts);\n  }\n\n  /**\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptionformat\n   */\n  format(opts: string): ODataQueryOptionHandler;\n  format(): ODataQueryOptionHandler;\n  format(opts?: string): any {\n    return this.options.option(QueryOptionNames.format, opts);\n  }\n\n  transform(opts: Transform): ODataQueryOptionHandler;\n  transform(): ODataQueryOptionHandler;\n  transform(opts?: Transform): any {\n    return this.options.option>(QueryOptionNames.transform, opts);\n  }\n\n  search(\n    opts: (\n      builder: {\n        e: (connector: SearchConnector) => SearchExpression;\n      },\n      current?: SearchExpression\n    ) => SearchExpression\n  ): SearchExpression;\n  search(opts: string): ODataQueryOptionHandler;\n  search(): ODataQueryOptionHandler;\n  search(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.search,\n        SearchExpression.search(\n          opts,\n          this.options.expression(QueryOptionNames.search)\n        )\n      );\n    }\n    return this.options.option(QueryOptionNames.search, opts);\n  }\n\n  filter(\n    opts: (\n      builder: {\n        s: T;\n        e: (connector?: FilterConnector) => FilterExpression;\n        o: ODataOperators;\n        f: ODataFunctions;\n      },\n      current?: FilterExpression\n    ) => FilterExpression\n  ): FilterExpression;\n  filter(opts: Filter): ODataQueryOptionHandler;\n  filter(): ODataQueryOptionHandler;\n  filter(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.filter,\n        FilterExpression.filter(\n          opts,\n          this.options.expression(QueryOptionNames.filter)\n        )\n      );\n    }\n    return this.options.option>(QueryOptionNames.filter, opts);\n  }\n\n  orderBy(\n    opts: (\n      builder: { s: T; e: () => OrderByExpression },\n      current?: OrderByExpression\n    ) => OrderByExpression\n  ): OrderByExpression;\n  orderBy(opts: OrderBy): ODataQueryOptionHandler;\n  orderBy(): ODataQueryOptionHandler;\n  orderBy(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.option(\n        QueryOptionNames.orderBy,\n        OrderByExpression.orderBy(\n          opts,\n          this.options.expression(QueryOptionNames.orderBy)\n        )\n      );\n    }\n    return this.options.option>(QueryOptionNames.orderBy, opts);\n  }\n\n  top(opts: number): ODataQueryOptionHandler;\n  top(): ODataQueryOptionHandler;\n  top(opts?: number): any {\n    return this.options.option(QueryOptionNames.top, opts);\n  }\n\n  skip(opts: number): ODataQueryOptionHandler;\n  skip(): ODataQueryOptionHandler;\n  skip(opts?: number): any {\n    return this.options.option(QueryOptionNames.skip, opts);\n  }\n\n  skiptoken(opts: string): ODataQueryOptionHandler;\n  skiptoken(): ODataQueryOptionHandler;\n  skiptoken(opts?: string): any {\n    return this.options.option(QueryOptionNames.skiptoken, opts);\n  }\n\n  paging({\n    skip,\n    skiptoken,\n    top,\n  }: { skip?: number; skiptoken?: string; top?: number } = {}) {\n    if (skiptoken !== undefined) this.skiptoken(skiptoken);\n    else if (skip !== undefined) this.skip(skip);\n    if (top !== undefined) this.top(top);\n  }\n\n  clearPaging() {\n    this.skip().clear();\n    this.top().clear();\n    this.skiptoken().clear();\n  }\n\n  apply(query: ODataQueryArguments) {\n    if (query.select !== undefined) {\n      this.options.option(QueryOptionNames.select, query.select);\n    }\n    if (query.expand !== undefined) {\n      this.options.option(QueryOptionNames.expand, query.expand);\n    }\n    if (query.transform !== undefined) {\n      this.options.option(QueryOptionNames.transform, query.transform);\n    }\n    if (query.search !== undefined) {\n      this.options.option(QueryOptionNames.search, query.search);\n    }\n    if (query.filter !== undefined) {\n      this.options.option(QueryOptionNames.filter, query.filter);\n    }\n    if (query.orderBy !== undefined) {\n      this.options.option(QueryOptionNames.orderBy, query.orderBy);\n    }\n    this.paging(query);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptions.html":{"url":"classes/ODataQueryOptions.html","title":"class - ODataQueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/options.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                clone\n                            \n                            \n                                expression\n                            \n                            \n                                has\n                            \n                            \n                                keep\n                            \n                            \n                                option\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                remove\n                            \n                            \n                                toJSON\n                            \n                            \n                                toQueryArguments\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:37\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:106\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :         ODataQueryOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expression\n                        \n                    \n                \n            \n            \n                \nexpression(name: QueryOptionNames, exp?: Expression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exp\n                                    \n                                                Expression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(name: QueryOptionNames)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keep\n                        \n                    \n                \n            \n            \n                \nkeep(names: QueryOptionNames[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                                QueryOptionNames[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        option\n                        \n                    \n                \n            \n            \n                \noption(name: QueryOptionNames, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:122\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams(escape: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    escape\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(names: QueryOptionNames[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                                QueryOptionNames[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toQueryArguments\n                        \n                    \n                \n            \n            \n                \ntoQueryArguments()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataQueryArguments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { QueryOptionNames } from '../../types';\nimport { Objects, Types } from '../../utils';\nimport {\n  buildPathAndQuery,\n  Expand,\n  Filter,\n  OrderBy,\n  QueryCustomType,\n  Select,\n  Transform,\n} from './builder';\nimport {\n  Expression,\n  FilterExpression,\n  OrderByExpression,\n  SearchExpression,\n} from './expressions';\nimport { ExpandExpression } from './expressions/expand';\nimport { SelectExpression } from './expressions/select';\nimport { ODataQueryOptionHandler } from './handlers';\n\nexport type ODataQueryArguments = {\n  [QueryOptionNames.select]?: Select | SelectExpression;\n  [QueryOptionNames.filter]?: Filter | FilterExpression;\n  [QueryOptionNames.search]?: string | SearchExpression;\n  [QueryOptionNames.compute]?: string;\n  [QueryOptionNames.transform]?: Transform;\n  [QueryOptionNames.orderBy]?: OrderBy | OrderByExpression;\n  [QueryOptionNames.top]?: number;\n  [QueryOptionNames.skip]?: number;\n  [QueryOptionNames.skiptoken]?: string;\n  [QueryOptionNames.expand]?: Expand | ExpandExpression;\n  [QueryOptionNames.format]?: string;\n};\n\nexport class ODataQueryOptions {\n  values: { [name: string]: any };\n\n  constructor(options?: { [name: string]: any }) {\n    this.values = options || {};\n  }\n\n  // Params\n  pathAndParams(escape: boolean = false): [string, { [name: string]: any }] {\n    let aliases: QueryCustomType[] = [];\n    let options = [\n      QueryOptionNames.select,\n      QueryOptionNames.filter,\n      QueryOptionNames.search,\n      QueryOptionNames.compute,\n      QueryOptionNames.transform,\n      QueryOptionNames.orderBy,\n      QueryOptionNames.top,\n      QueryOptionNames.skip,\n      QueryOptionNames.skiptoken,\n      QueryOptionNames.expand,\n      QueryOptionNames.format,\n    ]\n      .filter((key) => !Types.isEmpty(this.values[key]))\n      .reduce((acc, key) => {\n        let value = this.values[key];\n        if (Types.rawType(value).endsWith('Expression')) {\n          value = (value as Expression).render({ aliases });\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n\n    return buildPathAndQuery({ ...options, aliases, escape });\n  }\n\n  toString(): string {\n    const [path, params] = this.pathAndParams();\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => !Types.isEmpty(value))\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return Object.keys(this.values).reduce((acc, key) => {\n      let value = this.values[key];\n      value =\n        Types.isObject(value) && 'toJSON' in value ? value.toJSON() : value;\n      return Object.assign(acc, { [key]: value });\n    }, {});\n  }\n\n  toQueryArguments(): ODataQueryArguments {\n    return {\n      select: this.values[QueryOptionNames.select],\n      expand: this.values[QueryOptionNames.expand],\n      transform: this.values[QueryOptionNames.transform],\n      compute: this.values[QueryOptionNames.compute],\n      search: this.values[QueryOptionNames.search],\n      filter: this.values[QueryOptionNames.filter],\n      orderBy: this.values[QueryOptionNames.orderBy],\n      top: this.values[QueryOptionNames.top],\n      skip: this.values[QueryOptionNames.skip],\n      skiptoken: this.values[QueryOptionNames.skiptoken],\n    } as ODataQueryArguments;\n  }\n\n  clone() {\n    const options = Object.keys(this.values).reduce(\n      (acc, key) =>\n        Object.assign(acc, { [key]: Objects.clone(this.values[key]) }),\n      {}\n    );\n    return new ODataQueryOptions(options);\n  }\n\n  // Set Renderable\n  expression(name: QueryOptionNames, exp?: Expression) {\n    if (exp !== undefined) this.values[name] = exp;\n    return this.values[name];\n  }\n\n  // Option Handler\n  option(name: QueryOptionNames, opts?: O) {\n    if (opts !== undefined) this.values[name] = opts;\n    return new ODataQueryOptionHandler(this.values, name);\n  }\n\n  // Query Options tools\n  has(name: QueryOptionNames) {\n    return this.values[name] !== undefined;\n  }\n\n  remove(...names: QueryOptionNames[]) {\n    names.forEach((name) => {\n      delete this.values[name];\n    });\n  }\n\n  keep(...names: QueryOptionNames[]) {\n    this.values = Object.keys(this.values)\n      .filter((k) => names.indexOf(k as QueryOptionNames) !== -1)\n      .reduce((acc, k) => Object.assign(acc, { [k]: this.values[k] }), {});\n  }\n\n  // Clear\n  clear() {\n    this.values = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataReferential.html":{"url":"classes/ODataReferential.html","title":"class - ODataReferential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataReferential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                property\n                            \n                            \n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/parsers/structured-type.ts:45\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { COMPUTED, DESCRIPTION, LONG_DESCRIPTION } from '../../constants';\nimport { ODataParserOptions } from '../../options';\nimport { raw } from '../../resources/query';\nimport {\n  NONE_PARSER,\n  Options,\n  OptionsHelper,\n  Parser,\n  StructuredTypeConfig,\n  StructuredTypeFieldConfig,\n  StructuredTypeFieldOptions,\n} from '../../types';\nimport { Objects, Strings, Types } from '../../utils';\nimport { ODataAnnotatable } from '../annotation';\nimport { ODataEnumTypeParser } from './enum-type';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string;\n  private parser: Parser;\n  default?: any;\n  maxLength?: number;\n  collection: boolean;\n  nullable: boolean;\n  navigation: boolean;\n  precision?: number;\n  scale?: number;\n  referentials: ODataReferential[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    super(field);\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.nullable = field.nullable !== undefined ? field.nullable : true;\n    this.collection = Boolean(field.collection);\n    this.navigation = Boolean(field.navigation);\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.annotatedValue(COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined) {\n      this.default = this.deserialize(this.default, options);\n    }\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        'Edm.String',\n        'Edm.Date',\n        'Edm.TimeOfDay',\n        'Edm.DateTimeOffset',\n        'Edm.Guid',\n        'Edm.Binary',\n      ].indexOf(this.type) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === 'Edm.Date') schema.format = 'date';\n      else if (this.type === 'Edm.TimeOfDay') schema.format = 'time';\n      else if (this.type === 'Edm.DateTimeOffset') schema.format = 'date-time';\n      else if (this.type === 'Edm.Guid')\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === 'Edm.Binary') schema.contentEncoding = 'base64';\n      else if (this.type === 'Edm.String' && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      ['Edm.Int64', 'Edm.Int32', 'Edm.Int16', 'Edm.Byte', 'Edm.SByte'].indexOf(\n        this.type\n      ) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (['Edm.Decimal', 'Edm.Double'].indexOf(this.type) !== -1) {\n      schema.type = 'number';\n    } else if (['Edm.Boolean'].indexOf(this.type) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType.keys?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataStructuredTypeParser\n  extends ODataAnnotatable\n  implements Parser\n{\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  keys?: ODataEntityTypeKey[];\n  fields: ODataStructuredTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    super(config);\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this.keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    this.fields = Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).map(\n      ([name, config]) => new ODataStructuredTypeFieldParser(name, this, config)\n    );\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  isSubtypeOf(type: string): boolean {\n    if (this.isTypeOf(type)) return true;\n    if (this.parent) return this.parent.isSubtypeOf(type);\n    return false;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.deserialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.serialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this.fields.forEach((f) => f.configure({ parserForType, options }));\n  }\n\n  resolveKey(value: any): any {\n    let key = this.parent?.resolveKey(value) || {};\n    if (Array.isArray(this.keys) && this.keys.length > 0) {\n      for (var k of this.keys) {\n        let v = value as any;\n        let structured = this as ODataStructuredTypeParser | undefined;\n        let field: ODataStructuredTypeFieldParser | undefined;\n        for (let name of k.name.split('/')) {\n          if (structured === undefined) break;\n          field = structured.fields.find((f) => f.name === name);\n          if (field !== undefined) {\n            v = Types.isPlainObject(v) ? v[field.name] : v;\n            structured = field.isStructuredType()\n              ? field.structured()\n              : undefined;\n          }\n        }\n        if (field !== undefined && v !== undefined) {\n          key[k.alias || field.name] = field.encode(v);\n        }\n      }\n    }\n    if (Types.isEmpty(key)) return undefined;\n    return Objects.resolveKey(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let value = this.parent?.defaults() || {};\n    let fields = this.fields.filter(\n      (f) => f.default !== undefined || f.isStructuredType()\n    );\n    return {\n      ...value,\n      ...fields.reduce((acc, f) => {\n        let value = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = this.parent?.toJsonSchema(options) || {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.titleize(DESCRIPTION),\n      description: this.annotatedValue(LONG_DESCRIPTION),\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields.filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = (this.parent?.validate(attrs, { method, navigation }) ||\n      {}) as { [name: string]: any };\n    const fields = this.fields.filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataRequest.html":{"url":"classes/ODataRequest.html","title":"class - ODataRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/request.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _body\n                            \n                            \n                                    Private\n                                    Readonly\n                                _headers\n                            \n                            \n                                    Private\n                                    Readonly\n                                _method\n                            \n                            \n                                    Private\n                                    Readonly\n                                _params\n                            \n                            \n                                    Private\n                                    Readonly\n                                _path\n                            \n                            \n                                    Private\n                                    Readonly\n                                _queryBody\n                            \n                            \n                                    Private\n                                    Readonly\n                                    Optional\n                                _responseType\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                bodyQueryOptions\n                            \n                            \n                                    Readonly\n                                fetchPolicy\n                            \n                            \n                                    Readonly\n                                observe\n                            \n                            \n                                    Readonly\n                                    Optional\n                                reportProgress\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                            \n                                    Readonly\n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isBatch\n                            \n                            \n                                isFetch\n                            \n                            \n                                isMutate\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    responseType\n                                \n                                \n                                    path\n                                \n                                \n                                    method\n                                \n                                \n                                    body\n                                \n                                \n                                    params\n                                \n                                \n                                    headers\n                                \n                                \n                                    pathWithParams\n                                \n                                \n                                    url\n                                \n                                \n                                    urlWithParams\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any | null\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpHeaders\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpParams\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _queryBody\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                            Optional\n                        _responseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"arraybuffer\" | \"blob\" | \"json\" | \"text\" | \"value\" | \"property\" | \"entity\" | \"entities\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOptionNames[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        observe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"events\" | \"response\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reportProgress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isBatch\n                        \n                    \n                \n            \n            \n                \nisBatch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:276\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFetch\n                        \n                    \n                \n            \n            \n                \nisFetch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:280\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMutate\n                        \n                    \n                \n            \n            \n                \nisMutate()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:284\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        responseType\n                    \n                \n\n                \n                    \n                        getresponseType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:211\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        path\n                    \n                \n\n                \n                    \n                        getpath()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:220\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        method\n                    \n                \n\n                \n                    \n                        getmethod()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:224\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        body\n                    \n                \n\n                \n                    \n                        getbody()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:228\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        params\n                    \n                \n\n                \n                    \n                        getparams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:240\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        headers\n                    \n                \n\n                \n                    \n                        getheaders()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:252\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pathWithParams\n                    \n                \n\n                \n                    \n                        getpathWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:260\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n\n                \n                    \n                        geturl()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:268\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        urlWithParams\n                    \n                \n\n                \n                    \n                        geturlWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:272\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { ODataApi } from '../api';\nimport {\n  $BATCH,\n  $QUERY,\n  ACCEPT,\n  IF_MATCH_HEADER,\n  IF_NONE_MATCH_HEADER,\n  PREFER,\n  TEXT_PLAIN,\n} from '../constants';\nimport { QueryOptionNames } from '../types';\nimport { Http } from '../utils';\nimport { ODataResource } from './resource';\n\nexport class ODataRequest {\n  readonly api: ODataApi;\n  readonly observe: 'events' | 'response';\n  readonly reportProgress?: boolean;\n  readonly withCredentials?: boolean;\n  readonly bodyQueryOptions: QueryOptionNames[];\n  readonly fetchPolicy:\n    | 'cache-first'\n    | 'cache-and-network'\n    | 'network-only'\n    | 'no-cache'\n    | 'cache-only';\n  readonly resource: ODataResource;\n  private readonly _responseType?:\n    | 'arraybuffer'\n    | 'blob'\n    | 'json'\n    | 'text'\n    | 'value'\n    | 'property'\n    | 'entity'\n    | 'entities';\n  private readonly _method: string;\n  private readonly _body: any | null;\n  private readonly _headers: HttpHeaders;\n  private readonly _params: HttpParams;\n  private readonly _path: string;\n  private readonly _queryBody: boolean;\n\n  constructor(init: {\n    method: string;\n    api: ODataApi;\n    resource: ODataResource;\n    body: any;\n    observe: 'events' | 'response';\n    etag?: string;\n    headers?: HttpHeaders | { [header: string]: string | string[] };\n    reportProgress?: boolean;\n    params?: HttpParams | { [param: string]: string | string[] };\n    responseType?:\n      | 'arraybuffer'\n      | 'blob'\n      | 'json'\n      | 'text'\n      | 'value'\n      | 'property'\n      | 'entity'\n      | 'entities';\n    fetchPolicy?:\n      | 'cache-first'\n      | 'cache-and-network'\n      | 'network-only'\n      | 'no-cache'\n      | 'cache-only';\n    withCredentials?: boolean;\n    bodyQueryOptions?: QueryOptionNames[];\n  }) {\n    this._method = init.method;\n    this.resource = init.resource;\n\n    this.api = init.api;\n    this.reportProgress = init.reportProgress;\n    this.observe = init.observe;\n\n    // Response Type\n    this._responseType = init.responseType;\n\n    // The Body\n    this._body = init.body !== undefined ? init.body : null;\n    if (this._body !== null) this._body = this.resource.serialize(this._body);\n\n    this.withCredentials =\n      init.withCredentials === undefined\n        ? this.api.options.withCredentials\n        : init.withCredentials;\n    this.fetchPolicy = init.fetchPolicy || this.api.options.fetchPolicy;\n    this.bodyQueryOptions =\n      init.bodyQueryOptions || this.api.options.bodyQueryOptions;\n\n    // The Path and Params from resource\n    const [resourcePath, resourceParams] = this.resource.pathAndParams();\n    this._path = resourcePath;\n\n    //#region Headers\n    const customHeaders: { [name: string]: string | string[] } = {};\n    if (typeof init.etag === 'string') {\n      if (\n        this.api.options.etag.ifMatch &&\n        ['PUT', 'PATCH', 'DELETE'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_MATCH_HEADER] = init.etag;\n      else if (\n        this.api.options.etag.ifNoneMatch &&\n        ['GET'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_NONE_MATCH_HEADER] = init.etag;\n    }\n\n    const accept = [];\n    // Metadata\n    if (this.api.options.accept?.metadata !== undefined)\n      accept.push(`odata.metadata=${this.api.options.accept?.metadata}`);\n    // IEEE754\n    if (this.api.options.accept?.ieee754Compatible !== undefined)\n      accept.push(\n        `IEEE754Compatible=${this.api.options.accept?.ieee754Compatible}`\n      );\n    // streaming\n    if (this.api.options.accept?.streaming !== undefined)\n      accept.push(`streaming=${this.api.options.accept?.streaming}`);\n    // ExponentialDecimals\n    if (this.api.options.accept?.exponentialDecimals !== undefined)\n      accept.push(\n        `ExponentialDecimals=${this.api.options.accept?.exponentialDecimals}`\n      );\n    if (accept.length > 0)\n      customHeaders[ACCEPT] = [\n        `application/json;${accept.join(';')}`,\n        'text/plain',\n        '*/*',\n      ];\n\n    const prefer = [];\n    // Return\n    if (\n      this.api.options.prefer?.return !== undefined &&\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1\n    )\n      prefer.push(`return=${this.api.options.prefer?.return}`);\n    // MaxPageSize\n    if (\n      this.api.options.prefer?.maxPageSize !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxPageSize}`);\n    // Annotations\n    if (\n      this.api.options.prefer?.includeAnnotations !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(\n        `odata.include-annotations=${this.api.options.prefer?.includeAnnotations}`\n      );\n    if (\n      this.api.options.prefer?.continueOnError === true &&\n      ['POST'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.continue-on-error`);\n    if (prefer.length > 0) customHeaders[PREFER] = prefer;\n    this._headers = Http.mergeHttpHeaders(\n      this.api.options.headers,\n      customHeaders,\n      init.headers || {}\n    );\n    //#endregion\n\n    //#region Params\n    const customParams: { [name: string]: string | string[] } = {};\n    if (\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1 &&\n      '$select' in resourceParams\n    ) {\n      customParams['$select'] = resourceParams['$select'];\n    }\n    if (['POST'].indexOf(this._method) !== -1 && '$expand' in resourceParams) {\n      customParams['$expand'] = resourceParams['$expand'];\n    }\n    if (['GET'].indexOf(this._method) !== -1) {\n      Object.assign(customParams, resourceParams);\n    }\n\n    const params = Http.mergeHttpParams(\n      this.api.options.params,\n      customParams,\n      init.params || {}\n    );\n\n    this._params =\n      this._responseType === 'entity'\n        ? Http.withoutHttpParams(params, [\n            '$filter',\n            '$orderby',\n            '$count',\n            '$skip',\n            '$top',\n          ])\n        : params;\n    //#endregion\n\n    this._queryBody =\n      this._method === 'GET' &&\n      this.bodyQueryOptions.length > 0 &&\n      this.bodyQueryOptions.some((name) => this._params.has(`$${name}`));\n  }\n\n  get responseType(): 'arraybuffer' | 'blob' | 'json' | 'text' {\n    return this._responseType &&\n      ['property', 'entity', 'entities'].indexOf(this._responseType) !== -1\n      ? 'json'\n      : this._responseType === 'value'\n      ? 'text'\n      : this._responseType;\n  }\n\n  get path() {\n    return this._queryBody ? `${this._path}/${$QUERY}` : this._path;\n  }\n\n  get method() {\n    return this._queryBody ? 'POST' : this._method;\n  }\n\n  get body() {\n    if (this._queryBody) {\n      let [, bodyParams] = Http.splitHttpParams(\n        this._params,\n        this.bodyQueryOptions.map((name) => `$${name}`)\n      );\n      return bodyParams.toString();\n    } else {\n      return this._body;\n    }\n  }\n\n  get params() {\n    if (this._queryBody) {\n      let [queryParams] = Http.splitHttpParams(\n        this._params,\n        this.bodyQueryOptions.map((name) => `$${name}`)\n      );\n      return queryParams;\n    } else {\n      return this._params;\n    }\n  }\n\n  get headers() {\n    if (this._queryBody) {\n      return Http.mergeHttpHeaders(this._headers, { CONTENT_TYPE: TEXT_PLAIN });\n    } else {\n      return this._headers;\n    }\n  }\n\n  get pathWithParams() {\n    let path = this._path;\n    if (this._params.keys().length > 0) {\n      path = `${path}?${this._params}`;\n    }\n    return path;\n  }\n\n  get url() {\n    return `${this.api.serviceRootUrl}${this._path}`;\n  }\n\n  get urlWithParams() {\n    return `${this.api.serviceRootUrl}${this.pathWithParams}`;\n  }\n\n  isBatch() {\n    return this._path.endsWith($BATCH);\n  }\n\n  isFetch() {\n    return ['GET'].indexOf(this._method) !== -1;\n  }\n\n  isMutate() {\n    return ['PUT', 'PATCH', 'POST', 'DELETE'].indexOf(this._method) !== -1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponse.html":{"url":"classes/ODataResponse.html","title":"class - ODataResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/response.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Response\n\n            \n\n            \n                Extends\n            \n            \n                        HttpResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _annotations\n                            \n                            \n                                    Private\n                                    Optional\n                                _context\n                            \n                            \n                                    Private\n                                    Optional\n                                _options\n                            \n                            \n                                    Private\n                                    Optional\n                                _payload\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entities\n                            \n                            \n                                entity\n                            \n                            \n                                    Static\n                                fromHttpResponse\n                            \n                            \n                                    Static\n                                fromJSON\n                            \n                            \n                                property\n                            \n                            \n                                toJSON\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                                \n                                    payload\n                                \n                                \n                                    context\n                                \n                                \n                                    annotations\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResponseOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n            \n                \nentities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:193\n                \n            \n\n\n            \n                \n                    Handle the response body as entities\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntities\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entity\n                        \n                    \n                \n            \n            \n                \nentity()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:169\n                \n            \n\n\n            \n                \n                    Handle the response body as an entity\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntity\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromHttpResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromHttpResponse(req: ODataRequest, res: HttpResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:46\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                HttpResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromJSON(req: ODataRequest, json: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:58\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    json\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:212\n                \n            \n\n\n            \n                \n                    Handle the response body as a property\n\n\n                    \n                    \n                    \n                        Returns :         ODataProperty\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { body: any; headers: any; status: any; statusText: any; url: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:236\n                \n            \n\n\n            \n                \n                    Handle the response body as a value\n\n\n                    \n                    \n                    \n                        Returns :     T | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:93\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        payload\n                    \n                \n\n                \n                    \n                        getpayload()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:126\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        context\n                    \n                \n\n                \n                    \n                        getcontext()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:137\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        annotations\n                    \n                \n\n                \n                    \n                        getannotations()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:147\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport {\n  ODataEntityAnnotations,\n  ODataEntitiesAnnotations,\n  ODataPropertyAnnotations,\n} from './annotations';\nimport { Types } from '../../utils/types';\nimport { ODataResource } from '../resource';\nimport { ODataEntities, ODataEntity, ODataProperty } from './types';\nimport {\n  APPLICATION_JSON,\n  ODATA_VERSION_HEADERS,\n  CONTENT_TYPE,\n  CACHE_CONTROL,\n  LOCATION_HEADER,\n  ETAG_HEADERS,\n  ODATA_ENTITYID_HEADERS,\n} from '../../constants';\nimport { ODataApi } from '../../api';\nimport { ODataRequest } from '../request';\nimport { ODataResponseOptions } from './options';\nimport { Http } from '../../utils/http';\nimport { ODataContext } from '../../helper';\n\n/**\n * OData Response\n */\nexport class ODataResponse extends HttpResponse {\n  readonly api: ODataApi;\n  readonly resource: ODataResource;\n\n  constructor(init: {\n    api: ODataApi;\n    resource: ODataResource;\n    body: T | null;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n    url?: string;\n  }) {\n    super(init);\n    this.api = init.api;\n    this.resource = init.resource;\n  }\n\n  static fromHttpResponse(req: ODataRequest, res: HttpResponse) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: res.body,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n      url: res.url || undefined,\n    });\n  }\n\n  static fromJSON(\n    req: ODataRequest,\n    json: {\n      body: T | null;\n      headers: { [name: string]: string | string[] };\n      status: number;\n      statusText: string;\n      url: string | null;\n    }\n  ) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: json.body,\n      headers: new HttpHeaders(json.headers),\n      status: json.status,\n      statusText: json.statusText,\n      url: json.url || undefined,\n    });\n  }\n\n  toJSON() {\n    return {\n      body: this.body,\n      headers: this.headers\n        .keys()\n        .map((name) => ({ [name]: this.headers.getAll(name) || [] }))\n        .reduce((acc, header) => Object.assign(acc, header), {}),\n      status: this.status,\n      statusText: this.statusText,\n      url: this.url,\n    };\n  }\n\n  private _options?: ODataResponseOptions;\n  get options(): ODataResponseOptions {\n    if (this._options === undefined) {\n      this._options = new ODataResponseOptions(this.api.options);\n      const contentType = this.headers.get(CONTENT_TYPE);\n      if (contentType && contentType.indexOf(APPLICATION_JSON) !== -1) {\n        const features = contentType\n          .split(',')\n          .find((p) => p.startsWith(APPLICATION_JSON)) as string;\n        this._options.setFeatures(features);\n      }\n      const header = Http.resolveHeaderKey(this.headers, ODATA_VERSION_HEADERS);\n      if (header) {\n        const version = (this.headers.get(header) || '').replace(/\\;/g, '') as\n          | '2.0'\n          | '3.0'\n          | '4.0';\n        this._options.setVersion(version);\n      }\n\n      const location = this.headers.get(LOCATION_HEADER);\n      if (location) {\n        this._options.setLocation(location);\n      }\n\n      const cacheControl = this.headers.get(CACHE_CONTROL);\n      if (cacheControl) {\n        this._options.setCache(cacheControl);\n      }\n    }\n    return this._options;\n  }\n\n  private _payload?: any;\n  get payload() {\n    if (this._payload === undefined) {\n      this._payload =\n        this.body && this.options.version === '2.0'\n          ? (this.body)['d']\n          : this.body;\n    }\n    return this._payload;\n  }\n\n  private _context?: any;\n  get context(): ODataContext {\n    if (this._context === undefined) {\n      this._context = this.options.helper.context(\n        Types.isPlainObject(this.payload) ? this.payload : {}\n      );\n    }\n    return this._context;\n  }\n\n  private _annotations?: any;\n  get annotations(): { [name: string]: any } {\n    if (this._annotations === undefined) {\n      const options = this.options;\n      this._annotations = options.helper.annotations(this.payload || {});\n      let key = Http.resolveHeaderKey(this.headers, ETAG_HEADERS);\n      if (key) {\n        const etag = this.headers.get(key);\n        if (etag) options.helper.etag(this._annotations, etag);\n      }\n      key = Http.resolveHeaderKey(this.headers, ODATA_ENTITYID_HEADERS);\n      if (key) {\n        const entityId = this.headers.get(key);\n        if (entityId) options.helper.id(this._annotations, entityId);\n      }\n    }\n    return this._annotations;\n  }\n\n  /**\n   * Handle the response body as an entity\n   * @returns\n   */\n  entity(): ODataEntity {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntityAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    const data = payload ? annots.data(payload) : null;\n    let entity = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(data, this.api.options.stripMetadata)\n        : data\n    ) as T | null;\n\n    if (entity !== null)\n      entity = this.resource.deserialize(entity, options) as T;\n    return { entity, annots };\n  }\n\n  /**\n   * Handle the response body as entities\n   * @returns\n   */\n  entities(): ODataEntities {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntitiesAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    let entities = payload ? annots.data(payload) : null;\n\n    if (entities !== null)\n      entities = this.resource.deserialize(entities, options) as T[];\n    return { entities, annots };\n  }\n\n  /**\n   * Handle the response body as a property\n   * @returns\n   */\n  property(): ODataProperty {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataPropertyAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    const data = payload ? (annots.data(payload) as T) : null;\n    let property = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(data, this.api.options.stripMetadata)\n        : data\n    ) as T | null;\n\n    if (property !== null)\n      property = this.resource.deserialize(property, options) as T;\n    return { property, annots };\n  }\n\n  /**\n   * Handle the response body as a value\n   * @returns\n   */\n  value(): T | null {\n    const options = this.options;\n    const payload = this.payload;\n    let value = (\n      payload !== null && Types.isPlainObject(payload)\n        ? options.helper.attributes(payload, this.api.options.stripMetadata)\n        : payload\n    ) as T | null;\n\n    if (value !== null) value = this.resource.deserialize(value, options) as T;\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponseOptions.html":{"url":"classes/ODataResponseOptions.html","title":"class - ODataResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ResponseOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                cacheability\n                            \n                            \n                                    Optional\n                                ieee754Compatible\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Optional\n                                maxAge\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                            \n                                    Optional\n                                streaming\n                            \n                            \n                                    Optional\n                                stringAsEnum\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                setCache\n                            \n                            \n                                setFeatures\n                            \n                            \n                                setLocation\n                            \n                            \n                                setVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: Options)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        Options\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cacheability\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ieee754Compatible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxAge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        streaming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataResponseOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCache\n                        \n                    \n                \n            \n            \n                \nsetCache(cacheControl: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cacheControl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFeatures\n                        \n                    \n                \n            \n            \n                \nsetFeatures(features: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    features\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setLocation\n                        \n                    \n                \n            \n            \n                \nsetLocation(location: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVersion\n                        \n                    \n                \n            \n            \n                \nsetVersion(version: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    version\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:36\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  CacheCacheability,\n  ODataMetadataType,\n  ODataVersion,\n  Options,\n  ResponseOptions,\n} from '../../types';\nimport {\n  DEFAULT_VERSION,\n  MAX_AGE,\n  VERSION_2_0,\n  VERSION_3_0,\n  VERSION_4_0,\n} from '../../constants';\n\nimport { ODataHelper } from '../../helper';\n\nexport class ODataResponseOptions implements ResponseOptions {\n  version: ODataVersion;\n  streaming?: boolean;\n  // OData\n  metadata?: ODataMetadataType;\n  stringAsEnum?: boolean;\n  ieee754Compatible?: boolean;\n  // Location\n  location?: string;\n  // Cache\n  cacheability?: 'public' | 'private' | 'no-cache' | 'no-store';\n  maxAge?: number;\n\n  constructor(config: Options) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n\n  clone() {\n    return new ODataResponseOptions(this);\n  }\n\n  setFeatures(features: string) {\n    features.split(';').forEach((o) => {\n      let [k, v] = o.split('=');\n      switch (k.trim()) {\n        case 'odata.metadata':\n          this.metadata = v as ODataMetadataType;\n          break;\n        case 'odata.streaming':\n          this.streaming = v == 'true';\n          break;\n        case 'IEEE754Compatible':\n          this.ieee754Compatible = v == 'true';\n          break;\n      }\n    });\n  }\n\n  setVersion(version: string) {\n    const value = version.replace(/\\;/g, '').trim();\n    if ([VERSION_2_0, VERSION_3_0, VERSION_4_0].indexOf(value) !== -1)\n      this.version = value as ODataVersion;\n  }\n\n  setLocation(location: string) {\n    // TODO: resolve location?\n    this.location = location;\n  }\n\n  setCache(cacheControl: string) {\n    cacheControl.split(',').forEach((directive) => {\n      if (directive.startsWith(MAX_AGE)) {\n        let maxAge = Number(directive.split('=')[1]);\n        if (!Number.isNaN(maxAge)) this.maxAge = maxAge;\n      }\n      if (\n        ['public', 'private', 'no-cache', 'no-store'].indexOf(directive) !== -1\n      ) {\n        this.cacheability = directive as CacheCacheability;\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchema.html":{"url":"classes/ODataSchema.html","title":"class - ODataSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                api\n                            \n                            \n                                callables\n                            \n                            \n                                containers\n                            \n                            \n                                entities\n                            \n                            \n                                enums\n                            \n                            \n                                namespace\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                    Public\n                                findCallableForType\n                            \n                            \n                                    Public\n                                findEntitySetForType\n                            \n                            \n                                    Public\n                                findEnumTypeForType\n                            \n                            \n                                    Public\n                                findStructuredTypeForType\n                            \n                            \n                                isNamespaceOf\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySets\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: SchemaConfig, api: ODataApi)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        SchemaConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        api\n                                                  \n                                                        \n                                                                        ODataApi\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        callables\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntityContainer[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findCallableForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCallableForType(type: string, bindingType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:66\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bindingType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEntitySetForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEntitySetForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEnumTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEnumTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:54\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findStructuredTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findStructuredTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:60\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNamespaceOf\n                        \n                    \n                \n            \n            \n                \nisNamespaceOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySets\n                    \n                \n\n                \n                    \n                        getentitySets()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/schema.ts:46\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataApi } from '../api';\nimport { Parser, SchemaConfig } from '../types';\nimport { OData } from '../utils/odata';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataCallable } from './callable';\nimport { ODataEntityContainer } from './entity-container';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataEnumType } from './enum-type';\nimport { ODataStructuredType } from './structured-type';\n\nexport class ODataSchema extends ODataAnnotatable {\n  api: ODataApi;\n  namespace: string;\n  alias?: string;\n  enums: ODataEnumType[];\n  entities: ODataStructuredType[];\n  callables: ODataCallable[];\n  containers: ODataEntityContainer[];\n\n  constructor(config: SchemaConfig, api: ODataApi) {\n    super(config);\n    this.api = api;\n    this.namespace = config.namespace;\n    this.alias = config.alias;\n    this.enums = (config.enums || []).map(\n      (config) => new ODataEnumType(config, this)\n    );\n    this.entities = (config.entities || []).map(\n      (config) => new ODataStructuredType(config, this)\n    );\n    this.callables = OData.mergeCallableParameters(config.callables || []).map(\n      (config) => new ODataCallable(config, this)\n    );\n    this.containers = (config.containers || []).map(\n      (config) => new ODataEntityContainer(config, this)\n    );\n  }\n\n  isNamespaceOf(type: string) {\n    return (\n      type.startsWith(this.namespace) ||\n      (this.alias && type.startsWith(this.alias))\n    );\n  }\n\n  get entitySets() {\n    return this.containers.reduce(\n      (acc, container) => [...acc, ...container.entitySets],\n      [] as ODataEntitySet[]\n    );\n  }\n\n  //#region Find for Type\n  public findEnumTypeForType(type: string) {\n    return this.enums.find((e) => e.isTypeOf(type)) as\n      | ODataEnumType\n      | undefined;\n  }\n\n  public findStructuredTypeForType(type: string) {\n    return this.entities.find((e) => e.isTypeOf(type)) as\n      | ODataStructuredType\n      | undefined;\n  }\n\n  public findCallableForType(type: string, bindingType?: string) {\n    const bindingStructuredType =\n      bindingType !== undefined\n        ? this.api.findStructuredTypeForType(bindingType)\n        : undefined;\n    return this.callables.find((c) => {\n      const isCallableType = c.isTypeOf(type);\n      const callableBindingType = c.binding()?.type;\n      const callableBindingStructuredType =\n        callableBindingType !== undefined\n          ? this.api.findStructuredTypeForType(callableBindingType)\n          : undefined;\n      return (\n        isCallableType &&\n        (!bindingStructuredType ||\n          (callableBindingStructuredType &&\n            bindingStructuredType.isSubtypeOf(callableBindingStructuredType)))\n      );\n    }) as ODataCallable | undefined;\n  }\n\n  public findEntitySetForType(type: string) {\n    return this.entitySets.find((e) => e.isTypeOf(type));\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    findOptionsForType,\n  }: {\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    // Configure Enums\n    this.enums.forEach((enu) => enu.configure());\n    // Configure Entities\n    this.entities.forEach((config) =>\n      config.configure({ parserForType, findOptionsForType })\n    );\n    // Configure callables\n    this.callables.forEach((callable) => callable.configure({ parserForType }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchemaElement.html":{"url":"classes/ODataSchemaElement.html","title":"class - ODataSchemaElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchemaElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/element.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotatable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                annotations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isSubtypeOf\n                            \n                            \n                                isSupertypeOf\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                titleize\n                            \n                            \n                                type\n                            \n                            \n                                annotatedValue\n                            \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: literal type, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/element.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotatable\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotatable:18\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isSubtypeOf\n                        \n                    \n                \n            \n            \n                \nisSubtypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:58\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a subtype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSupertypeOf\n                        \n                    \n                \n            \n            \n                \nisSupertypeOf(schema: ODataSchemaElement)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:68\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is a supertype of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    schema\n                                    \n                                                ODataSchemaElement\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:47\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the structured type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleize\n                        \n                    \n                \n            \n            \n                \ntitleize(term?: string | RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:29\n                \n            \n\n\n            \n                \n                    Create a nicer looking title.\nTitleize is meant for creating pretty output.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The titleized string.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/element.ts:38\n                \n            \n\n\n            \n                \n                    Returns a full type of the structured type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotatedValue\n                        \n                    \n                \n            \n            \n                \nannotatedValue(term: string | RegExp)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:39\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Find an annotation inside the annotatable and return its value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    term\n                                    \n                                            string | RegExp\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The term of the annotation to find.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        The value of the annotation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotatable\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotatable:30\n\n                \n            \n\n\n            \n                \n                    Find an annotation inside the annotatable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/element.ts:19\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\nimport { Strings } from '../utils';\nimport { ODataAnnotatable } from './annotation';\nimport { ODataSchema } from './schema';\n\nexport class ODataSchemaElement extends ODataAnnotatable {\n  name: string;\n  schema: ODataSchema;\n\n  constructor(\n    config: { annotations?: AnnotationConfig[]; name: string },\n    schema: ODataSchema\n  ) {\n    super(config);\n    this.schema = schema;\n    this.name = config.name;\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  /**\n   * Create a nicer looking title.\n   * Titleize is meant for creating pretty output.\n   * @param term The term of the annotation to find.\n   * @returns The titleized string.\n   */\n  titleize(term?: string | RegExp): string {\n    return (term && this.annotatedValue(term)) || Strings.titleCase(this.name);\n  }\n\n  /**\n   * Returns a full type of the structured type including the namespace/alias.\n   * @param alias Use the alias of the namespace instead of the namespace.\n   * @returns The string representation of the type.\n   */\n  type({ alias = false }: { alias?: boolean } = {}) {\n    return `${alias ? this.schema.alias : this.schema.namespace}.${this.name}`;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isTypeOf(type: string): boolean {\n    var names = [`${this.schema.namespace}.${this.name}`];\n    if (this.schema.alias) names.push(`${this.schema.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is a subtype of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isSubtypeOf(schema: ODataSchemaElement): boolean {\n    if (this.isTypeOf(schema.type())) return true;\n    return false;\n  }\n\n  /**\n   * Returns a boolean indicating if the structured type is a supertype of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isSupertypeOf(schema: ODataSchemaElement): boolean {\n    if (this.isTypeOf(schema.type())) return true;\n    return false;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ODataServiceFactory.html":{"url":"injectables/ODataServiceFactory.html","title":"injectable - ODataServiceFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ODataServiceFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entitySet\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/factory.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet(entitySetName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:15\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create an entity set service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entitySetName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the entity set.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntitySetService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton(singletonName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:30\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create a singleton service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    singletonName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the singleton.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataSingletonService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ODataClient } from '../client';\nimport { ODataEntitySetService } from './entity-set';\nimport { ODataSingletonService } from './singleton';\n\n@Injectable()\nexport class ODataServiceFactory {\n  constructor(protected client: ODataClient) {}\n\n  /**\n   * Factory method to create an entity set service.\n   * @param entitySetName Name of the entity set.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  entitySet(\n    entitySetName: string,\n    apiNameOrEntityType?: string\n  ): ODataEntitySetService {\n    return new (class extends ODataEntitySetService {})(\n      this.client,\n      entitySetName,\n      apiNameOrEntityType\n    );\n  }\n\n  /** Factory method to create a singleton service.\n   * @param singletonName Name of the singleton.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  singleton(\n    singletonName: string,\n    apiNameOrEntityType?: string\n  ): ODataSingletonService {\n    return new (class extends ODataSingletonService {})(\n      this.client,\n      singletonName,\n      apiNameOrEntityType\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSingletonService.html":{"url":"classes/ODataSingletonService.html","title":"class - ODataSingletonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSingletonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/singleton.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Singleton Service\nwww.odata.org/getting-started/advanced-tutorial/#singleton\n\n            \n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    singletonSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:27\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:19\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Returns :         ODataSingletonResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:58\n                \n            \n\n\n            \n                \n                    Patch the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:44\n                \n            \n\n\n            \n                \n                    Update the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:61\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:24\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:98\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        singletonSchema\n                    \n                \n\n                \n                    \n                        getsingletonSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/singleton.ts:34\n                                \n                            \n                    \n                        \n                                The schema for the singleton.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Observable } from 'rxjs';\nimport type { ODataModel } from '../models/model';\nimport type {\n  ODataEntity,\n  ODataOptions,\n  ODataSingletonResource,\n} from '../resources';\nimport { ODataEntityService } from './entity';\n\n/**\n * OData Singleton Service\n * www.odata.org/getting-started/advanced-tutorial/#singleton\n */\nexport class ODataSingletonService extends ODataEntityService {\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(): ODataSingletonResource {\n    return this.client.singleton(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M) {\n    model.attach(this.entity());\n  }\n\n  /**\n   * The schema for the singleton.\n   */\n  get singletonSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Update the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity();\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public patch(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity();\n    return res.modify(attrs, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Operator.html":{"url":"classes/Operator.html","title":"class - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], normalize: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:295\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:350\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Operator\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:315\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:306\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; op: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:302\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Options.html":{"url":"interfaces/Options.html","title":"interface - Options","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Options\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OptionsHelper.html":{"url":"interfaces/OptionsHelper.html","title":"interface - OptionsHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OptionsHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Options\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            exponentialDecimals\n                                        \n                                \n                                \n                                        \n                                            helper\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ieee754Compatible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            streaming\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exponentialDecimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exponentialDecimals:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        helper\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        helper:         ODataVersionHelper\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersionHelper\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ieee754Compatible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ieee754Compatible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        streaming\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        streaming:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByExpression.html":{"url":"classes/OrderByExpression.html","title":"class - OrderByExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                ascending\n                            \n                            \n                                clone\n                            \n                            \n                                descending\n                            \n                            \n                                    Static\n                                e\n                            \n                            \n                                    Static\n                                orderBy\n                            \n                            \n                                render\n                            \n                            \n                                    Static\n                                s\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ascending\n                        \n                    \n                \n            \n            \n                \nascending(field: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         OrderByExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        descending\n                        \n                    \n                \n            \n            \n                \ndescending(field: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        e\n                        \n                    \n                \n            \n            \n                \n                    \n                    e()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:45\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :         OrderByExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        orderBy\n                        \n                    \n                \n            \n            \n                \n                    \n                    orderBy(opts: (builder: literal type,current: OrderByExpression) => void, current?: OrderByExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:53\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                                OrderByExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         OrderByExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:74\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        s\n                        \n                    \n                \n            \n            \n                \n                    \n                    s()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:49\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :     T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Field, Renderable } from './syntax';\n\nexport class OrderByField implements Renderable {\n  constructor(protected field: Renderable, protected order: 'asc' | 'desc') {}\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n      order: this.order,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${render(this.field, { aliases, escape, prefix })} ${this.order}`;\n  }\n\n  clone() {\n    return new OrderByField(this.field.clone(), this.order);\n  }\n}\n\nexport class OrderByExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static e() {\n    return new OrderByExpression();\n  }\n\n  static s(): T {\n    return Field.factory();\n  }\n\n  static orderBy(\n    opts: (\n      builder: { s: T; e: () => OrderByExpression },\n      current?: OrderByExpression\n    ) => OrderByExpression,\n    current?: OrderByExpression\n  ): OrderByExpression {\n    return opts(\n      {\n        s: OrderByExpression.s(),\n        e: OrderByExpression.e,\n      },\n      current\n    ) as OrderByExpression;\n  }\n\n  private _add(node: Renderable): OrderByExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new OrderByExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  ascending(field: any) {\n    return this._add(new OrderByField(field, 'asc'));\n  }\n\n  descending(field: any) {\n    return this._add(new OrderByField(field, 'desc'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OrderByField.html":{"url":"classes/OrderByField.html","title":"class - OrderByField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OrderByField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/orderby.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: Renderable, order: \"asc\" | \"desc\")\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        order\n                                                  \n                                                        \n                                                                    \"asc\" | \"desc\"\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         OrderByField\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { field: any; order: \"asc\" | \"desc\"; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/orderby.ts:8\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Field, Renderable } from './syntax';\n\nexport class OrderByField implements Renderable {\n  constructor(protected field: Renderable, protected order: 'asc' | 'desc') {}\n\n  get [Symbol.toStringTag]() {\n    return 'OrderByField';\n  }\n\n  toJSON() {\n    return {\n      field: this.field.toJSON(),\n      order: this.order,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${render(this.field, { aliases, escape, prefix })} ${this.order}`;\n  }\n\n  clone() {\n    return new OrderByField(this.field.clone(), this.order);\n  }\n}\n\nexport class OrderByExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static e() {\n    return new OrderByExpression();\n  }\n\n  static s(): T {\n    return Field.factory();\n  }\n\n  static orderBy(\n    opts: (\n      builder: { s: T; e: () => OrderByExpression },\n      current?: OrderByExpression\n    ) => OrderByExpression,\n    current?: OrderByExpression\n  ): OrderByExpression {\n    return opts(\n      {\n        s: OrderByExpression.s(),\n        e: OrderByExpression.e,\n      },\n      current\n    ) as OrderByExpression;\n  }\n\n  private _add(node: Renderable): OrderByExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(`,`);\n    return content;\n  }\n\n  clone() {\n    return new OrderByExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  ascending(field: any) {\n    return this._add(new OrderByField(field, 'asc'));\n  }\n\n  descending(field: any) {\n    return this._add(new OrderByField(field, 'desc'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Parser.html":{"url":"interfaces/Parser.html","title":"interface - Parser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Parser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deserialize\n                                    \n                                \n                                \n                                    \n                                        encode\n                                    \n                                \n                                \n                                    \n                                        serialize\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: OptionsHelper | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            OptionsHelper | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            OptionsHelper | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: OptionsHelper | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            OptionsHelper | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Renderable.html":{"url":"interfaces/Renderable.html","title":"interface - Renderable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Renderable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        clone\n                                    \n                                \n                                \n                                    \n                                        render\n                                    \n                                \n                                \n                                    \n                                        toJSON\n                                    \n                                \n                                \n                                    \n                                        toString\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseJson.html":{"url":"interfaces/ResponseJson.html","title":"interface - ResponseJson","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseJson\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            statusText\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     any | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataRequest, ODataResponse } from '../resources';\nimport { ODataCache, ODataCacheEntry } from './cache';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries()))\n    );\n  }\n\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]')\n    );\n  }\n\n  override flush() {\n    super.flush();\n    this.store();\n  }\n\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(req, res);\n    this.put(req.pathWithParams, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.pathWithParams, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseOptions.html":{"url":"interfaces/ResponseOptions.html","title":"interface - ResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OptionsHelper\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cacheability\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxAge\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cacheability\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheability:         CacheCacheability\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CacheCacheability\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxAge\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxAge:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchExpression.html":{"url":"classes/SearchExpression.html","title":"class - SearchExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/search.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _connector\n                            \n                            \n                                    Private\n                                _negated\n                            \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                and\n                            \n                            \n                                clone\n                            \n                            \n                                connector\n                            \n                            \n                                    Static\n                                e\n                            \n                            \n                                negated\n                            \n                            \n                                not\n                            \n                            \n                                or\n                            \n                            \n                                render\n                            \n                            \n                                    Static\n                                search\n                            \n                            \n                                term\n                            \n                            \n                                    \n                                toJSON\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _connector\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SearchConnector\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _negated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable, connector?: SearchConnector)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    connector\n                                    \n                                                SearchConnector\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        and\n                        \n                    \n                \n            \n            \n                \nand(exp: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:140\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SearchExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        connector\n                        \n                    \n                \n            \n            \n                \nconnector()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SearchConnector\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        e\n                        \n                    \n                \n            \n            \n                \n                    \n                    e(connector: SearchConnector)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:56\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    connector\n                                    \n                                                SearchConnector\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'AND'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        negated\n                        \n                    \n                \n            \n            \n                \nnegated()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        not\n                        \n                    \n                \n            \n            \n                \nnot(exp: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        or\n                        \n                    \n                \n            \n            \n                \nor(exp: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exp\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:125\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(opts: (builder: literal type,current: SearchExpression) => void, current?: SearchExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:60\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                            SearchExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n            \n                \nterm(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SearchExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        toJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    toJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:148\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { children: any; connector: SearchConnector; negated: boolean; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Grouping, Renderable } from './syntax';\n\nexport type SearchConnector = 'AND' | 'OR';\n\nexport class SearchTerm implements Renderable {\n  constructor(protected value: string) {}\n\n  get [Symbol.toStringTag]() {\n    return 'SearchTerm';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${render(this.value, { aliases, escape, prefix })}`;\n  }\n\n  clone() {\n    return new SearchTerm(this.value);\n  }\n}\n\nexport class SearchExpression extends Expression {\n  private _connector: SearchConnector;\n  private _negated: boolean;\n  constructor({\n    children,\n    connector,\n    negated,\n  }: {\n    children?: Renderable[];\n    connector?: SearchConnector;\n    negated?: boolean;\n  } = {}) {\n    super({ children });\n    this._connector = connector || 'AND';\n    this._negated = negated || false;\n  }\n\n  static e(connector: SearchConnector = 'AND') {\n    return new SearchExpression({ connector });\n  }\n\n  static search(\n    opts: (\n      builder: {\n        e: (connector?: SearchConnector) => SearchExpression;\n      },\n      current?: SearchExpression\n    ) => SearchExpression,\n    current?: SearchExpression\n  ): SearchExpression {\n    return opts(\n      {\n        e: SearchExpression.e,\n      },\n      current\n    ) as SearchExpression;\n  }\n\n  private _add(\n    node: Renderable,\n    connector?: SearchConnector\n  ): SearchExpression {\n    if (connector !== undefined && this._connector !== connector) {\n      let children: Renderable[] = [];\n      if (this._children.length > 0) {\n        if (this._children.length === 1) {\n          children = [...this._children];\n        } else {\n          let exp = new SearchExpression({\n            children: this._children,\n            connector: this._connector,\n            negated: this._negated,\n          });\n          if (exp.length() > 1) {\n            children.push(new Grouping(exp));\n          } else {\n            children.push(exp);\n          }\n        }\n      }\n      if (\n        node instanceof SearchExpression &&\n        (node.connector() === connector || node.length() === 1)\n      ) {\n        children = [...children, ...node.children()];\n      } else {\n        children.push(new Grouping(node));\n      }\n      this._connector = connector;\n      this._children = children;\n    } else if (\n      node instanceof SearchExpression &&\n      !node.negated() &&\n      (node.connector() === connector || node.length() === 1)\n    ) {\n      this._children = [...this._children, ...node.children()];\n    } else {\n      this._children.push(\n        node instanceof SearchExpression && !node.negated()\n          ? new Grouping(node)\n          : node\n      );\n    }\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(` ${this._connector} `);\n    return content;\n  }\n\n  clone() {\n    return new SearchExpression({\n      children: this._children.map((c) => c.clone()),\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  override toJSON() {\n    return {\n      children: this._children.map((c) => c.toJSON()),\n      connector: this._connector,\n      negated: this._negated,\n    };\n  }\n\n  connector() {\n    return this._connector;\n  }\n\n  negated() {\n    return this._negated;\n  }\n\n  or(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'OR');\n  }\n\n  and(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'AND');\n  }\n\n  not(exp: SearchExpression): SearchExpression {\n    const notExp = new SearchExpression({\n      children: exp.children(),\n      connector: exp.connector(),\n      negated: true,\n    });\n\n    return this._add(notExp, this._connector);\n  }\n\n  term(value: any) {\n    return this._add(new SearchTerm(value));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchTerm.html":{"url":"classes/SearchTerm.html","title":"class - SearchTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/search.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(value: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SearchTerm\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { $type: any; value: string; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/expressions/search.ts:11\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { render, Grouping, Renderable } from './syntax';\n\nexport type SearchConnector = 'AND' | 'OR';\n\nexport class SearchTerm implements Renderable {\n  constructor(protected value: string) {}\n\n  get [Symbol.toStringTag]() {\n    return 'SearchTerm';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      value: this.value,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `${render(this.value, { aliases, escape, prefix })}`;\n  }\n\n  clone() {\n    return new SearchTerm(this.value);\n  }\n}\n\nexport class SearchExpression extends Expression {\n  private _connector: SearchConnector;\n  private _negated: boolean;\n  constructor({\n    children,\n    connector,\n    negated,\n  }: {\n    children?: Renderable[];\n    connector?: SearchConnector;\n    negated?: boolean;\n  } = {}) {\n    super({ children });\n    this._connector = connector || 'AND';\n    this._negated = negated || false;\n  }\n\n  static e(connector: SearchConnector = 'AND') {\n    return new SearchExpression({ connector });\n  }\n\n  static search(\n    opts: (\n      builder: {\n        e: (connector?: SearchConnector) => SearchExpression;\n      },\n      current?: SearchExpression\n    ) => SearchExpression,\n    current?: SearchExpression\n  ): SearchExpression {\n    return opts(\n      {\n        e: SearchExpression.e,\n      },\n      current\n    ) as SearchExpression;\n  }\n\n  private _add(\n    node: Renderable,\n    connector?: SearchConnector\n  ): SearchExpression {\n    if (connector !== undefined && this._connector !== connector) {\n      let children: Renderable[] = [];\n      if (this._children.length > 0) {\n        if (this._children.length === 1) {\n          children = [...this._children];\n        } else {\n          let exp = new SearchExpression({\n            children: this._children,\n            connector: this._connector,\n            negated: this._negated,\n          });\n          if (exp.length() > 1) {\n            children.push(new Grouping(exp));\n          } else {\n            children.push(exp);\n          }\n        }\n      }\n      if (\n        node instanceof SearchExpression &&\n        (node.connector() === connector || node.length() === 1)\n      ) {\n        children = [...children, ...node.children()];\n      } else {\n        children.push(new Grouping(node));\n      }\n      this._connector = connector;\n      this._children = children;\n    } else if (\n      node instanceof SearchExpression &&\n      !node.negated() &&\n      (node.connector() === connector || node.length() === 1)\n    ) {\n      this._children = [...this._children, ...node.children()];\n    } else {\n      this._children.push(\n        node instanceof SearchExpression && !node.negated()\n          ? new Grouping(node)\n          : node\n      );\n    }\n    return this;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    let content = this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(` ${this._connector} `);\n    return content;\n  }\n\n  clone() {\n    return new SearchExpression({\n      children: this._children.map((c) => c.clone()),\n      connector: this._connector,\n      negated: this._negated,\n    });\n  }\n\n  override toJSON() {\n    return {\n      children: this._children.map((c) => c.toJSON()),\n      connector: this._connector,\n      negated: this._negated,\n    };\n  }\n\n  connector() {\n    return this._connector;\n  }\n\n  negated() {\n    return this._negated;\n  }\n\n  or(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'OR');\n  }\n\n  and(exp: SearchExpression): SearchExpression {\n    return this._add(exp, 'AND');\n  }\n\n  not(exp: SearchExpression): SearchExpression {\n    const notExp = new SearchExpression({\n      children: exp.children(),\n      connector: exp.connector(),\n      negated: true,\n    });\n\n    return this._add(notExp, this._connector);\n  }\n\n  term(value: any) {\n    return this._add(new SearchTerm(value));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SegmentHandler.html":{"url":"classes/SegmentHandler.html","title":"class - SegmentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SegmentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearKey\n                            \n                            \n                                clearParameters\n                            \n                            \n                                hasKey\n                            \n                            \n                                hasParameters\n                            \n                            \n                                key\n                            \n                            \n                                parameters\n                            \n                            \n                                path\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segment: ODataSegment)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segment\n                                                  \n                                                        \n                                                                        ODataSegment\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearKey\n                        \n                    \n                \n            \n            \n                \nclearKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearParameters\n                        \n                    \n                \n            \n            \n                \nclearParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasKey\n                        \n                    \n                \n            \n            \n                \nhasKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasParameters\n                        \n                    \n                \n            \n            \n                \nhasParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n            \n                \nkey(value?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:19\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EntityKey\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n            \n                \nparameters(value?: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:29\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:8\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PathSegmentNames } from '../../types';\nimport { Types } from '../../utils';\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegmentNames.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegmentNames.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegmentNames.action);\n  }\n  function() {\n    return this.segments.get(PathSegmentNames.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegmentNames.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegmentNames.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectExpression.html":{"url":"classes/SelectExpression.html","title":"class - SelectExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/select.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Expression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                _children\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _add\n                            \n                            \n                                clone\n                            \n                            \n                                    Static\n                                e\n                            \n                            \n                                field\n                            \n                            \n                                render\n                            \n                            \n                                    Static\n                                s\n                            \n                            \n                                    Static\n                                select\n                            \n                            \n                                children\n                            \n                            \n                                length\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        _children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Renderable[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Expression\n\n                            \n                        \n                    \n                        \n                                Defined in         Expression:5\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        _add\n                        \n                    \n                \n            \n            \n                \n                    \n                    _add(node: Renderable)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Renderable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:52\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         SelectExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        e\n                        \n                    \n                \n            \n            \n                \n                    \n                    e()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:14\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :         SelectExpression\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n            \n                \nfield(field: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        s\n                        \n                    \n                \n            \n            \n                \n                    \n                    s()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:18\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :     T\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        select\n                        \n                    \n                \n            \n            \n                \n                    \n                    select(builder: (b: literal type,c: SelectExpression) => void, current?: SelectExpression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/select.ts:22\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    builder\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                                SelectExpression\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SelectExpression\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n            \n                \nchildren()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Expression\n\n                \n            \n            \n                \n                        Defined in         Expression:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { children: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { QueryCustomType } from '../builder';\nimport { Expression } from './base';\nimport { Field, Renderable } from './syntax';\n\nexport class SelectExpression extends Expression {\n  constructor({\n    children,\n  }: {\n    children?: Renderable[];\n  } = {}) {\n    super({ children });\n  }\n\n  static e() {\n    return new SelectExpression();\n  }\n\n  static s(): T {\n    return Field.factory();\n  }\n\n  static select(\n    builder: (\n      b: { s: T; e: () => SelectExpression },\n      c?: SelectExpression\n    ) => SelectExpression,\n    current?: SelectExpression\n  ): SelectExpression {\n    return builder(\n      {\n        s: SelectExpression.s(),\n        e: SelectExpression.e,\n      },\n      current\n    ) as SelectExpression;\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[] | undefined;\n    escape?: boolean | undefined;\n    prefix?: string | undefined;\n  } = {}): string {\n    return this._children\n      .map((n) => n.render({ aliases, escape, prefix }))\n      .join(',');\n  }\n\n  clone() {\n    return new SelectExpression({\n      children: this._children.map((c) => c.clone()),\n    });\n  }\n\n  private _add(node: Renderable): SelectExpression {\n    this._children.push(node);\n    return this;\n  }\n\n  field(field: any): SelectExpression {\n    return this._add(field);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringAndCollectionFunctions.html":{"url":"classes/StringAndCollectionFunctions.html","title":"class - StringAndCollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringAndCollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                concat\n                            \n                            \n                                contains\n                            \n                            \n                                endsWith\n                            \n                            \n                                indexOf\n                            \n                            \n                                length\n                            \n                            \n                                startsWith\n                            \n                            \n                                subString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        concat\n                        \n                    \n                \n            \n            \n                \nconcat(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contains\n                        \n                    \n                \n            \n            \n                \ncontains(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endsWith\n                        \n                    \n                \n            \n            \n                \nendsWith(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        indexOf\n                        \n                    \n                \n            \n            \n                \nindexOf(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startsWith\n                        \n                    \n                \n            \n            \n                \nstartsWith(field: any, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subString\n                        \n                    \n                \n            \n            \n                \nsubString(field: any, start: number, length?: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringFunctions.html":{"url":"classes/StringFunctions.html","title":"class - StringFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                matchesPattern\n                            \n                            \n                                toLower\n                            \n                            \n                                toUpper\n                            \n                            \n                                trim\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        matchesPattern\n                        \n                    \n                \n            \n            \n                \nmatchesPattern(value: T | string, pattern: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLower\n                        \n                    \n                \n            \n            \n                \ntoLower(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toUpper\n                        \n                    \n                \n            \n            \n                \ntoUpper(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:202\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trim\n                        \n                    \n                \n            \n            \n                \ntrim(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:205\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuredTypeFieldOptions.html":{"url":"interfaces/StructuredTypeFieldOptions.html","title":"interface - StructuredTypeFieldOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructuredTypeFieldOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OptionsHelper\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            field\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         StructuredTypeFieldConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuredTypeFieldConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  levels = 'levels',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n  //https://github.com/OData/WebApi/issues/1974\n  //https://github.com/OData/WebApi/issues/1647\n  deleteRefBy?: 'path' | 'id';\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeFunctions.html":{"url":"classes/TypeFunctions.html","title":"class - TypeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/expressions/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cast\n                            \n                            \n                                isof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cast\n                        \n                    \n                \n            \n            \n                \ncast(value: T | string, type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:268\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isof\n                        \n                    \n                \n            \n            \n                \nisof(value: T | string, type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/expressions/syntax.ts:272\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../../utils';\nimport type { QueryCustomType } from '../builder';\nimport { normalizeValue } from '../builder';\n\nexport interface Renderable {\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string;\n  toString(): string;\n  toJSON(): any;\n  clone(): any;\n}\n\nexport class Field implements ProxyHandler {\n  constructor(public name: string = '') {}\n\n  static factory(name: string = '') {\n    return new Proxy({ _name: name } as T, new Field());\n  }\n\n  get(target: T, key: string | symbol): any {\n    let name = (target as any)['_name'];\n    if (key === 'render') {\n      return ({ prefix }: { prefix?: string }) =>\n        prefix ? `${prefix}/${name}` : name;\n    }\n    else if (key === 'clone') {\n      return () => Field.factory(name);\n    }\n    else if (key === Symbol.toStringTag) {\n      return () => 'Field';\n    }\n    else if (key === 'toJSON') {\n      return () => ({\n          $type: Types.rawType(this),\n          name: name,\n        });\n    } else {\n      name = name ? `${name}/${key as string}` : key;\n      return new Proxy({ _name: name } as any, this);\n    }\n  }\n  \n  has(target: T, key: string): any {\n    return ['toJSON', 'clone', 'render'].includes(key) || key in target;\n  }\n}\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nexport function render(\n  value: any,\n  {\n    aliases,\n    normalize,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    normalize?: boolean;\n    escape?: boolean;\n    prefix?: string;\n  } = {}\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), { aliases, normalize, prefix });\n  }\n  if (\n    typeof value === 'object' &&\n    value !== null &&\n    value.render !== undefined\n  ) {\n    return render(value.render({ aliases, escape, prefix }), {\n      aliases,\n      normalize,\n      escape,\n      prefix,\n    });\n  }\n  return normalize ? normalizeValue(value, { aliases, escape }) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true,\n    protected escape: boolean = false\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [field, ...values] = this.values;\n\n    field = render(field, { aliases, escape, prefix });\n    const params = [\n      field,\n      ...values.map((v) =>\n        render(v, { aliases, escape, prefix, normalize: this.normalize })\n      ),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n\n  clone() {\n    return new Function(\n      this.name,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize,\n      this.escape\n    );\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: any, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n\n  contains(field: any, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n\n  endsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n\n  indexOf(field: any, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n\n  length(value: any, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n\n  startsWith(field: any, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n\n  subString(field: any, start: number, length?: number) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: any) {\n    return new Function('date', [value]);\n  }\n  day(value: any) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: any) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: any) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: any) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: any) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: any) {\n    return new Function('minute', [value]);\n  }\n  month(value: any) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: any) {\n    return new Function('second', [value]);\n  }\n  time(value: any) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: any) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: any) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: any) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  geoDistance(value: T, point: string, normalize?: boolean) {\n    return new Function('geo.distance', [value, point], normalize);\n  }\n  geoIntersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('geo.intersects', [value, polygon], normalize);\n  }\n  geoLength(line: T, normalize?: boolean) {\n    return new Function('geo.length', [line], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right\n            .map((v) =>\n              render(v, {\n                aliases,\n                escape,\n                prefix,\n                normalize: this.normalize,\n              })\n            )\n            .join(',')})`\n        : render(right, {\n            aliases,\n            escape,\n            prefix,\n            normalize: this.normalize,\n          });\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n\n  clone() {\n    return new Operator(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.normalize\n    );\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  /*\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  */\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      group: this.group.toJSON(),\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    return `(${render(this.group, { aliases, escape, prefix })})`;\n  }\n\n  clone() {\n    return new Grouping(Objects.clone(this.group));\n  }\n}\n\nexport class Lambda implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected alias?: string\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  toJSON() {\n    return {\n      $type: Types.rawType(this),\n      op: this.op,\n      values: this.values,\n      alias: this.alias,\n    };\n  }\n\n  render({\n    aliases,\n    escape,\n    prefix,\n  }: {\n    aliases?: QueryCustomType[];\n    escape?: boolean;\n    prefix?: string;\n  }): string {\n    let [left, right] = this.values;\n\n    left = render(left, { aliases, escape, prefix });\n    let alias = this.alias || left.split('/').pop().toLowerCase()[0];\n    return `${left}/${this.op}(${alias}:${render(right, {\n      aliases,\n      escape,\n      prefix: alias,\n    })})`;\n  }\n\n  clone() {\n    return new Lambda(\n      this.op,\n      this.values.map((v) => Objects.clone(v)),\n      this.alias\n    );\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any, alias?: string) {\n    return new Lambda('any', [field, value], alias);\n  }\n\n  all(field: T, value: any, alias?: string) {\n    return new Lambda('all', [field, value], alias);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~13.2.5\n        \n            @angular/common : ~13.2.5\n        \n            @angular/compiler : ~13.2.5\n        \n            @angular/core : ~13.2.5\n        \n            @angular/forms : ~13.2.5\n        \n            @angular/platform-browser : ~13.2.5\n        \n            @angular/platform-browser-dynamic : ~13.2.5\n        \n            @angular/router : ~13.2.5\n        \n            rxjs : ~7.4.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FieldType   (projects/.../metadata.ts)\n                        \n                        \n                            ODataModelState   (projects/.../options.ts)\n                        \n                        \n                            PathSegmentNames   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomTypes   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptionNames   (projects/.../types.ts)\n                        \n                        \n                            StandardAggregateMethods   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/responses/metadata.ts\n    \n        \n            \n                \n                    \n                        \n                        FieldType\n                    \n                \n                        \n                            \n                                 ATTRIBUTE\n                            \n                        \n                        \n                            \n                                 TAG\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/models/options.ts\n    \n        \n            \n                \n                    \n                        \n                        ODataModelState\n                    \n                \n                        \n                            \n                                 Added\n                            \n                        \n                        \n                            \n                                 Removed\n                            \n                        \n                        \n                            \n                                 Changed\n                            \n                        \n                        \n                            \n                                 Unchanged\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/types.ts\n    \n        \n            \n                \n                    \n                        \n                        PathSegmentNames\n                    \n                \n                        \n                            \n                                 batch\n                            \n                        \n                        \n                            \n                                Value : batch\n                            \n                        \n                        \n                            \n                                 metadata\n                            \n                        \n                        \n                            \n                                Value : metadata\n                            \n                        \n                        \n                            \n                                 entitySet\n                            \n                        \n                        \n                            \n                                Value : entitySet\n                            \n                        \n                        \n                            \n                                 singleton\n                            \n                        \n                        \n                            \n                                Value : singleton\n                            \n                        \n                        \n                            \n                                 type\n                            \n                        \n                        \n                            \n                                Value : type\n                            \n                        \n                        \n                            \n                                 property\n                            \n                        \n                        \n                            \n                                Value : property\n                            \n                        \n                        \n                            \n                                 navigationProperty\n                            \n                        \n                        \n                            \n                                Value : navigationProperty\n                            \n                        \n                        \n                            \n                                 reference\n                            \n                        \n                        \n                            \n                                Value : reference\n                            \n                        \n                        \n                            \n                                 value\n                            \n                        \n                        \n                            \n                                Value : value\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 function\n                            \n                        \n                        \n                            \n                                Value : function\n                            \n                        \n                        \n                            \n                                 action\n                            \n                        \n                        \n                            \n                                Value : action\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        QueryOptionNames\n                    \n                \n                        \n                            \n                                 select\n                            \n                        \n                        \n                            \n                                Value : select\n                            \n                        \n                        \n                            \n                                 expand\n                            \n                        \n                        \n                            \n                                Value : expand\n                            \n                        \n                        \n                            \n                                 compute\n                            \n                        \n                        \n                            \n                                Value : compute\n                            \n                        \n                        \n                            \n                                 filter\n                            \n                        \n                        \n                            \n                                Value : filter\n                            \n                        \n                        \n                            \n                                 search\n                            \n                        \n                        \n                            \n                                Value : search\n                            \n                        \n                        \n                            \n                                 transform\n                            \n                        \n                        \n                            \n                                Value : transform\n                            \n                        \n                        \n                            \n                                 orderBy\n                            \n                        \n                        \n                            \n                                Value : orderBy\n                            \n                        \n                        \n                            \n                                 top\n                            \n                        \n                        \n                            \n                                Value : top\n                            \n                        \n                        \n                            \n                                 skip\n                            \n                        \n                        \n                            \n                                Value : skip\n                            \n                        \n                        \n                            \n                                 skiptoken\n                            \n                        \n                        \n                            \n                                Value : skiptoken\n                            \n                        \n                        \n                            \n                                 format\n                            \n                        \n                        \n                            \n                                Value : format\n                            \n                        \n                        \n                            \n                                 levels\n                            \n                        \n                        \n                            \n                                Value : levels\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n        \n            \n                \n                    \n                        \n                        QueryCustomTypes\n                    \n                \n                        \n                            \n                                 Raw\n                            \n                        \n                        \n                            \n                                 Alias\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                 Binary\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardAggregateMethods\n                    \n                \n                        \n                            \n                                 sum\n                            \n                        \n                        \n                            \n                                Value : sum\n                            \n                        \n                        \n                            \n                                 min\n                            \n                        \n                        \n                            \n                                Value : min\n                            \n                        \n                        \n                            \n                                 max\n                            \n                        \n                        \n                            \n                                Value : max\n                            \n                        \n                        \n                            \n                                 average\n                            \n                        \n                        \n                            \n                                Value : average\n                            \n                        \n                        \n                            \n                                 countdistinct\n                            \n                        \n                        \n                            \n                                Value : countdistinct\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngular OData\n\n\nA fluent API for querying, creating, updating and deleting OData resources in Angular.\nOData service for Angular.\nPlease check also my other related project, OData Angular Generator\nDemo:\nFull examples of the library:\n\nAngularODataEntity\n\nTable of contents\n\nInstallation\nWithout Schema\nWith Schema\nUsage\nOData Version\nQuery Builder\nDocumentation\n\nInstallation\nInstall from npm:\nnpm i angular-odataWithout Schema\nImport ODataModule into your application module definition and setup the module for the serviceRootUrl.\nimport { NgModule } from '@angular/core';\nimport { ODataModule } from 'angular-odata';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot({\n      serviceRootUrl: 'https://services.odata.org/V4/(S(4m0tuxtnhcfctl4gzem3gr10))/TripPinServiceRW/'\n    })\n    ...\n  ]\n})\nexport class AppModule {}With Schema\nUse OData Angular Generator for generate the Config and the Module definition.\nImport ODataModule, Config and Module into your application module.\nSetup ODataModule with Config and import it along with Module.\nimport { NgModule } from '@angular/core';\n\nimport { ODataModule } from 'angular-odata';\nimport { TripPinConfig, TripPinModule } from './trippin';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot(TripPinConfig),\n    TripPinModule\n  ]\n  ...\n})\nexport class AppModule {}Usage\nInject and use the ODataServiceFactory\nimport { Component } from \"@angular/core\";\nimport { ODataClient, ODATA_ETAG } from \"angular-odata\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"TripPin\";\n  constructor(private factory: ODataServiceFactory) {\n    this.queries();\n  }\n\n  queries() {\n    // Use OData Service Factory\n    let airportsService = this.factory.entitySet(\n      \"Airports\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Airport\"\n    );\n    let airports = airportsService.entities();\n\n    // Fetch airports\n    airports.fetch().subscribe(({ entities }) => {\n      console.log(\"Airports: \", entities);\n    });\n\n    // Fetch airports with count\n    airports\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    // Fetch all airports\n    airports\n      .fetchAll()\n      .subscribe((airports) => console.log(\"All Airports: \", airports));\n\n    // Fetch airport with key and fetch again from cache\n    airports\n      .entity(\"CYYZ\")\n      .fetch()\n      .pipe(\n        switchMap(() =>\n          // From Cache!\n          airports.entity(\"CYYZ\").fetch({ fetchPolicy: \"cache-first\" })\n        )\n      )\n      .subscribe(({ entity, annots }) =>\n        console.log(\"Airport: \", entity, \"Annotations: \", annots)\n      );\n\n    // Clone airports resource and filter new resource\n    airports\n      .clone()\n      .query((q) =>\n        q.filter({ Location: { City: { CountryRegion: \"United States\" } } })\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports of United States: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) =>\n      q.filter().push({ Location: { City: { Region: \"California\" } } })\n    );\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports in California: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Store airports resource\n    var json = airports.toJSON();\n    // Load airports resource\n    airports = this.odata.fromJSON(json) as ODataEntitySetResource;\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) => q.filter().clear());\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    let peopleService = this.factory.entitySet(\n      \"People\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Person\"\n    );\n    let people = peopleService.entities();\n\n    // Clone people resource and expand and fetch\n    people\n      .clone()\n      .query((q) =>\n        q.expand({\n          Friends: {\n            expand: { Friends: { select: [\"AddressInfo\"] } },\n          },\n          Trips: { select: [\"Name\", \"Tags\"] },\n        })\n      )\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Clone people resource and filter with expressions\n    people\n      .clone()\n      .query((q) =>\n        q.filter(({ e }) =>\n          e().eq(\"Emails\", \"john@example.com\").or(e().eq(\"UserName\", \"john\"))\n        )\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    this.odata\n      .batch(\"TripPin\")\n      .exec(() =>\n        forkJoin({\n          airports: airports.fetch(),\n          people: people.fetch({ withCount: true }),\n        })\n      )\n      .subscribe();\n  }\n}OData Version\nThe library works mainly with OData Version 4, however, it incorporates basic support for versions 3 and 2.\nQuery Builder\nFor a deep query customizations the library use odata-query and odata-filter-builder as a builders.\n\nOData v4 query builder\nOData Filter Builder\n\nDocumentation\nThe api documentation is generated using compodoc and can be viewed here: https://diegomvh.github.io/angular-odata/docs/\nLibrary documentation can be viewed on the wiki here: https://github.com/diegomvh/angular-odata/wiki\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Diego van Haaster\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ODataModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    120 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Aggregate   (projects/.../builder.ts)\n                        \n                        \n                            AnnotationConfig   (projects/.../types.ts)\n                        \n                        \n                            ApiConfig   (projects/.../types.ts)\n                        \n                        \n                            CacheCacheability   (projects/.../types.ts)\n                        \n                        \n                            CallableConfig   (projects/.../types.ts)\n                        \n                        \n                            Duration   (projects/.../durations.ts)\n                        \n                        \n                            EntityContainerConfig   (projects/.../types.ts)\n                        \n                        \n                            EntityKey   (projects/.../resource.ts)\n                        \n                        \n                            EntitySetConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Expand   (projects/.../builder.ts)\n                        \n                        \n                            ExpandObject   (projects/.../builder.ts)\n                        \n                        \n                            ExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ExpandType   (projects/.../builder.ts)\n                        \n                        \n                            FetchPolicy   (projects/.../types.ts)\n                        \n                        \n                            Filter   (projects/.../builder.ts)\n                        \n                        \n                            FilterConnector   (projects/.../filter.ts)\n                        \n                        \n                            FilterType   (projects/.../builder.ts)\n                        \n                        \n                            GroupBy   (projects/.../builder.ts)\n                        \n                        \n                            JsonSchemaCustom   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaExpand   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaOptions   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaRequired   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaSelect   (projects/.../structured-type.ts)\n                        \n                        \n                            ModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ModelOptions   (projects/.../options.ts)\n                        \n                        \n                            NestedExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ODataContext   (projects/.../helper.ts)\n                        \n                        \n                            ODataEntities   (projects/.../types.ts)\n                        \n                        \n                            ODataEntitiesOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataEntity   (projects/.../types.ts)\n                        \n                        \n                            ODataEntityOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataMetadataType   (projects/.../types.ts)\n                        \n                        \n                            ODataModelEntry   (projects/.../options.ts)\n                        \n                        \n                            ODataModelEventType   (projects/.../options.ts)\n                        \n                        \n                            ODataModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataModelRelation   (projects/.../options.ts)\n                        \n                        \n                            ODataNoneOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataProperty   (projects/.../types.ts)\n                        \n                        \n                            ODataPropertyOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArguments   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArgumentsOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataSegment   (projects/.../segments.ts)\n                        \n                        \n                            ODataVersion   (projects/.../types.ts)\n                        \n                        \n                            OrderBy   (projects/.../builder.ts)\n                        \n                        \n                            OrderByObject   (projects/.../builder.ts)\n                        \n                        \n                            OrderByType   (projects/.../builder.ts)\n                        \n                        \n                            Parameter   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomType   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptions   (projects/.../builder.ts)\n                        \n                        \n                            SchemaConfig   (projects/.../types.ts)\n                        \n                        \n                            SearchConnector   (projects/.../search.ts)\n                        \n                        \n                            Select   (projects/.../builder.ts)\n                        \n                        \n                            SelectType   (projects/.../builder.ts)\n                        \n                        \n                            StructuredTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            StructuredTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Transform   (projects/.../builder.ts)\n                        \n                        \n                            Unpacked   (projects/.../builder.ts)\n                        \n                        \n                            Value   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n    \n        \n            \n                \n                    \n                    Aggregate\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Expand\n                \n            \n            \n                \n                        ExpandType | ExpandType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandObject\n                \n            \n            \n                \n                             | NestedExpandOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandType\n                \n            \n            \n                \n                        string | ExpandObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                        FilterType | FilterType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterType\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GroupBy\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NestedExpandOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderBy\n                \n            \n            \n                \n                        OrderByType | OrderByType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByObject\n                \n            \n            \n                \n                         | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByType\n                \n            \n            \n                \n                        string | OrderByObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryCustomType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Select\n                \n            \n            \n                \n                        SelectType | SelectType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectType\n                \n            \n            \n                \n                        string | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Transform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Unpacked\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Value\n                \n            \n            \n                \n                            string | Date | number | boolean | QueryCustomType\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/types.ts\n    \n    \n        \n            \n                \n                    \n                    AnnotationConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ApiConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CacheCacheability\n                \n            \n            \n                \n                        \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CallableConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntityContainerConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntitySetConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FetchPolicy\n                \n            \n            \n                \n                        \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataMetadataType\n                \n            \n            \n                \n                        \"minimal\" | \"full\" | \"none\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataVersion\n                \n            \n            \n                \n                        \"2.0\" | \"3.0\" | \"4.0\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Parameter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SchemaConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/durations.ts\n    \n    \n        \n            \n                \n                    \n                    Duration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/resource.ts\n    \n    \n        \n            \n                \n                    \n                    EntityKey\n                \n            \n            \n                \n                             | QueryCustomType | string | number\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/filter.ts\n    \n    \n        \n            \n                \n                    \n                    FilterConnector\n                \n            \n            \n                \n                        \"and\" | \"or\"\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/schema/parsers/structured-type.ts\n    \n    \n        \n            \n                \n                    \n                    JsonSchemaCustom\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaExpand\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaRequired\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaSelect\n                \n            \n            \n                \n                        Array\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/models/options.ts\n    \n    \n        \n            \n                \n                    \n                    ModelFieldOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEntry\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEventType\n                \n            \n            \n                \n                        \"change\" | \"reset\" | \"update\" | \"destroy\" | \"add\" | \"remove\" | \"invalid\" | \"request\" | \"sync\" | \"attach\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelFieldOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelRelation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/helper.ts\n    \n    \n        \n            \n                \n                    \n                    ODataContext\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/responses/types.ts\n    \n    \n        \n            \n                \n                    \n                    ODataEntities\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntity\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataProperty\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/types/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataEntitiesOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntityOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataNoneOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataPropertyOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataQueryArgumentsOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataQueryArguments\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/path/segments.ts\n    \n    \n        \n            \n                \n                    \n                    ODataSegment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/expressions/search.ts\n    \n    \n        \n            \n                \n                    \n                    SearchConnector\n                \n            \n            \n                \n                        \"AND\" | \"OR\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
