var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiOptions.html",[0,0.989,1,2.329]],["body/interfaces/ApiOptions.html",[0,1.797,1,3.469,2,2.044,3,0.078,4,0.068,5,0.078,6,0.05,7,2.221,8,1.008,9,2.382,10,0.05,11,0.622,12,0.215,13,3.617,14,3.766,15,2.931,16,3.993,17,3.413,18,1.797,19,3.766,20,3.93,21,3.617,22,2.59,23,0.114,24,0.01,25,3.355,26,3.422,27,0.662,28,0.362,29,2.879,30,2.49,31,2.788,32,1.83,33,0.155,34,3.207,35,2.221,36,2.221,37,2.221,38,3.159,39,1.896,40,2.879,41,2.997,42,2.044,43,2.221,44,3.127,45,0.658,46,1.205,47,1.83,48,2.005,49,1.83,50,2.997,51,2.931,52,2.005,53,2.577,54,1.721,55,2.879,56,3.127,57,1.258,58,3.027,59,0.878,60,1.792,61,2.332,62,2.332,63,2.997,64,2.49,65,2.879,66,2.77,67,2.67,68,2.409,69,2.409,70,2.49,71,2.77,72,2.67,73,2.128,74,1.842,75,0.18,76,2.997,77,2.997,78,2.879,79,2.221,80,2.221,81,2.128,82,0.929,83,0.655,84,1.967,85,2.221,86,1.967,87,3.205,88,2.221,89,2.323,90,2.323,91,3.617,92,1.029,93,3.332,94,2.537,95,2.788,96,3.976,97,2.409,98,2.49,99,1.297,100,2.788,101,2.409,102,1.896,103,3.091,104,1.896,105,1.71,106,0.733,107,1.967,108,2.439,109,1.967,110,3.127,111,1.143,112,2.439,113,0.623,114,1.71,115,2.221,116,2.221,117,2.323,118,0.122,119,2.005,120,2.439,121,1.967,122,2.439,123,2.128,124,2.439,125,2.221,126,2.323,127,3.127,128,4.508,129,1.896,130,2.323,131,2.323,132,2.323,133,1.424,134,1.005,135,2.674,136,2.128,137,2.879,138,1.896,139,2.879,140,2.323,141,2.879,142,2.323,143,3.127,144,2.128,145,3.127,146,2.997,147,2.221,148,1.967,149,2.67,150,2.128,151,1.238,152,1.205,153,3.481,154,1.697,155,1.002,156,1.238,157,1.238,158,2.128,159,1.71,160,2.128,161,2.439,162,2.044,163,2.044,164,2.128,165,0.988,166,1.83,167,1.71,168,1.205,169,1.768,170,2.221,171,2.323,172,0.088,173,2.128,174,1.967,175,1.768,176,0.006,177,0.006]],["title/classes/ArithmeticFunctions.html",[178,0.339,179,1.703]],["body/classes/ArithmeticFunctions.html",[0,1.391,3,0.058,4,0.051,5,0.058,6,0.077,8,0.832,10,0.037,12,0.134,18,0.675,23,0.097,24,0.01,27,0.652,28,0.292,33,0.152,57,1.351,59,1.193,75,0.173,82,0.336,83,1.075,92,2.154,99,1.666,106,1.009,113,0.709,118,0.107,134,0.533,155,1.38,165,1.392,168,0.9,172,0.121,176,0.005,177,0.005,178,0.665,179,2.395,180,0.142,181,1.128,182,0.729,183,4.465,184,4.465,185,4.465,186,1.825,187,0.203,188,2.933,189,0.811,190,1.825,191,2.933,192,1.825,193,2.933,194,1.162,195,1.667,196,2.822,197,2.715,198,2.799,199,1.095,200,2.166,201,1.769,202,1.199,203,2.658,204,2.577,205,2.142,206,1.162,207,1.162,208,1.199,209,1.199,210,1.199,211,1.199,212,1.199,213,1.199,214,1.769,215,2.91,216,3.581,217,1.111,218,1.487,219,1.199,220,1.095,221,1.199,222,1.162,223,1.759,224,0.261,225,2.419,226,2.807,227,1.345,228,2.658,229,0.831,230,2.658,231,2.47,232,1.199,233,1.199,234,1.825,235,1.199,236,2.142,237,1.199,238,1.199,239,1.199,240,1.199,241,1.199,242,1.199,243,1.199,244,1.199,245,1.825,246,1.825,247,1.199,248,1.199,249,1.199,250,1.825,251,1.825,252,1.199,253,1.199,254,2.142,255,1.199,256,2.47,257,1.199,258,1.825,259,1.199,260,1.199,261,2.142,262,1.199,263,1.769,264,1.199,265,1.199,266,1.199,267,1.199,268,1.199,269,1.199,270,1.199,271,2.142,272,1.199,273,1.199,274,1.199,275,1.199,276,1.199,277,1.199,278,1.199,279,1.199,280,1.199,281,1.199,282,1.199,283,1.199,284,1.199,285,1.199,286,1.199,287,1.199,288,1.162,289,1.199,290,1.199,291,1.199,292,1.199,293,1.199,294,1.199,295,1.199,296,1.199,297,1.199,298,1.199,299,1.199,300,1.199,301,1.199,302,1.199,303,2.142,304,1.199,305,1.199,306,1.199,307,1.199,308,2.142,309,1.199,310,1.825,311,1.199,312,1.199,313,1.825,314,1.199,315,2.142,316,1.199,317,1.199,318,1.199,319,2.209,320,1.825,321,3.443,322,3.595,323,1.825,324,1.199,325,1.199,326,1.199,327,1.199,328,1.199,329,2.142,330,1.199,331,1.199,332,1.199,333,1.199,334,1.199,335,1.199,336,1.199,337,1.199,338,1.199,339,1.199,340,1.199,341,1.199,342,1.199,343,1.199,344,1.199,345,1.199,346,1.199,347,1.199,348,1.199,349,1.199,350,1.199,351,1.199,352,2.142,353,1.199,354,1.199,355,1.199,356,1.199,357,1.199,358,1.199,359,1.199,360,1.199,361,1.199,362,1.199,363,1.199,364,1.619,365,1.825,366,1.199,367,1.199,368,1.199,369,1.128,370,1.199,371,2.142,372,1.825,373,1.825,374,1.769,375,1.199,376,1.199,377,1.199,378,2.142,379,1.199,380,1.199,381,1.199,382,1.199,383,2.799,384,1.199,385,1.199,386,2.799,387,1.199,388,0.977,389,1.199,390,1.199]],["title/classes/ArithmeticOperators.html",[178,0.339,352,1.703]],["body/classes/ArithmeticOperators.html",[0,1.367,3,0.056,4,0.05,5,0.056,6,0.089,8,0.818,10,0.036,12,0.168,18,0.653,23,0.101,24,0.01,27,0.662,28,0.285,33,0.151,57,1.347,59,1.073,75,0.169,82,0.326,83,1.074,92,2.142,99,1.651,106,0.989,113,0.691,118,0.114,134,0.516,155,1.353,165,1.39,168,0.872,172,0.151,176,0.005,177,0.005,178,0.662,179,2.1,180,0.137,181,1.092,182,0.711,186,1.16,187,0.254,189,1.015,190,1.16,192,1.16,194,1.125,195,1.626,196,2.794,197,2.68,198,2.764,199,1.06,200,2.135,201,1.726,202,1.16,203,2.619,204,3.065,205,2.1,206,1.125,207,1.125,208,1.16,209,1.16,210,1.16,211,1.16,212,1.16,213,1.16,214,1.726,215,2.887,216,3.595,217,1.083,218,1.451,219,1.16,220,1.06,221,1.16,222,1.125,223,1.729,224,0.256,225,2.398,226,2.781,227,1.318,228,2.619,229,0.805,230,2.619,231,2.428,232,1.16,233,1.16,234,1.78,235,1.16,236,2.1,237,1.16,238,1.16,239,1.16,240,1.16,241,1.16,242,1.16,243,1.16,244,1.16,245,1.78,246,1.78,247,1.16,248,1.16,249,1.16,250,1.78,251,1.78,252,1.16,253,1.16,254,2.1,255,1.16,256,2.428,257,1.16,258,1.78,259,1.16,260,1.16,261,2.1,262,1.16,263,1.726,264,1.16,265,1.16,266,1.16,267,1.16,268,1.16,269,1.16,270,1.16,271,2.1,272,1.16,273,1.16,274,1.16,275,1.16,276,1.16,277,1.16,278,1.16,279,1.16,280,1.16,281,1.16,282,1.16,283,1.16,284,1.16,285,1.16,286,1.16,287,1.16,288,1.125,289,1.16,290,1.16,291,1.16,292,1.16,293,1.16,294,1.16,295,1.16,296,1.16,297,1.16,298,1.16,299,1.16,300,1.16,301,1.16,302,1.16,303,2.1,304,1.16,305,1.16,306,1.16,307,1.16,308,2.1,309,1.16,310,1.78,311,1.16,312,1.16,313,1.78,314,1.16,315,2.1,316,1.16,317,1.16,318,1.16,319,2.166,320,1.78,321,3.499,322,3.635,323,1.78,324,1.16,325,1.16,326,1.16,327,1.16,328,1.16,329,2.1,330,1.16,331,1.16,332,1.16,333,1.16,334,1.16,335,1.16,336,1.16,337,1.16,338,1.16,339,1.16,340,1.16,341,1.16,342,1.16,343,1.16,344,1.16,345,1.16,346,1.16,347,1.16,348,1.16,349,1.16,350,1.16,351,1.16,352,2.355,353,1.78,354,1.16,355,1.78,356,1.16,357,1.78,358,1.16,359,1.78,360,1.16,361,1.78,362,1.16,363,1.78,364,1.579,365,1.78,366,1.16,367,1.16,368,1.16,369,1.092,370,1.16,371,2.1,372,1.78,373,1.78,374,1.726,375,1.16,376,1.16,377,1.16,378,2.1,379,1.16,380,1.16,381,1.16,382,1.16,383,2.764,384,1.16,385,1.16,386,2.764,387,1.16,388,0.946,389,1.16,390,1.16,391,3.23,392,4.356,393,4.356,394,4.356,395,4.356,396,4.356,397,2.84,398,0.931,399,2.84,400,2.84,401,2.84,402,2.84,403,2.84]],["title/interfaces/Cache.html",[0,0.989,38,1.703]],["body/interfaces/Cache.html",[0,1.811,1,3.058,2,2.104,3,0.08,4,0.07,5,0.08,6,0.082,7,2.285,8,0.969,9,2.352,10,0.051,11,0.392,12,0.14,13,2.104,14,2.19,15,1.704,16,3.257,17,2.629,18,1.619,19,2.19,20,2.285,21,2.104,23,0.112,24,0.01,25,2.724,26,3.169,27,0.661,28,0.369,29,2.937,30,2.541,31,2.832,32,1.883,33,0.155,34,3.257,35,2.285,36,2.285,37,2.285,38,3.232,39,1.951,40,2.937,41,3.058,42,2.104,43,2.285,44,3.191,45,0.678,46,1.24,47,1.883,48,2.046,49,1.883,50,3.058,51,2.968,52,2.046,53,2.629,54,1.748,55,2.937,56,3.191,57,1.264,58,3.065,59,0.896,60,1.829,61,2.38,62,2.38,63,3.058,64,2.541,65,2.937,66,2.827,67,2.724,68,2.458,69,2.458,70,2.541,71,2.827,72,2.724,73,2.19,74,1.88,75,0.18,76,3.058,77,3.058,78,2.937,79,2.285,80,2.285,81,2.19,82,0.936,83,0.668,84,2.024,85,2.285,86,2.024,87,3.234,88,2.285,89,2.391,90,2.391,91,3.663,92,1.059,93,3.384,94,2.576,95,2.832,96,4.038,97,2.458,98,2.541,99,1.523,100,2.832,101,2.458,102,1.951,103,3.139,104,1.951,105,1.76,106,0.754,107,2.024,108,3.505,109,3.257,110,4.337,111,1.642,112,3.505,113,0.896,114,1.76,115,2.285,116,2.285,117,2.391,118,0.126,119,2.046,120,2.51,121,2.024,122,2.51,123,2.19,124,2.51,125,2.285,126,2.391,127,3.191,128,4.541,129,1.951,130,2.391,131,2.391,132,2.391,133,1.465,134,1.026,135,2.696,136,2.19,137,2.937,138,1.951,139,2.937,140,2.391,141,2.937,142,2.391,143,3.191,144,2.19,145,3.191,146,3.058,147,2.285,148,2.024,149,2.724,150,2.19,151,1.274,152,1.996,153,3.525,154,1.732,155,1.031,156,1.274,157,1.274,158,2.19,159,1.76,160,2.19,161,2.51,162,2.104,163,2.104,164,2.19,165,1.003,166,1.883,167,1.76,168,1.24,169,1.82,170,2.285,171,2.391,172,0.165,173,2.19,174,2.024,175,1.82,176,0.006,177,0.006,182,0.921,187,0.212,189,0.847,404,3.505,405,4.041,406,4.041]],["title/classes/CollectionFunctions.html",[178,0.339,254,1.703]],["body/classes/CollectionFunctions.html",[0,1.4,3,0.059,4,0.052,5,0.059,6,0.069,8,0.837,10,0.038,12,0.112,18,0.683,23,0.096,24,0.01,27,0.653,28,0.295,33,0.152,57,1.349,59,1.17,75,0.17,82,0.341,83,1.076,92,2.159,99,1.664,106,1.017,113,0.715,118,0.104,134,0.54,155,1.391,165,1.393,168,0.912,172,0.101,176,0.005,177,0.005,178,0.666,179,2.159,180,0.144,181,1.142,182,0.735,186,1.214,187,0.169,189,0.676,190,1.214,192,1.214,194,1.177,195,1.683,196,2.833,197,2.728,198,2.813,199,1.109,200,2.178,201,1.786,202,1.214,203,2.672,204,2.591,205,2.159,206,1.177,207,1.177,208,1.214,209,1.214,210,1.214,211,1.214,212,1.214,213,1.214,214,1.786,215,2.919,216,3.584,217,1.121,218,1.502,219,1.214,220,1.109,221,1.214,222,1.177,223,1.77,224,0.263,225,2.426,226,2.817,227,1.355,228,2.672,229,0.842,230,2.672,231,2.485,232,1.214,233,1.214,234,1.842,235,1.214,236,2.159,237,1.214,238,1.214,239,1.214,240,1.214,241,1.214,242,1.214,243,1.214,244,1.214,245,1.842,246,1.842,247,1.214,248,1.214,249,1.214,250,1.842,251,1.842,252,1.214,253,1.214,254,2.41,255,1.842,256,3.011,257,1.214,258,2.485,259,1.842,260,1.214,261,2.159,262,1.214,263,1.786,264,1.214,265,1.214,266,1.214,267,1.214,268,1.214,269,1.214,270,1.214,271,2.159,272,1.214,273,1.214,274,1.214,275,1.214,276,1.214,277,1.214,278,1.214,279,1.214,280,1.214,281,1.214,282,1.214,283,1.214,284,1.214,285,1.214,286,1.214,287,1.214,288,1.177,289,1.214,290,1.214,291,1.214,292,1.214,293,1.214,294,1.214,295,1.214,296,1.214,297,1.214,298,1.214,299,1.214,300,1.214,301,1.214,302,1.214,303,2.159,304,1.214,305,1.214,306,1.214,307,1.214,308,2.159,309,1.214,310,1.842,311,1.214,312,1.214,313,1.842,314,1.214,315,2.159,316,1.214,317,1.214,318,1.214,319,2.226,320,1.842,321,3.449,322,3.599,323,1.842,324,1.214,325,1.214,326,1.214,327,1.214,328,1.214,329,2.159,330,1.214,331,1.214,332,1.214,333,1.214,334,1.214,335,1.214,336,1.214,337,1.214,338,1.214,339,1.214,340,1.214,341,1.214,342,1.214,343,1.214,344,1.214,345,1.214,346,1.214,347,1.214,348,1.214,349,1.214,350,1.214,351,1.214,352,2.159,353,1.214,354,1.214,355,1.214,356,1.214,357,1.214,358,1.214,359,1.214,360,1.214,361,1.214,362,1.214,363,1.214,364,1.634,365,1.842,366,1.214,367,1.214,368,1.214,369,1.142,370,1.214,371,2.159,372,1.842,373,1.842,374,1.786,375,1.214,376,1.214,377,1.214,378,2.159,379,1.214,380,1.214,381,1.214,382,1.214,383,2.813,384,1.214,385,1.214,386,2.813,387,1.214,388,0.989,389,1.214,390,1.214,407,4.507,408,4.507,409,2.97,410,2.97]],["title/classes/ConditionalFunctions.html",[178,0.339,315,1.703]],["body/classes/ConditionalFunctions.html",[0,1.405,3,0.059,4,0.052,5,0.059,6,0.057,8,0.841,10,0.038,12,0.074,18,0.689,23,0.094,24,0.01,27,0.653,28,0.297,33,0.152,57,1.351,59,1.138,75,0.171,82,0.343,83,1.076,92,2.162,99,1.661,106,1.022,113,0.719,118,0.099,134,0.544,155,1.397,165,1.393,168,0.918,172,0.067,176,0.005,177,0.005,178,0.667,179,2.169,180,0.145,181,1.15,182,0.74,186,1.223,187,0.112,189,0.449,190,1.223,192,1.223,194,1.186,195,1.692,196,2.84,197,2.736,198,2.821,199,1.117,200,2.185,201,1.796,202,1.223,203,2.681,204,2.6,205,2.169,206,1.186,207,1.186,208,1.223,209,1.223,210,1.223,211,1.223,212,1.223,213,1.223,214,1.796,215,2.924,216,3.585,217,1.127,218,1.51,219,1.223,220,1.117,221,1.223,222,1.186,223,1.777,224,0.265,225,2.431,226,2.823,227,1.361,228,2.681,229,0.848,230,2.681,231,2.495,232,1.223,233,1.223,234,1.853,235,1.223,236,2.169,237,1.223,238,1.223,239,1.223,240,1.223,241,1.223,242,1.223,243,1.223,244,1.223,245,1.853,246,1.853,247,1.223,248,1.223,249,1.223,250,1.853,251,1.853,252,1.223,253,1.223,254,2.169,255,1.223,256,2.495,257,1.223,258,1.853,259,1.223,260,1.223,261,2.169,262,1.223,263,1.796,264,1.223,265,1.223,266,1.223,267,1.223,268,1.223,269,1.223,270,1.223,271,2.169,272,1.223,273,1.223,274,1.223,275,1.223,276,1.223,277,1.223,278,1.223,279,1.223,280,1.223,281,1.223,282,1.223,283,1.223,284,1.223,285,1.223,286,1.223,287,1.223,288,1.186,289,1.223,290,1.223,291,1.223,292,1.223,293,1.223,294,1.223,295,1.223,296,1.223,297,1.223,298,1.223,299,1.223,300,1.223,301,1.223,302,1.223,303,2.169,304,1.223,305,1.223,306,1.223,307,1.223,308,2.169,309,1.223,310,1.853,311,1.223,312,1.223,313,1.853,314,1.223,315,2.419,316,1.853,317,1.223,318,1.853,319,2.236,320,1.853,321,3.453,322,3.601,323,1.853,324,1.223,325,1.223,326,1.223,327,1.223,328,1.223,329,2.169,330,1.223,331,1.223,332,1.223,333,1.223,334,1.223,335,1.223,336,1.223,337,1.223,338,1.223,339,1.223,340,1.223,341,1.223,342,1.223,343,1.223,344,1.223,345,1.223,346,1.223,347,1.223,348,1.223,349,1.223,350,1.223,351,1.223,352,2.169,353,1.223,354,1.223,355,1.223,356,1.223,357,1.223,358,1.223,359,1.223,360,1.223,361,1.223,362,1.223,363,1.223,364,1.644,365,1.853,366,1.223,367,1.223,368,1.223,369,1.15,370,1.223,371,2.169,372,1.853,373,1.853,374,1.796,375,1.223,376,1.223,377,1.223,378,2.169,379,1.223,380,1.223,381,1.223,382,1.223,383,2.821,384,1.223,385,1.223,386,2.821,387,1.223,388,0.997,389,1.223,390,1.223,411,3.629,412,2.992]],["title/classes/CsdlAction.html",[178,0.339,413,2.431]],["body/classes/CsdlAction.html",[3,0.109,4,0.095,5,0.109,6,0.107,10,0.069,11,0.67,12,0.215,23,0.109,24,0.01,27,0.646,33,0.146,45,1.541,52,2.5,59,1.347,60,1.77,75,0.18,82,0.958,118,0.13,151,2.175,154,2.117,156,2.175,157,2.175,169,3.763,172,0.189,176,0.008,177,0.008,178,0.659,180,0.264,187,0.314,224,0.41,398,1.093,413,3.9,414,2.405,415,3.578,416,5.191,417,5.191,418,1.82,419,4.945,420,4.945,421,5.463,422,5.463,423,5.463,424,5.463,425,5.463,426,5.463,427,3.09,428,3.394,429,3.09,430,3.578,431,3.233,432,3.09,433,2.908]],["title/classes/CsdlActionImport.html",[178,0.339,432,2.431]],["body/classes/CsdlActionImport.html",[3,0.113,4,0.099,5,0.113,6,0.105,10,0.072,11,0.686,12,0.191,23,0.107,24,0.01,27,0.629,33,0.147,45,1.54,52,3.059,59,1.314,60,2.682,75,0.181,82,0.968,118,0.131,151,2.227,154,2.168,156,2.227,157,2.227,169,3.181,172,0.172,176,0.008,177,0.008,178,0.666,180,0.274,187,0.302,224,0.414,398,0.782,413,3.21,414,2.345,415,3.717,416,4.388,417,4.388,418,1.891,419,4.55,420,4.55,427,3.21,428,3.526,429,3.21,430,3.717,431,3.359,432,3.995,433,2.979,434,5.677,435,5.677,436,5.677,437,5.677]],["title/classes/CsdlAnnotable.html",[178,0.339,438,2.329]],["body/classes/CsdlAnnotable.html",[3,0.124,4,0.109,5,0.124,6,0.102,8,0.861,10,0.079,11,0.728,12,0.199,23,0.102,24,0.01,27,0.466,33,0.145,45,1.517,75,0.177,82,0.92,118,0.113,129,3.02,151,1.972,154,1.92,156,1.972,157,1.972,172,0.14,176,0.008,177,0.008,178,0.656,180,0.302,187,0.282,224,0.388,398,0.861,414,2.274,433,2.638,438,4.349,439,4.637,440,4.81,441,6.254,442,4.495,443,6.254,444,6.254,445,2.717,446,3.885,447,4.096,448,4.434,449,3.537,450,3.885,451,4.342,452,3.39,453,4.342]],["title/classes/CsdlAnnotation.html",[178,0.339,442,2.237]],["body/classes/CsdlAnnotation.html",[3,0.122,4,0.107,5,0.122,6,0.105,8,0.848,10,0.078,11,0.721,12,0.198,23,0.105,24,0.01,27,0.459,33,0.144,45,1.521,75,0.18,82,0.914,118,0.112,129,3.995,151,1.942,154,1.89,156,1.942,157,1.942,172,0.137,176,0.008,177,0.008,178,0.653,180,0.298,187,0.3,224,0.385,398,0.848,414,2.345,433,2.597,438,4.024,439,4.565,440,4.199,442,4.308,445,2.692,446,3.825,447,4.032,448,5.091,449,3.482,450,3.825,451,4.274,452,3.337,453,4.274,454,6.157,455,6.157,456,7.424]],["title/classes/CsdlAnnotations.html",[178,0.339,446,2.67]],["body/classes/CsdlAnnotations.html",[3,0.12,4,0.105,5,0.12,6,0.104,8,1.01,10,0.076,11,0.713,12,0.209,23,0.107,24,0.01,27,0.45,33,0.143,45,1.523,75,0.18,82,0.907,118,0.11,129,2.916,151,1.904,154,1.854,156,1.904,157,1.904,172,0.135,176,0.008,177,0.008,178,0.649,180,0.292,187,0.309,224,0.382,398,0.831,414,2.33,433,2.547,438,4.456,439,4.477,440,4.844,442,4.459,445,2.66,446,4.558,447,5.384,448,5.068,449,3.415,450,3.751,451,4.192,452,3.273,453,4.192,457,6.039,458,6.039,459,6.039,460,6.039,461,2.547,462,4.477]],["title/classes/CsdlComplexType.html",[178,0.339,463,2.543]],["body/classes/CsdlComplexType.html",[3,0.109,4,0.096,5,0.109,6,0.088,8,1.043,10,0.07,11,0.853,12,0.218,23,0.108,24,0.01,27,0.661,28,0.36,33,0.143,45,1.517,54,1.479,75,0.177,118,0.129,134,1,152,1.688,172,0.123,176,0.008,177,0.008,178,0.647,180,0.266,187,0.319,224,0.385,398,1.129,414,1.962,418,1.832,445,2.51,461,3.53,463,4.097,464,3.227,465,2.562,466,5.72,467,3.437,468,5.679,469,6.02,470,5.679,471,4.257,472,4.257,473,5.498,474,4.837,475,4.837,476,4.837,477,4.837,478,4.837,479,4.837,480,2.655,481,2.862,482,3.753,483,3.254,484,4.301,485,3.601,486,3.817,487,4.301]],["title/classes/CsdlEntityContainer.html",[178,0.339,488,3.186]],["body/classes/CsdlEntityContainer.html",[3,0.117,4,0.102,5,0.117,6,0.11,10,0.074,11,0.7,12,0.22,23,0.109,24,0.01,28,0.511,33,0.102,45,1.517,53,2.734,59,0.931,60,1.901,75,0.173,118,0.126,144,4.528,172,0.131,176,0.008,177,0.008,178,0.463,180,0.284,187,0.324,224,0.349,398,1.15,414,2.466,418,1.954,429,4.725,432,4.725,480,3.768,488,5.344,489,3.949,490,5.161,491,8.355,492,8.355,493,8.355,494,8.355,495,6.195,496,6.195,497,5.866,498,5.866,499,5.161,500,5.161,501,5.866,502,5.161,503,5.161,504,3.318]],["title/classes/CsdlEntitySet.html",[178,0.339,495,3.186]],["body/classes/CsdlEntitySet.html",[3,0.124,4,0.109,5,0.124,6,0.109,10,0.079,11,0.726,12,0.211,23,0.108,24,0.01,27,0.619,28,0.408,33,0.109,45,1.505,54,1.676,75,0.175,118,0.128,155,1.591,172,0.139,173,4.606,176,0.008,177,0.008,178,0.492,180,0.301,187,0.319,224,0.362,398,1.03,414,2.445,418,2.077,431,5.029,480,3.01,489,3.886,495,5.546,505,4.991,506,7.476,507,5.899,508,6.235,509,5.485,510,5.485,511,6.235,512,5.485,513,4.083]],["title/classes/CsdlEntityType.html",[178,0.339,483,2.543]],["body/classes/CsdlEntityType.html",[3,0.106,4,0.093,5,0.106,6,0.099,8,1.027,10,0.067,11,0.849,12,0.221,23,0.109,24,0.01,27,0.665,28,0.348,33,0.142,45,1.521,54,1.428,75,0.176,118,0.128,134,0.966,152,2.491,172,0.119,176,0.008,177,0.008,178,0.64,180,0.257,187,0.324,224,0.38,398,1.161,414,2.226,418,1.77,445,2.456,461,3.499,463,3.143,464,3.661,465,2.476,466,5.689,467,3.416,468,5.644,469,5.983,470,5.644,471,4.224,472,4.224,474,4.674,475,4.674,476,4.674,477,4.674,478,4.674,479,4.674,480,2.565,481,2.765,482,3.672,483,4.008,484,5.04,485,5.314,486,3.688,487,4.208,514,5.312,515,4.674,516,5.312]],["title/classes/CsdlEnumMember.html",[178,0.339,517,3.186]],["body/classes/CsdlEnumMember.html",[3,0.128,4,0.112,5,0.128,6,0.106,10,0.082,11,0.741,12,0.202,23,0.103,24,0.01,27,0.48,33,0.133,45,1.493,48,3.046,57,1.287,75,0.173,82,0.964,118,0.131,148,3.228,172,0.144,176,0.009,177,0.009,178,0.602,180,0.312,187,0.306,224,0.369,398,0.887,414,2.381,418,2.147,445,2.336,465,3.003,517,6.025,518,5.159,519,6.107,520,4.473,521,5.159,522,5.159]],["title/classes/CsdlEnumType.html",[178,0.339,520,2.983]],["body/classes/CsdlEnumType.html",[3,0.123,4,0.108,5,0.123,6,0.109,10,0.079,11,0.725,12,0.211,23,0.107,24,0.01,27,0.619,33,0.13,45,1.509,48,3.126,57,0.932,75,0.176,82,0.712,118,0.13,148,4.252,172,0.139,176,0.008,177,0.008,178,0.589,180,0.3,187,0.319,224,0.361,398,1.027,414,2.443,418,2.068,445,2.251,465,2.893,517,6.294,520,5.179,521,6.796,522,6.796,523,6.209,524,5.462,525,6.209,526,6.209,527,6.209]],["title/classes/CsdlFunction.html",[178,0.339,427,2.431]],["body/classes/CsdlFunction.html",[3,0.107,4,0.094,5,0.107,6,0.108,10,0.068,11,0.664,12,0.214,23,0.109,24,0.01,27,0.656,33,0.145,45,1.541,52,2.477,59,1.358,60,1.745,75,0.179,82,0.955,118,0.13,151,2.155,154,2.097,156,2.155,157,2.155,169,3.749,172,0.189,176,0.008,177,0.008,178,0.657,180,0.26,187,0.318,224,0.409,398,1.087,413,3.045,414,2.426,415,3.526,416,5.172,417,5.172,418,1.794,419,4.926,420,4.926,427,3.864,428,5.061,429,3.045,430,3.526,431,3.186,432,3.045,433,2.882,528,5.384,529,5.384,530,5.384,531,5.384,532,5.384,533,5.384,534,5.384]],["title/classes/CsdlFunctionImport.html",[178,0.339,429,2.431]],["body/classes/CsdlFunctionImport.html",[3,0.111,4,0.097,5,0.111,6,0.106,10,0.071,11,0.678,12,0.204,23,0.108,24,0.01,27,0.648,33,0.147,45,1.541,52,3.046,59,1.333,60,1.807,75,0.181,82,0.963,118,0.131,151,2.203,154,2.144,156,2.203,157,2.203,169,3.145,172,0.17,176,0.008,177,0.008,178,0.663,180,0.27,187,0.31,224,0.412,398,0.962,413,3.153,414,2.38,415,3.651,416,4.339,417,4.339,418,1.857,419,4.513,420,4.513,427,3.153,428,3.463,429,3.95,430,5.391,431,4.872,432,3.153,433,2.946,535,5.576,536,5.576,537,5.576,538,5.576,539,5.576]],["title/classes/CsdlInclude.html",[178,0.339,540,2.983]],["body/classes/CsdlInclude.html",[3,0.125,4,0.11,5,0.125,6,0.106,8,0.866,10,0.08,11,0.73,12,0.199,23,0.102,24,0.01,28,0.412,33,0.14,45,1.501,75,0.178,86,3.15,118,0.095,133,3.021,134,1.549,172,0.14,176,0.008,177,0.008,178,0.635,180,0.304,187,0.302,224,0.389,398,0.866,414,2.361,438,4.074,440,3.556,442,3.913,445,2.28,448,3.72,449,3.556,480,3.036,540,5.583,541,5.033,542,5.531,543,6.287,544,7.518,545,2.831,546,4.364,547,4.661,548,5.033,549,5.219,550,4.661,551,4.661]],["title/classes/CsdlIncludeAnnotations.html",[178,0.339,549,2.983]],["body/classes/CsdlIncludeAnnotations.html",[3,0.123,4,0.108,5,0.123,6,0.107,8,0.85,10,0.078,11,0.722,12,0.21,23,0.105,24,0.01,28,0.404,33,0.139,45,1.508,75,0.18,86,3.091,118,0.093,133,2.237,134,1.122,172,0.138,176,0.008,177,0.008,178,0.63,180,0.298,187,0.311,224,0.386,398,1.023,414,2.401,438,4.029,440,3.489,442,3.869,445,2.237,448,5.014,449,3.489,480,2.979,540,5.16,541,4.94,545,2.778,546,4.283,547,4.575,548,4.94,549,5.538,550,6.14,551,6.283,552,6.17,553,6.17,554,6.17,555,6.17,556,6.17]],["title/classes/CsdlKey.html",[178,0.339,484,2.67]],["body/classes/CsdlKey.html",[3,0.119,4,0.105,5,0.119,6,0.1,8,1.006,10,0.076,11,0.841,12,0.149,23,0.093,24,0.01,27,0.645,28,0.393,33,0.147,45,1.492,54,1.614,75,0.174,118,0.126,134,1.091,152,1.842,172,0.134,176,0.008,177,0.008,178,0.664,180,0.29,187,0.275,224,0.397,414,2.234,445,2.651,463,3.552,464,3.673,465,2.797,466,5.162,467,3.332,468,5.507,469,5.838,470,5.507,471,4.11,472,4.11,480,2.898,481,3.125,482,3.962,483,3.552,484,4.897,485,3.931,486,5.695,487,5.224,557,6.002,558,4.805,559,6.002]],["title/classes/CsdlNavigationProperty.html",[178,0.339,472,2.153]],["body/classes/CsdlNavigationProperty.html",[3,0.108,4,0.095,5,0.108,6,0.106,8,1.039,10,0.069,11,0.669,12,0.218,23,0.114,24,0.01,27,0.654,33,0.143,45,1.528,54,1.466,60,1.767,75,0.18,82,0.866,118,0.128,151,1.72,154,2.658,156,1.72,157,1.72,159,2.375,172,0.122,176,0.008,177,0.008,178,0.645,180,0.264,187,0.323,224,0.384,398,1.126,414,2.367,418,1.817,433,2.3,445,2.497,452,2.956,461,3.184,467,2.161,471,2.732,472,3.45,481,4.348,482,3.733,560,3.785,561,5.554,562,5.356,563,5.356,564,5.356,565,5.678,566,5.08,567,5.08,568,5.453,569,5.453,570,5.453,571,5.453,572,5.453,573,4.798,574,4.798,575,4.798,576,3.387]],["title/classes/CsdlNavigationPropertyBinding.html",[178,0.339,507,2.983]],["body/classes/CsdlNavigationPropertyBinding.html",[3,0.131,4,0.115,5,0.131,6,0.107,10,0.083,11,0.75,12,0.163,23,0.104,24,0.01,33,0.115,45,1.446,54,2.274,75,0.176,118,0.099,155,2.159,172,0.147,176,0.009,177,0.009,178,0.519,180,0.318,187,0.308,224,0.318,414,2.397,445,2.385,447,5.646,507,5.361,577,6.579,578,4.584,579,6.579,580,6.579,581,7.722]],["title/classes/CsdlOnDelete.html",[178,0.339,567,2.67]],["body/classes/CsdlOnDelete.html",[3,0.12,4,0.106,5,0.12,6,0.1,8,1.013,10,0.077,11,0.714,12,0.15,23,0.11,24,0.01,27,0.629,33,0.147,45,1.516,54,1.63,60,2.668,75,0.179,82,0.908,118,0.124,151,1.912,154,2.589,156,1.912,157,1.912,159,2.641,172,0.135,176,0.008,177,0.008,178,0.665,180,0.293,187,0.277,224,0.398,414,2.244,433,2.557,445,2.667,452,3.286,467,2.403,471,3.037,472,3.037,481,4.122,482,3.986,560,4.209,561,5.185,562,3.971,563,3.971,564,3.971,565,4.209,566,4.569,567,4.918,576,3.766,582,6.063,583,6.063,584,6.063]],["title/classes/CsdlParameter.html",[178,0.339,420,2.543]],["body/classes/CsdlParameter.html",[3,0.105,4,0.092,5,0.105,6,0.109,10,0.067,11,0.656,12,0.217,23,0.112,24,0.01,27,0.642,33,0.145,45,1.541,52,2.451,59,1.367,60,1.715,75,0.18,82,1.02,118,0.13,151,2.614,154,2.544,156,2.614,157,2.614,169,3.044,172,0.166,176,0.008,177,0.008,178,0.654,180,0.256,187,0.321,224,0.407,398,1.116,413,2.994,414,2.441,415,3.466,416,4.198,417,4.198,418,1.763,419,4.406,420,4.642,427,2.994,428,3.288,429,2.994,430,3.466,431,3.132,432,2.994,433,3.496,585,5.293,586,5.293,587,5.293,588,5.293,589,5.293,590,5.293,591,5.293,592,5.293]],["title/classes/CsdlProperty.html",[178,0.339,471,2.153]],["body/classes/CsdlProperty.html",[3,0.105,4,0.092,5,0.105,6,0.108,8,1.023,10,0.067,11,0.655,12,0.22,23,0.114,24,0.01,27,0.651,33,0.141,45,1.53,54,1.417,60,1.708,75,0.18,82,1.007,118,0.127,151,2.553,154,2.642,156,2.553,157,2.553,159,2.296,172,0.118,176,0.008,177,0.008,178,0.639,180,0.255,187,0.326,224,0.379,398,1.159,414,2.415,418,1.756,433,3.414,445,2.444,452,4.387,461,3.134,467,2.088,471,3.376,472,2.64,481,4.437,482,3.653,560,3.658,561,5.512,562,3.451,563,3.451,564,3.451,565,3.658,566,4.187,567,4.187,573,4.636,574,4.636,575,4.636,576,5.028,593,5.27,594,5.27,595,5.27,596,5.27,597,5.27,598,5.27,599,5.27]],["title/classes/CsdlPropertyRef.html",[178,0.339,487,2.67]],["body/classes/CsdlPropertyRef.html",[3,0.117,4,0.103,5,0.117,6,0.103,8,0.995,10,0.075,11,0.838,12,0.194,23,0.099,24,0.01,27,0.643,28,0.386,33,0.146,45,1.5,54,1.584,75,0.178,118,0.131,134,1.521,152,1.808,172,0.131,176,0.008,177,0.008,178,0.66,180,0.285,187,0.294,224,0.394,398,0.811,414,2.31,418,1.962,445,2.62,463,3.485,464,3.798,465,2.745,466,5.119,467,3.315,468,5.478,469,5.807,470,5.478,471,4.083,472,4.083,480,2.844,481,3.066,482,3.916,483,3.485,484,4.489,485,3.857,486,4.088,487,4.856,600,5.182,601,7.226]],["title/classes/CsdlReference.html",[178,0.339,546,2.983]],["body/classes/CsdlReference.html",[3,0.12,4,0.105,5,0.12,6,0.107,8,1.011,10,0.077,11,0.713,12,0.215,23,0.107,24,0.01,28,0.396,33,0.138,45,1.512,75,0.175,86,4.221,118,0.091,133,2.192,134,1.099,172,0.135,176,0.008,177,0.008,178,0.624,180,0.292,187,0.317,224,0.382,398,1.089,414,2.388,438,4.457,440,4.765,442,4.386,445,2.192,448,3.577,449,3.419,461,2.549,462,4.482,480,2.919,540,5.849,541,4.839,545,2.722,546,5.096,547,6.097,548,6.746,549,5.849,550,4.482,551,4.482,602,6.045,603,6.045,604,6.045,605,6.045,606,6.045]],["title/classes/CsdlReferentialConstraint.html",[178,0.339,566,2.67]],["body/classes/CsdlReferentialConstraint.html",[3,0.119,4,0.104,5,0.119,6,0.104,8,1.003,10,0.076,11,0.707,12,0.148,23,0.111,24,0.01,27,0.626,33,0.146,45,1.519,54,2.201,60,1.934,75,0.18,82,0.902,118,0.123,151,1.881,154,2.577,156,1.881,157,1.881,159,3.657,172,0.133,176,0.008,177,0.008,178,0.662,180,0.289,187,0.296,224,0.396,414,2.32,433,2.516,445,2.641,452,3.234,467,2.364,471,2.989,472,2.989,481,4.262,482,3.947,560,4.142,561,5.148,562,3.907,563,3.907,564,3.907,565,4.142,566,4.884,567,4.524,576,3.706,607,5.966,608,5.966,609,7.283]],["title/classes/CsdlReturnType.html",[178,0.339,419,2.543]],["body/classes/CsdlReturnType.html",[3,0.107,4,0.094,5,0.107,6,0.108,10,0.068,11,0.662,12,0.217,23,0.111,24,0.01,27,0.644,33,0.145,45,1.541,52,2.473,59,1.358,60,1.74,75,0.179,82,1.022,118,0.125,151,2.624,154,2.554,156,2.624,157,2.624,169,3.071,172,0.167,176,0.008,177,0.008,178,0.656,180,0.26,187,0.318,224,0.409,398,1.121,413,3.037,414,2.424,415,3.516,416,4.237,417,4.237,419,4.667,420,4.436,427,3.037,428,3.336,429,3.037,430,3.516,431,3.177,432,3.037,433,3.509,610,5.37,611,5.37,612,5.37,613,5.37,614,5.37,615,5.37,616,5.37,617,5.37]],["title/classes/CsdlSchema.html",[178,0.339,618,3.441]],["body/classes/CsdlSchema.html",[3,0.102,4,0.089,5,0.102,6,0.111,8,0.911,10,0.065,11,0.643,12,0.224,23,0.113,24,0.01,28,0.538,33,0.089,45,1.531,48,1.857,59,0.813,60,1.659,75,0.168,118,0.077,133,2.809,134,1.459,172,0.114,176,0.007,177,0.007,178,0.404,180,0.248,187,0.33,224,0.32,388,2.672,398,1.197,413,4.537,414,2.491,427,4.537,438,4.199,440,4.537,442,4.176,446,4.983,449,2.896,450,4.983,461,2.16,462,3.796,463,4.747,464,2.386,480,3.967,483,4.747,488,5.948,489,2.306,520,5.569,542,4.505,545,2.306,618,5.297,619,5.121,620,8.022,621,8.022,622,8.022,623,7.058,624,8.022,625,8.022,626,8.022,627,8.022,628,5.948,629,5.121,630,5.121,631,5.121,632,5.121,633,5.121,634,5.121,635,5.121,636,5.121,637,5.121,638,5.121,639,5.121,640,5.121,641,4.505,642,3.796]],["title/classes/CsdlSingleton.html",[178,0.339,496,3.186]],["body/classes/CsdlSingleton.html",[3,0.127,4,0.112,5,0.127,6,0.108,10,0.081,11,0.739,12,0.201,23,0.113,24,0.01,28,0.42,33,0.112,45,1.492,54,1.725,75,0.176,118,0.129,155,1.638,172,0.143,176,0.009,177,0.009,178,0.506,180,0.31,187,0.315,224,0.368,398,0.883,414,2.427,418,2.137,480,3.098,496,5.641,507,5.945,513,4.201,643,6.416,644,8.564,645,6.416,646,6.416,647,6.416,648,6.416]],["title/classes/CsdlStructuralProperty.html",[178,0.339,561,2.814]],["body/classes/CsdlStructuralProperty.html",[3,0.116,4,0.102,5,0.116,6,0.106,8,0.991,10,0.074,11,0.699,12,0.193,23,0.113,24,0.01,27,0.648,33,0.146,45,1.522,54,1.574,60,1.897,75,0.18,82,0.894,118,0.13,151,1.846,154,2.691,156,1.846,157,1.846,159,2.55,172,0.131,176,0.008,177,0.008,178,0.659,180,0.283,187,0.306,224,0.393,398,0.806,414,2.366,418,1.95,433,2.469,445,2.611,452,3.173,467,2.32,471,2.933,472,2.933,481,4.347,482,3.902,560,4.064,561,5.327,562,3.834,563,3.834,564,3.834,565,4.064,566,4.472,567,4.472,576,3.637,649,5.855,650,5.855,651,5.855,652,5.855]],["title/classes/CsdlStructuredType.html",[178,0.339,466,2.814]],["body/classes/CsdlStructuredType.html",[3,0.109,4,0.096,5,0.109,6,0.109,8,0.951,10,0.069,11,0.853,12,0.218,23,0.108,24,0.01,27,0.661,28,0.359,33,0.143,45,1.516,54,1.473,75,0.177,118,0.129,134,0.996,152,1.682,172,0.122,176,0.008,177,0.008,178,0.646,180,0.265,187,0.319,224,0.384,398,1.128,414,2.434,418,1.825,445,2.505,463,3.242,464,4.002,465,2.553,466,5.202,467,3.434,468,5.675,469,6.016,470,5.675,471,4.253,472,4.253,480,2.645,481,2.852,482,3.744,483,3.242,484,4.291,485,3.587,486,3.803,487,4.291,518,4.386,519,4.386,524,4.82,653,5.478,654,4.82,655,4.82,656,4.82]],["title/classes/CsdlTerm.html",[178,0.339,450,2.67]],["body/classes/CsdlTerm.html",[3,0.107,4,0.094,5,0.107,6,0.111,8,0.74,10,0.068,11,0.663,12,0.222,23,0.113,24,0.01,27,0.588,33,0.138,45,1.533,75,0.181,82,1.01,118,0.122,129,2.595,151,2.568,154,2.499,156,2.568,157,2.568,172,0.12,176,0.008,177,0.008,178,0.623,180,0.26,187,0.329,224,0.363,398,1.178,414,2.495,418,1.79,433,3.434,438,3.699,439,3.985,440,3.86,442,3.904,445,2.475,446,3.339,447,3.52,448,4.038,449,3.039,450,4.239,451,5.653,452,4.413,453,5.653,657,5.375,658,5.375,659,5.375,660,5.375,661,5.375,662,5.375,663,5.375,664,5.375,665,5.375,666,5.375,667,5.375]],["title/classes/CsdlTypeDefinition.html",[178,0.339,628,3.186]],["body/classes/CsdlTypeDefinition.html",[3,0.113,4,0.099,5,0.113,6,0.11,8,0.974,10,0.072,11,0.687,12,0.221,23,0.114,24,0.01,27,0.6,28,0.373,33,0.099,45,1.525,75,0.176,82,1.018,118,0.125,151,2.612,156,2.612,157,2.612,172,0.127,176,0.008,177,0.008,178,0.449,180,0.275,187,0.328,224,0.342,398,1.162,414,2.472,418,1.896,433,3.493,438,4.365,440,4.685,442,4.312,449,3.219,461,2.401,462,4.221,480,2.749,545,2.563,576,5.145,628,5.246,668,5.693,669,8.283,670,5.693,671,5.693,672,5.693,673,5.693,674,5.693,675,5.693,676,5.693,677,5.693]],["title/classes/DateAndTimeFunctions.html",[178,0.339,271,1.703]],["body/classes/DateAndTimeFunctions.html",[0,1.334,3,0.054,4,0.047,5,0.054,6,0.102,8,0.798,10,0.034,12,0.195,18,0.624,23,0.105,24,0.01,27,0.647,28,0.275,33,0.15,57,1.353,59,1.322,75,0.168,82,0.311,83,1.071,92,2.124,99,1.683,106,0.961,113,0.667,118,0.123,121,2.105,134,0.493,155,1.314,165,1.386,168,0.832,172,0.176,176,0.005,177,0.005,178,0.657,179,2.039,180,0.131,181,1.042,182,0.686,186,1.108,187,0.299,189,1.194,190,1.108,192,1.108,194,1.074,195,1.569,196,2.752,197,2.63,198,2.713,199,1.012,200,2.09,201,1.665,202,1.108,203,2.564,204,2.486,205,2.039,206,1.074,207,1.074,208,1.108,209,1.108,210,1.108,211,1.108,212,1.108,213,1.108,214,1.665,215,2.854,216,3.567,217,1.045,218,1.4,219,1.108,220,1.012,221,1.108,222,1.074,223,1.687,224,0.249,225,2.368,226,2.743,227,1.28,228,2.564,229,0.768,230,2.564,231,2.369,232,1.108,233,1.108,234,1.717,235,1.108,236,2.039,237,1.108,238,1.108,239,1.108,240,1.108,241,1.108,242,1.108,243,1.108,244,1.108,245,1.717,246,1.717,247,1.108,248,1.108,249,1.108,250,1.717,251,1.717,252,1.108,253,1.108,254,2.039,255,1.108,256,2.369,257,1.108,258,1.717,259,1.108,260,1.108,261,2.039,262,1.108,263,1.665,264,1.108,265,1.108,266,1.108,267,1.108,268,1.108,269,1.108,270,1.108,271,2.298,272,1.717,273,1.108,274,1.717,275,1.108,276,1.717,277,1.108,278,1.717,279,1.108,280,1.717,281,1.108,282,1.717,283,1.108,284,1.717,285,1.108,286,1.717,287,1.108,288,2.298,289,1.108,290,1.717,291,1.108,292,1.717,293,1.108,294,1.717,295,1.108,296,1.717,297,1.108,298,1.717,299,1.108,300,1.108,301,1.108,302,1.108,303,2.039,304,1.108,305,1.108,306,1.108,307,1.108,308,2.039,309,1.108,310,1.717,311,1.108,312,1.108,313,1.717,314,1.108,315,2.039,316,1.108,317,1.108,318,1.108,319,2.103,320,1.717,321,3.403,322,3.57,323,1.717,324,1.108,325,1.108,326,1.108,327,1.108,328,1.108,329,2.039,330,1.108,331,1.108,332,1.108,333,1.108,334,1.108,335,1.108,336,1.108,337,1.108,338,1.108,339,1.108,340,1.108,341,1.108,342,1.108,343,1.108,344,1.108,345,1.108,346,1.108,347,1.108,348,1.108,349,1.108,350,1.108,351,1.108,352,2.039,353,1.108,354,1.108,355,1.108,356,1.108,357,1.108,358,1.108,359,1.108,360,1.108,361,1.108,362,1.108,363,1.108,364,1.524,365,1.717,366,1.108,367,1.108,368,1.108,369,1.042,370,1.108,371,2.039,372,1.717,373,1.717,374,1.665,375,1.108,376,1.108,377,1.108,378,2.039,379,1.108,380,1.108,381,1.108,382,1.108,383,2.713,384,1.108,385,1.108,386,2.713,387,1.108,388,0.903,389,1.108,390,1.108,678,4.202,679,4.202,680,4.202,681,4.202,682,4.202,683,4.202,684,4.202,685,4.202,686,3.116,687,4.202,688,4.202,689,4.202,690,2.711,691,2.711,692,2.711,693,2.711,694,2.711,695,2.711,696,2.711,697,2.711,698,2.711,699,2.711,700,2.711,701,2.711,702,2.711,703,2.711]],["title/classes/Field.html",[92,1.126,178,0.339]],["body/classes/Field.html",[3,0.072,4,0.063,5,0.072,6,0.085,8,0.5,10,0.078,11,0.508,12,0.09,23,0.097,24,0.01,28,0.55,33,0.063,34,3.07,45,1.309,46,2.807,48,1.896,51,2.585,52,1.896,53,2.437,54,1.803,55,1.89,56,2.053,57,0.545,59,0.973,60,1.986,72,3.575,75,0.152,92,1.606,94,1.438,103,1.753,106,1.425,118,0.111,123,2.834,126,2.148,129,2.525,133,1.316,134,0.66,135,1.243,150,1.967,151,1.145,152,1.114,154,1.114,155,0.927,156,1.145,157,1.145,159,1.581,165,1.346,169,1.635,172,0.081,173,2.834,176,0.006,177,0.006,178,0.413,180,0.176,187,0.23,217,1.301,224,0.176,225,1.649,413,2.053,416,2.255,417,2.255,418,1.209,419,2.148,420,2.148,427,2.053,428,2.255,429,2.053,431,2.148,432,2.053,433,1.531,442,1.89,445,1.316,446,2.255,447,2.377,448,2.148,450,2.255,451,2.52,452,1.967,453,2.52,463,2.148,464,1.692,467,1.438,468,2.377,470,2.377,471,1.818,472,1.818,481,1.89,483,2.148,484,2.255,485,2.377,487,2.255,488,2.691,489,2.355,495,2.691,496,2.691,504,2.053,506,3.194,507,2.52,513,2.377,517,2.691,520,2.52,521,2.906,522,2.906,540,2.52,545,2.355,546,3.63,547,2.691,549,2.52,550,2.691,551,2.691,562,2.377,563,2.377,564,2.377,566,2.255,567,2.255,576,2.255,578,1.967,618,4.186,623,3.194,628,2.691,641,3.194,642,2.691,704,3.194,705,7.104,706,3.63,707,5.229,708,8.262,709,2.355,710,1.002,711,3.194,712,4.186,713,1.635,714,3.194,715,4.6,716,3.63,717,2.255,718,6.779,719,7.327,720,3.63,721,3.63,722,3.63,723,3.63,724,3.63,725,3.63,726,3.63,727,3.63,728,3.63,729,3.63,730,3.63,731,3.63,732,3.63,733,3.63,734,3.63,735,2.377,736,3.63,737,3.63,738,3.63,739,3.63,740,3.63,741,3.63,742,3.63,743,3.63,744,3.63,745,3.63,746,3.63,747,3.63,748,3.63,749,3.63,750,3.63,751,3.63,752,3.63,753,3.63,754,3.63,755,3.63,756,3.63,757,3.63,758,3.63,759,3.63,760,3.63,761,3.63,762,3.807,763,3.63,764,3.63,765,3.63,766,3.63,767,3.63,768,3.63,769,3.63,770,3.63,771,3.63,772,3.63,773,3.63,774,3.63,775,3.63,776,3.63,777,3.63,778,3.63,779,3.63,780,3.63,781,3.63,782,3.63,783,3.63,784,3.63,785,3.63,786,3.63,787,3.63,788,3.63,789,3.63,790,3.63,791,3.63,792,3.63,793,3.63,794,3.63,795,3.63,796,3.63,797,3.63,798,3.63,799,3.63,800,3.63,801,3.63,802,3.63,803,3.63,804,3.63,805,3.63,806,3.63,807,5.229,808,6.129,809,3.63,810,3.63,811,3.63,812,2.691,813,3.63,814,3.63,815,6.706,816,5.229,817,3.63,818,3.63,819,3.63,820,3.63,821,3.63,822,3.63,823,8.337,824,3.63,825,5.229,826,3.63,827,5.229,828,3.63,829,3.63,830,2.722,831,3.63,832,3.63,833,3.63,834,3.63,835,3.63,836,3.63,837,3.63,838,3.63,839,3.63,840,3.63,841,3.63,842,3.63,843,3.63,844,3.63,845,3.63,846,3.968,847,3.63,848,2.691,849,3.63,850,2.906,851,3.63,852,6.129,853,5.229,854,5.392,855,3.63,856,3.63,857,3.63,858,3.63,859,3.63,860,3.63,861,2.255,862,2.691,863,3.63,864,3.63]],["title/classes/Function.html",[59,0.682,178,0.339]],["body/classes/Function.html",[0,1.391,3,0.058,4,0.051,5,0.058,6,0.082,8,0.832,10,0.037,12,0.111,18,0.675,23,0.095,24,0.01,27,0.656,28,0.293,33,0.152,57,1.348,59,1.131,75,0.172,82,0.337,83,1.075,92,2.154,99,1.655,106,1.01,113,0.959,118,0.11,134,0.534,155,1.38,165,1.392,168,0.901,172,0.1,176,0.005,177,0.005,178,0.665,179,2.143,180,0.142,181,1.128,182,0.729,186,1.199,187,0.227,189,0.67,190,1.199,192,1.199,194,1.163,195,1.667,196,2.949,197,2.823,198,2.911,199,1.095,200,2.446,201,1.77,202,1.199,203,2.658,204,2.578,205,2.143,206,1.163,207,1.163,208,1.199,209,1.199,210,1.199,211,1.199,212,1.199,213,1.199,214,2.395,215,2.952,216,3.587,217,1.111,218,1.488,219,1.199,220,1.095,221,1.199,222,1.163,223,1.893,224,0.292,225,2.419,226,2.952,227,1.345,228,2.658,229,0.832,230,2.658,231,2.47,232,1.199,233,1.199,234,1.825,235,1.199,236,2.143,237,1.199,238,1.199,239,1.199,240,1.199,241,1.199,242,1.199,243,1.199,244,1.199,245,1.825,246,1.825,247,1.199,248,1.199,249,1.199,250,1.825,251,1.825,252,1.199,253,1.199,254,2.143,255,1.199,256,2.47,257,1.199,258,1.825,259,1.199,260,1.199,261,2.143,262,1.199,263,1.77,264,1.199,265,1.199,266,1.199,267,1.199,268,1.199,269,1.199,270,1.199,271,2.143,272,1.199,273,1.199,274,1.199,275,1.199,276,1.199,277,1.199,278,1.199,279,1.199,280,1.199,281,1.199,282,1.199,283,1.199,284,1.199,285,1.199,286,1.199,287,1.199,288,1.163,289,1.199,290,1.199,291,1.199,292,1.199,293,1.199,294,1.199,295,1.199,296,1.199,297,1.199,298,1.199,299,1.199,300,1.199,301,1.199,302,1.199,303,2.143,304,1.199,305,1.199,306,1.199,307,1.199,308,2.143,309,1.199,310,1.825,311,1.199,312,1.199,313,1.825,314,1.199,315,2.143,316,1.199,317,1.199,318,1.199,319,2.21,320,1.825,321,3.443,322,3.595,323,1.825,324,1.199,325,1.199,326,1.199,327,1.199,328,1.199,329,2.143,330,1.199,331,1.199,332,1.199,333,1.199,334,1.199,335,1.199,336,1.199,337,1.199,338,1.199,339,1.199,340,1.199,341,1.199,342,1.199,343,1.199,344,1.199,345,1.199,346,1.199,347,1.199,348,1.199,349,1.199,350,1.199,351,1.199,352,2.143,353,1.199,354,1.199,355,1.199,356,1.199,357,1.199,358,1.199,359,1.199,360,1.199,361,1.199,362,1.199,363,1.199,364,1.62,365,1.825,366,1.199,367,1.199,368,1.199,369,1.128,370,1.199,371,2.143,372,1.825,373,1.825,374,1.77,375,1.199,376,1.199,377,1.199,378,2.143,379,1.199,380,1.199,381,1.199,382,1.199,383,2.8,384,1.199,385,1.199,386,2.8,387,1.199,388,0.978,389,1.199,390,1.199,398,0.404,418,0.978,865,1.53,866,2.935,867,2.935,868,2.935,869,2.935]],["title/classes/GeoFunctions.html",[178,0.339,308,1.703]],["body/classes/GeoFunctions.html",[0,1.387,3,0.058,4,0.051,5,0.058,6,0.076,8,0.83,10,0.037,12,0.134,18,0.671,23,0.097,24,0.01,27,0.658,28,0.291,33,0.152,57,1.35,59,1.192,75,0.172,82,0.335,83,1.075,92,2.152,99,1.665,106,1.006,113,0.706,118,0.107,134,0.53,155,1.375,165,1.392,168,0.896,172,0.12,176,0.005,177,0.005,178,0.664,179,2.135,180,0.141,181,1.122,182,0.726,186,1.192,187,0.203,189,0.809,190,1.192,192,1.192,194,1.156,195,1.66,196,2.818,197,2.709,198,2.794,199,1.089,200,2.161,201,1.762,202,1.192,203,2.651,204,2.571,205,2.135,206,1.156,207,1.156,208,1.192,209,1.192,210,1.192,211,1.192,212,1.192,213,1.192,214,1.762,215,2.907,216,3.591,217,1.106,218,1.481,219,1.192,220,1.089,221,1.192,222,1.156,223,1.754,224,0.261,225,2.415,226,2.803,227,1.34,228,2.651,229,0.827,230,2.651,231,2.463,232,1.192,233,1.192,234,1.817,235,1.192,236,2.135,237,1.192,238,1.192,239,1.192,240,1.192,241,1.192,242,1.192,243,1.192,244,1.192,245,2.202,246,1.817,247,1.192,248,1.192,249,1.192,250,1.817,251,2.463,252,1.192,253,1.192,254,2.135,255,1.192,256,2.463,257,1.192,258,1.817,259,1.192,260,1.192,261,2.135,262,1.192,263,1.762,264,1.192,265,1.192,266,1.192,267,1.192,268,1.192,269,1.192,270,1.192,271,2.135,272,1.192,273,1.192,274,1.192,275,1.192,276,1.192,277,1.192,278,1.192,279,1.192,280,1.192,281,1.192,282,1.192,283,1.192,284,1.192,285,1.192,286,1.192,287,1.192,288,1.156,289,1.192,290,1.192,291,1.192,292,1.192,293,1.192,294,1.192,295,1.192,296,1.192,297,1.192,298,1.192,299,1.192,300,1.192,301,1.192,302,1.192,303,2.135,304,1.192,305,1.192,306,1.192,307,1.192,308,2.388,309,1.817,310,2.463,311,1.192,312,1.817,313,2.463,314,1.192,315,2.135,316,1.192,317,1.192,318,1.192,319,2.202,320,1.817,321,3.441,322,3.593,323,1.817,324,1.192,325,1.192,326,1.192,327,1.192,328,1.192,329,2.135,330,1.192,331,1.192,332,1.192,333,1.192,334,1.192,335,1.192,336,1.192,337,1.192,338,1.192,339,1.192,340,1.192,341,1.192,342,1.192,343,1.192,344,1.192,345,1.192,346,1.192,347,1.192,348,1.192,349,1.192,350,1.192,351,1.192,352,2.135,353,1.192,354,1.192,355,1.192,356,1.192,357,1.192,358,1.192,359,1.192,360,1.192,361,1.192,362,1.192,363,1.192,364,1.612,365,1.817,366,1.192,367,1.192,368,1.192,369,1.122,370,1.192,371,2.135,372,1.817,373,1.817,374,1.762,375,1.192,376,1.192,377,1.192,378,2.135,379,1.192,380,1.192,381,1.192,382,1.192,383,2.794,384,1.192,385,1.192,386,2.794,387,1.192,388,0.972,389,1.192,390,1.192,398,0.742,870,4.447,871,4.447,872,2.917,873,2.917,874,2.917]],["title/classes/Grouping.html",[178,0.339,205,1.703]],["body/classes/Grouping.html",[0,1.395,3,0.059,4,0.051,5,0.059,6,0.083,8,0.835,10,0.037,12,0.111,18,0.679,23,0.095,24,0.01,27,0.652,28,0.294,33,0.152,57,1.349,59,1.09,75,0.17,82,0.338,83,1.075,92,2.156,99,1.655,106,1.013,113,0.962,118,0.103,134,0.536,155,1.385,165,1.392,168,0.906,172,0.1,176,0.005,177,0.005,178,0.665,179,2.15,180,0.143,181,1.135,182,0.732,186,1.206,187,0.228,189,0.673,190,1.206,192,1.206,194,1.169,195,1.674,196,2.954,197,2.985,198,2.916,199,1.101,200,2.45,201,1.777,202,1.206,203,2.664,204,2.584,205,2.402,206,1.169,207,1.169,208,1.206,209,1.206,210,1.206,211,1.206,212,1.206,213,1.206,214,2.402,215,2.955,216,3.582,217,1.116,218,1.494,219,1.206,220,1.101,221,1.206,222,1.169,223,1.897,224,0.293,225,2.422,226,2.812,227,1.35,228,2.664,229,0.836,230,2.664,231,2.477,232,1.206,233,1.206,234,1.833,235,1.206,236,2.15,237,1.206,238,1.206,239,1.206,240,1.206,241,1.206,242,1.206,243,1.206,244,1.206,245,1.833,246,1.833,247,1.206,248,1.206,249,1.206,250,1.833,251,1.833,252,1.206,253,1.206,254,2.15,255,1.206,256,2.477,257,1.206,258,1.833,259,1.206,260,1.206,261,2.15,262,1.206,263,1.777,264,1.206,265,1.206,266,1.206,267,1.206,268,1.206,269,1.206,270,1.206,271,2.15,272,1.206,273,1.206,274,1.206,275,1.206,276,1.206,277,1.206,278,1.206,279,1.206,280,1.206,281,1.206,282,1.206,283,1.206,284,1.206,285,1.206,286,1.206,287,1.206,288,1.169,289,1.206,290,1.206,291,1.206,292,1.206,293,1.206,294,1.206,295,1.206,296,1.206,297,1.206,298,1.206,299,1.206,300,1.206,301,1.206,302,1.206,303,2.15,304,1.206,305,1.206,306,1.206,307,1.206,308,2.15,309,1.206,310,1.833,311,1.206,312,1.206,313,1.833,314,1.206,315,2.15,316,1.206,317,1.206,318,1.206,319,2.217,320,1.833,321,3.446,322,3.597,323,1.833,324,1.206,325,1.206,326,1.206,327,1.206,328,1.206,329,2.15,330,1.206,331,1.206,332,1.206,333,1.206,334,1.206,335,1.206,336,1.206,337,1.206,338,1.206,339,1.206,340,1.206,341,1.206,342,1.206,343,1.206,344,1.206,345,1.206,346,1.206,347,1.206,348,1.206,349,1.206,350,1.206,351,1.206,352,2.15,353,1.206,354,1.206,355,1.206,356,1.206,357,1.206,358,1.206,359,1.206,360,1.206,361,1.206,362,1.206,363,1.206,364,1.626,365,2.477,366,1.206,367,1.206,368,1.206,369,1.135,370,1.206,371,2.15,372,1.833,373,1.833,374,1.777,375,1.206,376,1.206,377,1.206,378,2.15,379,1.206,380,1.206,381,1.206,382,1.206,383,2.806,384,1.206,385,1.206,386,2.806,387,1.206,388,0.983,389,1.206,390,1.206,398,0.406,865,1.536,875,2.951,876,2.951,877,2.951,878,2.951,879,2.951]],["title/classes/GroupingAndNavigationOperators.html",[178,0.339,371,1.703]],["body/classes/GroupingAndNavigationOperators.html",[0,1.399,3,0.059,4,0.052,5,0.059,6,0.069,8,0.837,10,0.038,12,0.112,18,0.683,23,0.097,24,0.01,27,0.653,28,0.295,33,0.152,57,1.352,59,1.092,75,0.17,82,0.34,83,1.076,92,2.2,99,1.66,106,1.016,113,0.715,118,0.103,134,0.539,155,1.756,165,1.393,168,0.911,172,0.122,176,0.005,177,0.005,178,0.666,179,2.157,180,0.143,181,1.141,182,0.735,186,1.212,187,0.169,189,0.676,190,1.212,192,1.212,194,1.176,195,1.681,196,2.832,197,2.727,198,2.812,199,1.107,200,2.177,201,1.785,202,1.212,203,2.671,204,2.59,205,2.727,206,1.176,207,1.176,208,1.212,209,1.212,210,1.212,211,1.212,212,1.212,213,1.212,214,1.785,215,2.918,216,3.583,217,1.12,218,1.5,219,1.212,220,1.107,221,1.212,222,1.176,223,1.769,224,0.263,225,2.426,226,2.816,227,1.354,228,2.671,229,0.841,230,2.671,231,2.484,232,1.212,233,1.212,234,1.841,235,1.212,236,2.157,237,1.212,238,1.212,239,1.212,240,1.212,241,1.212,242,1.212,243,1.212,244,1.212,245,1.841,246,1.841,247,1.212,248,1.212,249,1.212,250,1.841,251,1.841,252,1.212,253,1.212,254,2.157,255,1.212,256,2.484,257,1.212,258,1.841,259,1.212,260,1.212,261,2.157,262,1.212,263,1.785,264,1.212,265,1.212,266,1.212,267,1.212,268,1.212,269,1.212,270,1.212,271,2.157,272,1.212,273,1.212,274,1.212,275,1.212,276,1.212,277,1.212,278,1.212,279,1.212,280,1.212,281,1.212,282,1.212,283,1.212,284,1.212,285,1.212,286,1.212,287,1.212,288,1.176,289,1.212,290,1.212,291,1.212,292,1.212,293,1.212,294,1.212,295,1.212,296,1.212,297,1.212,298,1.212,299,1.212,300,1.212,301,1.212,302,1.212,303,2.157,304,1.212,305,1.212,306,1.212,307,1.212,308,2.157,309,1.212,310,1.841,311,1.212,312,1.212,313,1.841,314,1.212,315,2.157,316,1.212,317,1.212,318,1.212,319,2.225,320,1.841,321,3.449,322,3.599,323,1.841,324,1.212,325,1.212,326,1.212,327,1.212,328,1.212,329,2.157,330,1.212,331,1.212,332,1.212,333,1.212,334,1.212,335,1.212,336,1.212,337,1.212,338,1.212,339,1.212,340,1.212,341,1.212,342,1.212,343,1.212,344,1.212,345,1.212,346,1.212,347,1.212,348,1.212,349,1.212,350,1.212,351,1.212,352,2.157,353,1.212,354,1.212,355,1.212,356,1.212,357,1.212,358,1.212,359,1.212,360,1.212,361,1.212,362,1.212,363,1.212,364,1.633,365,1.841,366,1.212,367,1.212,368,1.212,369,1.141,370,1.212,371,2.409,372,2.225,373,2.225,374,1.785,375,1.212,376,1.212,377,1.212,378,2.157,379,1.212,380,1.212,381,1.212,382,1.212,383,2.812,384,1.212,385,1.212,386,2.812,387,1.212,388,0.988,389,1.212,390,1.212,880,2.967,881,2.967,882,2.61]],["title/classes/Lambda.html",[178,0.339,374,1.703]],["body/classes/Lambda.html",[0,1.39,3,0.058,4,0.051,5,0.058,6,0.068,8,0.895,10,0.037,12,0.111,18,0.675,23,0.095,24,0.01,27,0.656,28,0.292,33,0.152,57,1.348,59,1.087,75,0.172,82,0.336,83,1.075,92,2.154,99,1.655,106,1.009,113,0.959,118,0.103,134,0.533,155,1.38,165,1.392,168,0.9,172,0.1,176,0.005,177,0.005,178,0.665,179,2.142,180,0.142,181,1.127,182,0.728,186,1.198,187,0.227,189,0.67,190,1.198,192,1.198,194,1.162,195,1.666,196,2.949,197,2.714,198,2.91,199,1.094,200,2.445,201,1.769,202,1.198,203,2.657,204,2.908,205,2.142,206,1.162,207,1.162,208,1.198,209,1.198,210,1.198,211,1.198,212,1.198,213,1.198,214,2.394,215,2.951,216,3.587,217,1.11,218,1.487,219,1.198,220,1.094,221,1.198,222,1.162,223,1.758,224,0.292,225,2.418,226,2.951,227,1.344,228,2.657,229,0.831,230,2.657,231,2.469,232,1.198,233,1.198,234,1.824,235,1.198,236,2.142,237,1.198,238,1.198,239,1.198,240,1.198,241,1.198,242,1.198,243,1.198,244,1.198,245,1.824,246,1.824,247,1.198,248,1.198,249,1.198,250,1.824,251,1.824,252,1.198,253,1.198,254,2.142,255,1.198,256,2.469,257,1.198,258,1.824,259,1.198,260,1.198,261,2.142,262,1.198,263,1.769,264,1.198,265,1.198,266,1.198,267,1.198,268,1.198,269,1.198,270,1.198,271,2.142,272,1.198,273,1.198,274,1.198,275,1.198,276,1.198,277,1.198,278,1.198,279,1.198,280,1.198,281,1.198,282,1.198,283,1.198,284,1.198,285,1.198,286,1.198,287,1.198,288,1.162,289,1.198,290,1.198,291,1.198,292,1.198,293,1.198,294,1.198,295,1.198,296,1.198,297,1.198,298,1.198,299,1.198,300,1.198,301,1.198,302,1.198,303,2.142,304,1.198,305,1.198,306,1.198,307,1.198,308,2.142,309,1.198,310,1.824,311,1.198,312,1.198,313,1.824,314,1.198,315,2.142,316,1.198,317,1.198,318,1.198,319,2.657,320,1.824,321,3.443,322,3.595,323,1.824,324,1.198,325,1.198,326,1.198,327,1.198,328,1.198,329,2.142,330,1.198,331,1.198,332,1.198,333,1.198,334,1.198,335,1.198,336,1.198,337,1.198,338,1.198,339,1.198,340,1.198,341,1.198,342,1.198,343,1.198,344,1.198,345,1.198,346,1.198,347,1.198,348,1.198,349,1.198,350,1.198,351,1.198,352,2.142,353,1.198,354,1.198,355,1.198,356,1.198,357,1.198,358,1.198,359,1.198,360,1.198,361,1.198,362,1.198,363,1.198,364,1.618,365,1.824,366,1.198,367,1.198,368,1.198,369,1.127,370,1.198,371,2.142,372,1.824,373,1.824,374,2.142,375,1.198,376,1.198,377,1.198,378,2.142,379,1.198,380,1.198,381,1.198,382,1.198,383,2.799,384,1.198,385,1.198,386,2.799,387,1.198,388,0.977,389,1.198,390,1.198,398,0.404,461,1.882,865,1.529,883,2.579,884,2.932,885,2.932,886,2.932,887,2.932]],["title/classes/LambdaOperators.html",[178,0.339,378,1.703]],["body/classes/LambdaOperators.html",[0,1.401,3,0.059,4,0.052,5,0.059,6,0.069,8,0.838,10,0.038,12,0.112,18,0.685,23,0.096,24,0.01,27,0.653,28,0.296,33,0.152,57,1.353,59,1.093,75,0.17,82,0.341,83,1.076,92,2.188,99,1.664,106,1.018,113,0.716,118,0.104,134,0.541,155,1.392,165,1.393,168,0.913,172,0.101,176,0.005,177,0.005,178,0.666,179,2.161,180,0.144,181,1.144,182,0.737,186,1.216,187,0.17,189,0.677,190,1.216,192,1.216,194,1.179,195,1.685,196,2.835,197,2.73,198,2.815,199,1.111,200,2.18,201,1.789,202,1.216,203,2.674,204,2.593,205,2.161,206,1.179,207,1.179,208,1.216,209,1.216,210,1.216,211,1.216,212,1.216,213,1.216,214,1.789,215,2.921,216,3.584,217,1.123,218,1.504,219,1.216,220,1.111,221,1.216,222,1.179,223,1.772,224,0.264,225,2.428,226,2.819,227,1.357,228,2.674,229,0.843,230,2.674,231,2.488,232,1.216,233,1.216,234,1.845,235,1.216,236,2.161,237,1.216,238,1.216,239,1.216,240,1.216,241,1.216,242,1.216,243,1.216,244,1.216,245,1.845,246,1.845,247,1.216,248,1.216,249,1.216,250,1.845,251,1.845,252,1.216,253,1.216,254,2.161,255,1.216,256,2.488,257,1.216,258,1.845,259,1.216,260,1.216,261,2.161,262,1.216,263,1.789,264,1.216,265,1.216,266,1.216,267,1.216,268,1.216,269,1.216,270,1.216,271,2.161,272,1.216,273,1.216,274,1.216,275,1.216,276,1.216,277,1.216,278,1.216,279,1.216,280,1.216,281,1.216,282,1.216,283,1.216,284,1.216,285,1.216,286,1.216,287,1.216,288,1.179,289,1.216,290,1.216,291,1.216,292,1.216,293,1.216,294,1.216,295,1.216,296,1.216,297,1.216,298,1.216,299,1.216,300,1.216,301,1.216,302,1.216,303,2.161,304,1.216,305,1.216,306,1.216,307,1.216,308,2.161,309,1.216,310,1.845,311,1.216,312,1.216,313,1.845,314,1.216,315,2.161,316,1.216,317,1.216,318,1.216,319,2.229,320,1.845,321,3.45,322,3.599,323,1.845,324,1.216,325,1.216,326,1.216,327,1.216,328,1.216,329,2.161,330,1.216,331,1.216,332,1.216,333,1.216,334,1.216,335,1.216,336,1.216,337,1.216,338,1.216,339,1.216,340,1.216,341,1.216,342,1.216,343,1.216,344,1.216,345,1.216,346,1.216,347,1.216,348,1.216,349,1.216,350,1.216,351,1.216,352,2.161,353,1.216,354,1.216,355,1.216,356,1.216,357,1.216,358,1.216,359,1.216,360,1.216,361,1.216,362,1.216,363,1.216,364,1.637,365,1.845,366,1.216,367,1.216,368,1.216,369,1.144,370,1.216,371,2.161,372,1.845,373,1.845,374,2.413,375,1.216,376,1.216,377,1.216,378,2.413,379,1.845,380,1.216,381,1.845,382,1.216,383,2.815,384,1.216,385,1.216,386,2.815,387,1.216,388,0.991,389,1.216,390,1.216,888,2.976,889,2.976]],["title/classes/LogicalOperators.html",[178,0.339,329,1.703]],["body/classes/LogicalOperators.html",[0,1.334,3,0.054,4,0.047,5,0.054,6,0.098,8,0.798,10,0.034,12,0.19,18,0.624,23,0.104,24,0.01,27,0.666,28,0.275,33,0.15,57,1.343,59,1.054,75,0.168,82,0.311,83,1.071,92,2.124,99,1.644,106,0.961,113,0.667,118,0.121,134,0.493,155,1.314,165,1.386,168,0.832,172,0.171,176,0.005,177,0.005,178,0.657,179,2.039,180,0.131,181,1.042,182,0.686,186,1.108,187,0.287,189,1.147,190,1.108,192,1.108,194,1.074,195,1.569,196,2.752,197,2.63,198,2.713,199,1.012,200,2.09,201,1.665,202,1.108,203,2.564,204,3.212,205,2.039,206,1.074,207,1.074,208,1.108,209,1.108,210,1.108,211,1.108,212,1.108,213,1.108,214,1.665,215,2.854,216,3.601,217,1.045,218,1.4,219,1.108,220,1.012,221,1.108,222,1.074,223,1.687,224,0.249,225,2.368,226,2.743,227,1.28,228,2.564,229,0.768,230,2.564,231,2.369,232,1.108,233,1.108,234,1.717,235,1.108,236,2.039,237,1.108,238,1.108,239,1.108,240,1.108,241,1.108,242,1.108,243,1.108,244,1.108,245,1.717,246,1.717,247,1.108,248,1.108,249,1.108,250,1.717,251,1.717,252,1.108,253,1.108,254,2.039,255,1.108,256,2.369,257,1.108,258,1.717,259,1.108,260,1.108,261,2.039,262,1.108,263,1.665,264,1.108,265,1.108,266,1.108,267,1.108,268,1.108,269,1.108,270,1.108,271,2.039,272,1.108,273,1.108,274,1.108,275,1.108,276,1.108,277,1.108,278,1.108,279,1.108,280,1.108,281,1.108,282,1.108,283,1.108,284,1.108,285,1.108,286,1.108,287,1.108,288,1.074,289,1.108,290,1.108,291,1.108,292,1.108,293,1.108,294,1.108,295,1.108,296,1.108,297,1.108,298,1.108,299,1.108,300,1.108,301,1.108,302,1.108,303,2.039,304,1.108,305,1.108,306,1.108,307,1.108,308,2.039,309,1.108,310,1.717,311,1.108,312,1.108,313,1.717,314,1.108,315,2.039,316,1.108,317,1.108,318,1.108,319,2.103,320,1.717,321,3.531,322,3.657,323,1.717,324,1.108,325,1.108,326,1.108,327,1.108,328,1.108,329,2.298,330,1.717,331,1.108,332,1.717,333,1.108,334,1.717,335,1.108,336,1.717,337,1.108,338,1.717,339,1.108,340,1.717,341,1.108,342,1.717,343,1.108,344,1.717,345,1.108,346,1.717,347,1.108,348,1.717,349,1.108,350,1.717,351,1.108,352,2.039,353,1.108,354,1.108,355,1.108,356,1.108,357,1.108,358,1.108,359,1.108,360,1.108,361,1.108,362,1.108,363,1.108,364,1.524,365,1.717,366,1.108,367,1.108,368,1.108,369,1.042,370,1.108,371,2.039,372,1.717,373,1.717,374,1.665,375,1.108,376,1.108,377,1.108,378,2.039,379,1.108,380,1.108,381,1.108,382,1.108,383,2.713,384,1.108,385,1.108,386,2.713,387,1.108,388,0.903,389,1.108,390,1.108,398,1.053,890,4.202,891,4.202,892,4.202,893,4.202,894,4.202,895,4.202,896,2.711,897,2.711,898,2.711,899,2.711,900,2.711,901,2.711,902,2.711,903,2.711,904,2.711,905,2.711,906,2.711]],["title/classes/Navigation.html",[155,1.097,178,0.339]],["body/classes/Navigation.html",[0,1.392,3,0.058,4,0.051,5,0.058,6,0.082,8,0.833,10,0.037,12,0.111,18,0.677,23,0.095,24,0.01,27,0.652,28,0.293,33,0.152,57,1.351,59,1.088,75,0.17,82,0.337,83,1.075,92,2.218,99,1.661,106,1.011,113,0.96,118,0.103,134,0.535,155,1.545,165,1.392,168,0.903,172,0.1,176,0.005,177,0.005,178,0.665,179,2.146,180,0.142,181,1.131,182,0.73,186,1.202,187,0.227,189,0.671,190,1.202,192,1.202,194,1.165,195,1.67,196,2.951,197,2.825,198,2.913,199,1.098,200,2.447,201,1.773,202,1.202,203,2.66,204,2.58,205,2.146,206,1.165,207,1.165,208,1.202,209,1.202,210,1.202,211,1.202,212,1.202,213,1.202,214,2.398,215,2.953,216,3.582,217,1.113,218,1.49,219,1.202,220,1.098,221,1.202,222,1.165,223,1.894,224,0.293,225,2.42,226,2.809,227,1.347,228,2.66,229,0.833,230,2.66,231,2.473,232,1.202,233,1.202,234,1.828,235,1.202,236,2.146,237,1.202,238,1.202,239,1.202,240,1.202,241,1.202,242,1.202,243,1.202,244,1.202,245,1.828,246,1.828,247,1.202,248,1.202,249,1.202,250,1.828,251,1.828,252,1.202,253,1.202,254,2.146,255,1.202,256,2.473,257,1.202,258,1.828,259,1.202,260,1.202,261,2.146,262,1.202,263,1.773,264,1.202,265,1.202,266,1.202,267,1.202,268,1.202,269,1.202,270,1.202,271,2.146,272,1.202,273,1.202,274,1.202,275,1.202,276,1.202,277,1.202,278,1.202,279,1.202,280,1.202,281,1.202,282,1.202,283,1.202,284,1.202,285,1.202,286,1.202,287,1.202,288,1.165,289,1.202,290,1.202,291,1.202,292,1.202,293,1.202,294,1.202,295,1.202,296,1.202,297,1.202,298,1.202,299,1.202,300,1.202,301,1.202,302,1.202,303,2.146,304,1.202,305,1.202,306,1.202,307,1.202,308,2.146,309,1.202,310,1.828,311,1.202,312,1.202,313,1.828,314,1.202,315,2.146,316,1.202,317,1.202,318,1.202,319,2.213,320,1.828,321,3.444,322,3.596,323,1.828,324,1.202,325,1.202,326,1.202,327,1.202,328,1.202,329,2.146,330,1.202,331,1.202,332,1.202,333,1.202,334,1.202,335,1.202,336,1.202,337,1.202,338,1.202,339,1.202,340,1.202,341,1.202,342,1.202,343,1.202,344,1.202,345,1.202,346,1.202,347,1.202,348,1.202,349,1.202,350,1.202,351,1.202,352,2.146,353,1.202,354,1.202,355,1.202,356,1.202,357,1.202,358,1.202,359,1.202,360,1.202,361,1.202,362,1.202,363,1.202,364,1.622,365,1.828,366,1.202,367,1.202,368,1.202,369,1.131,370,1.202,371,2.146,372,1.828,373,1.828,374,1.773,375,1.202,376,1.202,377,1.202,378,2.146,379,1.202,380,1.202,381,1.202,382,1.202,383,2.802,384,1.202,385,1.202,386,2.802,387,1.202,388,0.98,389,1.202,390,1.202,398,0.405,865,1.532,907,2.941,908,2.941,909,2.941,910,2.941,911,2.941]],["title/classes/ODataAnnotation.html",[178,0.339,912,2.237]],["body/classes/ODataAnnotation.html",[3,0.125,4,0.11,5,0.125,6,0.112,10,0.08,11,0.828,12,0.222,23,0.111,24,0.01,27,0.561,28,0.412,33,0.11,75,0.178,82,0.863,118,0.095,128,4.714,129,3.885,130,4.761,131,4.761,132,4.761,172,0.14,176,0.008,177,0.008,178,0.497,180,0.304,187,0.329,224,0.304,710,1.737,912,3.916,913,6.294,914,7.522,915,7.522,916,3.505,917,6.294,918,6.294,919,6.294,920,6.294,921,6.294,922,6.294,923,6.294,924,6.294]],["title/classes/ODataAnnotations.html",[178,0.339,925,2.983]],["body/classes/ODataAnnotations.html",[3,0.091,4,0.08,5,0.091,6,0.105,8,0.954,10,0.058,11,0.673,12,0.172,15,1.926,22,2.564,23,0.111,24,0.01,26,3.336,28,0.402,29,4.023,30,3.48,33,0.129,45,1.162,46,2.127,51,3.124,52,2.513,58,1.989,68,1.989,69,1.989,70,2.057,75,0.172,83,1.07,99,1.383,113,1.263,118,0.129,135,2.374,165,1.07,172,0.165,176,0.007,177,0.007,178,0.585,180,0.221,182,1.001,187,0.306,189,1.04,217,1.723,224,0.297,225,1.935,388,2.044,398,0.629,467,3.222,710,1.261,762,3.812,865,2.102,916,2.128,925,5.644,926,3.386,927,4.811,928,4.602,929,4.567,930,4.1,931,4.852,932,4.567,933,4.567,934,4.549,935,4.567,936,4.567,937,5.73,938,4.567,939,4.567,940,4.567,941,4.567,942,4.567,943,3.386,944,3.386,945,3.386,946,3.386,947,2.205,948,4.538,949,5.138,950,3.229,951,4.81,952,3.386,953,4.538,954,3.386,955,2.837,956,3.386,957,3.386,958,3.386,959,3.386,960,3.386,961,3.386,962,4.549,963,4.549,964,3.386,965,3.386,966,3.386,967,3.386,968,3.386,969,3.386,970,3.386,971,3.386,972,3.386,973,5.138,974,3.386,975,3.386,976,3.386,977,4.549,978,5.901,979,4.549,980,4.549,981,4.549,982,4.538,983,3.386,984,3.386,985,3.386,986,3.386,987,3.386,988,3.386,989,3.843,990,5.138,991,3.386,992,4.549,993,3.386,994,3.386,995,3.386]],["title/classes/ODataApiOptions.html",[178,0.339,996,3.441]],["body/classes/ODataApiOptions.html",[1,4.279,3,0.088,4,0.078,5,0.088,6,0.11,9,2.359,10,0.056,11,0.585,12,0.206,13,3.986,14,3.704,15,2.882,16,3.955,17,3.568,18,1.762,19,3.704,20,3.865,21,3.558,22,2.415,23,0.111,24,0.01,25,3.3,26,3.299,27,0.633,28,0.448,30,3.448,33,0.105,34,3.67,38,2.387,41,2.409,48,2.184,51,2.882,57,0.667,71,2.227,72,3.812,73,3.971,74,2.007,75,0.165,76,2.409,77,2.409,78,2.314,79,3.865,80,3.865,81,2.409,82,0.51,83,0.809,84,2.227,85,2.514,86,2.227,87,3.09,97,3.667,98,2.713,104,2.909,118,0.067,119,2.478,172,0.099,176,0.007,177,0.007,178,0.475,180,0.215,187,0.324,223,1.989,224,0.215,227,1.498,710,1.227,713,2.001,812,4.467,865,2.064,996,4.823,997,3.91,998,3.3,999,4.445,1000,2.071,1001,4.445,1002,5.3,1003,4.467,1004,4.143,1005,4.445,1006,6.446,1007,3.265,1008,4.445,1009,4.445,1010,4.823,1011,4.467,1012,4.445,1013,6.446,1014,6.446,1015,4.445,1016,4.445,1017,4.445,1018,4.445,1019,5.3,1020,4.182,1021,4.445,1022,4.445,1023,4.182,1024,5.3,1025,3.558,1026,4.445,1027,5.3,1028,5.3,1029,5.471,1030,3.558,1031,6.464,1032,7.104,1033,3.91,1034,3.136,1035,3.91,1036,3.91,1037,6.946,1038,6.946,1039,6.946,1040,6.946,1041,6.946,1042,6.946,1043,6.946,1044,3.91,1045,3.91,1046,3.91,1047,3.91,1048,3.91,1049,3.91,1050,4.823,1051,4.823,1052,4.823,1053,3.91,1054,3.91,1055,3.558,1056,3.91,1057,3.558,1058,3.91,1059,3.91,1060,3.91,1061,3.558,1062,3.91,1063,3.558,1064,3.91,1065,3.91,1066,3.91,1067,3.91,1068,3.91,1069,3.91,1070,3.91,1071,4.823,1072,2.409]],["title/classes/ODataBaseService.html",[178,0.339,1073,2.983]],["body/classes/ODataBaseService.html",[3,0.071,4,0.062,5,0.071,6,0.108,9,2.69,10,0.045,12,0.208,18,1.991,23,0.112,24,0.01,28,0.398,31,3.842,32,1.669,33,0.062,43,4.401,54,2.092,57,0.913,75,0.146,83,0.789,118,0.128,119,2.206,138,3.979,167,3.914,172,0.197,176,0.006,177,0.006,178,0.283,180,0.173,182,0.845,187,0.317,189,1.248,217,2.206,224,0.25,225,2.839,398,1.123,467,1.419,489,3.711,865,1.774,1073,3.595,1074,3.582,1075,6.258,1076,6.258,1077,5.879,1078,3.167,1079,3.151,1080,4.942,1081,5.352,1082,3.582,1083,4.87,1084,5.242,1085,4.657,1086,6.296,1087,5.909,1088,6.237,1089,3.582,1090,4.764,1091,3.582,1092,3.582,1093,3.582,1094,3.582,1095,5.242,1096,6.296,1097,3.582,1098,3.582,1099,3.582,1100,3.582,1101,3.582,1102,4.51,1103,5.589,1104,3.582,1105,3.779,1106,3.582,1107,3.582,1108,2.487,1109,3.582,1110,2.656,1111,2.487,1112,2.868,1113,1.941,1114,3.582,1115,6.083,1116,6.083,1117,5.179,1118,3.582]],["title/classes/ODataBatchRequest.html",[178,0.339,1119,3.781]],["body/classes/ODataBatchRequest.html",[3,0.073,4,0.064,5,0.073,6,0.094,8,0.848,9,2.286,10,0.09,11,0.511,12,0.153,13,2.74,17,3.648,18,0.843,21,1.907,22,2.124,23,0.099,24,0.01,28,0.542,31,2.934,32,1.707,33,0.092,45,0.883,46,1.124,47,1.707,49,1.707,50,4.321,74,1.753,75,0.172,82,0.772,83,0.944,97,3.605,98,3.212,102,3.252,106,1.571,111,1.532,113,1.069,114,1.596,118,0.093,123,4.025,152,1.124,163,3.713,165,1.231,166,1.707,170,2.977,172,0.138,175,1.65,176,0.006,177,0.006,178,0.415,180,0.177,182,0.859,187,0.268,189,1.011,199,2.514,217,2.14,224,0.177,404,2.276,411,2.933,445,1.328,578,1.985,709,1.65,710,1.011,712,4.214,713,1.65,718,4.568,830,3.207,846,3.115,927,2.168,930,3.645,947,2.975,1004,2.072,1020,4.675,1023,2.543,1078,3.207,1085,3.207,1087,2.399,1119,6.276,1120,3.663,1121,5.42,1122,5.264,1123,5.264,1124,3.663,1125,4.327,1126,3.663,1127,3.663,1128,5.264,1129,5.911,1130,3.663,1131,5.264,1132,5.264,1133,3.663,1134,3.663,1135,5.264,1136,4.631,1137,3.663,1138,4.631,1139,3.663,1140,3.663,1141,3.663,1142,3.663,1143,4.932,1144,5.264,1145,5.264,1146,5.264,1147,3.663,1148,3.663,1149,5.264,1150,3.663,1151,5.42,1152,5.392,1153,3.223,1154,2.543,1155,3.223,1156,3.903,1157,3.903,1158,3.654,1159,3.903,1160,3.115,1161,3.663,1162,3.663,1163,3.663,1164,2.716,1165,2.543,1166,3.663,1167,3.663,1168,4.2,1169,6.735,1170,3.663,1171,4.631,1172,2.276,1173,5.264,1174,5.264,1175,2.276,1176,3.663,1177,3.663,1178,2.933,1179,5.264,1180,6.735,1181,6.161,1182,1.835,1183,2.518,1184,3.663,1185,6.735,1186,4.568,1187,5.264,1188,6.161,1189,3.663,1190,3.663,1191,3.663,1192,3.663,1193,3.663,1194,3.663,1195,3.663,1196,4.631,1197,3.663,1198,3.663,1199,3.663,1200,3.663,1201,3.663,1202,3.223,1203,3.663,1204,2.933,1205,3.663,1206,3.663,1207,5.945,1208,3.663,1209,3.663,1210,2.933,1211,3.663,1212,3.447,1213,3.663,1214,3.663,1215,3.663,1216,3.663,1217,6.161,1218,5.264,1219,3.223,1220,3.663,1221,5.264,1222,6.161,1223,5.264,1224,6.161,1225,3.223,1226,3.447,1227,3.223,1228,3.903,1229,3.663,1230,3.663,1231,3.663,1232,4.631,1233,3.663,1234,3.663,1235,4.631,1236,3.663,1237,3.663,1238,3.663,1239,5.264,1240,3.663,1241,2.933,1242,3.663,1243,5.264,1244,5.264,1245,3.223,1246,3.663,1247,3.663,1248,3.663,1249,3.663,1250,3.663,1251,3.663,1252,3.663,1253,3.663,1254,5.264,1255,7.972,1256,5.264,1257,6.735,1258,7.133,1259,3.663,1260,7.133,1261,6.735,1262,5.264,1263,3.663,1264,3.663,1265,3.663,1266,6.161,1267,3.663,1268,3.663,1269,3.663,1270,3.663,1271,2.543,1272,3.663,1273,3.663,1274,3.663,1275,3.663,1276,3.663,1277,3.223,1278,3.663,1279,3.663,1280,3.663,1281,3.663,1282,3.663,1283,3.663,1284,3.663,1285,3.663,1286,3.663,1287,3.663,1288,3.663,1289,3.663,1290,3.663]],["title/classes/ODataCache.html",[178,0.339,1291,2.814]],["body/classes/ODataCache.html",[0,0.82,3,0.071,4,0.062,5,0.071,6,0.109,10,0.045,11,0.501,12,0.208,22,2.536,23,0.112,24,0.01,27,0.266,28,0.462,31,3.696,32,1.66,33,0.09,38,3.186,39,1.72,40,3.461,46,2.258,47,1.66,49,1.66,57,0.91,75,0.174,82,0.87,83,0.984,97,1.552,99,1.537,106,1.537,109,3.801,111,2.053,113,1.293,118,0.131,119,2.199,152,2.258,165,0.796,172,0.19,176,0.006,177,0.006,178,0.281,180,0.172,182,0.842,187,0.321,189,1.257,223,1.501,224,0.249,227,0.886,404,3.767,467,3.007,710,0.983,713,1.604,717,5.239,830,2.686,930,2.108,1011,5.761,1090,2.108,1105,2.213,1113,1.931,1125,4.907,1160,4.758,1168,4.937,1182,1.785,1183,1.456,1204,4.13,1207,4.855,1212,2.333,1226,5.266,1291,3.378,1292,3.134,1293,5.231,1294,5.814,1295,4.496,1296,4.13,1297,4.615,1298,4.496,1299,4.13,1300,4.496,1301,4.496,1302,4.13,1303,4.13,1304,4.13,1305,5.582,1306,2.473,1307,5.159,1308,2.896,1309,3.563,1310,2.852,1311,3.563,1312,4.817,1313,3.825,1314,3.563,1315,1.785,1316,3.563,1317,2.852,1318,3.563,1319,3.581,1320,3.563,1321,3.581,1322,3.563,1323,2.852,1324,3.563,1325,2.852,1326,3.563,1327,2.852,1328,3.563,1329,3.825,1330,3.563,1331,5.231,1332,2.852,1333,3.563,1334,3.581,1335,3.563,1336,3.825,1337,3.563,1338,3.825,1339,3.563,1340,3.134,1341,4.539,1342,2.852,1343,3.134,1344,3.134,1345,2.852,1346,4.539,1347,4.539,1348,3.825,1349,3.134,1350,3.134,1351,3.134,1352,3.461,1353,2.852,1354,2.852,1355,2.852,1356,3.134,1357,4.539,1358,3.134,1359,3.134,1360,3.134,1361,3.134,1362,3.134,1363,3.134,1364,3.134,1365,3.134,1366,4.539,1367,3.134,1368,4.539,1369,3.134,1370,4.539,1371,3.134,1372,3.378,1373,4.539,1374,3.134,1375,3.134,1376,3.134,1377,3.134,1378,2.213,1379,3.134,1380,3.134,1381,3.134,1382,3.134,1383,3.134,1384,3.134,1385,3.134,1386,3.134,1387,3.134,1388,3.134,1389,3.134,1390,5.849,1391,3.134,1392,4.539,1393,3.134,1394,3.134,1395,3.134,1396,3.134,1397,3.134,1398,3.134,1399,3.134,1400,2.852,1401,3.134,1402,3.134,1403,3.134]],["title/interfaces/ODataCacheEntry.html",[0,0.989,1312,2.814]],["body/interfaces/ODataCacheEntry.html",[0,1.003,2,2.268,3,0.087,4,0.076,5,0.087,6,0.055,10,0.055,11,0.577,23,0.092,24,0.01,28,0.498,31,3.499,32,2.03,33,0.104,38,3.286,39,2.104,40,3.783,46,1.824,47,2.03,49,2.03,75,0.174,82,0.962,83,1.017,97,1.898,99,1.465,106,1.593,109,4.024,111,1.268,113,1.275,118,0.118,152,2.409,165,0.917,176,0.007,177,0.007,178,0.344,223,1.268,224,0.211,227,1.084,404,2.706,467,2.681,710,1.203,713,1.962,717,5.418,830,3.094,930,2.578,1011,6.062,1090,2.578,1105,2.706,1113,2.361,1125,4.543,1160,4.5,1168,4.858,1182,2.183,1183,1.781,1204,4.758,1207,5.415,1212,2.853,1226,4.43,1291,2.853,1292,3.833,1293,5.015,1294,6.028,1295,3.23,1297,3.025,1298,3.23,1300,3.23,1301,3.23,1305,5.676,1308,2.947,1312,4.758,1313,3.23,1319,3.025,1321,3.025,1329,3.23,1331,5.387,1334,3.025,1336,3.23,1338,3.23,1340,3.833,1341,5.229,1342,3.488,1343,3.833,1344,3.833,1345,3.488,1346,6.69,1347,5.229,1348,4.407,1349,3.833,1350,3.833,1351,3.833,1352,3.783,1353,3.488,1354,3.488,1355,3.488,1356,3.833,1357,5.229,1358,3.833,1359,3.833,1360,3.833,1361,3.833,1362,3.833,1363,3.833,1364,3.833,1365,3.833,1366,5.229,1367,3.833,1368,5.229,1369,3.833,1370,5.229,1371,3.833,1372,3.892,1373,5.229,1374,3.833,1375,3.833,1376,3.833,1377,3.833,1378,2.706,1379,3.833,1380,3.833,1381,3.833,1382,3.833,1383,3.833,1384,3.833,1385,3.833,1386,3.833,1387,3.833,1388,3.833,1389,3.833,1390,6.393,1391,3.833,1392,5.229,1393,3.833,1394,3.833,1395,3.833,1396,3.833,1397,3.833,1398,3.833,1399,3.833,1400,3.488,1401,3.833,1402,3.833,1403,3.833]],["title/classes/ODataCallable.html",[178,0.339,1404,3.441]],["body/classes/ODataCallable.html",[3,0.085,4,0.074,5,0.085,6,0.111,9,2.692,10,0.054,11,0.568,12,0.212,22,2.269,23,0.114,24,0.01,27,0.595,28,0.437,33,0.074,42,3.044,57,1.339,74,2.708,75,0.172,83,0.962,84,3.604,94,2.988,95,3.134,100,3.394,101,3.394,103,3.473,105,2.547,111,1.238,118,0.126,119,1.543,125,2.406,133,2.12,134,1.371,141,3.745,165,0.657,169,3.009,170,3.778,171,3.953,172,0.178,176,0.007,177,0.007,178,0.336,180,0.206,182,0.954,187,0.327,189,1.323,224,0.206,227,1.454,229,1.893,398,0.92,513,5.324,578,4.471,709,3.661,710,1.174,865,2.003,998,2.823,1000,2.725,1007,2.306,1078,3.478,1108,2.953,1404,4.681,1405,4.254,1406,3.621,1407,3.829,1408,5.103,1409,5.847,1410,4.254,1411,4.254,1412,4.254,1413,4.254,1414,5.334,1415,4.254,1416,4.254,1417,6.447,1418,2.786,1419,4.254,1420,3.169,1421,4.254,1422,5.144,1423,6.683,1424,3.899,1425,5.144,1426,5.144,1427,4.254,1428,5.144,1429,5.144,1430,3.169,1431,4.254,1432,4.681,1433,4.254,1434,3.169,1435,4.254,1436,5.144,1437,4.335,1438,3.743,1439,4.254,1440,4.681,1441,5.144,1442,4.254,1443,3.154,1444,2.215,1445,6.681,1446,4.254,1447,5.847,1448,4.254,1449,4.254,1450,4.254,1451,2.643,1452,3.743,1453,3.743,1454,4.681,1455,4.254,1456,4.254,1457,2.953,1458,3.743,1459,3.406,1460,3.743,1461,3.154,1462,4.15,1463,3.743,1464,3.743,1465,2.643,1466,2.643,1467,2.643,1468,4.254]],["title/classes/ODataCallableParser.html",[178,0.339,1414,3.186]],["body/classes/ODataCallableParser.html",[3,0.081,4,0.071,5,0.081,6,0.109,9,2.697,10,0.052,11,0.553,12,0.209,18,1.629,22,2.065,23,0.112,24,0.01,27,0.528,28,0.487,33,0.099,46,1.257,48,2.065,57,0.615,75,0.175,83,1.019,87,3.494,94,3.346,95,2.853,99,0.765,100,2.853,101,3.083,103,3.418,105,1.784,106,1.475,107,3.546,111,1.192,113,1.254,118,0.127,133,2.865,134,1.436,141,3.685,153,2.854,154,1.257,165,1.243,167,3.083,172,0.187,176,0.006,177,0.006,178,0.449,180,0.198,182,0.929,187,0.322,189,1.156,223,1.658,224,0.198,229,1.614,398,0.975,418,1.365,464,2.655,513,4.635,710,1.131,713,1.845,735,2.683,846,3.371,998,2.75,1000,1.909,1072,2.22,1090,3.371,1175,3.538,1182,2.052,1183,1.674,1308,1.784,1315,2.052,1352,3.685,1406,3.836,1407,3.73,1414,4.223,1418,2.683,1420,3.087,1430,3.087,1434,2.22,1444,2.132,1451,5.004,1462,4.621,1465,2.545,1466,2.545,1467,2.545,1469,3.604,1470,5.696,1471,4.096,1472,4.096,1473,4.096,1474,5.243,1475,4.096,1476,4.096,1477,4.096,1478,4.096,1479,4.096,1480,4.096,1481,5.011,1482,4.096,1483,4.096,1484,5.011,1485,4.096,1486,6.228,1487,3.704,1488,4.289,1489,2.844,1490,3.604,1491,2.844,1492,3.604,1493,2.844,1494,3.604,1495,5.246,1496,4.621,1497,4.907,1498,3.954,1499,3.954,1500,3.604,1501,3.604,1502,2.844,1503,2.844,1504,2.844,1505,2.844,1506,2.844,1507,3.954,1508,2.844,1509,2.844,1510,2.844,1511,2.424,1512,3.371,1513,5.011,1514,3.604,1515,5.761,1516,3.604,1517,3.604,1518,2.545,1519,2.545,1520,2.424,1521,6.228,1522,6.95,1523,5.011,1524,5.011,1525,3.604,1526,3.604,1527,3.604,1528,3.604,1529,3.604,1530,3.604]],["title/classes/ODataEntitiesAnnotations.html",[178,0.339,982,2.814]],["body/classes/ODataEntitiesAnnotations.html",[3,0.088,4,0.077,5,0.088,6,0.108,8,1.007,10,0.056,11,0.663,12,0.19,15,1.868,22,2.412,23,0.108,24,0.01,26,3.294,28,0.394,29,3.551,30,3.294,33,0.128,45,1.144,46,2.347,51,3.085,52,1.606,58,2.971,59,0.954,68,2.971,69,2.971,70,3.072,75,0.173,83,1.068,99,1.366,113,1.252,118,0.13,135,1.517,165,1.053,172,0.163,176,0.007,177,0.007,178,0.577,180,0.214,182,0.98,187,0.326,189,1.098,217,1.697,224,0.214,225,1.895,388,2.437,461,3.085,467,2.703,710,1.222,762,3.733,865,2.058,916,2.064,925,5.84,926,3.283,927,4.773,928,4.544,930,2.62,931,3.935,934,4.455,937,5.67,943,3.283,944,3.283,945,3.283,946,3.283,947,2.138,948,4.467,949,5.057,950,3.179,951,4.735,952,3.283,953,4.467,954,3.283,955,2.751,956,3.283,957,3.283,958,3.283,959,3.283,960,3.283,961,3.283,962,5.424,963,4.455,964,3.283,965,3.283,966,3.283,967,3.283,968,3.283,969,3.283,970,3.283,971,3.283,972,3.283,973,5.057,974,3.283,975,3.283,976,3.283,977,5.424,978,5.847,979,4.455,980,5.057,981,4.455,982,5.008,983,3.283,984,3.283,985,5.057,986,3.283,987,5.057,988,3.283,989,3.808,990,5.057,991,3.283,992,4.455,993,3.283,994,3.283,995,3.283,1531,4.428,1532,3.545,1533,4.428,1534,4.428,1535,4.428,1536,3.545,1537,3.896,1538,4.428,1539,4.428,1540,4.428,1541,4.428,1542,4.428,1543,4.428,1544,4.428,1545,4.428,1546,4.428,1547,4.428,1548,4.428,1549,4.428,1550,4.428,1551,3.896,1552,4.428]],["title/classes/ODataEntityAnnotations.html",[178,0.339,953,2.814]],["body/classes/ODataEntityAnnotations.html",[3,0.085,4,0.075,5,0.085,6,0.11,8,0.993,10,0.054,11,0.734,12,0.202,15,2.826,22,2.462,23,0.11,24,0.01,26,3.247,28,0.384,29,3.488,30,3.247,33,0.126,45,1.124,46,2.454,51,3.041,52,1.551,54,1.579,58,1.864,59,0.932,68,1.864,69,1.864,70,1.927,75,0.174,83,1.066,99,1.346,113,1.239,118,0.13,135,1.466,165,1.034,172,0.169,176,0.007,177,0.007,178,0.569,180,0.207,182,0.958,187,0.331,189,1.134,217,1.667,224,0.207,225,1.851,388,2.402,461,3.041,467,2.655,710,1.181,762,3.646,865,2.011,916,1.994,925,5.801,926,3.172,927,4.73,928,4.48,930,2.532,931,3.844,934,4.352,937,5.603,943,3.172,944,3.172,945,3.172,946,3.172,947,2.066,948,4.388,949,4.968,950,3.123,951,4.652,952,3.172,953,4.949,954,3.172,955,4.163,956,3.172,957,3.172,958,4.968,959,3.172,960,4.968,961,3.172,962,5.347,963,4.352,964,4.968,965,3.172,966,4.968,967,3.172,968,4.968,969,3.172,970,4.968,971,3.172,972,4.968,973,4.968,974,3.172,975,4.352,976,3.172,977,5.347,978,5.787,979,4.352,980,4.968,981,4.352,982,4.388,983,3.172,984,3.172,985,3.172,986,3.172,987,3.172,988,3.172,989,3.769,990,4.968,991,3.172,992,4.352,993,3.172,994,3.172,995,3.172,1532,3.425,1536,3.425,1537,3.764,1551,3.764,1553,4.279,1554,4.279,1555,4.279,1556,4.279,1557,4.279,1558,4.279,1559,4.279,1560,4.279,1561,4.279,1562,4.279,1563,4.279,1564,4.279,1565,4.279,1566,4.279,1567,4.279,1568,4.279,1569,4.279,1570,4.279,1571,4.279,1572,4.279,1573,4.279,1574,4.279,1575,4.279,1576,4.279,1577,4.279,1578,4.279]],["title/classes/ODataEntityContainer.html",[178,0.339,1579,3.441]],["body/classes/ODataEntityContainer.html",[3,0.113,4,0.099,5,0.113,6,0.11,10,0.072,11,0.687,12,0.175,23,0.107,24,0.01,27,0.424,28,0.527,33,0.099,59,1.222,74,1.896,75,0.141,83,0.838,111,1.656,118,0.125,135,2.637,143,4.555,144,4.173,165,1.092,172,0.158,176,0.008,177,0.008,178,0.449,180,0.275,182,1.154,187,0.322,189,1.209,224,0.275,227,1.76,229,1.613,489,3.467,490,5.008,499,5.008,500,5.008,502,5.008,503,6.225,504,3.219,545,3.855,642,5.246,709,3.929,710,1.571,865,2.424,912,4.312,916,3.588,950,2.653,989,3.416,998,3.416,1000,3.297,1078,4.008,1108,3.952,1308,3.082,1408,5.529,1424,3.085,1443,4.221,1444,2.963,1461,4.221,1579,5.665,1580,7.612,1581,4.912,1582,5.708,1583,4.002,1584,5.693,1585,3.835,1586,4.002,1587,4.365,1588,4.002,1589,5.693,1590,5.693,1591,5.693,1592,5.693,1593,4.221,1594,3.369,1595,3.219]],["title/classes/ODataEntityService.html",[178,0.339,1596,3.186]],["body/classes/ODataEntityService.html",[3,0.111,4,0.097,5,0.111,6,0.101,8,0.963,9,2.511,10,0.071,12,0.204,18,1.609,23,0.112,24,0.01,28,0.5,31,3.325,33,0.097,45,1.409,57,0.838,83,0.661,111,2.035,113,1.11,118,0.124,152,1.715,162,2.908,167,3.661,172,0.194,176,0.008,177,0.008,178,0.441,180,0.27,182,1.141,187,0.316,189,1.236,217,1.99,225,2.65,398,1.101,461,3.219,464,3.259,467,3.379,489,3.149,709,3.149,865,2.395,1073,5.834,1075,5.185,1076,5.185,1077,5.185,1084,4.142,1085,4.288,1086,5.185,1087,5.503,1088,5.834,1090,4.138,1095,4.142,1096,5.185,1102,4.142,1103,4.854,1105,3.47,1113,3.028,1159,5.66,1596,5.185,1597,5.586,1598,5.185,1599,7.634,1600,5.586,1601,6.405,1602,5.586,1603,6.152,1604,5.239,1605,5.586,1606,4.472,1607,4.472,1608,4.472,1609,5.586,1610,5.586,1611,4.472,1612,4.472,1613,5.586,1614,4.472,1615,5.586]],["title/classes/ODataEntitySet.html",[178,0.339,1582,3.186]],["body/classes/ODataEntitySet.html",[3,0.106,4,0.093,5,0.106,6,0.11,10,0.067,11,0.658,12,0.185,18,1.222,22,1.675,23,0.114,24,0.01,27,0.586,28,0.488,33,0.093,59,1.184,74,2.257,75,0.171,83,0.883,84,3.394,111,1.546,118,0.125,135,2.555,145,4.442,165,1.046,172,0.166,173,4.042,174,3.736,176,0.008,177,0.008,178,0.419,180,0.257,182,1.105,187,0.324,189,1.281,224,0.257,227,1.954,229,1.505,489,3.537,504,4.442,505,4.253,509,4.674,510,4.674,512,4.674,545,3.797,709,3.844,710,1.466,865,2.32,912,4.224,916,3.476,950,2.476,989,3.271,998,3.271,1000,2.476,1078,3.883,1108,3.688,1182,2.661,1183,2.171,1308,2.314,1315,2.661,1407,4.436,1408,5.433,1417,5.023,1423,6.289,1424,3.672,1430,3.672,1432,5.423,1443,3.939,1444,2.765,1454,4.253,1459,4.253,1461,3.939,1520,3.143,1580,7.642,1581,4.703,1582,5.023,1583,3.831,1585,3.672,1586,3.831,1587,4.257,1588,3.831,1593,3.939,1594,3.143,1595,3.004,1616,6.774,1617,5.312,1618,5.312,1619,5.312,1620,5.312,1621,5.312,1622,5.312,1623,5.312,1624,5.312,1625,5.312]],["title/classes/ODataEntitySetService.html",[178,0.339,1626,3.441]],["body/classes/ODataEntitySetService.html",[3,0.06,4,0.052,5,0.06,6,0.103,8,0.625,9,2.696,10,0.038,12,0.205,15,3.609,18,1.044,23,0.107,24,0.01,27,0.223,28,0.47,31,3.642,32,1.396,33,0.052,45,1.492,57,0.681,58,1.305,74,2.901,75,0.137,83,0.995,97,3.595,106,1.022,111,2.01,113,1.139,114,1.305,118,0.124,119,1.645,138,3.652,152,2.713,164,4.179,167,3.008,172,0.189,174,3.459,175,1.349,176,0.005,177,0.005,178,0.236,180,0.145,182,0.74,187,0.314,189,1.247,217,1.519,225,2.178,398,1.079,461,2.768,489,4.085,504,4.821,505,2.398,709,2.955,762,4.79,865,1.554,947,3.835,1073,3.801,1075,3.363,1076,3.363,1077,3.363,1084,2.221,1085,3.938,1086,3.363,1087,4.522,1088,4.794,1090,2.684,1095,2.221,1096,3.363,1102,2.221,1103,3.149,1105,1.861,1110,2.221,1111,2.079,1113,1.623,1151,3.991,1154,2.079,1157,6.018,1168,3.097,1172,2.818,1175,2.818,1271,3.149,1342,3.632,1345,2.398,1424,4.247,1457,3.149,1596,4.866,1598,5.717,1601,4.89,1603,3.991,1604,5.506,1606,2.398,1607,2.398,1608,2.398,1611,3.632,1612,2.398,1614,2.398,1626,3.632,1627,8.117,1628,4.563,1629,4.818,1630,4.537,1631,5.476,1632,5.476,1633,5.476,1634,4.29,1635,6.563,1636,4.372,1637,5.476,1638,5.374,1639,2.995,1640,3.991,1641,4.89,1642,2.995,1643,2.995,1644,2.995,1645,6.556,1646,2.995,1647,5.866,1648,2.995,1649,2.995,1650,2.995,1651,4.818,1652,2.995,1653,4.818,1654,4.537,1655,2.995,1656,2.995,1657,2.995,1658,2.995,1659,2.995,1660,2.995,1661,2.995,1662,2.995,1663,2.995,1664,2.995,1665,2.995,1666,2.995,1667,2.995,1668,2.995,1669,2.995,1670,4.537,1671,2.995,1672,2.995,1673,2.995,1674,2.995,1675,2.635,1676,2.995,1677,2.995,1678,2.995,1679,2.635,1680,2.995,1681,3.991,1682,2.995,1683,2.995,1684,2.995,1685,5.476,1686,5.476,1687,5.476,1688,4.24,1689,2.635,1690,2.635,1691,2.995,1692,2.995,1693,2.995,1694,2.635,1695,2.995,1696,2.995,1697,2.995,1698,4.537,1699,2.995,1700,2.995,1701,2.995,1702,2.995,1703,2.995,1704,2.995,1705,2.995,1706,2.995,1707,2.995,1708,2.995,1709,2.995,1710,2.995]],["title/classes/ODataEntityTypeKey.html",[178,0.339,1711,3.186]],["body/classes/ODataEntityTypeKey.html",[3,0.047,4,0.041,5,0.047,6,0.068,9,2.571,10,0.03,11,0.459,12,0.117,22,1.195,23,0.104,24,0.01,27,0.56,28,0.431,33,0.103,46,1.655,48,1.374,54,1.45,57,1.27,59,0.377,61,1.002,62,1.598,74,0.791,75,0.172,82,0.676,83,1.021,87,2.973,91,2.807,92,2.069,93,2.46,94,3.062,95,1.65,99,1.424,100,1.65,101,1.65,105,1.65,106,1.522,107,2.367,113,1.394,114,2.348,118,0.124,119,0.861,121,1.898,133,1.713,134,1.281,135,0.814,139,1.972,149,3.403,151,0.749,152,0.729,153,1.19,154,0.729,155,1.883,156,0.749,157,0.749,158,1.288,159,2.348,160,1.288,162,1.237,163,1.237,165,1.159,166,1.107,167,2.734,168,2.022,172,0.053,175,2.428,176,0.004,177,0.004,178,0.425,180,0.115,187,0.178,189,0.569,200,0.791,217,1.561,218,1.796,220,1.764,223,1.102,224,0.285,227,0.942,229,1.779,464,2.745,465,1.107,545,2.128,686,2.809,709,3.557,710,1.046,713,1.07,735,1.556,830,3.428,846,2.242,848,1.761,861,1.476,862,1.761,912,2.46,916,1.765,947,3.562,950,1.107,955,1.476,989,2.844,1000,2.202,1007,3.402,1034,2.46,1072,1.288,1165,1.649,1172,1.476,1175,4.091,1182,2.367,1183,2.565,1306,1.649,1308,2.058,1315,1.19,1352,3.268,1378,1.476,1406,2.053,1420,2.561,1430,1.288,1434,2.561,1444,1.237,1451,4.737,1462,3.659,1465,1.476,1466,1.476,1467,1.476,1487,3.049,1488,5.338,1489,4.747,1491,3.28,1493,3.28,1495,4.992,1496,3.899,1497,4.248,1498,3.28,1499,2.63,1502,1.649,1503,2.63,1504,1.649,1505,1.649,1506,2.63,1507,2.63,1508,1.649,1509,2.63,1510,1.649,1511,1.406,1512,2.796,1518,2.353,1519,1.476,1520,1.406,1583,1.343,1585,1.288,1586,1.343,1587,2.922,1588,1.343,1594,1.406,1595,1.343,1628,3.485,1634,2.935,1636,2.242,1647,1.649,1688,1.649,1711,3.503,1712,3.997,1713,3.788,1714,2.376,1715,1.237,1716,4.316,1717,1.649,1718,1.476,1719,1.649,1720,2.809,1721,2.481,1722,2.809,1723,5.025,1724,2.809,1725,3.997,1726,2.809,1727,1.902,1728,3.033,1729,2.809,1730,1.902,1731,1.902,1732,3.783,1733,1.902,1734,3.033,1735,1.649,1736,1.902,1737,1.902,1738,1.902,1739,4.715,1740,1.902,1741,4.715,1742,1.902,1743,3.033,1744,3.033,1745,3.033,1746,3.033,1747,1.902,1748,1.902,1749,1.902,1750,1.902,1751,2.63,1752,5.475,1753,1.902,1754,1.902,1755,1.902,1756,1.902,1757,1.902,1758,1.902,1759,1.902,1760,1.902,1761,1.902,1762,3.033,1763,3.033,1764,3.033,1765,3.033,1766,2.809,1767,1.902,1768,3.033,1769,4.248,1770,1.902,1771,1.902,1772,3.033,1773,1.902,1774,1.902,1775,1.902,1776,3.033,1777,1.902,1778,2.353,1779,3.033,1780,3.033,1781,3.033,1782,3.033,1783,3.033,1784,3.033,1785,1.902,1786,5.025,1787,3.783,1788,1.902,1789,4.367,1790,4.367,1791,1.761,1792,3.503,1793,1.902,1794,1.902,1795,1.902,1796,1.902,1797,1.902,1798,1.902,1799,1.902,1800,1.902,1801,1.902,1802,1.902,1803,1.902,1804,1.902,1805,1.902,1806,1.902,1807,1.902,1808,1.902,1809,1.902,1810,1.902,1811,1.902,1812,1.902,1813,1.902,1814,1.902,1815,3.783,1816,3.033,1817,1.902,1818,1.902,1819,1.902,1820,1.902,1821,3.033,1822,1.902,1823,1.902,1824,1.649,1825,1.902,1826,1.902,1827,1.902,1828,1.902,1829,1.902,1830,4.994,1831,4.316,1832,1.902,1833,1.902,1834,1.902,1835,1.902,1836,1.902,1837,1.902,1838,2.809,1839,1.902,1840,1.902,1841,1.902,1842,4.316,1843,4.747,1844,3.033,1845,3.033,1846,1.902,1847,1.902,1848,4.316,1849,1.902,1850,1.902,1851,1.902,1852,1.902,1853,1.902,1854,1.902,1855,1.902,1856,1.902,1857,1.902,1858,1.902,1859,1.902,1860,1.902,1861,1.761,1862,1.902,1863,1.902,1864,1.902,1865,1.902,1866,1.761,1867,1.902,1868,1.902,1869,1.902,1870,1.902,1871,1.902,1872,3.033,1873,3.033,1874,1.902,1875,1.902,1876,1.761,1877,1.902,1878,1.902,1879,1.902,1880,1.902,1881,3.033,1882,4.715,1883,1.902,1884,1.902,1885,3.033,1886,1.902,1887,3.033,1888,1.902,1889,3.033,1890,1.902,1891,1.649,1892,1.649,1893,3.033,1894,1.902,1895,3.033,1896,1.902,1897,1.902,1898,1.902,1899,1.902,1900,1.902,1901,3.783,1902,1.902,1903,1.902]],["title/classes/ODataEnumType.html",[178,0.339,1904,3.441]],["body/classes/ODataEnumType.html",[3,0.068,4,0.059,5,0.068,6,0.109,9,2.648,10,0.043,11,0.484,12,0.2,22,2.051,23,0.115,24,0.01,27,0.485,28,0.426,33,0.059,42,2.597,48,3.089,57,1.353,59,1.149,74,2.768,75,0.169,82,0.898,83,0.997,84,3.259,92,2.232,94,2.341,95,2.834,99,0.931,100,3.153,101,3.153,105,2.173,106,0.931,111,1.719,113,1.032,118,0.132,119,1.234,125,1.924,133,1.809,134,1.259,135,2.373,137,3.386,148,2.959,149,3.939,165,1.004,172,0.182,176,0.006,177,0.006,178,0.268,180,0.165,182,0.814,187,0.322,189,1.328,218,1.133,224,0.165,227,1.618,229,0.964,263,2.964,398,0.896,465,1.585,518,2.724,519,2.724,545,3.632,558,2.724,600,2.993,654,2.993,655,4.389,656,2.993,709,3.454,710,0.939,865,1.709,912,3.606,916,2.752,950,1.585,989,2.409,998,2.409,1000,2.325,1007,1.844,1078,3.075,1108,2.362,1308,2.573,1406,3.526,1407,3.267,1408,4.74,1417,3.698,1420,2.704,1422,4.389,1423,6.746,1424,4.242,1425,4.389,1426,4.389,1428,4.389,1429,4.389,1430,2.704,1432,3.994,1434,2.704,1436,4.389,1437,3.698,1438,2.993,1440,3.994,1441,4.389,1443,2.522,1444,1.771,1451,2.113,1452,2.993,1453,2.993,1454,2.724,1457,4.1,1458,2.993,1459,2.724,1460,2.993,1461,2.522,1463,2.993,1464,2.993,1465,2.113,1466,2.113,1467,2.113,1487,3.679,1581,3.463,1583,2.821,1585,4.312,1586,2.821,1587,3.526,1588,3.679,1593,2.522,1594,2.013,1595,1.924,1778,3.099,1830,2.228,1866,2.522,1904,3.994,1905,8.596,1906,4.988,1907,4.988,1908,4.988,1909,4.988,1910,3.402,1911,6.749,1912,3.402,1913,3.402,1914,5.367,1915,4.988,1916,5.906,1917,3.402,1918,4.988,1919,3.402,1920,4.988,1921,3.402,1922,4.988,1923,2.993,1924,2.993,1925,4.988,1926,3.402,1927,6.505,1928,4.988,1929,4.988,1930,3.402,1931,3.402,1932,2.724,1933,2.724,1934,3.402,1935,4.988,1936,3.402,1937,3.402,1938,3.402,1939,3.402,1940,4.988,1941,3.402,1942,3.402,1943,3.402]],["title/classes/ODataEnumTypeFieldParser.html",[178,0.339,1914,3.186]],["body/classes/ODataEnumTypeFieldParser.html",[3,0.09,4,0.079,5,0.09,6,0.101,9,2.596,10,0.057,11,0.593,12,0.151,23,0.101,24,0.01,27,0.514,28,0.505,33,0.106,48,2.502,54,1.641,57,1.218,59,1.095,74,1.509,75,0.177,82,0.946,83,1,87,3.114,92,2.019,94,2.418,95,1.973,99,1.288,100,1.973,101,1.973,105,1.973,106,1.482,111,1.318,113,1.26,118,0.129,133,2.502,134,1.254,135,2.364,136,2.455,137,3.176,146,4.002,147,2.561,148,3.057,149,2.187,150,4.002,155,1.557,165,1.19,172,0.136,176,0.007,177,0.007,178,0.481,180,0.219,182,0.995,187,0.29,189,1.108,223,1.318,224,0.219,227,1.518,229,1.955,369,1.741,418,2.033,465,2.111,545,3.575,709,2.04,710,1.25,830,2.358,912,4.012,916,3.216,947,2.946,950,2.111,989,2.946,998,2.187,1007,2.455,1034,2.358,1072,2.455,1182,2.269,1183,1.851,1308,1.973,1315,3.057,1352,3.176,1406,2.455,1420,2.455,1424,2.455,1430,2.455,1434,2.455,1437,3.358,1444,2.358,1487,2.561,1495,4.586,1496,4.286,1497,4.586,1511,2.68,1512,3.61,1518,2.813,1519,2.813,1520,2.68,1581,4.236,1583,3.451,1585,3.307,1586,3.451,1587,4.002,1588,3.451,1594,2.68,1595,2.561,1628,2.68,1634,2.813,1636,2.68,1715,2.358,1717,3.144,1718,2.813,1719,3.144,1735,3.144,1751,3.144,1769,3.79,1778,2.813,1824,3.144,1830,2.966,1843,4.236,1914,5.116,1932,5.524,1933,3.626,1944,6.985,1945,6.102,1946,4.529,1947,4.529,1948,4.529,1949,3.985,1950,6.496,1951,3.985,1952,3.985,1953,3.985,1954,5.368,1955,3.985,1956,3.985,1957,3.985,1958,6.071,1959,3.985,1960,3.985,1961,3.985,1962,3.985,1963,3.985,1964,3.985,1965,3.985,1966,3.626,1967,3.985,1968,3.985,1969,3.985,1970,5.368]],["title/classes/ODataEnumTypeParser.html",[178,0.339,1487,2.431]],["body/classes/ODataEnumTypeParser.html",[3,0.08,4,0.07,5,0.08,6,0.109,9,2.658,10,0.051,11,0.546,12,0.21,22,2.415,23,0.112,24,0.01,27,0.551,28,0.484,33,0.098,48,2.04,54,1.513,57,1.223,59,0.639,74,1.341,75,0.179,82,0.935,83,0.977,87,3.316,92,1.474,94,2.571,95,2.826,99,1.498,100,2.826,101,2.826,105,2.451,106,1.43,111,1.171,113,1.273,118,0.13,119,1.459,133,2.85,134,1.429,135,1.379,136,2.181,137,3.657,146,3.049,147,3.669,148,3.519,149,3.132,150,4.006,155,1.436,165,1.141,172,0.175,176,0.006,177,0.006,178,0.444,180,0.195,182,0.918,187,0.323,189,1.223,223,1.637,224,0.195,227,1.001,229,1.838,369,1.547,398,0.967,418,1.341,465,1.875,515,3.541,545,2.921,709,1.812,710,1.111,830,2.095,912,3.377,916,2.622,947,2.717,950,1.875,989,1.943,998,2.717,1000,1.875,1007,2.181,1034,2.095,1072,2.181,1182,2.016,1183,1.645,1308,1.753,1315,2.819,1352,2.929,1406,3.516,1407,3.685,1418,2.636,1420,3.049,1430,3.049,1434,3.049,1437,2.984,1444,2.095,1487,3.182,1495,4.363,1496,4.03,1497,4.363,1511,2.381,1512,3.329,1518,2.5,1519,2.5,1520,2.381,1583,2.276,1585,2.181,1586,2.276,1587,3.049,1588,2.276,1594,2.381,1595,2.276,1628,2.381,1634,2.5,1636,2.381,1715,2.095,1717,2.794,1718,2.5,1719,2.794,1735,2.794,1751,4.503,1769,3.495,1778,2.5,1824,2.794,1830,2.636,1843,3.906,1914,4.81,1923,3.541,1924,3.541,1932,5.193,1933,3.222,1944,7.595,1949,3.541,1950,6.18,1951,3.541,1952,3.541,1953,3.541,1954,4.95,1955,3.541,1956,3.541,1957,3.541,1958,5.707,1959,3.541,1960,3.541,1961,3.541,1962,3.541,1963,3.541,1964,3.541,1965,3.541,1966,5.624,1967,3.541,1968,3.541,1969,3.541,1970,4.95,1971,5.626,1972,4.025,1973,4.025,1974,4.025,1975,4.025,1976,4.025,1977,4.025,1978,4.025,1979,4.025,1980,4.025,1981,4.025,1982,4.025]],["title/classes/ODataInMemoryCache.html",[178,0.339,1983,3.781]],["body/classes/ODataInMemoryCache.html",[3,0.094,4,0.082,5,0.094,6,0.079,8,0.864,10,0.06,11,0.609,12,0.217,22,2.685,23,0.115,24,0.01,27,0.352,28,0.411,31,3.672,33,0.082,38,1.872,46,2.305,57,1.058,75,0.167,82,0.72,83,0.559,99,1.555,109,3.53,111,2.185,113,1.241,118,0.132,119,2.555,172,0.197,176,0.007,177,0.007,178,0.373,180,0.228,182,1.024,187,0.332,189,1.311,224,0.303,404,3.898,461,3.715,717,4.664,1113,2.56,1125,4.998,1160,4.928,1164,3.502,1168,4.916,1182,3.53,1226,5.37,1291,5.821,1293,4.652,1294,5.578,1295,4.652,1296,5.024,1297,4.892,1298,4.652,1299,5.024,1300,4.652,1301,4.652,1302,5.024,1303,5.024,1304,5.024,1305,5.578,1306,3.279,1308,2.057,1310,3.781,1312,4.615,1313,3.502,1315,2.366,1317,3.781,1319,3.279,1321,4.356,1323,3.781,1325,3.781,1327,3.781,1329,3.502,1331,3.502,1332,3.781,1334,4.356,1336,3.502,1338,3.502,1983,5.521,1984,4.723,1985,4.723,1986,4.155,1987,4.155,1988,4.723,1989,4.723,1990,4.155,1991,4.155,1992,4.723,1993,4.155,1994,4.155,1995,4.155,1996,4.155,1997,4.155,1998,4.155,1999,4.155,2000,4.155,2001,4.155,2002,5.024,2003,3.781,2004,3.781,2005,3.781,2006,3.781]],["title/classes/ODataInStorageCache.html",[178,0.339,2007,3.441]],["body/classes/ODataInStorageCache.html",[0,0.998,3,0.086,4,0.076,5,0.086,6,0.099,8,0.816,10,0.055,11,0.576,12,0.214,17,2.022,22,2.642,23,0.114,24,0.01,27,0.323,28,0.388,31,3.608,33,0.076,38,1.719,46,2.226,47,3.38,57,1.013,75,0.174,82,0.774,83,0.514,98,1.953,99,1.525,102,2.094,106,1.354,109,3.381,111,2.281,113,1.273,118,0.134,119,2.447,165,0.67,172,0.195,176,0.007,177,0.007,178,0.342,180,0.21,182,0.967,187,0.333,189,1.308,217,1.474,224,0.287,229,1.679,404,3.681,461,3.677,717,4.505,928,4.192,1113,2.351,1125,4.95,1129,3.216,1160,4.833,1164,3.216,1168,4.822,1186,3.216,1226,5.254,1241,5.807,1291,5.77,1293,4.393,1294,5.441,1295,4.393,1296,4.744,1297,5.035,1298,4.393,1299,4.744,1300,4.393,1301,4.393,1302,4.744,1303,4.744,1304,4.744,1305,5.441,1306,3.011,1308,2.581,1310,3.473,1312,4.75,1313,3.216,1315,2.173,1317,3.473,1319,3.011,1321,4.114,1323,3.473,1325,3.473,1327,3.473,1329,3.216,1331,3.216,1332,3.473,1334,4.114,1336,3.216,1338,3.216,1348,3.216,1986,3.816,1987,3.816,1990,5.213,1991,3.816,1993,3.816,1994,3.816,1995,3.816,1996,3.816,1997,3.816,1998,3.816,1999,3.816,2000,3.816,2001,3.816,2002,4.744,2003,3.473,2004,3.473,2005,3.473,2006,3.473,2007,4.744,2008,3.816,2009,7.288,2010,5.926,2011,4.338,2012,4.338,2013,4.338,2014,4.338,2015,4.338,2016,3.473,2017,3.816,2018,3.816,2019,3.816,2020,3.816,2021,5.213,2022,3.816,2023,3.816,2024,3.816,2025,3.816,2026,3.816,2027,3.816]],["title/modules/ODataModule.html",[2028,3.441,2029,3.186]],["body/modules/ODataModule.html",[3,0.124,4,0.109,5,0.124,6,0.095,12,0.155,23,0.079,24,0.01,28,0.572,33,0.131,45,1.049,59,0.993,83,0.887,115,4.538,116,4.81,118,0.094,165,0.965,172,0.14,176,0.008,177,0.008,178,0.494,182,1.02,187,0.235,189,0.939,710,1.726,718,5.556,1080,6.167,1083,5.007,1154,4.342,2029,5.949,2030,5.007,2031,5.502,2032,8.024,2033,6.167,2034,7.494,2035,6.254,2036,6.254,2037,8.024,2038,7.059,2039,4.637,2040,7.494,2041,8.024,2042,6.254,2043,6.254,2044,7.494,2045,6.254,2046,5.502,2047,6.254,2048,5.502,2049,7.494,2050,6.254,2051,6.254,2052,5.502,2053,6.254]],["title/classes/ODataParameterParser.html",[178,0.339,1474,3.441]],["body/classes/ODataParameterParser.html",[3,0.082,4,0.072,5,0.082,6,0.11,9,2.687,10,0.052,11,0.557,12,0.206,18,1.32,22,1.808,23,0.111,24,0.01,27,0.59,28,0.489,33,0.1,46,2.021,48,2.707,57,0.861,75,0.174,83,1.009,87,3.501,94,3.323,95,1.802,99,1.229,100,2.867,101,3.096,103,3.899,105,2.498,106,1.479,107,3.561,111,1.204,113,1.257,118,0.126,133,2.387,134,1.197,141,2.985,153,3.561,154,2.021,165,1.246,167,3.096,172,0.177,176,0.006,177,0.006,178,0.453,180,0.2,182,0.936,187,0.324,189,1.212,223,1.204,224,0.2,229,1.625,398,0.79,418,1.91,464,3.479,513,2.709,710,1.142,713,1.863,735,2.709,846,3.393,998,1.997,1072,2.242,1090,2.448,1175,3.562,1182,2.072,1183,1.69,1308,1.802,1315,2.072,1352,3.7,1406,3.852,1414,3.067,1418,2.709,1420,2.242,1430,2.242,1434,3.108,1444,2.153,1451,5.016,1462,4.638,1465,2.569,1466,2.569,1467,2.569,1469,3.639,1474,5.27,1481,3.639,1484,3.639,1486,6.254,1487,3.723,1488,4.311,1489,2.871,1490,3.639,1491,2.871,1492,3.639,1493,2.871,1494,3.639,1495,5.254,1496,4.638,1497,4.92,1498,3.981,1499,3.981,1500,3.639,1501,3.639,1502,2.871,1503,4.934,1504,2.871,1505,4.934,1506,2.871,1507,3.981,1508,4.934,1509,2.871,1510,2.871,1511,2.448,1512,3.393,1513,5.045,1514,3.639,1515,5.791,1516,3.639,1517,3.639,1518,2.569,1519,2.569,1520,2.448,1521,6.254,1522,6.969,1523,5.045,1524,5.045,1525,3.639,1526,3.639,1527,3.639,1528,3.639,1529,3.639,1530,3.639,2054,5.735,2055,4.136,2056,4.136,2057,4.136,2058,4.136,2059,4.136,2060,4.136,2061,4.136,2062,4.136,2063,4.136,2064,4.136,2065,4.136,2066,4.136,2067,4.136]],["title/classes/ODataParserOptions.html",[178,0.339,1072,2.329]],["body/classes/ODataParserOptions.html",[1,3.893,3,0.098,4,0.086,5,0.098,6,0.1,9,2.427,10,0.062,11,0.625,12,0.178,13,3.351,14,2.661,15,2.071,16,3.598,17,3,18,1.481,19,2.661,20,2.777,21,2.556,23,0.091,24,0.01,25,3.108,26,3.235,27,0.639,28,0.47,30,3.565,33,0.112,34,3.819,38,1.946,41,2.661,48,1.78,51,2.715,71,2.459,72,3.822,73,4.132,74,2.145,75,0.167,76,2.661,77,2.661,78,2.556,79,3.641,80,3.641,81,2.661,82,0.563,83,0.85,84,2.459,85,2.777,86,2.459,87,3.215,97,3.448,98,2.211,104,2.371,118,0.074,119,1.78,172,0.11,176,0.007,177,0.007,178,0.508,180,0.237,187,0.287,223,2.09,224,0.237,227,1.221,710,1.355,713,2.211,812,4.773,865,2.205,996,3.931,997,4.319,998,3.468,1000,2.288,1002,4.319,1003,3.64,1004,3.641,1006,5.664,1007,2.661,1010,3.931,1011,3.64,1013,5.664,1014,5.664,1019,4.319,1020,3.408,1023,3.408,1024,4.319,1025,3.931,1027,5.664,1028,5.664,1029,5.75,1030,3.931,1031,6.627,1032,7.283,1033,4.319,1034,3.351,1035,4.319,1036,4.319,1037,7.146,1038,7.146,1039,7.146,1040,7.146,1041,7.146,1042,7.146,1043,7.146,1044,4.319,1045,4.319,1046,4.319,1047,4.319,1048,4.319,1049,4.319,1050,5.154,1051,5.154,1052,5.154,1053,4.319,1054,4.319,1055,3.931,1056,4.319,1057,3.931,1058,4.319,1059,4.319,1060,4.319,1061,3.931,1062,4.319,1063,3.931,1064,4.319,1065,4.319,1066,4.319,1067,4.319,1068,4.319,1069,4.319,1070,4.319,1071,5.154,1072,3.489,2068,6.438,2069,4.91,2070,4.91]],["title/classes/ODataPathSegments.html",[178,0.339,1158,2.983]],["body/classes/ODataPathSegments.html",[3,0.076,4,0.067,5,0.076,6,0.108,10,0.069,11,0.529,12,0.2,18,1.824,22,2.5,23,0.11,24,0.01,27,0.541,28,0.494,33,0.095,39,3.053,46,1.941,49,2.537,57,1.164,59,0.864,64,1.729,75,0.176,83,1.015,99,0.717,104,1.854,106,1.505,111,1.118,113,1.336,118,0.131,119,2.495,152,2.693,165,1.062,166,2.537,172,0.182,176,0.006,177,0.006,178,0.303,180,0.186,182,0.888,187,0.319,189,1.241,199,2.568,200,2.292,218,1.279,224,0.186,226,2.032,227,0.955,391,4.036,398,0.75,578,4.595,710,2.005,713,1.729,830,4.038,846,2.272,850,3.075,861,2.386,927,4.071,1007,3.729,1034,2.834,1085,1.999,1105,2.386,1158,4.39,1178,3.075,1183,2.225,1212,5.415,1219,3.379,1319,3.779,1352,2.834,1353,4.358,1354,3.075,1355,3.075,1585,3.428,1587,2.081,1604,4.757,1715,1.999,1718,2.386,1789,5.385,1790,5.385,1791,2.847,1792,4.689,2071,3.075,2072,6.324,2073,6.324,2074,6.053,2075,4.789,2076,5.675,2077,5.444,2078,5.444,2079,3.84,2080,3.84,2081,5.444,2082,5.877,2083,3.84,2084,3.84,2085,3.84,2086,3.84,2087,4.358,2088,3.84,2089,3.84,2090,3.84,2091,3.84,2092,3.84,2093,3.84,2094,3.84,2095,3.84,2096,3.84,2097,3.84,2098,5.508,2099,3.84,2100,3.84,2101,2.847,2102,3.379,2103,3.379,2104,3.84,2105,3.84,2106,5.444,2107,4.789,2108,6.324,2109,3.84,2110,3.84,2111,3.84,2112,3.84,2113,3.84,2114,3.84,2115,3.84,2116,5.444,2117,3.84,2118,3.379,2119,3.84,2120,3.84,2121,3.84,2122,3.84,2123,3.84,2124,3.84,2125,6.88,2126,3.84,2127,6.324,2128,3.84,2129,3.84,2130,3.84,2131,3.84,2132,3.84,2133,5.444,2134,6.324,2135,3.379,2136,3.379,2137,3.379,2138,3.379,2139,3.84,2140,3.84,2141,3.84,2142,5.444,2143,3.84,2144,3.84,2145,3.84,2146,3.84,2147,3.84,2148,3.84,2149,3.84,2150,3.84,2151,3.84,2152,3.84,2153,5.444,2154,3.84,2155,3.84,2156,3.84,2157,5.444,2158,3.84,2159,3.84,2160,3.84]],["title/classes/ODataPathSegmentsHandler.html",[178,0.339,2161,3.441]],["body/classes/ODataPathSegmentsHandler.html",[3,0.11,4,0.096,5,0.11,6,0.11,10,0.07,12,0.172,23,0.096,24,0.01,28,0.522,33,0.121,49,2.572,52,2.888,53,3.712,54,2.142,55,4.147,57,1.291,59,1.264,60,2.581,75,0.138,83,1.054,99,1.296,113,1.35,118,0.114,166,3.234,172,0.155,176,0.008,177,0.008,178,0.548,180,0.267,182,1.132,187,0.323,189,1.276,224,0.267,226,2.06,364,2.001,398,0.76,710,1.916,1085,2.873,1158,5.529,1212,4.971,1271,4.818,1604,5.487,1715,2.873,2075,4.855,2076,4.818,2082,4.092,2087,5.556,2101,4.092,2161,5.556,2162,4.855,2163,5.519,2164,5.519,2165,5.519,2166,5.519,2167,5.519,2168,5.519,2169,5.519,2170,5.519,2171,4.418,2172,4.855,2173,4.855,2174,6.106,2175,4.855,2176,6.106,2177,4.855,2178,6.679,2179,4.855,2180,4.855,2181,4.855,2182,4.855,2183,6.679,2184,4.855,2185,4.855,2186,4.855,2187,4.855,2188,4.855,2189,4.855,2190,4.855,2191,4.855,2192,4.855,2193,4.855]],["title/classes/ODataPropertyAnnotations.html",[178,0.339,948,2.814]],["body/classes/ODataPropertyAnnotations.html",[3,0.093,4,0.082,5,0.093,6,0.06,8,1.032,10,0.06,11,0.683,12,0.155,15,1.984,22,2.364,23,0.107,24,0.01,26,3.376,28,0.41,29,3.661,30,3.376,33,0.131,45,1.179,46,2.159,51,3.162,52,1.706,58,2.049,68,2.049,69,2.049,70,2.118,75,0.173,83,1.072,99,1.4,113,1.274,118,0.129,135,1.611,165,1.086,172,0.157,176,0.007,177,0.007,178,0.592,180,0.227,182,1.021,187,0.282,189,1.055,217,1.749,224,0.227,225,1.974,388,2.085,461,3.162,467,2.787,710,1.299,762,3.888,916,2.192,925,5.905,926,3.488,927,4.847,928,4.657,930,2.784,931,4.098,934,4.64,937,5.787,943,3.488,944,3.488,945,3.488,946,3.488,947,2.271,948,5.112,949,5.214,950,3.277,951,4.882,952,3.488,953,4.606,954,3.488,955,2.922,956,3.488,957,3.488,958,3.488,959,3.488,960,3.488,961,3.488,962,4.64,963,4.64,964,3.488,965,3.488,966,3.488,967,3.488,968,3.488,969,3.488,970,3.488,971,3.488,972,3.488,973,5.214,974,3.488,975,3.488,976,3.488,977,4.64,978,5.951,979,4.64,980,4.64,981,4.64,982,4.606,983,3.488,984,3.488,985,3.488,986,3.488,987,3.488,988,3.488,989,3.875,990,5.214,991,3.488,992,4.64,993,3.488,994,3.488,995,3.488,1532,3.766,1536,3.766,2194,4.704,2195,4.704]],["title/classes/ODataQueryOptionHandler.html",[178,0.339,2196,3.441]],["body/classes/ODataQueryOptionHandler.html",[3,0.07,4,0.062,5,0.07,6,0.108,9,1.536,10,0.065,12,0.202,22,2.221,23,0.108,24,0.01,25,3.203,27,0.451,28,0.461,33,0.09,46,2.382,57,1.265,61,2.798,62,2.798,63,2.786,64,2.987,65,1.846,66,3.323,67,3.203,68,2.889,69,2.889,70,2.987,71,1.776,74,1.713,75,0.174,82,0.907,83,1.041,102,3.4,103,1.712,110,4.822,111,2.049,113,1.291,114,2.635,118,0.13,134,1.28,165,0.547,172,0.182,175,2.724,176,0.006,177,0.006,178,0.406,180,0.171,182,0.839,187,0.319,189,1.265,195,1.324,200,2.21,218,2.015,224,0.249,226,1.919,364,1.286,398,0.708,504,2.908,578,4.206,710,1.419,854,3.119,861,2.203,865,1.761,882,5.321,1004,2.005,1031,2.839,1183,2.101,1271,2.461,1372,3.367,1628,3.579,1715,1.846,1721,2.322,1769,4.121,1861,2.629,1911,6.958,2196,7.005,2197,3.546,2198,6.634,2199,5.141,2200,5.141,2201,5.836,2202,6.634,2203,4.523,2204,5.141,2205,3.546,2206,3.546,2207,4.523,2208,3.546,2209,5.141,2210,3.546,2211,5.141,2212,3.546,2213,5.141,2214,3.546,2215,3.546,2216,3.546,2217,5.141,2218,6.634,2219,3.546,2220,5.141,2221,3.546,2222,5.141,2223,3.546,2224,5.141,2225,3.546,2226,5.141,2227,3.546,2228,3.546,2229,5.141,2230,3.546,2231,5.141,2232,3.546,2233,3.119,2234,3.546,2235,7.571,2236,3.119,2237,4.116,2238,4.116,2239,3.546,2240,8.302,2241,3.546,2242,3.546,2243,6.048,2244,3.546,2245,3.546,2246,3.546,2247,3.546,2248,5.141,2249,5.141,2250,3.546,2251,3.546,2252,3.546,2253,3.546,2254,3.546,2255,7.909,2256,3.546,2257,3.546,2258,6.048,2259,3.546,2260,5.141,2261,3.546,2262,3.546,2263,3.546,2264,3.546,2265,3.546,2266,3.546,2267,3.546,2268,6.048,2269,6.048,2270,6.048,2271,6.048,2272,3.546,2273,5.141,2274,5.141,2275,3.546,2276,5.141,2277,3.546,2278,3.546,2279,7.344,2280,5.141,2281,6.048,2282,6.048,2283,3.119,2284,6.048,2285,6.048,2286,6.048,2287,3.546,2288,3.546,2289,5.141,2290,3.546,2291,5.141,2292,3.546,2293,5.141,2294,3.546,2295,5.141,2296,3.119,2297,3.546,2298,5.141,2299,3.119,2300,3.546,2301,5.141,2302,3.546,2303,5.141,2304,3.546,2305,5.141,2306,3.546,2307,3.546,2308,3.546,2309,3.546,2310,3.546,2311,3.546,2312,3.546,2313,3.546,2314,3.546,2315,3.546,2316,3.546,2317,3.546,2318,3.546,2319,3.546,2320,3.546,2321,3.546,2322,3.546,2323,3.546,2324,3.546,2325,3.546,2326,3.546,2327,3.546,2328,3.546]],["title/classes/ODataQueryOptions.html",[178,0.339,2238,3.441]],["body/classes/ODataQueryOptions.html",[3,0.087,4,0.077,5,0.087,6,0.11,9,2.483,10,0.056,11,0.581,12,0.195,18,1.377,22,2.144,23,0.109,24,0.01,25,4.233,27,0.328,28,0.5,33,0.104,57,1.273,61,2.867,62,2.867,63,2.384,64,3.285,65,2.29,66,3.405,67,3.282,68,1.916,69,1.916,70,1.981,75,0.167,82,0.686,83,1.004,104,2.124,106,1.117,110,4.315,111,1.978,113,0.949,118,0.129,134,0.8,152,2.416,165,0.923,172,0.183,176,0.007,177,0.007,178,0.347,180,0.213,182,0.976,187,0.323,189,1.261,195,1.642,196,2.3,199,2.723,200,2.43,215,2.233,224,0.213,398,0.824,504,2.488,578,3.242,710,1.651,861,2.732,927,4.317,1178,3.522,1183,1.798,1315,2.997,1372,3.918,1378,3.716,1715,2.29,1876,3.261,1891,4.153,1892,5.064,2074,6.418,2098,4.789,2102,3.87,2135,3.87,2136,3.87,2137,3.87,2138,3.87,2196,3.522,2201,6.713,2207,6.713,2235,7.391,2236,3.87,2237,5.84,2238,5.442,2283,5.263,2296,5.263,2299,5.263,2329,3.87,2330,5.982,2331,6.798,2332,7.295,2333,5.982,2334,5.982,2335,4.399,2336,4.399,2337,5.982,2338,7.295,2339,4.399,2340,5.982,2341,4.399,2342,4.399,2343,4.399,2344,5.982,2345,4.399,2346,4.399,2347,4.399,2348,4.399,2349,4.399,2350,4.399,2351,4.399,2352,5.982,2353,5.982,2354,5.982,2355,5.982,2356,5.982,2357,5.982,2358,5.982,2359,5.982,2360,5.981,2361,4.399,2362,4.399,2363,6.798,2364,6.798,2365,4.399,2366,5.982,2367,4.399,2368,4.399,2369,4.399,2370,4.399,2371,4.399,2372,4.399,2373,4.399,2374,4.399,2375,4.399,2376,4.399,2377,4.399,2378,4.399,2379,4.399,2380,6.798,2381,4.399,2382,4.399,2383,4.399,2384,4.399,2385,4.399,2386,4.399,2387,4.399,2388,4.399,2389,4.399,2390,4.399,2391,4.399]],["title/classes/ODataReferential.html",[178,0.339,1729,3.186]],["body/classes/ODataReferential.html",[3,0.047,4,0.041,5,0.047,6,0.068,9,2.571,10,0.03,11,0.459,12,0.059,22,1.195,23,0.104,24,0.01,27,0.56,28,0.431,33,0.103,46,1.656,48,1.374,54,1.688,57,1.27,59,0.377,61,1.003,62,1.599,74,0.792,75,0.172,82,0.676,83,1.021,87,2.973,91,2.808,92,2.069,93,2.461,94,3.063,95,1.651,99,1.424,100,1.651,101,1.651,105,1.651,106,1.522,107,2.368,113,1.395,114,2.35,118,0.123,119,0.862,121,1.899,133,1.714,134,1.198,135,0.814,139,1.973,149,3.404,151,0.75,152,0.73,153,1.191,154,0.73,155,1.884,156,0.75,157,0.75,158,1.289,159,2.735,160,1.289,162,1.238,163,1.238,165,1.159,166,1.108,167,2.735,168,2.022,172,0.053,175,2.429,176,0.004,177,0.004,178,0.426,180,0.115,187,0.178,189,0.569,200,0.792,217,1.562,218,1.797,220,1.765,223,1.103,224,0.285,227,0.943,229,1.779,464,2.746,465,1.108,545,2.129,558,3.035,686,2.811,709,3.557,710,1.046,713,1.071,735,1.557,830,3.429,846,2.243,848,1.763,861,1.477,862,1.763,912,2.461,916,1.767,947,3.563,950,1.108,955,1.477,989,2.845,1000,2.203,1007,3.403,1034,2.461,1072,1.289,1165,1.65,1172,1.477,1175,4.092,1182,2.368,1183,2.566,1306,1.65,1308,2.059,1315,1.191,1352,3.269,1378,1.477,1406,2.055,1420,2.562,1430,1.289,1434,2.562,1444,1.238,1451,4.738,1462,3.66,1465,1.477,1466,1.477,1467,1.477,1487,3.05,1488,5.338,1489,4.748,1491,3.282,1493,3.282,1495,4.993,1496,3.9,1497,4.249,1498,3.282,1499,2.631,1502,1.65,1503,2.631,1504,1.65,1505,1.65,1506,2.631,1507,2.631,1508,1.65,1509,2.631,1510,1.65,1511,1.407,1512,2.797,1518,2.355,1519,1.477,1520,1.407,1583,1.345,1585,1.289,1586,1.345,1587,2.923,1588,1.345,1594,1.407,1595,1.345,1628,3.487,1634,2.937,1636,2.243,1647,1.65,1688,1.65,1711,2.811,1712,3.999,1715,1.238,1716,4.318,1717,1.65,1718,1.477,1719,1.65,1720,2.811,1721,2.482,1722,2.811,1723,5.027,1724,2.811,1725,3.999,1726,2.811,1727,1.903,1728,3.035,1729,3.505,1730,1.903,1731,1.903,1732,3.785,1733,1.903,1734,3.035,1735,1.65,1736,1.903,1737,1.903,1738,1.903,1739,4.717,1740,1.903,1741,4.717,1742,1.903,1743,3.035,1744,3.035,1745,3.035,1746,3.035,1747,1.903,1748,1.903,1749,1.903,1750,1.903,1751,2.631,1752,5.476,1753,1.903,1754,1.903,1755,1.903,1756,1.903,1757,1.903,1758,1.903,1759,1.903,1760,1.903,1761,1.903,1762,3.035,1763,3.035,1764,3.035,1765,3.035,1766,2.811,1767,1.903,1768,3.035,1769,4.249,1770,1.903,1771,1.903,1772,3.035,1773,1.903,1774,1.903,1775,1.903,1776,3.035,1777,1.903,1778,2.355,1779,3.035,1780,3.035,1781,3.035,1782,3.035,1783,3.035,1784,3.035,1785,1.903,1786,5.027,1787,3.785,1788,1.903,1789,4.369,1790,4.369,1791,1.763,1792,3.505,1793,1.903,1794,1.903,1795,1.903,1796,1.903,1797,1.903,1798,1.903,1799,1.903,1800,1.903,1801,1.903,1802,1.903,1803,1.903,1804,1.903,1805,1.903,1806,1.903,1807,1.903,1808,1.903,1809,1.903,1810,1.903,1811,1.903,1812,1.903,1813,1.903,1814,1.903,1815,3.785,1816,3.035,1817,1.903,1818,1.903,1819,1.903,1820,1.903,1821,3.035,1822,1.903,1823,1.903,1824,1.65,1825,1.903,1826,1.903,1827,1.903,1828,1.903,1829,1.903,1830,4.995,1831,4.318,1832,1.903,1833,1.903,1834,1.903,1835,1.903,1836,1.903,1837,1.903,1838,2.811,1839,1.903,1840,1.903,1841,1.903,1842,4.318,1843,4.748,1844,3.035,1845,3.035,1846,1.903,1847,1.903,1848,4.318,1849,1.903,1850,1.903,1851,1.903,1852,1.903,1853,1.903,1854,1.903,1855,1.903,1856,1.903,1857,1.903,1858,1.903,1859,1.903,1860,1.903,1861,1.763,1862,1.903,1863,1.903,1864,1.903,1865,1.903,1866,1.763,1867,1.903,1868,1.903,1869,1.903,1870,1.903,1871,1.903,1872,3.035,1873,3.035,1874,1.903,1875,1.903,1876,1.763,1877,1.903,1878,1.903,1879,1.903,1880,1.903,1881,3.035,1882,4.717,1883,1.903,1884,1.903,1885,3.035,1886,1.903,1887,3.035,1888,1.903,1889,3.035,1890,1.903,1891,1.65,1892,1.65,1893,3.035,1894,1.903,1895,3.035,1896,1.903,1897,1.903,1898,1.903,1899,1.903,1900,1.903,1901,3.785,1902,1.903,1903,1.903,2392,2.378]],["title/classes/ODataRequest.html",[178,0.339,1125,2.431]],["body/classes/ODataRequest.html",[3,0.066,4,0.058,5,0.066,6,0.111,10,0.042,11,0.478,12,0.184,13,2.561,14,3.494,15,1.408,16,3.23,17,3.203,18,1.756,19,3.167,21,3.356,22,1.552,23,0.108,24,0.01,25,3.113,27,0.59,28,0.471,33,0.058,38,3.221,39,2.821,40,3.743,46,2.643,50,1.81,51,1.408,54,1.734,57,0.968,58,1.455,61,1.408,62,1.408,64,1.504,67,1.612,68,1.455,69,1.455,74,1.112,75,0.17,76,1.81,78,1.738,81,1.81,83,0.995,98,3.095,102,2.821,104,1.612,106,1.343,113,1.236,114,2.143,118,0.103,123,1.81,135,1.144,138,2.821,172,0.075,175,2.216,176,0.006,177,0.006,178,0.263,180,0.161,182,0.803,187,0.329,189,0.877,217,1.603,218,1.112,224,0.161,227,0.83,404,4.005,489,3.095,578,4.03,710,0.922,713,1.504,719,7.175,830,3.356,865,1.685,947,3.113,1003,2.476,1020,4.475,1023,2.318,1034,3.578,1057,2.673,1061,2.673,1063,2.673,1078,3.578,1085,3.743,1087,4.222,1125,2.783,1143,2.673,1152,5.161,1154,2.318,1156,4.78,1159,4.78,1171,5.672,1172,3.056,1183,3.322,1196,6.047,1228,2.476,1232,5.14,1235,5.672,1245,2.938,1715,1.738,2393,3.339,2394,5.843,2395,5.843,2396,5.843,2397,5.843,2398,5.843,2399,5.843,2400,5.843,2401,6.447,2402,6.447,2403,6.447,2404,6.447,2405,5.843,2406,5.843,2407,4.329,2408,4.92,2409,2.938,2410,3.339,2411,3.339,2412,3.339,2413,6.447,2414,3.339,2415,3.339,2416,6.447,2417,6.447,2418,3.339,2419,3.339,2420,3.339,2421,3.339,2422,3.339,2423,3.339,2424,3.339,2425,3.339,2426,3.339,2427,3.339,2428,3.339,2429,3.339,2430,3.339,2431,3.339,2432,3.339,2433,3.339,2434,3.339,2435,3.339,2436,3.339,2437,3.339,2438,3.339,2439,3.339,2440,3.339,2441,3.339,2442,3.339,2443,3.339,2444,3.339,2445,3.339,2446,3.339,2447,3.339,2448,3.339,2449,4.92,2450,5.843,2451,3.339,2452,2.938,2453,2.938,2454,2.938,2455,3.339,2456,3.339,2457,3.339,2458,3.339,2459,6.873,2460,3.339,2461,6.447,2462,4.92,2463,3.339,2464,4.92,2465,3.339,2466,3.339,2467,3.339,2468,3.339,2469,3.339,2470,4.92,2471,6.447,2472,3.339,2473,5.843,2474,4.92,2475,5.843,2476,3.339,2477,4.92,2478,3.339,2479,3.339,2480,6.873,2481,3.339,2482,3.339,2483,3.339,2484,3.339,2485,3.339,2486,4.92,2487,3.339,2488,3.339,2489,3.339,2490,3.339,2491,3.339,2492,3.339,2493,3.339,2494,3.339,2495,3.339,2496,3.339,2497,4.92,2498,3.339,2499,3.339,2500,3.339,2501,3.339,2502,3.339,2503,3.339,2504,3.339,2505,3.339,2506,4.92,2507,3.339,2508,3.339,2509,3.339,2510,4.92,2511,3.339,2512,3.339,2513,4.92,2514,3.339,2515,3.339,2516,3.339,2517,3.339,2518,3.339,2519,3.339,2520,3.339,2521,3.339,2522,6.447,2523,3.339,2524,7.191,2525,3.339,2526,3.339,2527,3.339,2528,3.339,2529,3.339,2530,3.339,2531,4.92,2532,4.92,2533,3.339,2534,4.92,2535,3.339,2536,3.339,2537,3.339,2538,3.339,2539,3.339,2540,3.339]],["title/classes/ODataResponse.html",[178,0.339,1160,2.543]],["body/classes/ODataResponse.html",[3,0.069,4,0.061,5,0.069,6,0.109,8,0.697,9,2.472,10,0.044,11,0.492,12,0.201,15,2.521,17,3.398,22,2.072,23,0.106,24,0.01,28,0.53,30,1.564,33,0.061,35,2.864,36,1.964,37,1.964,46,2.515,54,2.15,57,1.2,72,1.677,75,0.156,82,0.581,83,0.959,97,1.513,98,3.755,99,1.557,102,3.521,106,1.621,109,4.104,113,1.157,118,0.11,135,2.25,138,3.86,152,2.016,165,1.162,166,1.619,172,0.156,176,0.006,177,0.006,178,0.274,180,0.168,182,0.826,187,0.321,189,1.216,200,2.188,217,2.125,224,0.168,489,3.6,710,1.398,711,3.056,713,1.564,718,5.406,719,5.838,865,1.735,928,4.529,930,3.537,931,3.317,948,3.317,950,2.786,951,4.149,953,3.317,982,3.317,1003,4.871,1004,2.864,1020,5.55,1023,2.411,1034,3.112,1055,2.781,1078,3.919,1085,3.919,1110,4.432,1111,4.149,1112,4.785,1125,4.257,1129,5.406,1136,3.056,1143,2.781,1152,4.055,1153,6.415,1154,2.411,1155,3.056,1156,4.871,1159,4.871,1160,4.315,1168,3.381,1183,1.419,1186,5.406,1226,3.914,1227,4.456,1228,2.575,1277,5.259,1400,4.055,1424,1.883,1891,2.411,1892,2.411,2360,6.145,2407,4.456,2409,3.056,2452,3.056,2453,3.056,2454,3.056,2541,3.473,2542,5.978,2543,5.978,2544,5.978,2545,5.978,2546,5.065,2547,5.978,2548,5.065,2549,3.473,2550,3.473,2551,5.259,2552,3.473,2553,3.473,2554,3.473,2555,3.473,2556,7.716,2557,3.473,2558,5.065,2559,3.473,2560,3.473,2561,3.473,2562,3.473,2563,3.473,2564,3.473,2565,3.473,2566,3.473,2567,3.473,2568,3.473,2569,3.473,2570,3.473,2571,3.473,2572,3.473,2573,5.065,2574,3.473,2575,3.473,2576,5.065,2577,5.065,2578,3.473,2579,3.473,2580,3.473,2581,3.473,2582,3.473,2583,3.473,2584,3.473,2585,3.473,2586,3.473,2587,3.473,2588,3.473,2589,5.978,2590,3.473,2591,3.473,2592,3.473,2593,3.473,2594,3.473,2595,5.978,2596,3.473,2597,3.473,2598,3.473,2599,3.056,2600,3.473,2601,3.473,2602,3.473,2603,3.473,2604,5.978,2605,3.473,2606,3.473,2607,3.473,2608,4.055,2609,3.473,2610,3.473,2611,4.456,2612,3.473,2613,3.473,2614,5.978,2615,3.473,2616,3.473,2617,5.978,2618,3.473,2619,3.473,2620,6.985,2621,5.978,2622,3.473,2623,5.065,2624,3.473,2625,5.978,2626,3.473,2627,6.415,2628,5.978,2629,5.978,2630,5.065,2631,5.065,2632,5.978,2633,3.473,2634,3.473,2635,3.473,2636,3.473,2637,3.473,2638,3.473]],["title/classes/ODataResponseOptions.html",[178,0.339,2551,3.441]],["body/classes/ODataResponseOptions.html",[3,0.098,4,0.086,5,0.098,6,0.112,9,2.28,10,0.062,11,0.626,12,0.221,23,0.111,24,0.01,26,3.435,27,0.606,28,0.471,30,3.435,33,0.086,34,3.822,38,3.023,44,3.645,45,1.205,46,2.207,47,3.003,51,3.032,57,0.967,72,3.683,73,3.896,75,0.174,77,4.135,78,3.742,82,0.739,83,0.763,88,4.065,89,4.254,90,4.686,106,0.918,111,2.22,118,0.119,165,0.759,172,0.177,176,0.007,177,0.007,178,0.388,180,0.238,182,1.051,187,0.331,189,1.189,223,1.875,224,0.238,227,1.603,411,5.755,710,1.357,712,3.937,713,2.215,812,4.778,865,2.208,927,4.514,998,3.112,1000,2.292,1004,2.781,1025,3.937,1029,5.159,1030,3.937,1050,3.937,1051,3.937,1052,3.937,1071,3.937,1165,3.414,1183,2.634,1225,4.327,1378,3.055,1769,4.739,1838,5.33,2551,5.755,2599,4.327,2608,6.63,2611,4.327,2639,4.918,2640,6.445,2641,6.445,2642,6.445,2643,6.445,2644,6.445,2645,4.918,2646,4.918,2647,4.918,2648,4.918,2649,4.918,2650,4.918,2651,4.918,2652,4.918,2653,6.445,2654,4.918,2655,6.445,2656,4.918,2657,6.445,2658,4.918,2659,6.445,2660,4.918,2661,4.918,2662,4.918,2663,6.445,2664,6.445,2665,4.918,2666,4.918,2667,4.918,2668,4.918,2669,4.918,2670,4.918,2671,4.918,2672,4.918,2673,4.918,2674,4.918,2675,4.327,2676,4.918,2677,4.918,2678,4.918,2679,4.918,2680,4.918,2681,4.918,2682,4.918,2683,4.918,2684,4.918,2685,4.918,2686,4.918]],["title/classes/ODataSchema.html",[178,0.339,1408,2.814]],["body/classes/ODataSchema.html",[3,0.085,4,0.075,5,0.085,6,0.111,10,0.054,11,0.572,12,0.207,22,1.857,23,0.114,24,0.01,27,0.32,28,0.541,33,0.075,45,1.427,48,1.558,59,1.066,74,1.432,75,0.177,83,0.947,94,2.333,99,1.254,111,1.713,113,1.147,114,1.872,118,0.123,127,4.086,133,2.435,134,1.221,135,2.301,136,3.916,138,3.488,140,4.275,142,3.974,144,3.64,165,1.168,172,0.188,175,1.935,176,0.007,177,0.007,178,0.339,180,0.208,182,0.961,187,0.329,189,1.255,224,0.208,227,1.464,398,0.592,464,2.003,489,2.651,504,2.43,545,3.604,642,4.365,709,2.651,710,1.186,865,2.017,912,3.94,916,2.744,950,2.003,989,2.843,998,2.843,1000,3.642,1004,2.43,1078,4.242,1156,5.795,1228,3.186,1308,3.297,1352,3.065,1404,5.784,1406,4.236,1408,3.856,1417,3.186,1418,2.814,1424,2.329,1462,4.488,1511,2.543,1512,3.484,1579,5.377,1581,4.087,1582,4.365,1583,3.33,1585,3.64,1586,3.33,1587,3.916,1588,3.33,1593,3.186,1595,2.43,1641,3.44,1766,3.186,1904,5.784,2687,4.297,2688,5.888,2689,5.888,2690,5.888,2691,5.888,2692,5.888,2693,5.888,2694,4.297,2695,4.297,2696,4.297,2697,4.297,2698,7.224,2699,4.297,2700,4.297,2701,4.297,2702,4.297,2703,4.297,2704,5.888,2705,7.568,2706,4.297,2707,5.888,2708,4.297,2709,5.888,2710,4.297,2711,5.888,2712,4.297,2713,5.888,2714,4.297,2715,4.297,2716,4.297,2717,4.297,2718,4.297,2719,4.297,2720,4.297,2721,4.297,2722,4.297,2723,4.297,2724,4.297,2725,4.297,2726,4.297,2727,4.297,2728,4.297,2729,4.297,2730,4.297,2731,4.297,2732,4.297,2733,4.297,2734,4.297,2735,4.297,2736,4.297,2737,4.297,2738,6.716,2739,4.297,2740,4.297,2741,4.297,2742,4.297,2743,6.716,2744,4.297,2745,4.297,2746,4.297,2747,4.297,2748,4.297,2749,4.297]],["title/injectables/ODataServiceFactory.html",[2033,3.186,2750,3.781]],["body/injectables/ODataServiceFactory.html",[3,0.113,4,0.099,5,0.113,6,0.102,8,0.975,10,0.072,12,0.191,23,0.111,24,0.01,28,0.528,33,0.099,52,2.793,53,4.033,74,2.684,75,0.176,83,0.838,99,1.322,118,0.133,165,1.093,172,0.185,174,4.036,176,0.008,177,0.008,178,0.608,182,1.155,187,0.29,189,1.063,224,0.276,364,2.066,398,0.975,489,3.929,504,4.686,947,3.89,1078,4.194,1079,5.013,1080,5.974,1081,7.728,1083,6.167,1210,6.45,1424,3.837,1626,6.45,1628,4.767,2033,5.249,2039,4.225,2750,6.229,2751,5.013,2752,5.698,2753,5.698,2754,5.698,2755,5.698,2756,8.057,2757,5.698,2758,5.698,2759,8.057,2760,6.45,2761,7.08]],["title/classes/ODataSingletonService.html",[178,0.339,2760,3.441]],["body/classes/ODataSingletonService.html",[3,0.094,4,0.083,5,0.094,6,0.095,8,0.867,9,2.664,10,0.06,12,0.2,15,3.394,18,1.449,23,0.11,24,0.01,28,0.493,31,3.632,32,2.213,33,0.083,45,1.45,53,3.885,74,2.778,75,0.125,83,0.891,97,3.278,106,1.176,111,1.382,118,0.121,152,1.933,164,4.362,167,3.506,172,0.19,174,4.032,176,0.007,177,0.007,178,0.375,180,0.23,182,1.028,187,0.313,189,1.232,217,1.872,225,2.538,398,1.078,461,3.302,489,3.994,709,2.836,762,4.675,865,2.157,1004,3.562,1073,4.905,1075,4.67,1076,4.67,1077,4.67,1084,3.521,1085,4.274,1086,4.67,1087,5.27,1088,5.587,1090,3.727,1095,3.521,1096,4.67,1102,3.521,1103,4.372,1105,2.95,1111,3.297,1113,2.574,1157,5.239,1168,3.562,1172,4.864,1202,5.541,1424,4.079,1596,5.806,1598,5.967,1601,6.025,1606,3.802,1607,3.802,1608,3.802,1611,3.802,1612,3.802,1614,3.802,1636,4.634,1638,4.178,1640,5.541,1645,6.443,1647,5.587,1675,4.178,1679,4.178,1689,4.178,1690,4.178,2760,5.042,2762,4.749,2763,6.298,2764,6.298,2765,7.067,2766,4.749,2767,4.749,2768,6.217,2769,4.749,2770,4.749,2771,4.749,2772,4.749,2773,4.749,2774,4.749,2775,4.749,2776,4.749,2777,6.298]],["title/classes/ODataStructuredTypeParser.html",[178,0.339,1488,2.814]],["body/classes/ODataStructuredTypeParser.html",[3,0.042,4,0.037,5,0.042,6,0.103,9,2.602,10,0.027,11,0.422,12,0.2,22,1.87,23,0.11,24,0.01,27,0.559,28,0.41,33,0.096,46,1.538,48,1.241,54,1.348,57,1.276,59,0.689,61,0.884,62,1.444,74,0.698,75,0.173,82,0.634,83,1.007,87,3.06,91,2.609,92,2.013,93,2.26,94,3.045,95,2.183,99,1.464,100,2.183,101,2.183,105,1.891,106,1.488,107,2.174,111,1.263,113,1.387,114,2.183,118,0.128,119,1.817,121,1.715,133,2.268,134,1.293,135,0.718,139,2.609,149,3.433,151,0.661,152,0.643,153,1.05,154,0.643,155,1.815,156,0.661,157,0.661,158,1.136,159,2.183,160,1.136,162,2.26,163,2.26,165,1.12,166,2.023,167,2.842,168,1.92,172,0.162,175,2.257,176,0.004,177,0.004,178,0.395,180,0.101,182,0.559,187,0.305,189,1.125,200,0.698,217,1.474,218,1.67,220,1.62,223,1.263,224,0.267,227,0.852,229,1.68,398,0.69,464,2.574,465,0.977,545,1.955,686,2.538,709,3.461,710,0.945,713,0.944,735,1.372,830,3.256,846,2.026,848,1.554,861,1.302,862,3.218,912,2.26,916,1.596,947,3.433,950,0.977,955,1.302,989,2.667,998,1.012,1000,2.336,1007,3.213,1034,2.26,1072,1.136,1165,1.455,1172,1.302,1175,3.886,1182,2.174,1183,2.423,1308,1.891,1315,1.05,1352,3.086,1378,1.302,1406,2.716,1407,2.242,1418,1.372,1420,2.716,1430,1.856,1434,2.716,1444,1.091,1451,4.586,1462,3.432,1465,1.302,1466,1.302,1467,1.302,1487,2.834,1488,5.402,1489,4.529,1491,3.013,1493,3.013,1495,4.87,1496,3.683,1497,4.053,1498,3.013,1499,2.377,1502,1.455,1503,2.377,1504,1.455,1505,1.455,1506,2.377,1507,2.377,1508,1.455,1509,2.377,1510,1.455,1511,1.24,1512,2.568,1518,2.127,1519,1.302,1520,1.24,1583,1.185,1585,1.136,1586,1.185,1587,3.213,1588,1.185,1594,1.24,1595,1.185,1628,3.269,1634,2.696,1636,2.026,1647,2.377,1688,1.455,1711,3.218,1712,6.057,1715,1.091,1716,4.012,1717,1.455,1718,1.302,1719,1.455,1720,2.538,1721,2.242,1722,2.538,1723,5.008,1724,2.538,1725,4.395,1726,2.538,1727,1.678,1728,2.741,1729,2.538,1730,1.678,1731,1.678,1732,3.475,1733,1.678,1734,2.741,1735,1.455,1736,1.678,1737,1.678,1738,1.678,1739,4.423,1740,1.678,1741,4.423,1742,1.678,1743,2.741,1744,2.741,1745,2.741,1746,2.741,1747,1.678,1748,1.678,1749,1.678,1750,1.678,1751,3.479,1752,5.224,1753,1.678,1754,1.678,1755,1.678,1756,1.678,1757,1.678,1758,1.678,1759,1.678,1760,1.678,1761,1.678,1762,2.741,1763,2.741,1764,2.741,1765,2.741,1766,2.538,1767,1.678,1768,2.741,1769,4.053,1770,1.678,1771,1.678,1772,2.741,1773,1.678,1774,1.678,1775,1.678,1776,3.475,1777,1.678,1778,2.127,1779,2.741,1780,2.741,1781,2.741,1782,2.741,1783,2.741,1784,2.741,1785,1.678,1786,4.746,1787,3.475,1788,1.678,1789,4.096,1790,4.096,1791,1.554,1792,3.218,1793,1.678,1794,1.678,1795,1.678,1796,1.678,1797,1.678,1798,1.678,1799,1.678,1800,1.678,1801,1.678,1802,1.678,1803,1.678,1804,1.678,1805,1.678,1806,1.678,1807,1.678,1808,1.678,1809,1.678,1810,1.678,1811,1.678,1812,1.678,1813,1.678,1814,1.678,1815,4.423,1816,2.741,1817,1.678,1818,1.678,1819,1.678,1820,1.678,1821,2.741,1822,1.678,1823,1.678,1824,1.455,1825,1.678,1826,1.678,1827,1.678,1828,2.741,1829,1.678,1830,4.834,1831,4.012,1832,1.678,1833,3.475,1834,1.678,1835,1.678,1836,1.678,1837,1.678,1838,2.538,1839,3.475,1840,1.678,1841,1.678,1842,4.012,1843,4.529,1844,2.741,1845,2.741,1846,1.678,1847,1.678,1848,4.012,1849,1.678,1850,1.678,1851,1.678,1852,1.678,1853,1.678,1854,1.678,1855,2.741,1856,1.678,1857,1.678,1858,1.678,1859,1.678,1860,1.678,1861,1.554,1862,1.678,1863,1.678,1864,1.678,1865,1.678,1866,1.554,1867,1.678,1868,1.678,1869,1.678,1870,4.012,1871,1.678,1872,2.741,1873,2.741,1874,1.678,1875,1.678,1876,1.554,1877,1.678,1878,1.678,1879,1.678,1880,1.678,1881,2.741,1882,4.423,1883,1.678,1884,1.678,1885,2.741,1886,1.678,1887,2.741,1888,1.678,1889,2.741,1890,1.678,1891,1.455,1892,1.455,1893,2.741,1894,1.678,1895,2.741,1896,1.678,1897,1.678,1898,1.678,1899,1.678,1900,1.678,1901,3.475,1902,1.678,1903,1.678,1966,2.741,2778,3.424,2779,3.424,2780,3.424,2781,2.096,2782,2.096,2783,2.096,2784,2.096,2785,2.096,2786,2.096,2787,2.096,2788,2.096,2789,2.096,2790,2.096,2791,2.096,2792,2.096,2793,2.096,2794,2.096,2795,2.096,2796,2.096,2797,2.096,2798,2.096,2799,2.096,2800,2.096,2801,2.096,2802,2.096,2803,2.096,2804,2.096]],["title/classes/Operator.html",[178,0.339,204,1.703]],["body/classes/Operator.html",[0,1.391,3,0.058,4,0.051,5,0.058,6,0.082,8,0.832,10,0.037,12,0.111,18,0.675,23,0.095,24,0.01,27,0.656,28,0.293,33,0.152,57,1.348,59,1.087,75,0.172,82,0.337,83,1.075,92,2.154,99,1.655,106,1.01,113,0.959,118,0.103,134,0.534,155,1.38,165,1.392,168,0.901,172,0.1,176,0.005,177,0.005,178,0.665,179,2.143,180,0.142,181,1.128,182,0.729,186,1.199,187,0.227,189,0.67,190,1.199,192,1.199,194,1.163,195,1.667,196,2.949,197,2.823,198,2.911,199,1.095,200,2.446,201,1.77,202,1.199,203,2.658,204,2.715,205,2.143,206,1.163,207,1.163,208,1.199,209,1.199,210,1.199,211,1.199,212,1.199,213,1.199,214,2.395,215,2.952,216,3.587,217,1.111,218,1.488,219,1.199,220,1.095,221,1.199,222,1.163,223,1.893,224,0.292,225,2.419,226,2.952,227,1.345,228,2.658,229,0.832,230,2.658,231,2.47,232,1.199,233,1.199,234,1.825,235,1.199,236,2.143,237,1.199,238,1.199,239,1.199,240,1.199,241,1.199,242,1.199,243,1.199,244,1.199,245,1.825,246,1.825,247,1.199,248,1.199,249,1.199,250,1.825,251,1.825,252,1.199,253,1.199,254,2.143,255,1.199,256,2.47,257,1.199,258,1.825,259,1.199,260,1.199,261,2.143,262,1.199,263,1.77,264,1.199,265,1.199,266,1.199,267,1.199,268,1.199,269,1.199,270,1.199,271,2.143,272,1.199,273,1.199,274,1.199,275,1.199,276,1.199,277,1.199,278,1.199,279,1.199,280,1.199,281,1.199,282,1.199,283,1.199,284,1.199,285,1.199,286,1.199,287,1.199,288,1.163,289,1.199,290,1.199,291,1.199,292,1.199,293,1.199,294,1.199,295,1.199,296,1.199,297,1.199,298,1.199,299,1.199,300,1.199,301,1.199,302,1.199,303,2.143,304,1.199,305,1.199,306,1.199,307,1.199,308,2.143,309,1.199,310,1.825,311,1.199,312,1.199,313,1.825,314,1.199,315,2.143,316,1.199,317,1.199,318,1.199,319,2.658,320,1.825,321,3.443,322,3.595,323,1.825,324,1.199,325,1.199,326,1.199,327,1.199,328,1.199,329,2.143,330,1.199,331,1.199,332,1.199,333,1.199,334,1.199,335,1.199,336,1.199,337,1.199,338,1.199,339,1.199,340,1.199,341,1.199,342,1.199,343,1.199,344,1.199,345,1.199,346,1.199,347,1.199,348,1.199,349,1.199,350,1.199,351,1.199,352,2.143,353,1.199,354,1.199,355,1.199,356,1.199,357,1.199,358,1.199,359,1.199,360,1.199,361,1.199,362,1.199,363,1.199,364,1.62,365,1.825,366,1.199,367,1.199,368,1.199,369,1.128,370,1.199,371,2.143,372,1.825,373,1.825,374,1.77,375,1.199,376,1.199,377,1.199,378,2.143,379,1.199,380,1.199,381,1.199,382,1.199,383,2.8,384,1.199,385,1.199,386,2.8,387,1.199,388,0.978,389,1.199,390,1.199,398,0.404,865,1.53,883,2.582,2805,2.935,2806,2.935,2807,2.935,2808,2.935]],["title/interfaces/Options.html",[0,0.989,9,1.284]],["body/interfaces/Options.html",[0,1.822,1,3.105,2,2.15,3,0.082,4,0.072,5,0.082,6,0.052,7,2.336,8,0.978,9,2.412,10,0.052,11,0.639,12,0.176,13,2.15,14,2.239,15,1.742,16,3.295,17,2.67,18,1.635,19,2.239,20,2.336,21,2.15,23,0.112,24,0.01,25,2.766,26,3.199,27,0.664,28,0.375,29,2.982,30,2.58,31,2.865,32,1.925,33,0.155,34,3.738,35,2.336,36,2.336,37,2.336,38,3.199,39,1.994,40,2.982,41,3.105,42,2.15,43,2.336,44,3.24,45,0.693,46,1.268,47,1.925,48,2.077,49,1.925,50,3.105,51,2.996,52,2.077,53,2.67,54,1.769,55,2.982,56,3.24,57,1.269,58,3.094,59,0.909,60,1.857,61,2.416,62,2.416,63,3.105,64,2.58,65,2.982,66,2.87,67,2.766,68,2.496,69,2.496,70,2.58,71,2.87,72,3.603,73,3.85,74,1.909,75,0.18,76,3.105,77,3.105,78,2.982,79,2.336,80,2.336,81,2.239,82,0.94,83,0.678,84,2.069,85,2.336,86,2.069,87,3.256,88,2.336,89,2.444,90,2.444,91,3.698,92,1.082,93,3.424,94,2.607,95,2.865,96,4.086,97,2.496,98,2.58,99,1.326,100,2.865,101,2.496,102,1.994,103,3.176,104,1.994,105,1.799,106,0.771,107,2.069,108,2.566,109,2.069,110,3.24,111,1.202,112,2.566,113,0.656,114,1.799,115,2.336,116,2.336,117,2.444,118,0.123,119,2.077,120,2.566,121,2.069,122,2.566,123,2.239,124,2.566,125,2.336,126,2.444,127,3.24,128,4.565,129,1.994,130,2.444,131,2.444,132,2.444,133,1.498,134,1.042,135,2.712,136,2.239,137,2.982,138,1.994,139,2.982,140,2.444,141,2.982,142,2.444,143,3.24,144,2.239,145,3.24,146,3.105,147,2.336,148,2.069,149,2.766,150,2.239,151,1.303,152,1.268,153,3.559,154,1.759,155,1.054,156,1.303,157,1.303,158,2.239,159,1.799,160,2.239,161,2.566,162,2.15,163,2.15,164,2.239,165,1.015,166,1.925,167,1.799,168,1.268,169,1.86,170,2.336,171,2.444,172,0.092,173,2.239,174,2.069,175,1.86,176,0.006,177,0.006]],["title/interfaces/OptionsHelper.html",[0,0.989,87,1.813]],["body/interfaces/OptionsHelper.html",[0,1.813,1,3.065,2,2.111,3,0.081,4,0.071,5,0.081,6,0.051,7,2.293,8,1.02,9,2.401,10,0.051,11,0.633,12,0.199,13,2.111,14,2.198,15,1.71,16,3.263,17,2.636,18,1.622,19,2.198,20,2.293,21,2.111,23,0.113,24,0.01,25,2.731,26,3.457,27,0.668,28,0.37,29,3.669,30,3.338,31,2.837,32,1.889,33,0.155,34,3.263,35,2.293,36,2.293,37,2.293,38,3.184,39,1.958,40,2.944,41,3.065,42,2.111,43,2.293,44,3.199,45,0.68,46,1.245,47,1.889,48,2.051,49,1.889,50,3.065,51,3.322,52,2.051,53,2.636,54,1.751,55,2.944,56,3.199,57,1.265,58,3.07,59,0.898,60,1.833,61,2.385,62,2.385,63,3.065,64,2.547,65,2.944,66,2.833,67,2.731,68,2.464,69,2.464,70,2.547,71,2.833,72,2.731,73,2.198,74,1.884,75,0.18,76,4.017,77,4.017,78,3.858,79,2.293,80,2.293,81,2.198,82,0.936,83,0.67,84,2.031,85,2.293,86,2.031,87,3.322,88,2.293,89,2.399,90,2.399,91,3.669,92,1.062,93,3.391,94,2.581,95,2.837,96,4.046,97,2.464,98,2.547,99,1.316,100,2.837,101,2.464,102,1.958,103,3.145,104,1.958,105,1.766,106,0.757,107,2.031,108,2.519,109,2.031,110,3.199,111,1.18,112,2.519,113,0.644,114,1.766,115,2.293,116,2.293,117,2.399,118,0.123,119,2.051,120,2.519,121,2.031,122,2.519,123,2.198,124,2.519,125,2.293,126,2.399,127,3.199,128,4.544,129,1.958,130,2.399,131,2.399,132,2.399,133,1.47,134,1.028,135,2.698,136,2.198,137,2.944,138,1.958,139,2.944,140,2.399,141,2.944,142,2.399,143,3.199,144,2.198,145,3.199,146,3.065,147,2.293,148,2.031,149,2.731,150,2.198,151,1.279,152,1.245,153,3.53,154,1.736,155,1.035,156,1.279,157,1.279,158,2.198,159,1.766,160,2.198,161,2.519,162,2.111,163,2.111,164,2.198,165,1.005,166,1.889,167,1.766,168,1.245,169,1.826,170,2.293,171,2.399,172,0.091,173,2.198,174,2.031,175,1.826,176,0.006,177,0.006]],["title/interfaces/Parser.html",[0,0.989,94,1.703]],["body/interfaces/Parser.html",[0,1.804,1,3.029,2,2.075,3,0.079,4,0.07,5,0.079,6,0.089,7,2.255,8,0.963,9,2.531,10,0.05,11,0.387,12,0.16,13,2.075,14,2.161,15,1.681,16,3.233,17,2.605,18,1.61,19,2.161,20,2.255,21,2.075,23,0.112,24,0.01,25,2.699,26,3.15,27,0.66,28,0.366,29,2.91,30,2.517,31,2.811,32,1.858,33,0.155,34,3.233,35,2.255,36,2.255,37,2.255,38,3.171,39,1.925,40,2.91,41,3.029,42,2.075,43,2.255,44,3.161,45,0.669,46,1.224,47,1.858,48,2.027,49,1.858,50,3.029,51,2.95,52,2.027,53,2.605,54,1.736,55,2.91,56,3.161,57,1.287,58,3.047,59,0.887,60,1.811,61,2.357,62,2.357,63,3.029,64,2.517,65,2.91,66,2.8,67,2.699,68,2.435,69,2.435,70,2.517,71,2.8,72,2.699,73,2.161,74,1.862,75,0.18,76,3.029,77,3.029,78,2.91,79,2.255,80,2.255,81,2.161,82,0.933,83,0.662,84,1.997,85,2.255,86,1.997,87,3.545,88,2.255,89,2.359,90,2.359,91,4.289,92,1.044,93,3.36,94,2.772,95,3.209,96,4.009,97,2.435,98,2.517,99,1.375,100,3.209,101,3.047,102,1.925,103,3.116,104,1.925,105,2.435,106,0.744,107,1.997,108,2.477,109,1.997,110,3.161,111,1.16,112,2.477,113,0.633,114,1.737,115,2.255,116,2.255,117,2.359,118,0.126,119,2.027,120,2.477,121,1.997,122,2.477,123,2.161,124,2.477,125,2.255,126,2.359,127,3.161,128,4.525,129,1.925,130,2.359,131,2.359,132,2.359,133,1.446,134,1.016,135,2.686,136,2.161,137,2.91,138,1.925,139,2.91,140,2.359,141,2.91,142,2.359,143,3.161,144,2.161,145,3.161,146,3.029,147,2.255,148,1.997,149,2.699,150,2.161,151,1.257,152,1.224,153,3.504,154,1.716,155,1.018,156,1.257,157,1.257,158,2.161,159,1.737,160,2.161,161,2.477,162,2.075,163,2.075,164,2.161,165,0.996,166,1.858,167,1.737,168,1.224,169,1.795,170,2.255,171,2.359,172,0.156,173,2.161,174,1.997,175,1.795,176,0.006,177,0.006,182,0.912,187,0.243,189,0.969,398,0.889,1420,2.161,1434,2.161,2809,3.987,2810,3.987,2811,3.987]],["title/interfaces/Renderable.html",[0,0.989,197,1.703]],["body/interfaces/Renderable.html",[0,1.401,2,1.548,3,0.059,4,0.052,5,0.059,6,0.077,8,0.838,10,0.038,12,0.074,18,0.684,23,0.093,24,0.01,27,0.653,28,0.295,33,0.152,57,1.349,59,1.093,75,0.171,82,0.341,83,1.076,92,2.159,99,1.656,106,1.018,113,0.716,118,0.098,134,0.541,155,1.392,165,1.393,168,0.913,172,0.066,176,0.005,177,0.005,178,0.666,179,2.161,181,1.144,182,0.736,186,1.215,187,0.205,189,0.818,190,1.215,192,1.215,194,1.179,195,1.684,196,2.96,197,2.836,198,2.925,199,2.272,200,2.456,201,1.788,202,1.215,203,2.674,204,2.593,205,2.161,206,1.179,207,1.179,208,1.215,209,1.215,210,1.215,211,1.215,212,1.215,213,1.215,214,2.412,215,2.96,216,3.584,217,1.122,218,1.503,219,1.215,220,1.11,221,1.215,222,1.179,223,1.771,224,0.264,225,2.427,226,2.818,227,1.356,228,2.674,229,0.843,230,2.674,231,2.487,232,1.215,233,1.215,234,1.844,235,1.215,236,2.161,237,1.215,238,1.215,239,1.215,240,1.215,241,1.215,242,1.215,243,1.215,244,1.215,245,1.844,246,1.844,247,1.215,248,1.215,249,1.215,250,1.844,251,1.844,252,1.215,253,1.215,254,2.161,255,1.215,256,2.487,257,1.215,258,1.844,259,1.215,260,1.215,261,2.161,262,1.215,263,1.788,264,1.215,265,1.215,266,1.215,267,1.215,268,1.215,269,1.215,270,1.215,271,2.161,272,1.215,273,1.215,274,1.215,275,1.215,276,1.215,277,1.215,278,1.215,279,1.215,280,1.215,281,1.215,282,1.215,283,1.215,284,1.215,285,1.215,286,1.215,287,1.215,288,1.179,289,1.215,290,1.215,291,1.215,292,1.215,293,1.215,294,1.215,295,1.215,296,1.215,297,1.215,298,1.215,299,1.215,300,1.215,301,1.215,302,1.215,303,2.161,304,1.215,305,1.215,306,1.215,307,1.215,308,2.161,309,1.215,310,1.844,311,1.215,312,1.215,313,1.844,314,1.215,315,2.161,316,1.215,317,1.215,318,1.215,319,2.228,320,1.844,321,3.45,322,3.599,323,1.844,324,1.215,325,1.215,326,1.215,327,1.215,328,1.215,329,2.161,330,1.215,331,1.215,332,1.215,333,1.215,334,1.215,335,1.215,336,1.215,337,1.215,338,1.215,339,1.215,340,1.215,341,1.215,342,1.215,343,1.215,344,1.215,345,1.215,346,1.215,347,1.215,348,1.215,349,1.215,350,1.215,351,1.215,352,2.161,353,1.215,354,1.215,355,1.215,356,1.215,357,1.215,358,1.215,359,1.215,360,1.215,361,1.215,362,1.215,363,1.215,364,1.636,365,1.844,366,1.215,367,1.215,368,1.215,369,1.144,370,1.215,371,2.161,372,1.844,373,1.844,374,1.788,375,1.215,376,1.215,377,1.215,378,2.161,379,1.215,380,1.215,381,1.215,382,1.215,383,2.815,384,1.215,385,1.215,386,2.815,387,1.215,388,0.991,389,1.215,390,1.215,398,0.409,2812,2.974,2813,2.974,2814,2.974]],["title/interfaces/ResponseJson.html",[0,0.989,2016,3.441]],["body/interfaces/ResponseJson.html",[0,1.321,2,2.989,3,0.114,4,0.1,5,0.114,6,0.073,8,0.791,10,0.073,11,0.691,17,3.765,22,2.243,23,0.109,24,0.01,28,0.466,33,0.1,38,2.275,47,2.676,75,0.176,82,0.927,83,0.68,98,3.638,102,3.901,106,1.508,113,1.227,118,0.125,165,0.886,176,0.008,177,0.008,178,0.453,217,2.104,224,0.278,229,2.016,717,4.419,928,4.801,1113,3.112,1125,4.371,1129,5.99,1160,4.574,1164,4.257,1168,4.023,1186,5.99,1241,4.597,1291,4.659,1294,5.608,1297,3.986,1305,5.608,1308,2.501,1312,3.76,1321,3.986,1334,3.986,1348,4.257,2002,5.695,2003,4.597,2004,4.597,2005,4.597,2006,4.597,2007,4.597,2008,5.052,2009,7.444,2016,5.695,2017,5.052,2018,5.052,2019,5.052,2020,5.052,2021,6.259,2022,5.052,2023,5.052,2024,5.052,2025,5.052,2026,5.052,2027,5.052]],["title/interfaces/ResponseOptions.html",[0,0.989,88,2.431]],["body/interfaces/ResponseOptions.html",[0,1.821,1,3.102,2,2.147,3,0.082,4,0.072,5,0.082,6,0.052,7,2.333,8,1.027,9,2.365,10,0.052,11,0.638,12,0.176,13,2.147,14,2.236,15,1.74,16,3.293,17,2.667,18,1.634,19,2.236,20,2.333,21,2.147,23,0.112,24,0.01,25,2.764,26,3.197,27,0.662,28,0.375,29,2.98,30,2.577,31,2.863,32,1.922,33,0.155,34,3.293,35,2.333,36,2.333,37,2.333,38,3.198,39,1.992,40,2.98,41,3.102,42,2.147,43,2.333,44,4.015,45,0.692,46,1.266,47,1.922,48,2.075,49,1.922,50,3.102,51,2.994,52,2.075,53,2.667,54,1.767,55,2.98,56,3.237,57,1.269,58,3.093,59,0.908,60,1.855,61,2.414,62,2.414,63,3.102,64,2.577,65,2.98,66,2.867,67,2.764,68,2.493,69,2.493,70,2.577,71,2.867,72,2.764,73,2.236,74,1.907,75,0.18,76,3.102,77,3.102,78,2.98,79,2.333,80,2.333,81,2.236,82,0.961,83,0.678,84,2.066,85,2.333,86,2.066,87,3.338,88,3.237,89,4.201,90,4.201,91,3.696,92,1.081,93,3.422,94,2.605,95,2.863,96,4.083,97,2.493,98,2.577,99,1.326,100,2.863,101,2.493,102,1.992,103,3.174,104,1.992,105,1.797,106,0.77,107,2.066,108,2.562,109,2.066,110,3.237,111,1.2,112,2.562,113,0.655,114,1.797,115,2.333,116,2.333,117,2.441,118,0.123,119,2.075,120,2.562,121,2.066,122,2.562,123,2.236,124,2.562,125,2.333,126,2.441,127,3.237,128,4.564,129,1.992,130,2.441,131,2.441,132,2.441,133,1.496,134,1.041,135,2.711,136,2.236,137,2.98,138,1.992,139,2.98,140,2.441,141,2.98,142,2.441,143,3.237,144,2.236,145,3.237,146,3.102,147,2.333,148,2.066,149,2.764,150,2.236,151,1.301,152,1.266,153,3.557,154,1.757,155,1.053,156,1.301,157,1.301,158,2.236,159,1.797,160,2.236,161,2.562,162,2.147,163,2.147,164,2.236,165,1.015,166,1.922,167,1.797,168,1.266,169,1.857,170,2.333,171,2.441,172,0.092,173,2.236,174,2.066,175,1.857,176,0.006,177,0.006]],["title/classes/SegmentHandler.html",[178,0.339,2101,3.186]],["body/classes/SegmentHandler.html",[3,0.105,4,0.092,5,0.105,6,0.111,10,0.067,12,0.201,23,0.11,24,0.01,27,0.502,28,0.513,33,0.117,49,2.454,52,1.909,53,2.454,54,1.416,55,2.741,57,1.318,59,0.836,60,1.706,75,0.164,83,1.048,99,1.571,111,1.96,113,1.284,118,0.128,152,2.068,172,0.192,176,0.008,177,0.008,178,0.532,180,0.255,182,1.099,187,0.326,189,1.279,224,0.255,364,1.909,398,1.078,578,3.651,710,1.859,865,2.307,1085,2.741,1158,4.676,1212,4.411,1271,4.676,1604,5.42,1715,2.741,2076,5.435,2082,4.994,2087,4.215,2101,4.994,2161,4.215,2162,4.632,2171,4.215,2172,4.632,2173,5.926,2174,5.926,2175,5.926,2176,5.926,2177,5.926,2178,6.535,2179,6.888,2180,4.632,2181,6.888,2182,5.926,2183,6.535,2184,6.888,2185,4.632,2186,6.888,2187,4.632,2188,4.632,2189,4.632,2190,4.632,2191,4.632,2192,4.632,2193,4.632,2233,4.632,2815,5.265,2816,5.265,2817,5.265,2818,5.265,2819,5.265,2820,5.265,2821,5.265,2822,5.265,2823,5.265,2824,5.265,2825,5.265]],["title/classes/StringAndCollectionFunctions.html",[178,0.339,236,1.703]],["body/classes/StringAndCollectionFunctions.html",[0,1.354,3,0.055,4,0.049,5,0.055,6,0.091,8,0.81,10,0.035,12,0.173,18,0.642,23,0.101,24,0.01,27,0.663,28,0.281,33,0.151,57,1.354,59,1.256,75,0.168,82,0.32,83,1.073,92,2.212,99,1.672,106,0.978,113,0.682,118,0.116,134,0.507,155,1.337,165,1.388,168,0.856,172,0.156,176,0.005,177,0.005,178,0.66,179,2.076,180,0.135,181,1.072,182,0.701,186,1.139,187,0.263,189,1.05,190,1.139,192,1.139,194,1.105,195,1.603,196,2.777,197,2.661,198,2.744,199,1.041,200,2.117,201,1.702,202,1.139,203,2.597,204,2.519,205,2.076,206,1.105,207,1.105,208,1.139,209,1.139,210,1.139,211,1.139,212,1.139,213,1.139,214,1.702,215,2.874,216,3.595,217,1.068,218,1.431,219,1.139,220,1.041,221,1.139,222,1.105,223,1.712,224,0.253,225,2.386,226,2.766,227,1.303,228,2.597,229,0.79,230,2.597,231,2.405,232,1.139,233,1.139,234,1.755,235,1.139,236,2.332,237,1.755,238,1.139,239,1.755,240,1.139,241,1.755,242,1.139,243,1.755,244,1.139,245,2.141,246,1.755,247,1.755,248,1.139,249,1.755,250,2.405,251,2.744,252,1.139,253,1.139,254,2.076,255,1.139,256,2.405,257,1.139,258,1.755,259,1.139,260,1.139,261,2.076,262,1.139,263,1.702,264,1.139,265,1.139,266,1.139,267,1.139,268,1.139,269,1.139,270,1.139,271,2.076,272,1.139,273,1.139,274,1.139,275,1.139,276,1.139,277,1.139,278,1.139,279,1.139,280,1.139,281,1.139,282,1.139,283,1.139,284,1.139,285,1.139,286,1.139,287,1.139,288,1.105,289,1.139,290,1.139,291,1.139,292,1.139,293,1.139,294,1.139,295,1.139,296,1.139,297,1.139,298,1.139,299,1.139,300,1.139,301,1.139,302,1.139,303,2.076,304,1.139,305,1.139,306,1.139,307,1.139,308,2.076,309,1.139,310,1.755,311,1.139,312,1.139,313,1.755,314,1.139,315,2.076,316,1.139,317,1.139,318,1.139,319,2.141,320,1.755,321,3.418,322,3.579,323,1.755,324,1.139,325,1.139,326,1.139,327,1.139,328,1.139,329,2.076,330,1.139,331,1.139,332,1.139,333,1.139,334,1.139,335,1.139,336,1.139,337,1.139,338,1.139,339,1.139,340,1.139,341,1.139,342,1.139,343,1.139,344,1.139,345,1.139,346,1.139,347,1.139,348,1.139,349,1.139,350,1.139,351,1.139,352,2.076,353,1.139,354,1.139,355,1.139,356,1.139,357,1.139,358,1.139,359,1.139,360,1.139,361,1.139,362,1.139,363,1.139,364,1.557,365,1.755,366,1.139,367,1.139,368,1.139,369,1.072,370,1.139,371,2.076,372,1.755,373,1.755,374,1.702,375,1.139,376,1.139,377,1.139,378,2.076,379,1.139,380,1.139,381,1.139,382,1.139,383,2.744,384,1.139,385,1.139,386,2.744,387,1.139,388,0.929,389,1.139,390,1.139,398,0.994,2826,4.295,2827,4.295,2828,4.295,2829,4.295,2830,4.295,2831,4.295,2832,2.788,2833,2.788,2834,2.788,2835,2.788,2836,2.788,2837,2.788,2838,2.788]],["title/classes/StringFunctions.html",[178,0.339,261,1.703]],["body/classes/StringFunctions.html",[0,1.386,3,0.058,4,0.051,5,0.058,6,0.082,8,0.829,10,0.037,12,0.149,18,0.671,23,0.099,24,0.01,27,0.652,28,0.291,33,0.152,57,1.351,59,1.215,75,0.172,82,0.334,83,1.075,92,2.152,99,1.668,106,1.005,113,0.705,118,0.11,134,0.53,155,1.375,165,1.391,168,0.895,172,0.134,176,0.005,177,0.005,178,0.664,179,2.134,180,0.141,181,1.121,182,0.725,186,1.191,187,0.226,189,0.904,190,1.191,192,1.191,194,1.155,195,1.659,196,2.817,197,2.708,198,2.793,199,1.088,200,2.16,201,1.761,202,1.191,203,2.65,204,2.57,205,2.134,206,1.155,207,1.155,208,1.191,209,1.191,210,1.191,211,1.191,212,1.191,213,1.191,214,1.761,215,2.906,216,3.58,217,1.105,218,1.48,219,1.191,220,1.088,221,1.191,222,1.155,223,1.753,224,0.26,225,2.415,226,2.802,227,1.339,228,2.65,229,0.826,230,2.65,231,2.462,232,1.191,233,1.191,234,1.816,235,1.191,236,2.134,237,1.191,238,1.191,239,1.191,240,1.191,241,1.191,242,1.191,243,1.191,244,1.191,245,1.816,246,1.816,247,1.191,248,1.191,249,1.191,250,1.816,251,1.816,252,1.191,253,1.191,254,2.134,255,1.191,256,2.462,257,1.191,258,1.816,259,1.191,260,1.191,261,2.387,262,1.816,263,2.387,264,1.191,265,1.816,266,1.191,267,1.816,268,1.191,269,1.816,270,1.191,271,2.134,272,1.191,273,1.191,274,1.191,275,1.191,276,1.191,277,1.191,278,1.191,279,1.191,280,1.191,281,1.191,282,1.191,283,1.191,284,1.191,285,1.191,286,1.191,287,1.191,288,1.155,289,1.191,290,1.191,291,1.191,292,1.191,293,1.191,294,1.191,295,1.191,296,1.191,297,1.191,298,1.191,299,1.191,300,1.191,301,1.191,302,1.191,303,2.134,304,1.191,305,1.191,306,1.191,307,1.191,308,2.134,309,1.191,310,1.816,311,1.191,312,1.191,313,1.816,314,1.191,315,2.134,316,1.191,317,1.191,318,1.191,319,2.201,320,1.816,321,3.44,322,3.593,323,1.816,324,1.191,325,1.191,326,1.191,327,1.191,328,1.191,329,2.134,330,1.191,331,1.191,332,1.191,333,1.191,334,1.191,335,1.191,336,1.191,337,1.191,338,1.191,339,1.191,340,1.191,341,1.191,342,1.191,343,1.191,344,1.191,345,1.191,346,1.191,347,1.191,348,1.191,349,1.191,350,1.191,351,1.191,352,2.134,353,1.191,354,1.191,355,1.191,356,1.191,357,1.191,358,1.191,359,1.191,360,1.191,361,1.191,362,1.191,363,1.191,364,1.611,365,1.816,366,1.191,367,1.191,368,1.191,369,1.121,370,1.191,371,2.134,372,1.816,373,1.816,374,1.761,375,1.191,376,1.191,377,1.191,378,2.134,379,1.191,380,1.191,381,1.191,382,1.191,383,2.793,384,1.191,385,1.191,386,2.793,387,1.191,388,0.971,389,1.191,390,1.191,2675,3.909,2839,4.444,2840,4.444,2841,4.444,2842,2.915,2843,2.915,2844,2.915,2845,2.915]],["title/interfaces/StructuredTypeFieldOptions.html",[0,0.989,91,2.237]],["body/interfaces/StructuredTypeFieldOptions.html",[0,1.825,1,3.119,2,2.164,3,0.083,4,0.073,5,0.083,6,0.053,7,2.351,8,1.03,9,2.37,10,0.053,11,0.641,13,2.164,14,2.253,15,1.753,16,3.306,17,2.681,18,1.639,19,2.253,20,2.351,21,2.164,23,0.112,24,0.01,25,2.778,26,3.208,27,0.662,28,0.377,29,2.995,30,2.591,31,2.875,32,1.937,33,0.155,34,3.306,35,2.351,36,2.351,37,2.351,38,3.204,39,2.007,40,2.995,41,3.119,42,2.164,43,2.351,44,3.254,45,0.697,46,1.276,47,1.937,48,2.086,49,1.937,50,3.119,51,3.004,52,2.086,53,2.681,54,1.775,55,2.995,56,3.254,57,1.27,58,3.103,59,0.913,60,1.865,61,2.427,62,2.427,63,3.119,64,2.591,65,2.995,66,2.882,67,2.778,68,2.506,69,2.506,70,2.591,71,2.882,72,2.778,73,2.253,74,1.917,75,0.18,76,3.119,77,3.119,78,2.995,79,2.351,80,2.351,81,2.253,82,0.941,83,0.681,84,2.082,85,2.351,86,2.082,87,3.345,88,2.351,89,2.459,90,2.459,91,3.893,92,1.866,93,3.893,94,2.615,95,2.875,96,4.1,97,2.506,98,2.591,99,1.33,100,2.875,101,2.506,102,2.007,103,3.186,104,2.007,105,1.811,106,0.776,107,2.082,108,2.582,109,2.082,110,3.254,111,1.209,112,2.582,113,0.66,114,1.811,115,2.351,116,2.351,117,2.459,118,0.123,119,2.086,120,2.582,121,2.082,122,2.582,123,2.253,124,2.582,125,2.351,126,2.459,127,3.254,128,4.572,129,2.007,130,2.459,131,2.459,132,2.459,133,1.507,134,1.046,135,2.717,136,2.253,137,2.995,138,2.007,139,2.995,140,2.459,141,2.995,142,2.459,143,3.254,144,2.253,145,3.254,146,3.119,147,2.351,148,2.082,149,2.778,150,2.253,151,1.311,152,1.276,153,3.568,154,1.766,155,1.061,156,1.311,157,1.311,158,2.253,159,1.811,160,2.253,161,2.582,162,2.164,163,2.164,164,2.253,165,1.019,166,1.937,167,1.811,168,1.276,169,1.872,170,2.351,171,2.459,172,0.093,173,2.253,174,2.082,175,1.872,176,0.006,177,0.006]],["title/classes/TypeFunctions.html",[178,0.339,303,1.703]],["body/classes/TypeFunctions.html",[0,1.395,3,0.059,4,0.051,5,0.059,6,0.069,8,0.834,10,0.037,12,0.111,18,0.679,23,0.101,24,0.01,27,0.652,28,0.294,33,0.152,57,1.35,59,1.167,75,0.174,82,0.338,83,1.075,92,2.156,99,1.663,106,1.013,113,0.712,118,0.103,134,0.536,155,1.385,165,1.392,168,0.905,172,0.1,176,0.005,177,0.005,178,0.665,179,2.15,180,0.143,181,1.134,182,0.732,186,1.205,187,0.169,189,0.673,190,1.205,192,1.205,194,1.169,195,1.674,196,2.827,197,2.72,198,2.805,199,1.101,200,2.172,201,1.777,202,1.205,203,2.664,204,2.583,205,2.15,206,1.169,207,1.169,208,1.205,209,1.205,210,1.205,211,1.205,212,1.205,213,1.205,214,1.777,215,2.914,216,3.582,217,1.115,218,1.494,219,1.205,220,1.101,221,1.205,222,1.169,223,1.763,224,0.262,225,2.422,226,2.811,227,1.349,228,2.664,229,0.836,230,2.664,231,2.477,232,1.205,233,1.205,234,1.832,235,1.205,236,2.15,237,1.205,238,1.205,239,1.205,240,1.205,241,1.205,242,1.205,243,1.205,244,1.205,245,1.832,246,1.832,247,1.205,248,1.205,249,1.205,250,1.832,251,1.832,252,1.205,253,1.205,254,2.15,255,1.205,256,2.477,257,1.205,258,1.832,259,1.205,260,1.205,261,2.15,262,1.205,263,1.777,264,1.205,265,1.205,266,1.205,267,1.205,268,1.205,269,1.205,270,1.205,271,2.15,272,1.205,273,1.205,274,1.205,275,1.205,276,1.205,277,1.205,278,1.205,279,1.205,280,1.205,281,1.205,282,1.205,283,1.205,284,1.205,285,1.205,286,1.205,287,1.205,288,1.169,289,1.205,290,1.205,291,1.205,292,1.205,293,1.205,294,1.205,295,1.205,296,1.205,297,1.205,298,1.205,299,1.205,300,1.205,301,1.205,302,1.205,303,2.401,304,1.832,305,1.205,306,1.832,307,1.205,308,2.15,309,1.205,310,1.832,311,1.205,312,1.205,313,1.832,314,1.205,315,2.15,316,1.205,317,1.205,318,1.205,319,2.217,320,1.832,321,3.446,322,3.597,323,1.832,324,1.205,325,1.205,326,1.205,327,1.205,328,1.205,329,2.15,330,1.205,331,1.205,332,1.205,333,1.205,334,1.205,335,1.205,336,1.205,337,1.205,338,1.205,339,1.205,340,1.205,341,1.205,342,1.205,343,1.205,344,1.205,345,1.205,346,1.205,347,1.205,348,1.205,349,1.205,350,1.205,351,1.205,352,2.15,353,1.205,354,1.205,355,1.205,356,1.205,357,1.205,358,1.205,359,1.205,360,1.205,361,1.205,362,1.205,363,1.205,364,1.626,365,1.832,366,1.205,367,1.205,368,1.205,369,1.134,370,1.205,371,2.15,372,1.832,373,1.832,374,1.777,375,1.205,376,1.205,377,1.205,378,2.15,379,1.205,380,1.205,381,1.205,382,1.205,383,2.805,384,1.205,385,1.205,386,2.805,387,1.205,388,0.982,389,1.205,390,1.205,398,0.617,2846,4.484,2847,4.484,2848,2.949,2849,2.949]],["title/dependencies.html",[2850,3.578,2851,4.553]],["body/dependencies.html",[24,0.01,32,3.185,176,0.009,177,0.009,2039,5.068,2851,6.013,2852,6.835,2853,8.936,2854,6.835,2855,6.835,2856,6.835,2857,7.896,2858,7.896,2859,6.835,2860,6.835,2861,6.835,2862,6.835,2863,6.835,2864,6.835,2865,6.835]],["title/miscellaneous/enumerations.html",[2866,2.343,2867,4.553]],["body/miscellaneous/enumerations.html",[6,0.106,7,3.374,10,0.076,23,0.092,24,0.01,25,3.517,49,3.394,50,3.947,51,3.072,52,2.641,53,3.394,54,1.958,55,3.791,56,4.119,57,1.379,58,3.566,59,1.156,60,2.36,61,3.072,62,3.072,63,3.947,64,3.28,65,3.791,66,3.649,67,3.517,68,3.173,69,3.173,70,3.28,71,3.649,134,1.085,176,0.008,177,0.008,704,5.249,705,6.408,714,5.249,715,5.249,1138,5.249,1718,3.706,2866,3.907,2867,5.249,2868,7.283,2869,5.966,2870,5.966,2871,7.283,2872,4.776,2873,5.831,2874,7.283,2875,5.831,2876,7.283,2877,5.966,2878,4.776,2879,5.966,2880,5.966,2881,5.966,2882,5.966,2883,4.776,2884,5.249,2885,7.283,2886,7.283,2887,7.283,2888,7.283,2889,7.283]],["title/miscellaneous/functions.html",[388,1.724,2866,2.343]],["body/miscellaneous/functions.html",[6,0.107,9,2.099,10,0.059,12,0.223,18,1.438,23,0.112,24,0.01,27,0.524,57,1.276,58,3.263,59,0.992,60,2.427,61,3.159,62,3.383,64,3.612,65,3.899,66,3.752,67,3.953,68,3.263,69,3.263,70,3.373,71,3.752,75,0.179,82,0.538,98,2.814,115,2.654,118,0.135,119,2.716,152,2.394,164,3.387,172,0.2,176,0.007,177,0.007,181,1.805,189,1.248,194,2.476,206,1.86,207,2.476,214,2.476,215,3.223,216,2.476,217,1.167,222,1.86,288,2.784,388,1.563,398,0.967,578,2.544,1645,5.996,1721,3.073,2031,4.129,2046,4.129,2052,5.497,2071,3.757,2076,4.338,2082,3.48,2098,5.003,2103,5.497,2107,6.589,2118,4.129,2866,3.073,2872,5.003,2873,5.003,2875,6.988,2878,3.757,2883,3.757,2890,6.249,2891,4.693,2892,6.249,2893,5.497,2894,6.249,2895,6.249,2896,6.249,2897,6.249,2898,6.249,2899,6.249,2900,6.249,2901,6.249,2902,6.249,2903,4.693,2904,6.249,2905,6.249,2906,4.693,2907,6.249,2908,6.249,2909,4.693,2910,6.249,2911,4.129,2912,6.249,2913,7.025,2914,4.693,2915,4.693,2916,4.693,2917,4.693,2918,4.693,2919,4.129,2920,4.693,2921,4.693,2922,4.693,2923,6.249,2924,4.693,2925,4.693,2926,6.18,2927,4.693,2928,6.249,2929,4.693,2930,4.693,2931,4.693,2932,4.693,2933,4.693,2934,4.693,2935,6.249,2936,6.249,2937,4.693,2938,4.693,2939,4.693,2940,4.693,2941,6.249,2942,4.693,2943,4.693,2944,4.693,2945,6.249,2946,4.693,2947,4.693,2948,4.693,2949,6.249,2950,4.693,2951,7.025,2952,4.693,2953,4.693]],["title/index.html",[10,0.045,2954,3.148,2955,3.148]],["body/index.html",[4,0.082,16,2.342,24,0.01,28,0.544,33,0.122,38,2.47,39,2.257,42,2.434,58,2.036,61,2.628,62,2.957,64,3.683,72,3.385,104,3.868,106,1.164,114,2.036,117,2.766,118,0.07,135,2.745,138,4.103,152,1.435,174,3.122,176,0.007,177,0.007,178,0.553,195,2.908,227,1.744,391,4.621,489,2.806,717,2.904,850,3.742,1000,2.178,1004,4.975,1010,6.735,1034,3.65,1078,3.244,1080,3.466,1085,4.171,1113,2.534,1210,4.989,1372,3.061,1457,5.191,1681,6.168,1694,4.113,1778,2.904,2028,4.989,2029,4.621,2033,4.621,2038,6.579,2039,5.198,2048,5.483,2171,3.742,2203,4.113,2608,4.989,2627,7.591,2956,8.413,2957,4.675,2958,4.675,2959,4.675,2960,4.675,2961,4.675,2962,4.675,2963,4.675,2964,6.232,2965,7.478,2966,4.675,2967,4.675,2968,7.478,2969,4.675,2970,4.675,2971,4.675,2972,6.232,2973,4.675,2974,6.579,2975,4.675,2976,6.232,2977,4.675,2978,4.675,2979,4.675,2980,6.232,2981,4.675,2982,6.232,2983,4.675,2984,4.675,2985,4.675,2986,4.675,2987,4.675,2988,4.675,2989,4.675,2990,4.675,2991,4.675,2992,6.232,2993,4.675,2994,4.675,2995,4.675,2996,4.675,2997,4.675,2998,4.675,2999,8.568,3000,4.675,3001,8.179,3002,6.232,3003,4.675,3004,4.675,3005,4.675,3006,4.675,3007,4.675,3008,4.675,3009,4.675,3010,4.675,3011,6.232,3012,6.232,3013,4.675,3014,6.232,3015,6.232,3016,7.011,3017,6.232,3018,4.675,3019,6.232,3020,4.675,3021,4.675,3022,4.675,3023,4.675,3024,4.675,3025,7.011,3026,4.675,3027,7.011,3028,4.675,3029,6.232,3030,4.675,3031,4.675,3032,4.675,3033,4.675,3034,4.675,3035,4.675,3036,4.675,3037,6.232,3038,4.675,3039,6.232,3040,4.675,3041,4.675,3042,4.675,3043,4.675,3044,4.675,3045,4.675,3046,4.675,3047,4.675,3048,4.675,3049,4.113,3050,4.675,3051,4.675,3052,4.675,3053,4.675,3054,4.675,3055,4.675,3056,6.232,3057,6.232,3058,4.675,3059,4.675,3060,4.675,3061,4.675,3062,4.675]],["title/license.html",[2954,3.148,2955,3.148,3063,3.148]],["body/license.html",[24,0.009,60,2.079,176,0.009,177,0.009,1121,5.644,1440,6.091,1457,5.282,1634,3.985,1641,5.136,1688,5.631,2974,5.644,3063,5.644,3064,6.416,3065,8.112,3066,6.416,3067,6.416,3068,6.416,3069,6.416,3070,7.609,3071,6.416,3072,6.416,3073,6.416,3074,6.416,3075,6.416,3076,6.416,3077,7.609,3078,8.895,3079,6.416,3080,6.416,3081,6.416,3082,6.416,3083,6.416,3084,6.416,3085,6.416,3086,6.416,3087,6.416,3088,6.416,3089,6.416,3090,6.416,3091,7.609,3092,6.416,3093,6.416,3094,6.416,3095,6.416,3096,6.416,3097,6.416,3098,7.609,3099,7.609,3100,6.416,3101,6.416,3102,6.416,3103,6.416,3104,6.416,3105,6.416,3106,6.416,3107,6.416,3108,6.416,3109,6.416,3110,6.416,3111,6.416,3112,6.416,3113,6.416,3114,6.416,3115,6.416,3116,6.416,3117,6.416,3118,6.416,3119,6.416,3120,6.416,3121,6.416,3122,6.416,3123,6.416,3124,6.416,3125,6.416,3126,6.416,3127,6.416,3128,6.416,3129,6.416]],["title/modules.html",[2030,4.714]],["body/modules.html",[24,0.009,176,0.009,177,0.009,2029,5.273,2030,5.694,3130,7.113]],["title/overview.html",[3131,5.18]],["body/overview.html",[2,3.676,24,0.009,176,0.009,177,0.009,180,0.341,1183,2.886,2028,5.654,2751,6.213,3049,6.213,3131,6.213,3132,7.062,3133,7.062]],["title/miscellaneous/typealiases.html",[2866,2.343,3134,5.175]],["body/miscellaneous/typealiases.html",[6,0.11,7,2.756,10,0.062,16,3.209,22,2.86,23,0.115,24,0.01,26,2.885,27,0.363,34,3.209,35,2.756,36,2.756,37,2.756,38,3.129,39,2.353,40,3.335,41,2.641,42,2.537,43,2.756,44,3.623,45,0.817,46,1.496,47,2.271,57,0.961,59,0.773,61,2.702,62,2.702,64,2.885,66,3.209,67,3.093,75,0.164,82,0.735,92,1.678,93,3.335,97,2.123,103,3.093,116,3.623,121,2.441,127,3.623,128,3.623,137,3.335,139,3.335,141,3.335,143,3.623,145,3.623,146,3.472,176,0.007,177,0.007,181,1.874,196,2.923,201,2.836,215,1.819,391,3.613,465,3.778,931,4.195,1088,4.447,1103,4.447,1110,4.75,1111,4.447,1112,5.129,1157,4.75,1372,3.191,1598,3.613,1604,4.195,1629,4.288,1636,2.884,1651,4.288,1653,4.288,1712,3.613,1720,4.75,1721,3.191,1722,4.75,1724,4.75,1725,4.75,1726,4.75,2071,3.902,2076,4.447,2237,5.129,2329,4.288,2768,4.288,2866,3.191,2872,7.051,2873,7.12,2875,7.138,2878,3.902,2883,3.902,2884,5.636,2893,5.636,2911,4.288,2919,5.636,2926,5.636,3135,4.874,3136,4.874,3137,7.157,3138,6.407,3139,7.602,3140,7.602,3141,7.897,3142,6.407,3143,6.407,3144,7.157,3145,6.407,3146,4.874,3147,6.407,3148,6.407,3149,6.407,3150,6.407,3151,6.407,3152,6.407,3153,6.407,3154,6.407,3155,6.407,3156,7.157,3157,7.602,3158,6.407,3159,7.602,3160,6.407,3161,4.874,3162,4.874,3163,6.407,3164,4.874,3165,4.874,3166,4.874,3167,4.874,3168,4.874,3169,4.874,3170,4.874]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":830,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["0.11.4",{"_index":2865,"title":{},"body":{"dependencies.html":{}}}],["07/schema",{"_index":1880,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["1",{"_index":1183,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{},"overview.html":{}}}],["11",{"_index":3133,"title":{},"body":{"overview.html":{}}}],["110",{"_index":3132,"title":{},"body":{"overview.html":{}}}],["12.2.0",{"_index":2853,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":3049,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.0",{"_index":35,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["2.3.0",{"_index":2863,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1184,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["2019",{"_index":3066,"title":{},"body":{"license.html":{}}}],["3",{"_index":3048,"title":{},"body":{"index.html":{}}}],["3.0",{"_index":36,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["4",{"_index":3043,"title":{},"body":{"index.html":{}}}],["4.0",{"_index":37,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["404",{"_index":1697,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["6.6.0",{"_index":2861,"title":{},"body":{"dependencies.html":{}}}],["9a",{"_index":1789,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["_annotations",{"_index":2542,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_body",{"_index":2394,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_context",{"_index":2543,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_functions",{"_index":977,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_headers",{"_index":2395,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_method",{"_index":2396,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_options",{"_index":2544,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_params",{"_index":2397,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_path",{"_index":2398,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_payload",{"_index":2545,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_properties",{"_index":972,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_querybody",{"_index":2399,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_requests",{"_index":1206,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responsetype",{"_index":2400,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_segments",{"_index":2072,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["a.term",{"_index":1757,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["above",{"_index":3097,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":1167,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["abstract",{"_index":467,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["acc",{"_index":1352,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["acc.params",{"_index":2120,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["acc.paths.push(path",{"_index":2119,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["accept",{"_index":13,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["accept.length",{"_index":2492,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push",{"_index":2486,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`odata.metadata=${this.api.options.accept?.metadata",{"_index":2483,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`streaming=${this.api.options.accept?.streaming",{"_index":2489,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accessors",{"_index":865,"title":{},"body":{"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/SegmentHandler.html":{}}}],["action",{"_index":60,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["action.ts",{"_index":415,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["action.ts:1",{"_index":528,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:12",{"_index":421,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:14",{"_index":424,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:15",{"_index":426,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:16",{"_index":423,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:17",{"_index":422,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:18",{"_index":425,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:22",{"_index":535,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:24",{"_index":539,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:25",{"_index":537,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:26",{"_index":536,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:27",{"_index":538,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:3",{"_index":532,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:31",{"_index":434,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:33",{"_index":437,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:34",{"_index":435,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:35",{"_index":436,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:39",{"_index":585,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:4",{"_index":534,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:41",{"_index":587,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:42",{"_index":592,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:43",{"_index":588,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:44",{"_index":586,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:45",{"_index":589,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:46",{"_index":590,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:47",{"_index":591,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:5",{"_index":530,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:51",{"_index":611,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:53",{"_index":617,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:54",{"_index":613,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:55",{"_index":612,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:56",{"_index":614,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:57",{"_index":615,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:58",{"_index":616,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:6",{"_index":529,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:7",{"_index":531,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:8",{"_index":533,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["actionimport",{"_index":758,"title":{},"body":{"classes/Field.html":{}}}],["actionimports",{"_index":491,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["actions",{"_index":620,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["add",{"_index":391,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/ODataPathSegments.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["add(left",{"_index":353,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["add(name",{"_index":2078,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["addbody",{"_index":2890,"title":{},"body":{"miscellaneous/functions.html":{}}}],["addbody(options",{"_index":2915,"title":{},"body":{"miscellaneous/functions.html":{}}}],["added",{"_index":2879,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["additionalitems",{"_index":1809,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["addressinfo",{"_index":3028,"title":{},"body":{"index.html":{}}}],["aggregate",{"_index":2919,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["airport",{"_index":3006,"title":{},"body":{"index.html":{}}}],["airport.fetch",{"_index":3035,"title":{},"body":{"index.html":{}}}],["airports",{"_index":2999,"title":{},"body":{"index.html":{}}}],["airports.entity(\"cyyz\").fetch",{"_index":3009,"title":{},"body":{"index.html":{}}}],["airports.fetch",{"_index":3034,"title":{},"body":{"index.html":{}}}],["airports.fetchall().subscribe((aports",{"_index":3003,"title":{},"body":{"index.html":{}}}],["airports.query",{"_index":3018,"title":{},"body":{"index.html":{}}}],["airports.query.filter().clear",{"_index":3024,"title":{},"body":{"index.html":{}}}],["airports.tojson",{"_index":3020,"title":{},"body":{"index.html":{}}}],["airportsservice",{"_index":2995,"title":{},"body":{"index.html":{}}}],["airportsservice.entities",{"_index":3000,"title":{},"body":{"index.html":{}}}],["alias",{"_index":134,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["alias(value",{"_index":2273,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["aliases",{"_index":215,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["all(field",{"_index":381,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["allows",{"_index":1234,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["and(left",{"_index":342,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["and/or",{"_index":3089,"title":{},"body":{"license.html":{}}}],["angular",{"_index":2956,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":2852,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":2854,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":1154,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"modules/ODataModule.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["angular/compiler",{"_index":2855,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":2039,"title":{},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":2856,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":2857,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":2860,"title":{},"body":{"dependencies.html":{}}}],["angularodataentity",{"_index":2969,"title":{},"body":{"index.html":{}}}],["annot",{"_index":916,"title":{},"body":{"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["annot.term",{"_index":923,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["annotation",{"_index":545,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["annotation.string",{"_index":1940,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["annotation.ts",{"_index":439,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{}}}],["annotation.ts:1",{"_index":443,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:15",{"_index":455,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:16",{"_index":456,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:19",{"_index":657,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:2",{"_index":444,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:21",{"_index":662,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:22",{"_index":667,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:23",{"_index":659,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:24",{"_index":660,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:25",{"_index":658,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:26",{"_index":663,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:27",{"_index":661,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:28",{"_index":664,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:29",{"_index":665,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:30",{"_index":666,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:5",{"_index":458,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:7",{"_index":460,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:9",{"_index":459,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotationconfig",{"_index":128,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["annotationlist",{"_index":440,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["annotations",{"_index":135,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["annotations=${this.api.options.prefer?.includeannotations",{"_index":2504,"title":{},"body":{"classes/ODataRequest.html":{}}}],["annotationslist",{"_index":621,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["annots",{"_index":2627,"title":{},"body":{"classes/ODataResponse.html":{},"index.html":{}}}],["annots.data(payload",{"_index":2629,"title":{},"body":{"classes/ODataResponse.html":{}}}],["any(field",{"_index":379,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["any)[f.name",{"_index":1848,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["any[]).map((v",{"_index":1771,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["api",{"_index":1078,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["apiconfig",{"_index":116,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"modules/ODataModule.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["apinameorentitytype",{"_index":1081,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["apioptions",{"_index":1,"title":{"interfaces/ApiOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["aports",{"_index":3005,"title":{},"body":{"index.html":{}}}],["app",{"_index":2985,"title":{},"body":{"index.html":{}}}],["app.component.css",{"_index":2990,"title":{},"body":{"index.html":{}}}],["app.component.html",{"_index":2988,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":2991,"title":{},"body":{"index.html":{}}}],["application/json;${accept.join",{"_index":2494,"title":{},"body":{"classes/ODataRequest.html":{}}}],["application_http",{"_index":1135,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["application_json",{"_index":1136,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["appliesto",{"_index":453,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["apply(query",{"_index":2315,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["applymixins",{"_index":2892,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applymixins(derivedctor",{"_index":206,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["applymixins(odatafunctions",{"_index":387,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odataoperators",{"_index":384,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatasyntax",{"_index":389,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["appmodule",{"_index":2980,"title":{},"body":{"index.html":{}}}],["arising",{"_index":3126,"title":{},"body":{"license.html":{}}}],["arithmeticfunctions",{"_index":179,"title":{"classes/ArithmeticFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arithmeticoperators",{"_index":352,"title":{"classes/ArithmeticOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arr",{"_index":2253,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.find((v",{"_index":2256,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.push(obj",{"_index":2257,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["array",{"_index":1721,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["array.isarray(config.keys",{"_index":1820,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["array.isarray(right",{"_index":324,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["array.isarray(this.keys",{"_index":1857,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["array.isarray(value",{"_index":1498,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["arraybuffer",{"_index":2416,"title":{},"body":{"classes/ODataRequest.html":{}}}],["assertarray",{"_index":2198,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject",{"_index":2199,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject(create",{"_index":2209,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign",{"_index":2200,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign(values",{"_index":2211,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["associated",{"_index":3079,"title":{},"body":{"license.html":{}}}],["at(index",{"_index":2213,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["attach",{"_index":1598,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["attach(model",{"_index":1638,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach(value",{"_index":1600,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>(model",{"_index":1675,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach>(value",{"_index":1613,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>>(model",{"_index":1676,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["attr",{"_index":854,"title":{},"body":{"classes/Field.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["attr?.nodevalue",{"_index":856,"title":{},"body":{"classes/Field.html":{}}}],["attribute",{"_index":714,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["attribute_abstract",{"_index":798,"title":{},"body":{"classes/Field.html":{}}}],["attribute_action",{"_index":795,"title":{},"body":{"classes/Field.html":{}}}],["attribute_alias",{"_index":765,"title":{},"body":{"classes/Field.html":{}}}],["attribute_applies_to",{"_index":803,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_term",{"_index":802,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_type",{"_index":773,"title":{},"body":{"classes/Field.html":{}}}],["attribute_contains_target",{"_index":787,"title":{},"body":{"classes/Field.html":{}}}],["attribute_default_value",{"_index":782,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set",{"_index":796,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set_path",{"_index":789,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_type",{"_index":791,"title":{},"body":{"classes/Field.html":{}}}],["attribute_extends",{"_index":801,"title":{},"body":{"classes/Field.html":{}}}],["attribute_function",{"_index":794,"title":{},"body":{"classes/Field.html":{}}}],["attribute_has_stream",{"_index":786,"title":{},"body":{"classes/Field.html":{}}}],["attribute_include_in_service_document",{"_index":797,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_bound",{"_index":788,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_composable",{"_index":790,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_flags",{"_index":800,"title":{},"body":{"classes/Field.html":{}}}],["attribute_max_length",{"_index":777,"title":{},"body":{"classes/Field.html":{}}}],["attribute_name",{"_index":771,"title":{},"body":{"classes/Field.html":{}}}],["attribute_namespace",{"_index":766,"title":{},"body":{"classes/Field.html":{}}}],["attribute_nullable",{"_index":776,"title":{},"body":{"classes/Field.html":{}}}],["attribute_open_type",{"_index":774,"title":{},"body":{"classes/Field.html":{}}}],["attribute_partner",{"_index":783,"title":{},"body":{"classes/Field.html":{}}}],["attribute_path",{"_index":792,"title":{},"body":{"classes/Field.html":{}}}],["attribute_precision",{"_index":778,"title":{},"body":{"classes/Field.html":{}}}],["attribute_property",{"_index":784,"title":{},"body":{"classes/Field.html":{}}}],["attribute_qualifier",{"_index":768,"title":{},"body":{"classes/Field.html":{}}}],["attribute_referenced_property",{"_index":785,"title":{},"body":{"classes/Field.html":{}}}],["attribute_scale",{"_index":779,"title":{},"body":{"classes/Field.html":{}}}],["attribute_srid",{"_index":781,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target",{"_index":793,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target_namespace",{"_index":769,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term",{"_index":770,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term_namespace",{"_index":767,"title":{},"body":{"classes/Field.html":{}}}],["attribute_type",{"_index":775,"title":{},"body":{"classes/Field.html":{}}}],["attribute_underlying_type",{"_index":799,"title":{},"body":{"classes/Field.html":{}}}],["attribute_unicode",{"_index":780,"title":{},"body":{"classes/Field.html":{}}}],["attribute_uri",{"_index":764,"title":{},"body":{"classes/Field.html":{}}}],["attribute_value",{"_index":772,"title":{},"body":{"classes/Field.html":{}}}],["attribute_version",{"_index":763,"title":{},"body":{"classes/Field.html":{}}}],["attributes",{"_index":762,"title":{},"body":{"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{}}}],["attributes(data",{"_index":934,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["attributes.getnameditem('version",{"_index":855,"title":{},"body":{"classes/Field.html":{}}}],["attrs",{"_index":1647,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["attrs[field.name",{"_index":1900,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["authors",{"_index":3116,"title":{},"body":{"license.html":{}}}],["average",{"_index":2888,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["backward",{"_index":2146,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["base",{"_index":162,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["base64",{"_index":1795,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["baseterm",{"_index":451,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["basetype",{"_index":468,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["basic",{"_index":3045,"title":{},"body":{"index.html":{}}}],["batch",{"_index":50,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["batch(\"trippin",{"_index":3031,"title":{},"body":{"index.html":{}}}],["batch.request.method",{"_index":1260,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batch_prefix",{"_index":1137,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batchboundary",{"_index":1254,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["binary",{"_index":1138,"title":{},"body":{"classes/ODataBatchRequest.html":{},"miscellaneous/enumerations.html":{}}}],["binding",{"_index":513,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["binding.ts",{"_index":577,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:1",{"_index":580,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:2",{"_index":581,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["bindingtype",{"_index":2705,"title":{},"body":{"classes/ODataSchema.html":{}}}],["blob",{"_index":2417,"title":{},"body":{"classes/ODataRequest.html":{}}}],["body",{"_index":98,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/functions.html":{}}}],["bodyparams",{"_index":2530,"title":{},"body":{"classes/ODataRequest.html":{}}}],["bodyparams.tostring",{"_index":2533,"title":{},"body":{"classes/ODataRequest.html":{}}}],["bodyqueryoptions",{"_index":14,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bool",{"_index":130,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["bound",{"_index":170,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boundary",{"_index":1258,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix",{"_index":1139,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${batchboundary}${boundary_prefix_suffix",{"_index":1274,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${changesetboundary}${boundary_prefix_suffix",{"_index":1262,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["break",{"_index":1838,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["browse",{"_index":3130,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2858,"title":{},"body":{"dependencies.html":{}}}],["buildaggregate",{"_index":2894,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildaggregate(aggregate",{"_index":2918,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildbody",{"_index":1253,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildentry",{"_index":1295,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildentry(payload",{"_index":1310,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["builder",{"_index":195,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["builders",{"_index":3052,"title":{},"body":{"index.html":{}}}],["buildexpand",{"_index":2895,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildexpand(expands",{"_index":2920,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildfilter",{"_index":2896,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildfilter(filters",{"_index":2922,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildgroupby",{"_index":2897,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildgroupby(groupby",{"_index":2925,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildkey",{"_index":1296,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildkey(names",{"_index":1313,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildorderby",{"_index":2898,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildorderby(orderby",{"_index":2927,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildpathandquery",{"_index":2098,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/functions.html":{}}}],["buildpathandquery(__namedparameters",{"_index":2929,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildtransforms",{"_index":2899,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildtransforms(transforms",{"_index":2930,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildurl",{"_index":2900,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildurl(path",{"_index":2932,"title":{},"body":{"miscellaneous/functions.html":{}}}],["builtfilters",{"_index":2939,"title":{},"body":{"miscellaneous/functions.html":{}}}],["c",{"_index":1641,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSchema.html":{},"license.html":{}}}],["c.binding()?.type",{"_index":2741,"title":{},"body":{"classes/ODataSchema.html":{}}}],["c.istypeof(type",{"_index":1766,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["cache",{"_index":38,"title":{"interfaces/Cache.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["cache_control",{"_index":2574,"title":{},"body":{"classes/ODataResponse.html":{}}}],["cache_key_separator",{"_index":1340,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cacheability",{"_index":89,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["cachecacheability",{"_index":44,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["cachecontrol",{"_index":2611,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["cachecontrol.split(',').foreach((directive",{"_index":2679,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["cached",{"_index":1390,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["california",{"_index":3019,"title":{},"body":{"index.html":{}}}],["callable",{"_index":1417,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["callable.configure",{"_index":2749,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callable_binding_parameter",{"_index":1486,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["callableconfig",{"_index":141,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["callables",{"_index":140,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["callaction",{"_index":1075,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callaction(params",{"_index":1084,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction",{"_index":1076,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction(params",{"_index":1095,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["case",{"_index":411,"title":{},"body":{"classes/ConditionalFunctions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["case(condition",{"_index":316,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["cast",{"_index":2846,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["cast(value",{"_index":304,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["catch",{"_index":845,"title":{},"body":{"classes/Field.html":{}}}],["catcherror",{"_index":1672,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["catcherror((error",{"_index":1695,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["caught",{"_index":124,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ceiling",{"_index":183,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["ceiling(value",{"_index":186,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["ch",{"_index":1835,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["ch.findchildparser(predicate",{"_index":1837,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["change",{"_index":3164,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["changed",{"_index":2881,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["changeset",{"_index":1257,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changeset_prefix",{"_index":1140,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetboundary",{"_index":1255,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetendline",{"_index":1286,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetid",{"_index":1256,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetresponses",{"_index":1284,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["channel",{"_index":1193,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["charge",{"_index":3074,"title":{},"body":{"license.html":{}}}],["check",{"_index":850,"title":{},"body":{"classes/Field.html":{},"classes/ODataPathSegments.html":{},"index.html":{}}}],["checkversion(document",{"_index":849,"title":{},"body":{"classes/Field.html":{}}}],["childparser",{"_index":1839,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["childparser((c",{"_index":1765,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["childparser(predicate",{"_index":2790,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["children",{"_index":862,"title":{},"body":{"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["chunks",{"_index":1276,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["cid",{"_index":2951,"title":{},"body":{"miscellaneous/functions.html":{}}}],["city",{"_index":3012,"title":{},"body":{"index.html":{}}}],["claim",{"_index":3119,"title":{},"body":{"license.html":{}}}],["class",{"_index":178,"title":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["classes",{"_index":180,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"overview.html":{}}}],["clear",{"_index":2201,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["clearkey",{"_index":2181,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["clearpaging",{"_index":2311,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["clearparameters",{"_index":2186,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["client",{"_index":1083,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{}}}],["clone",{"_index":927,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["clonereg",{"_index":2901,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clonereg(targe",{"_index":2944,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clonesymbol",{"_index":2902,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clonesymbol(targe",{"_index":2946,"title":{},"body":{"miscellaneous/functions.html":{}}}],["close",{"_index":1259,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["code",{"_index":1180,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["collection",{"_index":153,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["collectionfunctions",{"_index":254,"title":{"classes/CollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["collectionoperator",{"_index":2935,"title":{},"body":{"miscellaneous/functions.html":{}}}],["complete.html#_toc406398229",{"_index":1044,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398230",{"_index":1045,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398236",{"_index":1048,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398237",{"_index":1049,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398238",{"_index":1046,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398240",{"_index":1047,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complextype",{"_index":738,"title":{},"body":{"classes/Field.html":{}}}],["complextypes",{"_index":622,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["compodoc",{"_index":3055,"title":{},"body":{"index.html":{}}}],["component",{"_index":2982,"title":{},"body":{"index.html":{}}}],["composable",{"_index":171,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["composite",{"_index":1702,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["compute",{"_index":63,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["compute(opts",{"_index":2280,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["computed",{"_index":1716,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["computed?.bool",{"_index":1758,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["concat",{"_index":2826,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["concat(field",{"_index":237,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["condition",{"_index":318,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["conditionalfunctions",{"_index":315,"title":{"classes/ConditionalFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["conditions",{"_index":3096,"title":{},"body":{"license.html":{}}}],["config",{"_index":1000,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"index.html":{}}}],["config.accept",{"_index":1066,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.alias",{"_index":2719,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.annotations",{"_index":1593,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["config.base",{"_index":1817,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["config.bodyqueryoptions",{"_index":1064,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.bound",{"_index":1448,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.composable",{"_index":1450,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.configure",{"_index":2747,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.containers",{"_index":2730,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.entities",{"_index":2724,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.entitysetpath",{"_index":1446,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.entitysets",{"_index":1591,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["config.entitytype",{"_index":1622,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.enums",{"_index":2721,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.etag",{"_index":1068,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.fetchpolicy",{"_index":1062,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.fields",{"_index":1826,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["config.flags",{"_index":1951,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.headers",{"_index":1056,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.keys.map((key",{"_index":1822,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["config.members",{"_index":1933,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.name",{"_index":1444,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["config.namespace",{"_index":2718,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.open",{"_index":1819,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["config.params",{"_index":1054,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.prefer",{"_index":1070,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.return",{"_index":1514,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["config.service",{"_index":1624,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.stringasenum",{"_index":1052,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["config.stripmetadata",{"_index":1060,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.version",{"_index":1050,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["config.withcredentials",{"_index":1058,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["configs",{"_index":115,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"modules/ODataModule.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/functions.html":{}}}],["configure",{"_index":1406,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["configure(undefined",{"_index":1418,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["connection",{"_index":3128,"title":{},"body":{"license.html":{}}}],["connector",{"_index":2868,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["console.log",{"_index":3016,"title":{},"body":{"index.html":{}}}],["console.log(\"airport",{"_index":3010,"title":{},"body":{"index.html":{}}}],["console.log(\"airports",{"_index":3002,"title":{},"body":{"index.html":{}}}],["console.log(\"all",{"_index":3004,"title":{},"body":{"index.html":{}}}],["console.log(json",{"_index":3021,"title":{},"body":{"index.html":{}}}],["console.log(query",{"_index":3023,"title":{},"body":{"index.html":{}}}],["const",{"_index":106,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["constants",{"_index":713,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["constructor",{"_index":224,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(action",{"_index":582,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["constructor(annot",{"_index":914,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["constructor(annotationlist",{"_index":441,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["constructor(client",{"_index":1079,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["constructor(config",{"_index":998,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["constructor(field",{"_index":907,"title":{},"body":{"classes/Navigation.html":{}}}],["constructor(group",{"_index":875,"title":{},"body":{"classes/Grouping.html":{}}}],["constructor(helper",{"_index":929,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["constructor(init",{"_index":2407,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["constructor(name",{"_index":418,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{}}}],["constructor(namespace",{"_index":542,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlSchema.html":{}}}],["constructor(o",{"_index":2205,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["constructor(op",{"_index":883,"title":{},"body":{"classes/Lambda.html":{},"classes/Operator.html":{}}}],["constructor(options",{"_index":2333,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["constructor(path",{"_index":579,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["constructor(private",{"_index":2171,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["constructor(property",{"_index":607,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["constructor(propertyrefs",{"_index":557,"title":{},"body":{"classes/CsdlKey.html":{}}}],["constructor(protected",{"_index":364,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(public",{"_index":445,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"classes/ODataBatchRequest.html":{}}}],["constructor(request",{"_index":1124,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["constructor(segment",{"_index":2815,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["constructor(segments",{"_index":2075,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{}}}],["constructor(target",{"_index":457,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["constructor(term",{"_index":454,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["constructor(termnamespace",{"_index":552,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["constructor(type",{"_index":610,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["constructor(undefined",{"_index":1306,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{}}}],["constructor(uri",{"_index":602,"title":{},"body":{"classes/CsdlReference.html":{}}}],["constructor(xml",{"_index":805,"title":{},"body":{"classes/Field.html":{}}}],["constructors",{"_index":207,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["constructors.foreach((basector",{"_index":208,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["container",{"_index":642,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{}}}],["container.entitysets",{"_index":2736,"title":{},"body":{"classes/ODataSchema.html":{}}}],["container.ts",{"_index":490,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:10",{"_index":503,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:11",{"_index":501,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:12",{"_index":498,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:23",{"_index":1589,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["container.ts:32",{"_index":1584,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["container.ts:5",{"_index":497,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:7",{"_index":502,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:8",{"_index":500,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:9",{"_index":499,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["containers",{"_index":142,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contains",{"_index":2827,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["contains(field",{"_index":239,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["containstarget",{"_index":562,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["content",{"_index":1131,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content.join(newline",{"_index":1197,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_id",{"_index":1141,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_transfer_encoding",{"_index":1142,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_type",{"_index":1143,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["contentid",{"_index":1285,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["contents",{"_index":2971,"title":{},"body":{"index.html":{}}}],["contenttype",{"_index":1277,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["contenttype.indexof(application_json",{"_index":2598,"title":{},"body":{"classes/ODataResponse.html":{}}}],["context",{"_index":930,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["context.entityset",{"_index":1357,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.entityset}(${context.key",{"_index":1360,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.key",{"_index":1359,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.type",{"_index":1361,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["continueonerror",{"_index":85,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contract",{"_index":3123,"title":{},"body":{"license.html":{}}}],["conventions.html#sec_parameteraliases",{"_index":2272,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptioncompute",{"_index":2278,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptionformat",{"_index":2288,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["copies",{"_index":3091,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3077,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3065,"title":{},"body":{"license.html":{}}}],["count",{"_index":58,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["countdistinct",{"_index":2889,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["countryregion",{"_index":3013,"title":{},"body":{"index.html":{}}}],["create",{"_index":1628,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["create(attrs",{"_index":1644,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["create/update/patch",{"_index":1705,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["createsettings",{"_index":2052,"title":{},"body":{"modules/ODataModule.html":{},"miscellaneous/functions.html":{}}}],["createsettings(configs",{"_index":2046,"title":{},"body":{"modules/ODataModule.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":2959,"title":{},"body":{"index.html":{}}}],["creation",{"_index":120,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["credentials",{"_index":1024,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["csdl",{"_index":480,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdl/csdl",{"_index":708,"title":{},"body":{"classes/Field.html":{}}}],["csdlaction",{"_index":413,"title":{"classes/CsdlAction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlactionimport",{"_index":432,"title":{"classes/CsdlActionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlannotable",{"_index":438,"title":{"classes/CsdlAnnotable.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotable:2",{"_index":462,"title":{},"body":{"classes/CsdlAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotation",{"_index":442,"title":{"classes/CsdlAnnotation.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["csdlannotations",{"_index":446,"title":{"classes/CsdlAnnotations.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdlcomplextype",{"_index":463,"title":{"classes/CsdlComplexType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlentitycontainer",{"_index":488,"title":{"classes/CsdlEntityContainer.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlentityset",{"_index":495,"title":{"classes/CsdlEntitySet.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["csdlentitytype",{"_index":483,"title":{"classes/CsdlEntityType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlenummember",{"_index":517,"title":{"classes/CsdlEnumMember.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["csdlenumtype",{"_index":520,"title":{"classes/CsdlEnumType.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunction",{"_index":427,"title":{"classes/CsdlFunction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunctionimport",{"_index":429,"title":{"classes/CsdlFunctionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlinclude",{"_index":540,"title":{"classes/CsdlInclude.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlincludeannotations",{"_index":549,"title":{"classes/CsdlIncludeAnnotations.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlkey",{"_index":484,"title":{"classes/CsdlKey.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationproperty",{"_index":472,"title":{"classes/CsdlNavigationProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationpropertybinding",{"_index":507,"title":{"classes/CsdlNavigationPropertyBinding.html":{}},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlondelete",{"_index":567,"title":{"classes/CsdlOnDelete.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlparameter",{"_index":420,"title":{"classes/CsdlParameter.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlproperty",{"_index":471,"title":{"classes/CsdlProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlpropertyref",{"_index":487,"title":{"classes/CsdlPropertyRef.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlreference",{"_index":546,"title":{"classes/CsdlReference.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlreferentialconstraint",{"_index":566,"title":{"classes/CsdlReferentialConstraint.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlreturntype",{"_index":419,"title":{"classes/CsdlReturnType.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlschema",{"_index":618,"title":{"classes/CsdlSchema.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlsingleton",{"_index":496,"title":{"classes/CsdlSingleton.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlstructuralproperty",{"_index":561,"title":{"classes/CsdlStructuralProperty.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["csdlstructuralproperty:3",{"_index":573,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:4",{"_index":575,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:5",{"_index":574,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuredtype",{"_index":466,"title":{"classes/CsdlStructuredType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["csdlstructuredtype:10",{"_index":477,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:11",{"_index":475,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:12",{"_index":478,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:13",{"_index":474,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:8",{"_index":476,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:9",{"_index":479,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlterm",{"_index":450,"title":{"classes/CsdlTerm.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdltypedefinition",{"_index":628,"title":{"classes/CsdlTypeDefinition.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["ctx",{"_index":1218,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ctx(this",{"_index":1240,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["current",{"_index":1223,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["custom",{"_index":1727,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["customheaders",{"_index":2474,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[accept",{"_index":2493,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_match_header",{"_index":2478,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_none_match_header",{"_index":2481,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[prefer",{"_index":2509,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customizations",{"_index":3051,"title":{},"body":{"index.html":{}}}],["customize",{"_index":1002,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["customparams",{"_index":2513,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$expand",{"_index":2516,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$select",{"_index":2514,"title":{},"body":{"classes/ODataRequest.html":{}}}],["damages",{"_index":3120,"title":{},"body":{"license.html":{}}}],["data",{"_index":928,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["data(data",{"_index":937,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["dataservices",{"_index":826,"title":{},"body":{"classes/Field.html":{}}}],["date",{"_index":121,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["date(value",{"_index":272,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["date.now",{"_index":1363,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["dateandtimefunctions",{"_index":271,"title":{"classes/DateAndTimeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["dates",{"_index":2099,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["day",{"_index":678,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["day(value",{"_index":274,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["deal",{"_index":3081,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":3129,"title":{},"body":{"license.html":{}}}],["deep",{"_index":3050,"title":{},"body":{"index.html":{}}}],["def",{"_index":2218,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["default",{"_index":119,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/functions.html":{}}}],["default_fetch_policy",{"_index":1027,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["default_strip_metadata",{"_index":1028,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["default_timeout",{"_index":1341,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["default_version",{"_index":1029,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["defaults",{"_index":1870,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["defaultvalue",{"_index":452,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["defined",{"_index":187,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["definition",{"_index":641,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["definition.ts",{"_index":668,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:10",{"_index":677,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:11",{"_index":675,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:3",{"_index":670,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:5",{"_index":672,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:6",{"_index":676,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:7",{"_index":671,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:8",{"_index":673,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:9",{"_index":674,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["delete",{"_index":1271,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SegmentHandler.html":{}}}],["delete'].indexof(this._method",{"_index":2477,"title":{},"body":{"classes/ODataRequest.html":{}}}],["deleting",{"_index":2961,"title":{},"body":{"index.html":{}}}],["delivered",{"_index":1192,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deltalink",{"_index":987,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["demo",{"_index":2966,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":2851,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deps",{"_index":2053,"title":{},"body":{"modules/ODataModule.html":{}}}],["derivedctor",{"_index":2916,"title":{},"body":{"miscellaneous/functions.html":{}}}],["derivedctor.prototype",{"_index":211,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["description",{"_index":1424,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{}}}],["deseialize",{"_index":1422,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialization",{"_index":1425,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialize",{"_index":95,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deserialize(value",{"_index":1420,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Parser.html":{}}}],["deserialized",{"_index":1426,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["destroy",{"_index":1629,"title":{},"body":{"classes/ODataEntitySetService.html":{},"miscellaneous/typealiases.html":{}}}],["destroy(key",{"_index":1648,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["diego",{"_index":3067,"title":{},"body":{"license.html":{}}}],["directive",{"_index":2686,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["directive.startswith(max_age",{"_index":2680,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["distance",{"_index":870,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["distance(value",{"_index":309,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["distribute",{"_index":3087,"title":{},"body":{"license.html":{}}}],["div",{"_index":392,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["div(left",{"_index":359,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["document",{"_index":808,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement",{"_index":819,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.attributes",{"_index":816,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.getelementsbytagname",{"_index":828,"title":{},"body":{"classes/Field.html":{}}}],["documentation",{"_index":2974,"title":{},"body":{"index.html":{},"license.html":{}}}],["domparser",{"_index":807,"title":{},"body":{"classes/Field.html":{}}}],["down",{"_index":2247,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["duration",{"_index":2884,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["dynamic",{"_index":2859,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":1911,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["e.istypeof(type",{"_index":2738,"title":{},"body":{"classes/ODataSchema.html":{}}}],["editlink",{"_index":964,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["edm.binary",{"_index":1784,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.boolean'].indexof(this.type",{"_index":1806,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.byte",{"_index":1800,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.date",{"_index":1780,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.datetimeoffset",{"_index":1782,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.decimal",{"_index":1804,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.double'].indexof(this.type",{"_index":1805,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.guid",{"_index":1783,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.int16",{"_index":1799,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.int32",{"_index":1798,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.int64",{"_index":1797,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.sbyte'].indexof",{"_index":1801,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.string",{"_index":1779,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.timeofday",{"_index":1781,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edmx:dataservices",{"_index":723,"title":{},"body":{"classes/Field.html":{}}}],["edmx:edmx",{"_index":721,"title":{},"body":{"classes/Field.html":{}}}],["edmx:include",{"_index":727,"title":{},"body":{"classes/Field.html":{}}}],["edmx:includeannotations",{"_index":729,"title":{},"body":{"classes/Field.html":{}}}],["edmx:reference",{"_index":725,"title":{},"body":{"classes/Field.html":{}}}],["element",{"_index":827,"title":{},"body":{"classes/Field.html":{}}}],["empty",{"_index":2202,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["encode",{"_index":101,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encode(params",{"_index":1481,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["encode(value",{"_index":105,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encoded",{"_index":1429,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["encoding",{"_index":1428,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["endline",{"_index":1280,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["endregion",{"_index":175,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["endswith",{"_index":2828,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["endswith(field",{"_index":241,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["entities",{"_index":138,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["entities'].indexof(this._responsetype",{"_index":2528,"title":{},"body":{"classes/ODataRequest.html":{}}}],["entity",{"_index":489,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["entity(\"cyyz",{"_index":3007,"title":{},"body":{"index.html":{}}}],["entity(key",{"_index":1603,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{}}}],["entitycontainer",{"_index":623,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["entitycontainerconfig",{"_index":143,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityContainer.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entityid",{"_index":2625,"title":{},"body":{"classes/ODataResponse.html":{}}}],["entitykey",{"_index":1604,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["entityset",{"_index":52,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["entityset(entitysetname",{"_index":2754,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetconfig",{"_index":145,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySet.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entitysetname",{"_index":2756,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetpath",{"_index":169,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysets",{"_index":144,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysetschema",{"_index":1637,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["entitytype",{"_index":173,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{},"classes/ODataEntitySet.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitytypes",{"_index":624,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["entries",{"_index":1293,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry",{"_index":1331,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry.lastread",{"_index":1384,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.payload",{"_index":1371,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.tags.indexof(t",{"_index":1382,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["enu.configure",{"_index":2745,"title":{},"body":{"classes/ODataSchema.html":{}}}],["enum",{"_index":48,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enumerations",{"_index":2867,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":136,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enums.toname(this.members",{"_index":1961,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tonames(this.members",{"_index":1957,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalue(this.members",{"_index":1956,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalues(this.members",{"_index":1954,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enumtype",{"_index":735,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["enumtypeconfig",{"_index":137,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypefieldconfig",{"_index":146,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypes",{"_index":625,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["eq",{"_index":890,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["eq(left",{"_index":330,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["errata02",{"_index":1040,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["error",{"_index":123,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["error(\"batch",{"_index":1233,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('batch",{"_index":1229,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('field",{"_index":1507,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["error('odata",{"_index":852,"title":{},"body":{"classes/Field.html":{}}}],["error('unable",{"_index":847,"title":{},"body":{"classes/Field.html":{}}}],["error(`no",{"_index":2159,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["error.status",{"_index":1696,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["errorhandler",{"_index":122,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["errors",{"_index":1752,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["errors.push(`maxlength",{"_index":1761,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["errors.push(`required",{"_index":1759,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["errors[field.name",{"_index":1903,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["errs",{"_index":1901,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["escapeillegalchars",{"_index":2904,"title":{},"body":{"miscellaneous/functions.html":{}}}],["escapeillegalchars(string",{"_index":2933,"title":{},"body":{"miscellaneous/functions.html":{}}}],["etag",{"_index":15,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["etag_headers",{"_index":2576,"title":{},"body":{"classes/ODataResponse.html":{}}}],["event",{"_index":3115,"title":{},"body":{"license.html":{}}}],["events",{"_index":1232,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["examples",{"_index":2967,"title":{},"body":{"index.html":{}}}],["exec",{"_index":1220,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["exec((batch",{"_index":3032,"title":{},"body":{"index.html":{}}}],["execute",{"_index":1217,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["existing",{"_index":1640,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["exp",{"_index":2338,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expand",{"_index":62,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expand(opts",{"_index":2276,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expandobject",{"_index":3137,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandoptions",{"_index":3138,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expands",{"_index":2921,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expandtype",{"_index":3139,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expired",{"_index":1373,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["exponentialdecimals",{"_index":76,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["exponentialdecimals=${this.api.options.accept?.exponentialdecimals",{"_index":2491,"title":{},"body":{"classes/ODataRequest.html":{}}}],["export",{"_index":33,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["express",{"_index":3106,"title":{},"body":{"license.html":{}}}],["expression",{"_index":2235,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["expression(name",{"_index":2337,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expression.and",{"_index":2285,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expression.e",{"_index":2284,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expression.not",{"_index":2279,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expression.or",{"_index":2286,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expressions",{"_index":2236,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["extend",{"_index":492,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["extends",{"_index":8,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["extra",{"_index":1013,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["f",{"_index":1843,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.configure",{"_index":1854,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.default",{"_index":1872,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.deserialize(value[f.name",{"_index":1846,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.isstructuredtype",{"_index":1873,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.name",{"_index":1830,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.navigation",{"_index":1881,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.nullable",{"_index":1897,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.serialize((value",{"_index":1849,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.structured().defaults",{"_index":1875,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.tojsonschema(expand",{"_index":1888,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.value",{"_index":1936,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["f]{12",{"_index":1793,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f]{12}$/.test",{"_index":2114,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["f]{4",{"_index":1792,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f]{8",{"_index":1791,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["fa",{"_index":1790,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["factory",{"_index":1210,"title":{},"body":{"classes/ODataBatchRequest.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["factory(api",{"_index":1211,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["false",{"_index":1007,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["features",{"_index":2599,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["features.split(';').foreach((o",{"_index":2666,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["fetch",{"_index":1010,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"index.html":{}}}],["fetchall",{"_index":1630,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchall(options",{"_index":1654,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchmany",{"_index":1631,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchmany(options",{"_index":1656,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchnavigationproperty",{"_index":1077,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchnavigationproperty(resource",{"_index":1102,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchone",{"_index":1632,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchone(key",{"_index":1658,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate",{"_index":1633,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate(key",{"_index":1660,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchpolicy",{"_index":16,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["field",{"_index":92,"title":{"classes/Field.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["field(odatametadata.attribute_alias",{"_index":835,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_namespace",{"_index":834,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_uri",{"_index":821,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_version",{"_index":814,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_action",{"_index":840,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotation",{"_index":825,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotations",{"_index":844,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_complex_type",{"_index":837,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_container",{"_index":841,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_type",{"_index":838,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_enum_type",{"_index":836,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_function",{"_index":839,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include",{"_index":822,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include_annotations",{"_index":824,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_term",{"_index":843,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_type_definition",{"_index":842,"title":{},"body":{"classes/Field.html":{}}}],["field.annotations",{"_index":1735,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.collection",{"_index":1743,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.default",{"_index":1740,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.encode(v",{"_index":1867,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.findannotation((a",{"_index":1938,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["field.isstructuredtype",{"_index":1863,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.maxlength",{"_index":1742,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.name",{"_index":1866,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.navigation",{"_index":1746,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.nullable",{"_index":1744,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.precision",{"_index":1748,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.referentials",{"_index":1737,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.scale",{"_index":1750,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.structured",{"_index":1864,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.type",{"_index":1734,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.validate(value",{"_index":1902,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.value",{"_index":1949,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fieldnames",{"_index":860,"title":{},"body":{"classes/Field.html":{}}}],["fields",{"_index":149,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["fields.reduce",{"_index":1845,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["fields.reduce((acc",{"_index":1874,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["fieldtitle",{"_index":1906,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["fieldtitle(value",{"_index":1915,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["fieldtype",{"_index":705,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["fieldtype.attribute",{"_index":815,"title":{},"body":{"classes/Field.html":{}}}],["fieldtype.tag",{"_index":823,"title":{},"body":{"classes/Field.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["filed",{"_index":1918,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["files",{"_index":3080,"title":{},"body":{"license.html":{}}}],["filter",{"_index":64,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["filter((f",{"_index":1894,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["filter((k",{"_index":2389,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["filter((key",{"_index":2361,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["filter((p",{"_index":1521,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["filter((r",{"_index":1401,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["filter((t",{"_index":2128,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["filter(opts",{"_index":2295,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["filters",{"_index":2924,"title":{},"body":{"miscellaneous/functions.html":{}}}],["filtertype",{"_index":3140,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["find",{"_index":1585,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["find((p",{"_index":2601,"title":{},"body":{"classes/ODataResponse.html":{}}}],["find(predicate",{"_index":2081,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["findannotation",{"_index":1581,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataSchema.html":{}}}],["findannotation(predicate",{"_index":1583,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["findcallablefortype",{"_index":2688,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findcallablefortype(type",{"_index":2704,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findchildparser",{"_index":1833,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["findchildparser(predicate",{"_index":2796,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["findentitysetfortype",{"_index":2689,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findentitysetfortype(type",{"_index":2707,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype",{"_index":2690,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype(type",{"_index":2709,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findfieldbyname",{"_index":1907,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldbyname(name",{"_index":1920,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldbyvalue",{"_index":1908,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldbyvalue(value",{"_index":1922,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findoptionsfortype",{"_index":2743,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findstructuredtypefortype",{"_index":2691,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findstructuredtypefortype(type",{"_index":2711,"title":{},"body":{"classes/ODataSchema.html":{}}}],["first",{"_index":39,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["first(undefined",{"_index":2084,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["fitness",{"_index":3111,"title":{},"body":{"license.html":{}}}],["flags",{"_index":147,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["floor",{"_index":184,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["floor(value",{"_index":190,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["fluent",{"_index":2957,"title":{},"body":{"index.html":{}}}],["flush",{"_index":1297,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["following",{"_index":3095,"title":{},"body":{"license.html":{}}}],["foreach",{"_index":2905,"title":{},"body":{"miscellaneous/functions.html":{}}}],["foreach(array",{"_index":2948,"title":{},"body":{"miscellaneous/functions.html":{}}}],["forget",{"_index":1298,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forget(undefined",{"_index":1317,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forkjoin",{"_index":3033,"title":{},"body":{"index.html":{}}}],["format",{"_index":71,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["format(opts",{"_index":2289,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["format/v4.01/odata",{"_index":1035,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["forroot",{"_index":2034,"title":{},"body":{"modules/ODataModule.html":{}}}],["forroot(configs",{"_index":2035,"title":{},"body":{"modules/ODataModule.html":{}}}],["found",{"_index":2160,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["fractionalseconds",{"_index":679,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["fractionalseconds(value",{"_index":276,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["free",{"_index":3073,"title":{},"body":{"license.html":{}}}],["friends",{"_index":3027,"title":{},"body":{"index.html":{}}}],["fromhttpresponse",{"_index":2546,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromhttpresponse(req",{"_index":2558,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson",{"_index":2547,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson(req",{"_index":2560,"title":{},"body":{"classes/ODataResponse.html":{}}}],["full",{"_index":42,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["func",{"_index":2107,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/functions.html":{}}}],["funcs",{"_index":201,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["function",{"_index":59,"title":{"classes/Function.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["function('case",{"_index":317,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('cast",{"_index":305,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('ceiling",{"_index":300,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('concat",{"_index":238,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('contains",{"_index":240,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('date",{"_index":273,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('day",{"_index":275,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('distance",{"_index":311,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('endswith",{"_index":242,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('floor",{"_index":301,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('fractionalseconds",{"_index":277,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubsequence",{"_index":260,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubset",{"_index":257,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hour",{"_index":279,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('indexof",{"_index":244,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('intersects",{"_index":314,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('isof",{"_index":307,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('length",{"_index":246,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('matchespattern",{"_index":264,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('maxdatetime",{"_index":281,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('mindatetime",{"_index":283,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('minute",{"_index":285,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('month",{"_index":287,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('now",{"_index":289,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('round",{"_index":302,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('second",{"_index":291,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('startswith",{"_index":248,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('substring",{"_index":253,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('time",{"_index":293,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('tolower",{"_index":266,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totaloffsetminutes",{"_index":295,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totalseconds",{"_index":297,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('toupper",{"_index":268,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('trim",{"_index":270,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('year",{"_index":299,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function(__namedparameters",{"_index":2942,"title":{},"body":{"miscellaneous/functions.html":{}}}],["function(name",{"_index":980,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["functionimport",{"_index":756,"title":{},"body":{"classes/Field.html":{}}}],["functionimports",{"_index":493,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["functionname",{"_index":430,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["functions",{"_index":388,"title":{"miscellaneous/functions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":3094,"title":{},"body":{"license.html":{}}}],["ge",{"_index":891,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ge(left",{"_index":336,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["generated",{"_index":3037,"title":{},"body":{"index.html":{}}}],["generator",{"_index":2965,"title":{},"body":{"index.html":{}}}],["geofunctions",{"_index":308,"title":{"classes/GeoFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["get'].indexof(this._method",{"_index":2480,"title":{},"body":{"classes/ODataRequest.html":{}}}],["get(key",{"_index":112,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["get(name",{"_index":1319,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{}}}],["get(path",{"_index":2217,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["getannotations",{"_index":2571,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getapi",{"_index":1108,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["getbody",{"_index":2435,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcontext",{"_index":2569,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getcount",{"_index":1539,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getdeltalink",{"_index":1543,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["geteditlink",{"_index":1568,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getentityset",{"_index":939,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["getentitysets",{"_index":2715,"title":{},"body":{"classes/ODataSchema.html":{}}}],["getentitysetschema",{"_index":1668,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["getetag",{"_index":1561,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getfunctions",{"_index":1551,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getheaders",{"_index":2439,"title":{},"body":{"classes/ODataRequest.html":{}}}],["gethelper",{"_index":1025,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["getid",{"_index":1559,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediacontenttype",{"_index":1574,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaeditlink",{"_index":1572,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaetag",{"_index":1563,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediareadlink",{"_index":1570,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmetadataetag",{"_index":1565,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmethod",{"_index":2433,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getname",{"_index":2233,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/SegmentHandler.html":{}}}],["getnextlink",{"_index":1541,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getobjects",{"_index":858,"title":{},"body":{"classes/Field.html":{}}}],["getoptions",{"_index":2565,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getparams",{"_index":2437,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpath",{"_index":2431,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpathwithparams",{"_index":2441,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpayload",{"_index":2567,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getproperties",{"_index":1576,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getreadlink",{"_index":1537,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getresponse",{"_index":1299,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["getresponse(req",{"_index":1321,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["getresponsetype",{"_index":2429,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getsingletonschema",{"_index":2773,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["getskip",{"_index":1547,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getskiptoken",{"_index":1549,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getstringcollectionclause",{"_index":2907,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getstringcollectionclause(lambdaparameter",{"_index":2934,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getstructuredtypeschema",{"_index":1609,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["getting",{"_index":2954,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettop",{"_index":1545,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["gettype",{"_index":941,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["geturl",{"_index":2443,"title":{},"body":{"classes/ODataRequest.html":{}}}],["geturlwithparams",{"_index":2445,"title":{},"body":{"classes/ODataRequest.html":{}}}],["given",{"_index":1423,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["granted",{"_index":3072,"title":{},"body":{"license.html":{}}}],["group",{"_index":365,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["groupby",{"_index":2926,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["grouping",{"_index":205,"title":{"classes/Grouping.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["grouping(value",{"_index":372,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["groupingandnavigationoperators",{"_index":371,"title":{"classes/GroupingAndNavigationOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["gt",{"_index":892,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["gt(left",{"_index":334,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["guid",{"_index":2113,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["haaster",{"_index":3069,"title":{},"body":{"license.html":{}}}],["hack",{"_index":2112,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["handle",{"_index":2556,"title":{},"body":{"classes/ODataResponse.html":{}}}],["handlefetch",{"_index":1300,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlefetch(req",{"_index":1323,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate",{"_index":1301,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate(req",{"_index":1325,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handler",{"_index":2381,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["handlerequest",{"_index":1302,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlerequest(req",{"_index":1327,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handleresponse",{"_index":1275,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["handlers",{"_index":2102,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["has(left",{"_index":348,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["has(name",{"_index":2340,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["has(path",{"_index":2220,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["hashmap",{"_index":2251,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["haskey",{"_index":2179,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasparameters",{"_index":2184,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasreferentials",{"_index":1813,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["hasstream",{"_index":485,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["hassubsequence",{"_index":407,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubsequence(s1",{"_index":259,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["hassubset",{"_index":408,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubset(s1",{"_index":255,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["header",{"_index":1003,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["headers",{"_index":17,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["headers.getall(key",{"_index":1177,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["helper",{"_index":30,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["here",{"_index":3057,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":3071,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3117,"title":{},"body":{"license.html":{}}}],["hour",{"_index":680,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["hour(value",{"_index":278,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["htmlcollection",{"_index":863,"title":{},"body":{"classes/Field.html":{}}}],["http",{"_index":1023,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["http.boundarydelimiter(contenttype",{"_index":1279,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.boundaryend(batchboundary",{"_index":1281,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders",{"_index":1245,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["http.mergehttpheaders(this._headers",{"_index":2535,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams",{"_index":2519,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.parseresponsestatus(chunk[0",{"_index":1289,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.resolveheaderkey(this.headers",{"_index":2604,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.splithttpparams",{"_index":2531,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.withouthttpparams(params",{"_index":2523,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http11",{"_index":1144,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http://docs.oasis",{"_index":1032,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["http://json",{"_index":1878,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["httpclientmodule",{"_index":2040,"title":{},"body":{"modules/ODataModule.html":{}}}],["httperrorresponse",{"_index":1151,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{}}}],["httpheaders",{"_index":1152,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["httpheaders(json.headers",{"_index":2585,"title":{},"body":{"classes/ODataResponse.html":{}}}],["httpparams",{"_index":2413,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httpresponse",{"_index":1153,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["https://diegomvh.github.io/angular",{"_index":3058,"title":{},"body":{"index.html":{}}}],["https://docs.oasis",{"_index":2268,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["https://github.com/diegomvh/angular",{"_index":3061,"title":{},"body":{"index.html":{}}}],["https://json",{"_index":1774,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["https://services.odata.org/v4/(s(4m0tuxtnhcfctl4gzem3gr10))/trippinservicerw",{"_index":2979,"title":{},"body":{"index.html":{}}}],["https://www.odata.org/getting",{"_index":1201,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["id",{"_index":955,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["ieee754",{"_index":2484,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ieee754compatible",{"_index":77,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754compatible=${this.api.options.accept?.ieee754compatible",{"_index":2487,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_match_header",{"_index":2447,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_none_match_header",{"_index":2448,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ifmatch",{"_index":79,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ifnonematch",{"_index":80,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["implements",{"_index":223,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["implied",{"_index":3107,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["imports",{"_index":2048,"title":{},"body":{"modules/ODataModule.html":{},"index.html":{}}}],["in(left",{"_index":350,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["includeannotations",{"_index":86,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["included",{"_index":3100,"title":{},"body":{"license.html":{}}}],["includeinservicedocument",{"_index":431,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["includes",{"_index":548,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["including",{"_index":1440,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"license.html":{}}}],["incorporates",{"_index":3044,"title":{},"body":{"index.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexof",{"_index":2829,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["indexof(field",{"_index":243,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["indexof(s.name",{"_index":2151,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["indexof(this.type",{"_index":1785,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["indicating",{"_index":1432,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["inherited",{"_index":461,"title":{},"body":{"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Lambda.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{}}}],["init",{"_index":2409,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.api",{"_index":2454,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.body",{"_index":2462,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.bodyqueryoptions",{"_index":2468,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.etag",{"_index":2475,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.fetchpolicy",{"_index":2466,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.headers",{"_index":2512,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.method",{"_index":2451,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.observe",{"_index":2458,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.params",{"_index":2521,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.reportprogress",{"_index":2456,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.resource",{"_index":2453,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.responsetype",{"_index":2460,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.withcredentials",{"_index":2464,"title":{},"body":{"classes/ODataRequest.html":{}}}],["inject",{"_index":2981,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":2750,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"injectables/ODataServiceFactory.html":{}}}],["injectables",{"_index":2751,"title":{},"body":{"injectables/ODataServiceFactory.html":{},"overview.html":{}}}],["inmutable",{"_index":3011,"title":{},"body":{"index.html":{}}}],["inside",{"_index":1586,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["install",{"_index":2975,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2972,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1175,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["instead",{"_index":1458,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["int",{"_index":131,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["integer",{"_index":1803,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"overview.html":{}}}],["intersects",{"_index":871,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["intersects(value",{"_index":312,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["invalid",{"_index":3166,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["isbatch",{"_index":2402,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isbound",{"_index":416,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["iscomposable",{"_index":428,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["isedmtype",{"_index":1503,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["isenumtype",{"_index":1505,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["isexpired",{"_index":1303,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isexpired(entry",{"_index":1329,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isfetch",{"_index":2403,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isflags",{"_index":522,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["iskey",{"_index":1810,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["ismutate",{"_index":2404,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isnamespaceof",{"_index":2692,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isnamespaceof(type",{"_index":2713,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isof",{"_index":2847,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["isof(value",{"_index":306,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["isstructuredtype",{"_index":1508,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["istypeof",{"_index":1407,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["istypeof(type",{"_index":1430,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["items",{"_index":1808,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["iteratee",{"_index":2949,"title":{},"body":{"miscellaneous/functions.html":{}}}],["join",{"_index":1178,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["json",{"_index":1034,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataStructuredTypeParser.html":{},"index.html":{}}}],["json.body",{"_index":2584,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.key",{"_index":2141,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parameters",{"_index":2143,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parse(this.storage.getitem(this.name",{"_index":2024,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.status",{"_index":2586,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.statustext",{"_index":2587,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.stringify(array.from(this.entries.entries",{"_index":2023,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.type",{"_index":2140,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.url",{"_index":2588,"title":{},"body":{"classes/ODataResponse.html":{}}}],["jsonschemacustom",{"_index":1722,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaexpand",{"_index":1724,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaoptions",{"_index":1725,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemarequired",{"_index":1726,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaselect",{"_index":1720,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["k",{"_index":1378,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["k.name",{"_index":1812,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["k.name.split",{"_index":1859,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["k.startswith(key",{"_index":1379,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["k.trim",{"_index":2668,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["keep",{"_index":2330,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(...names",{"_index":2387,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(names",{"_index":2342,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["key",{"_index":152,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["key(value",{"_index":2177,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["key[k.alias",{"_index":1865,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["keyof",{"_index":168,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["keys",{"_index":166,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys(values",{"_index":2087,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["key}=${value",{"_index":2138,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["kind",{"_index":3105,"title":{},"body":{"license.html":{}}}],["lambda",{"_index":374,"title":{"classes/Lambda.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('all",{"_index":382,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('any",{"_index":380,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambdaoperators",{"_index":378,"title":{"classes/LambdaOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambdaparameter",{"_index":2937,"title":{},"body":{"miscellaneous/functions.html":{}}}],["last",{"_index":2073,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["last(undefined",{"_index":2089,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["lastread",{"_index":1346,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["le",{"_index":893,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["le(left",{"_index":340,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left",{"_index":321,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left.split('/').pop().tolowercase",{"_index":376,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op}(${alias}:${alias}/${render(right",{"_index":377,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length",{"_index":251,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length(value",{"_index":245,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["liability",{"_index":3121,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3118,"title":{},"body":{"license.html":{}}}],["library",{"_index":2968,"title":{},"body":{"index.html":{}}}],["license",{"_index":3063,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":3083,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3108,"title":{},"body":{"license.html":{}}}],["lines",{"_index":1282,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["link",{"_index":1031,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["literal",{"_index":22,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/ResponseJson.html":{},"miscellaneous/typealiases.html":{}}}],["location",{"_index":2608,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"index.html":{}}}],["location_header",{"_index":2575,"title":{},"body":{"classes/ODataResponse.html":{}}}],["logicaloperators",{"_index":329,"title":{"classes/LogicalOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lt",{"_index":894,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["lt(left",{"_index":338,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["m",{"_index":1601,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["mainly",{"_index":3042,"title":{},"body":{"index.html":{}}}],["map",{"_index":1308,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/ResponseJson.html":{}}}],["map(([key",{"_index":2137,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["map((f",{"_index":1887,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["map((key",{"_index":1176,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["map((name",{"_index":2590,"title":{},"body":{"classes/ODataResponse.html":{}}}],["map((s",{"_index":2126,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["mapfields",{"_index":1909,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["mapfields(mapper",{"_index":1925,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["mapped",{"_index":1929,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["mapper",{"_index":1927,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["maps",{"_index":1928,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["match",{"_index":989,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["match(/[&?]{1}\\$skip=(\\d",{"_index":993,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match(/[&?]{1}\\$skiptoken=([\\d\\w\\s",{"_index":994,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match(/[&?]{1}\\$top=(\\d",{"_index":991,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match[1",{"_index":995,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["matches",{"_index":1588,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["matchespattern",{"_index":2839,"title":{},"body":{"classes/StringFunctions.html":{}}}],["matchespattern(value",{"_index":262,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["matching",{"_index":177,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["max",{"_index":2887,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["max_age",{"_index":2662,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["maxage",{"_index":90,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxdatetime",{"_index":681,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["maxdatetime(value",{"_index":280,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["maxlength",{"_index":151,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxpagesize",{"_index":81,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["mediacontenttype",{"_index":970,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaeditlink",{"_index":968,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaetag",{"_index":958,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediareadlink",{"_index":966,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["member",{"_index":150,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members",{"_index":148,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members.some((member",{"_index":1969,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["merchantability",{"_index":3110,"title":{},"body":{"license.html":{}}}],["merge",{"_index":3085,"title":{},"body":{"license.html":{}}}],["message",{"_index":1181,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["metadata",{"_index":51,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["metadataetag",{"_index":960,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["method",{"_index":947,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["methods",{"_index":182,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["min",{"_index":2886,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mindatetime",{"_index":682,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["mindatetime(value",{"_index":282,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["minimal",{"_index":41,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["minute",{"_index":683,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["minute(value",{"_index":284,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["miscellaneous",{"_index":2866,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":1970,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mit",{"_index":3064,"title":{},"body":{"license.html":{}}}],["mod",{"_index":393,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mod(left",{"_index":361,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["model",{"_index":164,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/functions.html":{}}}],["model(__namedparameters",{"_index":2950,"title":{},"body":{"miscellaneous/functions.html":{}}}],["model.attach(this.entities",{"_index":1678,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entities().entity",{"_index":1677,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entity",{"_index":2776,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["modelfield",{"_index":2908,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modelfield(__namedparameters",{"_index":2952,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modelfieldoptions",{"_index":3142,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modeloptions",{"_index":3143,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["models/collection",{"_index":1671,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["models/model",{"_index":1612,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["modify",{"_index":1634,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"license.html":{}}}],["modify(key",{"_index":1662,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["module",{"_index":2028,"title":{"modules/ODataModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":2030,"title":{"modules.html":{}},"body":{"modules/ODataModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":2037,"title":{},"body":{"modules/ODataModule.html":{}}}],["month",{"_index":684,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["month(value",{"_index":286,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["mul",{"_index":394,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mul(left",{"_index":357,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["multipart_mixed",{"_index":1145,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary",{"_index":1146,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary}${changesetboundary",{"_index":1265,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["mutable",{"_index":3017,"title":{},"body":{"index.html":{}}}],["n",{"_index":882,"title":{},"body":{"classes/GroupingAndNavigationOperators.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["name",{"_index":118,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["namednodemap",{"_index":851,"title":{},"body":{"classes/Field.html":{}}}],["names",{"_index":1315,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["names.foreach((name",{"_index":2385,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["names.indexof(k",{"_index":2390,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["names.indexof(type",{"_index":1520,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["names.join",{"_index":1960,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["names.join(cache_key_separator",{"_index":1364,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["names.push(`${this.alias}.${this.name",{"_index":1519,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["names.push(`${this.schema.alias}.${this.name",{"_index":1625,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["namespace",{"_index":133,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["namespace/alias",{"_index":1441,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["navigation",{"_index":155,"title":{"classes/Navigation.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["navigation(field",{"_index":373,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["navigationproperties",{"_index":469,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["navigationproperty",{"_index":55,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["navigationpropertybinding",{"_index":506,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["navigationpropertybindings",{"_index":644,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["ne",{"_index":895,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ne(left",{"_index":332,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["neg",{"_index":395,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["neg(value",{"_index":363,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["nestedexpandoptions",{"_index":3144,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["network",{"_index":40,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":165,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["newline",{"_index":1147,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["newline_regexp",{"_index":1148,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["nextlink",{"_index":985,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["ngmodule",{"_index":2038,"title":{},"body":{"modules/ODataModule.html":{},"index.html":{}}}],["none",{"_index":43,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["none_parser",{"_index":107,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["noninfringement",{"_index":3114,"title":{},"body":{"license.html":{}}}],["normalize",{"_index":216,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["normalizevalue",{"_index":194,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["normalizevalue(value",{"_index":222,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["not(value",{"_index":346,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["notice",{"_index":3098,"title":{},"body":{"license.html":{}}}],["now",{"_index":288,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["npm",{"_index":2976,"title":{},"body":{"index.html":{}}}],["null",{"_index":217,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["nullable",{"_index":154,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["number",{"_index":82,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["number(directive.split('=')[1",{"_index":2681,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["number(match[1",{"_index":992,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["number.isnan(maxage",{"_index":2682,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["o",{"_index":2207,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["o.split",{"_index":2667,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["obj",{"_index":2255,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["object",{"_index":220,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.assign",{"_index":1886,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["object.assign(acc",{"_index":1892,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["object.assign(acc.params",{"_index":2121,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["object.assign(customparams",{"_index":2518,"title":{},"body":{"classes/ODataRequest.html":{}}}],["object.assign(this",{"_index":924,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["object.assign(this.etag",{"_index":1067,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["object.create(null",{"_index":213,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.defineproperty",{"_index":210,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.entries",{"_index":1825,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["object.entries(config.fields).map",{"_index":1952,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["object.entries(config.parameters",{"_index":1516,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["object.entries(params",{"_index":2136,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["object.getownpropertydescriptor(basector.prototype",{"_index":212,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.getownpropertynames(basector.prototype).foreach((name",{"_index":209,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.keys(this.options",{"_index":2388,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["object.keys(this.options).reduce((acc",{"_index":2366,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["objects",{"_index":861,"title":{},"body":{"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["objects.clone(this._segments",{"_index":2144,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["objects.clone(value",{"_index":2378,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["objects.get(obj",{"_index":2261,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.has(obj",{"_index":2265,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.merge(obj",{"_index":2266,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.resolvekey(key",{"_index":1869,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["objects.set(obj",{"_index":2259,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.unset(obj",{"_index":2262,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["obs",{"_index":1239,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["observable",{"_index":31,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["observe",{"_index":1235,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["obtaining",{"_index":3076,"title":{},"body":{"license.html":{}}}],["odata",{"_index":1004,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["odata.include",{"_index":2503,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata.mergecallableparameters(config.callables",{"_index":2727,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata.metadata",{"_index":2669,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata.streaming",{"_index":2671,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/docs",{"_index":3059,"title":{},"body":{"index.html":{}}}],["odata/src/lib/cache/cache.ts",{"_index":1292,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odata/src/lib/cache/cache.ts:108",{"_index":1316,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:113",{"_index":1330,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:117",{"_index":1328,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:128",{"_index":1324,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:15",{"_index":1309,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:16",{"_index":1307,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:163",{"_index":1326,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:23",{"_index":1322,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:24",{"_index":1335,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:26",{"_index":1337,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:38",{"_index":1339,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:50",{"_index":1311,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:62",{"_index":1314,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:66",{"_index":1333,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:81",{"_index":1320,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:89",{"_index":1318,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/memory.ts",{"_index":1984,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/memory.ts:5",{"_index":1985,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/storage.ts",{"_index":2008,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odata/src/lib/cache/storage.ts:13",{"_index":2011,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:14",{"_index":2010,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:32",{"_index":2015,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:39",{"_index":2014,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/client.ts",{"_index":2914,"title":{},"body":{"miscellaneous/functions.html":{}}}],["odata/src/lib/helper.ts",{"_index":3168,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/models/options.ts",{"_index":2878,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/module.ts",{"_index":2031,"title":{},"body":{"modules/ODataModule.html":{},"miscellaneous/functions.html":{}}}],["odata/src/lib/module.ts:19",{"_index":2036,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata/src/lib/options.ts",{"_index":997,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:104",{"_index":1026,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:110",{"_index":2069,"title":{},"body":{"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:111",{"_index":2068,"title":{},"body":{"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:118",{"_index":2070,"title":{},"body":{"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:22",{"_index":1021,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:26",{"_index":1017,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:30",{"_index":1018,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:34",{"_index":1009,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:38",{"_index":1015,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:42",{"_index":1012,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:46",{"_index":1022,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:50",{"_index":1005,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:55",{"_index":1001,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:61",{"_index":1008,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:71",{"_index":1016,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:88",{"_index":999,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/parsers/callable.ts",{"_index":1469,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:107",{"_index":1483,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:114",{"_index":1480,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:123",{"_index":1485,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:141",{"_index":1482,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:158",{"_index":1479,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:16",{"_index":2056,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:17",{"_index":2059,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:171",{"_index":1478,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:18",{"_index":2058,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:19",{"_index":2055,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:20",{"_index":2057,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:21",{"_index":2054,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:31",{"_index":2066,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:42",{"_index":2061,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:52",{"_index":2060,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:63",{"_index":2063,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:67",{"_index":2064,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:71",{"_index":2062,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:76",{"_index":2065,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:80",{"_index":2067,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:88",{"_index":1472,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:89",{"_index":1473,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:90",{"_index":1471,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:91",{"_index":1477,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:92",{"_index":1476,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:93",{"_index":1475,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:94",{"_index":1470,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/enum",{"_index":1944,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odata/src/lib/parsers/structured",{"_index":1712,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/path/handlers.ts",{"_index":2162,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:12",{"_index":2824,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:16",{"_index":2823,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:20",{"_index":2821,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:24",{"_index":2819,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:27",{"_index":2817,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:30",{"_index":2822,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:34",{"_index":2820,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:37",{"_index":2818,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:42",{"_index":2163,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:44",{"_index":2165,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:47",{"_index":2170,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:50",{"_index":2164,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:53",{"_index":2166,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:56",{"_index":2167,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:59",{"_index":2169,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:62",{"_index":2168,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:7",{"_index":2816,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:9",{"_index":2825,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/segments.ts",{"_index":2071,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/path/segments.ts:110",{"_index":2080,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:115",{"_index":2083,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:120",{"_index":2093,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:134",{"_index":2085,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:139",{"_index":2090,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:144",{"_index":2079,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:150",{"_index":2086,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:46",{"_index":2077,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:52",{"_index":2091,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:65",{"_index":2097,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:71",{"_index":2088,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:86",{"_index":2095,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:97",{"_index":2094,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/query/builder.ts",{"_index":2883,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions.ts",{"_index":2877,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odata/src/lib/resources/query/handlers.ts",{"_index":2197,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:14",{"_index":2234,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:18",{"_index":2228,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:22",{"_index":2216,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:27",{"_index":2232,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:33",{"_index":2208,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:39",{"_index":2223,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:43",{"_index":2225,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:49",{"_index":2214,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:55",{"_index":2210,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:68",{"_index":2227,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:73",{"_index":2219,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:78",{"_index":2230,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:8",{"_index":2206,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:88",{"_index":2221,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:93",{"_index":2212,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:99",{"_index":2215,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/options.ts",{"_index":2329,"title":{},"body":{"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/options.ts:102",{"_index":2336,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:114",{"_index":2339,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:119",{"_index":2345,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:125",{"_index":2341,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:129",{"_index":2348,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:133",{"_index":2343,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:140",{"_index":2335,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:32",{"_index":2334,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:39",{"_index":2346,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:66",{"_index":2351,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:77",{"_index":2349,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:87",{"_index":2350,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/syntax.ts",{"_index":181,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/syntax.ts:102",{"_index":410,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:105",{"_index":409,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:111",{"_index":2842,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:114",{"_index":2843,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:117",{"_index":2844,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:120",{"_index":2845,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:126",{"_index":690,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:129",{"_index":691,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:132",{"_index":692,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:135",{"_index":693,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:138",{"_index":694,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:141",{"_index":695,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:144",{"_index":696,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:147",{"_index":697,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:150",{"_index":698,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:153",{"_index":699,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:156",{"_index":700,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:159",{"_index":701,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:162",{"_index":702,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:165",{"_index":703,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:171",{"_index":188,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:174",{"_index":191,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:177",{"_index":193,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:183",{"_index":2848,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:187",{"_index":2849,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:193",{"_index":872,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:196",{"_index":873,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:199",{"_index":874,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:205",{"_index":412,"title":{},"body":{"classes/ConditionalFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:210",{"_index":2805,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/syntax.ts:217",{"_index":2808,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/syntax.ts:221",{"_index":2807,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/syntax.ts:229",{"_index":2806,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/syntax.ts:244",{"_index":897,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:247",{"_index":904,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:250",{"_index":899,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:253",{"_index":898,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:256",{"_index":903,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:259",{"_index":902,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:262",{"_index":896,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:265",{"_index":906,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:268",{"_index":905,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:271",{"_index":900,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:274",{"_index":901,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:280",{"_index":397,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:283",{"_index":403,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:286",{"_index":401,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:289",{"_index":399,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:292",{"_index":400,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:295",{"_index":402,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:300",{"_index":876,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/syntax.ts:303",{"_index":879,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/syntax.ts:307",{"_index":878,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/syntax.ts:313",{"_index":877,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/syntax.ts:318",{"_index":908,"title":{},"body":{"classes/Navigation.html":{}}}],["odata/src/lib/resources/query/syntax.ts:321",{"_index":911,"title":{},"body":{"classes/Navigation.html":{}}}],["odata/src/lib/resources/query/syntax.ts:325",{"_index":910,"title":{},"body":{"classes/Navigation.html":{}}}],["odata/src/lib/resources/query/syntax.ts:332",{"_index":909,"title":{},"body":{"classes/Navigation.html":{}}}],["odata/src/lib/resources/query/syntax.ts:338",{"_index":880,"title":{},"body":{"classes/GroupingAndNavigationOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:342",{"_index":881,"title":{},"body":{"classes/GroupingAndNavigationOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:347",{"_index":884,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/syntax.ts:356",{"_index":887,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/syntax.ts:370",{"_index":889,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:374",{"_index":888,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:42",{"_index":866,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/syntax.ts:49",{"_index":869,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/syntax.ts:5",{"_index":2812,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/syntax.ts:53",{"_index":868,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/syntax.ts:6",{"_index":2814,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/syntax.ts:61",{"_index":867,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/syntax.ts:7",{"_index":2813,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/syntax.ts:74",{"_index":2832,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:77",{"_index":2833,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:80",{"_index":2834,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:83",{"_index":2835,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:86",{"_index":2836,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:89",{"_index":2837,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:92",{"_index":2838,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/request.ts",{"_index":2393,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:18",{"_index":2419,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:19",{"_index":2422,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:20",{"_index":2423,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:21",{"_index":2425,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:212",{"_index":2430,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:22",{"_index":2420,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:221",{"_index":2432,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:225",{"_index":2434,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:229",{"_index":2436,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:23",{"_index":2421,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:241",{"_index":2438,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:253",{"_index":2440,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:261",{"_index":2442,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:269",{"_index":2444,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:273",{"_index":2446,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:277",{"_index":2426,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:281",{"_index":2427,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:285",{"_index":2428,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:29",{"_index":2424,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:30",{"_index":2418,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:39",{"_index":2412,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:40",{"_index":2410,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:41",{"_index":2411,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:42",{"_index":2414,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:43",{"_index":2415,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:44",{"_index":2408,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/resource.ts",{"_index":3162,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/responses/annotations.ts",{"_index":926,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:100",{"_index":1558,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:104",{"_index":1553,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:105",{"_index":1578,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:112",{"_index":1557,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:12",{"_index":935,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:130",{"_index":1538,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:134",{"_index":1540,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:138",{"_index":1542,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:142",{"_index":1544,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:146",{"_index":1546,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:151",{"_index":1548,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:156",{"_index":1550,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:16",{"_index":940,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:161",{"_index":1531,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:162",{"_index":1552,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:168",{"_index":1535,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:20",{"_index":942,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:25",{"_index":936,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:26",{"_index":938,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:5",{"_index":932,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:56",{"_index":1560,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:60",{"_index":1562,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:64",{"_index":1564,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:68",{"_index":1566,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:7",{"_index":933,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:72",{"_index":1567,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:76",{"_index":1569,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:80",{"_index":1571,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:84",{"_index":1573,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:88",{"_index":1575,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:92",{"_index":1554,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:93",{"_index":1577,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/csdl/csdl",{"_index":414,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["odata/src/lib/resources/responses/metadata.ts",{"_index":704,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:47",{"_index":706,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:48",{"_index":707,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/options.ts",{"_index":2639,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:19",{"_index":2651,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:20",{"_index":2649,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:22",{"_index":2648,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:23",{"_index":2650,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:24",{"_index":2646,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:26",{"_index":2647,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:28",{"_index":2645,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:29",{"_index":2644,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:36",{"_index":2661,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:40",{"_index":2652,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:44",{"_index":2656,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:61",{"_index":2660,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:67",{"_index":2658,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:72",{"_index":2654,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/response.ts",{"_index":2541,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:125",{"_index":2553,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:126",{"_index":2568,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:136",{"_index":2550,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:137",{"_index":2570,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:146",{"_index":2549,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:147",{"_index":2572,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:169",{"_index":2557,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:193",{"_index":2555,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:212",{"_index":2562,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:236",{"_index":2564,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:29",{"_index":2554,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:30",{"_index":2548,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:46",{"_index":2559,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:58",{"_index":2561,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:79",{"_index":2563,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:92",{"_index":2552,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:93",{"_index":2566,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/types.ts",{"_index":3169,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/types/batch.ts",{"_index":1120,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:137",{"_index":1130,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:39",{"_index":1126,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:40",{"_index":1127,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:44",{"_index":1134,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:70",{"_index":1133,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/options.ts",{"_index":3170,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/annotation.ts",{"_index":913,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:4",{"_index":921,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:5",{"_index":920,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:6",{"_index":917,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:7",{"_index":918,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:8",{"_index":919,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:9",{"_index":915,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/callable.ts",{"_index":1405,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:10",{"_index":1410,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:103",{"_index":1416,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:11",{"_index":1411,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:12",{"_index":1409,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:27",{"_index":1433,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:44",{"_index":1439,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:53",{"_index":1431,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:57",{"_index":1442,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:61",{"_index":1419,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:7",{"_index":1415,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:75",{"_index":1421,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:8",{"_index":1413,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:85",{"_index":1435,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:9",{"_index":1412,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:95",{"_index":1427,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/entity",{"_index":1580,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{}}}],["odata/src/lib/schema/enum",{"_index":1905,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["odata/src/lib/schema/schema.ts",{"_index":2687,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:13",{"_index":2695,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:14",{"_index":2701,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:15",{"_index":2694,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:16",{"_index":2700,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:17",{"_index":2699,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:18",{"_index":2696,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:19",{"_index":2697,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:20",{"_index":2693,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:43",{"_index":2714,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:50",{"_index":2716,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:62",{"_index":2703,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:67",{"_index":2710,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:73",{"_index":2712,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:79",{"_index":2706,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:87",{"_index":2708,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:92",{"_index":2702,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/services/base.ts",{"_index":1074,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:104",{"_index":1106,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:109",{"_index":1107,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:14",{"_index":1082,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:21",{"_index":1109,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:25",{"_index":1097,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:31",{"_index":1098,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:37",{"_index":1099,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:43",{"_index":1100,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:49",{"_index":1101,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:62",{"_index":1089,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:68",{"_index":1091,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:74",{"_index":1092,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:80",{"_index":1093,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:86",{"_index":1094,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:99",{"_index":1104,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/entity",{"_index":1627,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odata/src/lib/services/entity.ts",{"_index":1597,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:13",{"_index":1610,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:7",{"_index":1605,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:8",{"_index":1602,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/factory.ts",{"_index":2752,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:15",{"_index":2755,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:30",{"_index":2758,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:7",{"_index":2753,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/singleton.ts",{"_index":2762,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:35",{"_index":2774,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:45",{"_index":2772,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:59",{"_index":2770,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/types.ts",{"_index":7,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/types.ts:104",{"_index":2810,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:114",{"_index":406,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/types.ts:115",{"_index":405,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/types.ts:94",{"_index":2809,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:99",{"_index":2811,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/utils/durations.ts",{"_index":3161,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/utils/objects.ts",{"_index":2947,"title":{},"body":{"miscellaneous/functions.html":{}}}],["odata/src/lib/utils/strings.ts",{"_index":2953,"title":{},"body":{"miscellaneous/functions.html":{}}}],["odata/src/lib/utils/types.ts",{"_index":2943,"title":{},"body":{"miscellaneous/functions.html":{}}}],["odata/wiki",{"_index":3062,"title":{},"body":{"index.html":{}}}],["odata_configurations",{"_index":2041,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata_entityid_headers",{"_index":2577,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata_etag",{"_index":2983,"title":{},"body":{"index.html":{}}}],["odata_version",{"_index":1149,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata_version_headers",{"_index":2573,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataactionresource",{"_index":1086,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataannotation",{"_index":912,"title":{"classes/ODataAnnotation.html":{}},"body":{"classes/ODataAnnotation.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odataannotation(annot",{"_index":1594,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odataannotation(config",{"_index":2732,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataannotations",{"_index":925,"title":{"classes/ODataAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:118",{"_index":1533,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:12",{"_index":1536,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:126",{"_index":1534,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:30",{"_index":2194,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:38",{"_index":2195,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:44",{"_index":1555,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:52",{"_index":1556,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:7",{"_index":1532,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataapi",{"_index":1156,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["odataapioptions",{"_index":996,"title":{"classes/ODataApiOptions.html":{}},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["odatabaseservice",{"_index":1073,"title":{"classes/ODataBaseService.html":{}},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:25",{"_index":1607,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:62",{"_index":1606,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:99",{"_index":1608,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabatchrequest",{"_index":1119,"title":{"classes/ODataBatchRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchrequest(req",{"_index":1237,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource",{"_index":1204,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odatabatchresource(api",{"_index":1214,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource(this.api",{"_index":1215,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildbody",{"_index":1252,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildbody(bound",{"_index":1247,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.handleresponse(requests",{"_index":1251,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatacache",{"_index":1291,"title":{"classes/ODataCache.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacache:10",{"_index":1989,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:108",{"_index":1992,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:113",{"_index":1998,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:117",{"_index":1997,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:128",{"_index":1995,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:15",{"_index":1987,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:16",{"_index":1986,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:163",{"_index":1996,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:20",{"_index":1988,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:26",{"_index":2000,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:38",{"_index":2001,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:45",{"_index":2012,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:50",{"_index":1990,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:60",{"_index":2013,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:62",{"_index":1991,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:66",{"_index":1999,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:81",{"_index":1994,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:89",{"_index":1993,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacacheentry",{"_index":1312,"title":{"interfaces/ODataCacheEntry.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacallable",{"_index":1404,"title":{"classes/ODataCallable.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataSchema.html":{}}}],["odatacallable(config",{"_index":2728,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatacallableparser",{"_index":1414,"title":{"classes/ODataCallableParser.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataclient",{"_index":1080,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["odatacollection",{"_index":1670,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odatacollectionresource",{"_index":3145,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatacontext",{"_index":931,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentities",{"_index":1110,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentitiesannotations",{"_index":982,"title":{"classes/ODataEntitiesAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentitiesoptions",{"_index":3147,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentity",{"_index":1111,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataentityannotations",{"_index":953,"title":{"classes/ODataEntityAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentitycontainer",{"_index":1579,"title":{"classes/ODataEntityContainer.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{}}}],["odataentitycontainer(config",{"_index":2731,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataentityoptions",{"_index":3148,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentityresource",{"_index":1653,"title":{},"body":{"classes/ODataEntitySetService.html":{},"miscellaneous/typealiases.html":{}}}],["odataentityservice",{"_index":1596,"title":{"classes/ODataEntityService.html":{}},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataentityservice:20",{"_index":2767,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityservice:28",{"_index":2766,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityservice:29",{"_index":1652,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityservice:37",{"_index":1639,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityset",{"_index":1582,"title":{"classes/ODataEntitySet.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataSchema.html":{}}}],["odataentityset(config",{"_index":1592,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["odataentitysetresource",{"_index":1651,"title":{},"body":{"classes/ODataEntitySetService.html":{},"miscellaneous/typealiases.html":{}}}],["odataentitysetservice",{"_index":1626,"title":{"classes/ODataEntitySetService.html":{}},"body":{"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{}}}],["odataentitytypekey",{"_index":1711,"title":{"classes/ODataEntityTypeKey.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odataentitytypekey(key",{"_index":1823,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odataenumtype",{"_index":1904,"title":{"classes/ODataEnumType.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["odataenumtype(config",{"_index":2722,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataenumtypefieldparser",{"_index":1914,"title":{"classes/ODataEnumTypeFieldParser.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypefieldparser(name",{"_index":1953,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypeparser",{"_index":1487,"title":{"classes/ODataEnumTypeParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatafunctionresource",{"_index":1096,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatafunctions",{"_index":386,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odatahelper",{"_index":1030,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["odatahelper[this.version",{"_index":1071,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["odatainmemorycache",{"_index":1983,"title":{"classes/ODataInMemoryCache.html":{}},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatainstoragecache",{"_index":2007,"title":{"classes/ODataInStorageCache.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatametadata",{"_index":716,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_data_services",{"_index":829,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_reference",{"_index":820,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_schema",{"_index":833,"title":{},"body":{"classes/Field.html":{}}}],["odatametadatatype",{"_index":26,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odatamodel",{"_index":1611,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatamodelentry",{"_index":3149,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodeleventtype",{"_index":3150,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelfieldoptions",{"_index":3151,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelrelation",{"_index":3152,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelresource",{"_index":3153,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelstate",{"_index":2871,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odatamodule",{"_index":2029,"title":{"modules/ODataModule.html":{}},"body":{"modules/ODataModule.html":{},"index.html":{},"modules.html":{}}}],["odatamodule.forroot",{"_index":2978,"title":{},"body":{"index.html":{}}}],["odatamodule.forroot(trippinconfig",{"_index":3040,"title":{},"body":{"index.html":{}}}],["odatanavigationpropertyresource",{"_index":1103,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odatanoneoptions",{"_index":3154,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataoperators",{"_index":383,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odataoptions",{"_index":1157,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataparameterparser",{"_index":1474,"title":{"classes/ODataParameterParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataparameterparser(name",{"_index":1517,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataparseroptions",{"_index":1072,"title":{"classes/ODataParserOptions.html":{}},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odataparseroptions(options",{"_index":1496,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatapathsegments",{"_index":1158,"title":{"classes/ODataPathSegments.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odatapathsegments(segments",{"_index":2145,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odatapathsegmentshandler",{"_index":2161,"title":{"classes/ODataPathSegmentsHandler.html":{}},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odataproperty",{"_index":1112,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odatapropertyannotations",{"_index":948,"title":{"classes/ODataPropertyAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odatapropertyoptions",{"_index":3155,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatapropertyresource",{"_index":3163,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataqueryarguments",{"_index":2237,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryargumentsoptions",{"_index":1088,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryoptionhandler",{"_index":2196,"title":{"classes/ODataQueryOptionHandler.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionhandler(this.options",{"_index":2382,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions",{"_index":2238,"title":{"classes/ODataQueryOptions.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions(options",{"_index":2379,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionshandler",{"_index":2267,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odatareferential",{"_index":1729,"title":{"classes/ODataReferential.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatareferential(referential",{"_index":1738,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatarequest",{"_index":1125,"title":{"classes/ODataRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresource",{"_index":1159,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["odataresponse",{"_index":1160,"title":{"classes/ODataResponse.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponse.fromjson(req",{"_index":2027,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponseoptions",{"_index":2551,"title":{"classes/ODataResponseOptions.html":{}},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this",{"_index":2665,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this.api.options",{"_index":2596,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataschema",{"_index":1408,"title":{"classes/ODataSchema.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["odatasegment",{"_index":2076,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["odataservicefactory",{"_index":2033,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["odatasettings",{"_index":2044,"title":{},"body":{"modules/ODataModule.html":{}}}],["odatasettings(...configs",{"_index":2047,"title":{},"body":{"modules/ODataModule.html":{}}}],["odatasingletonresource",{"_index":2768,"title":{},"body":{"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odatasingletonservice",{"_index":2760,"title":{"classes/ODataSingletonService.html":{}},"body":{"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{}}}],["odatastructuredtype",{"_index":2698,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtype(config",{"_index":2725,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtypefieldparser",{"_index":1723,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatastructuredtypefieldparser(name",{"_index":1827,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatastructuredtypeparser",{"_index":1488,"title":{"classes/ODataStructuredTypeParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatasyntax",{"_index":203,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odatausage",{"_index":2977,"title":{},"body":{"index.html":{}}}],["odataversion",{"_index":34,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataversionhelper",{"_index":29,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["of(cached",{"_index":1392,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["ondelete",{"_index":563,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["one",{"_index":2246,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["onerror",{"_index":1122,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onerror(content",{"_index":1128,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload",{"_index":1123,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload(content",{"_index":1132,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["op",{"_index":319,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["open",{"_index":163,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["open.org/odata/odata",{"_index":1033,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["open.org/odata/odata/v4.0/errata02/os/complete/part1",{"_index":1037,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["open.org/odata/odata/v4.01/odata",{"_index":2269,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["opentype",{"_index":470,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["operator",{"_index":204,"title":{"classes/Operator.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('add",{"_index":354,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('and",{"_index":343,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('div",{"_index":360,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('eq",{"_index":331,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ge",{"_index":337,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('gt",{"_index":335,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('has",{"_index":349,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('in",{"_index":351,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('le",{"_index":341,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('lt",{"_index":339,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mod",{"_index":362,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mul",{"_index":358,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ne",{"_index":333,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('not",{"_index":347,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('or",{"_index":345,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('sub",{"_index":356,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator:221",{"_index":886,"title":{},"body":{"classes/Lambda.html":{}}}],["operator:360",{"_index":885,"title":{},"body":{"classes/Lambda.html":{}}}],["operators",{"_index":385,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["option",{"_index":2331,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["option(name",{"_index":2344,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["optional",{"_index":12,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":9,"title":{"interfaces/Options.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/functions.html":{}}}],["options.custom",{"_index":1889,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.custom[f.name",{"_index":1890,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.expand",{"_index":1882,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.headers",{"_index":1246,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["options.helper",{"_index":2628,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.annotations(this.payload",{"_index":2622,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(data",{"_index":2631,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(payload",{"_index":2637,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.etag(this._annotations",{"_index":2624,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.id(this._annotations",{"_index":2626,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.params",{"_index":1248,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["options.required",{"_index":1895,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.required[f.name",{"_index":1896,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.select",{"_index":1883,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.select).indexof(f.name",{"_index":1884,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.withcredentials",{"_index":1249,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["options?.helper.type(value",{"_index":1764,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["optionshelper",{"_index":87,"title":{"interfaces/OptionsHelper.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["opts",{"_index":110,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["or(left",{"_index":344,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["orderby",{"_index":67,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["orderby(opts",{"_index":2298,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["orderbyobject",{"_index":3156,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["orderbytype",{"_index":3157,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["original",{"_index":1221,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["os",{"_index":1041,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["otherwise",{"_index":3125,"title":{},"body":{"license.html":{}}}],["out",{"_index":3127,"title":{},"body":{"license.html":{}}}],["overview",{"_index":3131,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":167,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["p.configure",{"_index":1529,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.encode(params[p.name",{"_index":1526,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.name",{"_index":1522,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.serialize(params[p.name",{"_index":1525,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.startswith(application_json",{"_index":2602,"title":{},"body":{"classes/ODataResponse.html":{}}}],["package",{"_index":2850,"title":{"dependencies.html":{}},"body":{}}],["paging",{"_index":2307,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["param",{"_index":74,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parameter",{"_index":103,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["parameter.collection",{"_index":1494,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.nullable",{"_index":1492,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.type",{"_index":1490,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameters",{"_index":172,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["parameters(value",{"_index":2182,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["parameters.reduce",{"_index":1524,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["params",{"_index":18,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["params[p.name",{"_index":1523,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parent",{"_index":1815,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parent.children.push(this",{"_index":1852,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parentelement",{"_index":859,"title":{},"body":{"classes/Field.html":{}}}],["parentelement.children",{"_index":864,"title":{},"body":{"classes/Field.html":{}}}],["parse",{"_index":848,"title":{},"body":{"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parsenot",{"_index":2910,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parsenot(builtfilters",{"_index":2938,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parser",{"_index":94,"title":{"interfaces/Parser.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parser.deserialize(value",{"_index":1767,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parser.parsefromstring(xml",{"_index":809,"title":{},"body":{"classes/Field.html":{}}}],["parser.serialize(value",{"_index":1770,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parserfortype",{"_index":1462,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parserfortype(this.base",{"_index":1851,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parserfortype(this.return.type",{"_index":1527,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parserfortype(this.type",{"_index":1502,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parseroptions",{"_index":1495,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parseroptions?.stringasenum",{"_index":1958,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["parsers",{"_index":125,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["part1",{"_index":1042,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["part2",{"_index":2271,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["partial",{"_index":1645,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":3112,"title":{},"body":{"license.html":{}}}],["partner",{"_index":564,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["patch",{"_index":1172,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["patch'].indexof(this._method",{"_index":2497,"title":{},"body":{"classes/ODataRequest.html":{}}}],["patch(attrs",{"_index":2769,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["path",{"_index":578,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{},"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/SegmentHandler.html":{},"miscellaneous/functions.html":{}}}],["path(value",{"_index":2175,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["path.slice(1",{"_index":2110,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.startswith(path_separator",{"_index":2109,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path_separator",{"_index":2100,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathandparams",{"_index":2074,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["paths",{"_index":2122,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames",{"_index":49,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["pathsegmentnames.entityset",{"_index":1354,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.function",{"_index":2105,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.navigationproperty",{"_index":2149,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.property",{"_index":2150,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder",{"_index":2103,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/functions.html":{}}}],["pathsegmentsbuilder(segment",{"_index":2118,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/functions.html":{}}}],["pathwithparams",{"_index":2405,"title":{},"body":{"classes/ODataRequest.html":{}}}],["path}?${this._params",{"_index":2537,"title":{},"body":{"classes/ODataRequest.html":{}}}],["pattern",{"_index":263,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEnumType.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["pattern.test(a.term",{"_index":1939,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["payload",{"_index":109,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["people",{"_index":3025,"title":{},"body":{"index.html":{}}}],["people.fetch",{"_index":3036,"title":{},"body":{"index.html":{}}}],["peopleservice",{"_index":2997,"title":{},"body":{"index.html":{}}}],["peopleservice.entities",{"_index":3026,"title":{},"body":{"index.html":{}}}],["permission",{"_index":3070,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":132,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["permit",{"_index":3092,"title":{},"body":{"license.html":{}}}],["person",{"_index":3075,"title":{},"body":{"license.html":{}}}],["persons",{"_index":3093,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":1694,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["please",{"_index":2962,"title":{},"body":{"index.html":{}}}],["point",{"_index":310,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["policy",{"_index":1011,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataParserOptions.html":{}}}],["polygon",{"_index":313,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["portions",{"_index":3102,"title":{},"body":{"license.html":{}}}],["post",{"_index":1171,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["post'].indexof(this._method",{"_index":2506,"title":{},"body":{"classes/ODataRequest.html":{}}}],["precision",{"_index":156,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["predicate",{"_index":1587,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["predicate(this",{"_index":1834,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["prefer",{"_index":19,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["prefer.length",{"_index":2508,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push",{"_index":2502,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.continue",{"_index":2507,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxpagesize",{"_index":2500,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`return=${this.api.options.prefer?.return",{"_index":2498,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefix",{"_index":2928,"title":{},"body":{"miscellaneous/functions.html":{}}}],["primitive",{"_index":2242,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["private",{"_index":46,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["project",{"_index":2964,"title":{},"body":{"index.html":{}}}],["projects/.../builder.ts",{"_index":2875,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../client.ts",{"_index":2891,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../durations.ts",{"_index":3135,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../expressions.ts",{"_index":2869,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../helper.ts",{"_index":3146,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../metadata.ts",{"_index":2870,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../module.ts",{"_index":2903,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../objects.ts",{"_index":2906,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../options.ts",{"_index":2872,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../resource.ts",{"_index":3136,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../segments.ts",{"_index":2911,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../strings.ts",{"_index":2909,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../structured",{"_index":3141,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../syntax.ts",{"_index":2893,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../types.ts",{"_index":2873,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["properties",{"_index":11,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["property",{"_index":54,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["property(name",{"_index":975,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["property.enum",{"_index":1967,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["property.ts",{"_index":560,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["property.ts:1",{"_index":649,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:14",{"_index":595,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:15",{"_index":596,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:16",{"_index":597,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:17",{"_index":599,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:18",{"_index":598,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:19",{"_index":594,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:25",{"_index":568,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:3",{"_index":650,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:30",{"_index":571,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:31",{"_index":569,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:32",{"_index":572,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:33",{"_index":570,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:39",{"_index":608,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:4",{"_index":652,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:40",{"_index":609,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:43",{"_index":583,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:44",{"_index":584,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:5",{"_index":651,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:9",{"_index":593,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["propertyref",{"_index":743,"title":{},"body":{"classes/Field.html":{}}}],["propertyrefs",{"_index":486,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["propname",{"_index":2936,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propprefix",{"_index":2923,"title":{},"body":{"miscellaneous/functions.html":{}}}],["protected",{"_index":225,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["protocol",{"_index":1043,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["protocol/odata",{"_index":1038,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["provide",{"_index":2049,"title":{},"body":{"modules/ODataModule.html":{}}}],["provided",{"_index":3103,"title":{},"body":{"license.html":{}}}],["providers",{"_index":2032,"title":{},"body":{"modules/ODataModule.html":{}}}],["public",{"_index":45,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"modules/ODataModule.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["publish",{"_index":3086,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":3113,"title":{},"body":{"license.html":{}}}],["push",{"_index":2203,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"index.html":{}}}],["push(value",{"_index":2222,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["put",{"_index":404,"title":{},"body":{"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{}}}],["put(key",{"_index":108,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["put(name",{"_index":1332,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse",{"_index":1304,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse(req",{"_index":1334,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["q.apply(options",{"_index":1116,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["qualifier",{"_index":448,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["queries",{"_index":2994,"title":{},"body":{"index.html":{}}}],["query",{"_index":104,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["query.expand",{"_index":2318,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.filter",{"_index":2324,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.orderby",{"_index":2326,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.search",{"_index":2322,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.select",{"_index":2316,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.transform",{"_index":2320,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["querycustomtype",{"_index":196,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["querycustomtypes",{"_index":2874,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["querying",{"_index":2958,"title":{},"body":{"index.html":{}}}],["queryoptionnames",{"_index":25,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["queryoptionnames.compute",{"_index":2283,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.expand",{"_index":2358,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.filter",{"_index":2296,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.format",{"_index":2359,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.orderby",{"_index":2299,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.search",{"_index":2353,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.select",{"_index":2352,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.skip",{"_index":2356,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.skiptoken",{"_index":2357,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.top",{"_index":2355,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.transform",{"_index":2354,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptions",{"_index":3158,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["queryparams",{"_index":2534,"title":{},"body":{"classes/ODataRequest.html":{}}}],["r",{"_index":1090,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSingletonService.html":{}}}],["r.ismutate",{"_index":1402,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["r.request",{"_index":1209,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["range",{"_index":1802,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["raw",{"_index":1718,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/enumerations.html":{}}}],["raw(`'${serialized",{"_index":1964,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(json.stringify(this.serialize(value",{"_index":1850,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["raw(key",{"_index":2115,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["raw(serialized",{"_index":1965,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["readlink",{"_index":962,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["readonly",{"_index":719,"title":{},"body":{"classes/Field.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["reduce",{"_index":1351,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["reduce((acc",{"_index":1891,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["reference",{"_index":56,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["reference.ts",{"_index":541,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["reference.ts:14",{"_index":543,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:15",{"_index":544,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:18",{"_index":553,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:20",{"_index":556,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:21",{"_index":554,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:22",{"_index":555,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:3",{"_index":603,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:5",{"_index":606,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:6",{"_index":605,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:7",{"_index":604,"title":{},"body":{"classes/CsdlReference.html":{}}}],["referenced",{"_index":161,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referencedproperty",{"_index":159,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["references",{"_index":804,"title":{},"body":{"classes/Field.html":{}}}],["referential",{"_index":160,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referentialconstraint",{"_index":746,"title":{},"body":{"classes/Field.html":{}}}],["referentialconstraints",{"_index":565,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["referentials",{"_index":158,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["regexp",{"_index":1916,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["region",{"_index":114,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["related",{"_index":2963,"title":{},"body":{"index.html":{}}}],["relative",{"_index":1166,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["remove",{"_index":1372,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["remove(...names",{"_index":2384,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(names",{"_index":2347,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(value",{"_index":2224,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["removed",{"_index":2880,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["render",{"_index":214,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["render(aliases",{"_index":198,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(field",{"_index":232,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(left",{"_index":323,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(right",{"_index":327,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(this.group",{"_index":367,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(v",{"_index":234,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value",{"_index":2917,"title":{},"body":{"miscellaneous/functions.html":{}}}],["render(value(syntax",{"_index":219,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value.render(aliases",{"_index":221,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["renderable",{"_index":197,"title":{"interfaces/Renderable.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["renderprimitivevalue",{"_index":2912,"title":{},"body":{"miscellaneous/functions.html":{}}}],["renderprimitivevalue(key",{"_index":2940,"title":{},"body":{"miscellaneous/functions.html":{}}}],["replace(/\\;/g",{"_index":2606,"title":{},"body":{"classes/ODataResponse.html":{}}}],["reportprogress",{"_index":2401,"title":{},"body":{"classes/ODataRequest.html":{}}}],["representation",{"_index":84,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["req",{"_index":1226,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{}}}],["req.api",{"_index":1227,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["req.fetchpolicy",{"_index":1389,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isbatch",{"_index":1399,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isfetch",{"_index":1385,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.ismutate",{"_index":1387,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.observe",{"_index":1231,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["req.onload(chunk.slice(1",{"_index":1290,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["req.resource",{"_index":1400,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponse.html":{}}}],["req.resource.clonesegments",{"_index":1349,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["request",{"_index":97,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["requester",{"_index":1222,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests",{"_index":1207,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["requests[index",{"_index":1288,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["require",{"_index":1703,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["required",{"_index":1728,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["res",{"_index":1168,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{}}}],["res$.pipe",{"_index":1394,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res$.pipe(startwith(cached",{"_index":1398,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.body",{"_index":2579,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.context",{"_index":1356,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.destroy(options",{"_index":1691,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.haskey",{"_index":1686,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.headers",{"_index":2580,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.join(newline",{"_index":1179,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.length",{"_index":1273,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.modify(attrs",{"_index":1690,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.options.cacheability",{"_index":1396,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.options.maxage",{"_index":2005,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.push",{"_index":1261,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${batch",{"_index":1270,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${batchboundary",{"_index":1263,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${changesetboundary",{"_index":1267,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_id",{"_index":1269,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_transfer_encoding",{"_index":1268,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_type",{"_index":1173,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${newline}${json.stringify(batch.request.body",{"_index":1272,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(newline",{"_index":1266,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.status",{"_index":2581,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.statustext",{"_index":2582,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.tojson",{"_index":2026,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.update(attrs",{"_index":1689,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.url",{"_index":2583,"title":{},"body":{"classes/ODataResponse.html":{}}}],["reset",{"_index":3165,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resolve",{"_index":2677,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["resolvekey",{"_index":2778,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["resolvekey(value",{"_index":1855,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["resolvetitle",{"_index":1937,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["resolvetitle(this.findfieldbyname(value",{"_index":1942,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["resolvetitle(this.findfieldbyvalue(value",{"_index":1941,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["resource",{"_index":1085,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["resource.call(params",{"_index":1117,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.fetch",{"_index":1118,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.query((q",{"_index":1115,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resourceparams",{"_index":2471,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$expand",{"_index":2517,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$select",{"_index":2515,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourcepath",{"_index":2470,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resources",{"_index":1113,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["resources/query",{"_index":1719,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["response",{"_index":1020,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["response.body.split(newline_regexp",{"_index":1283,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.headers.get(content_type",{"_index":1278,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsejson",{"_index":2016,"title":{"interfaces/ResponseJson.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["responseoptions",{"_index":88,"title":{"interfaces/ResponseOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["responses",{"_index":1161,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsetype",{"_index":1087,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["restore",{"_index":1241,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["restriction",{"_index":3082,"title":{},"body":{"license.html":{}}}],["result",{"_index":1219,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{}}}],["result.params",{"_index":2124,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["result.paths.join(path_separator",{"_index":2123,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["results",{"_index":176,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":83,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["returns",{"_index":189,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":417,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["right",{"_index":322,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["right.map((v",{"_index":325,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["rights",{"_index":3084,"title":{},"body":{"license.html":{}}}],["root",{"_index":2986,"title":{},"body":{"index.html":{}}}],["round",{"_index":185,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["round(value",{"_index":192,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["rxjs",{"_index":32,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1345,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{}}}],["s",{"_index":1105,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataSingletonService.html":{}}}],["s.key",{"_index":2134,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.name",{"_index":1353,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.parameters",{"_index":2142,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.path",{"_index":1355,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.type",{"_index":2127,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s1",{"_index":258,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["s2",{"_index":256,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["same",{"_index":1230,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["save",{"_index":1635,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["save(attrs",{"_index":1664,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["scale",{"_index":157,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["schema",{"_index":709,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.alias",{"_index":1453,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.contentencoding",{"_index":1794,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.default",{"_index":1807,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.format",{"_index":1787,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.iscompoundkey",{"_index":1701,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.maxlength",{"_index":1796,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.namespace",{"_index":1452,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.org",{"_index":1775,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.org/draft",{"_index":1879,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.pattern",{"_index":1788,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.properties",{"_index":1885,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.required",{"_index":1893,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.resolvekey(attrs",{"_index":1706,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.ts",{"_index":619,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:13",{"_index":629,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:15",{"_index":638,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:16",{"_index":631,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:17",{"_index":636,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:18",{"_index":633,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:19",{"_index":635,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:20",{"_index":637,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:21",{"_index":630,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:22",{"_index":634,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:23",{"_index":640,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:24",{"_index":639,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:25",{"_index":632,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.type",{"_index":1786,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema/annotation",{"_index":1717,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schemaconfig",{"_index":127,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["schemas",{"_index":126,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["scope",{"_index":1305,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["scope(req",{"_index":1336,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["scope.length",{"_index":1375,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["scope.push(name",{"_index":1374,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["search",{"_index":65,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["search(opts",{"_index":2293,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["second",{"_index":685,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["second(value",{"_index":290,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["segment",{"_index":2082,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/functions.html":{}}}],["segment.clearkey",{"_index":2131,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key",{"_index":2111,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key(key",{"_index":2132,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.name",{"_index":2104,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.parameters",{"_index":2106,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.path",{"_index":2108,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler",{"_index":2101,"title":{"classes/SegmentHandler.html":{}},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segmenthandler(s",{"_index":2152,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler(segment",{"_index":2157,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments",{"_index":1212,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segments(undefined",{"_index":2092,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.add(pathsegmentnames.batch",{"_index":1213,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["segments.filter",{"_index":2148,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.foreach((segment",{"_index":2129,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.length",{"_index":2153,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.map((s",{"_index":2133,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.segments",{"_index":1350,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["segments[0",{"_index":2154,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments[segments.length",{"_index":2155,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["select",{"_index":61,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["select(opts",{"_index":2274,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["selector",{"_index":2984,"title":{},"body":{"index.html":{}}}],["selecttype",{"_index":3159,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["sell",{"_index":3090,"title":{},"body":{"license.html":{}}}],["send",{"_index":1006,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["sent",{"_index":1014,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["serialization",{"_index":1436,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["serialize",{"_index":100,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["serialize(params",{"_index":1484,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["serialize(value",{"_index":1434,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Parser.html":{}}}],["serialized",{"_index":1437,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["server",{"_index":1195,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["service",{"_index":174,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["servicerooturl",{"_index":117,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["services/index",{"_index":2043,"title":{},"body":{"modules/ODataModule.html":{}}}],["sessionstorage",{"_index":2017,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["set",{"_index":504,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{}}}],["set(path",{"_index":2226,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["set.ts",{"_index":505,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{}}}],["set.ts:10",{"_index":1616,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["set.ts:105",{"_index":1667,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:122",{"_index":1663,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:138",{"_index":1649,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:155",{"_index":1661,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:175",{"_index":1665,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:21",{"_index":1650,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:26",{"_index":1619,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["set.ts:3",{"_index":508,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:32",{"_index":1620,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["set.ts:38",{"_index":1642,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:39",{"_index":1643,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:41",{"_index":1618,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["set.ts:5",{"_index":511,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:50",{"_index":1669,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:58",{"_index":1655,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:6",{"_index":509,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:67",{"_index":1657,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:7",{"_index":512,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:79",{"_index":1659,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:8",{"_index":510,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:9",{"_index":1617,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["set.ts:91",{"_index":1646,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["setcache",{"_index":2640,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setcache(cachecontrol",{"_index":2653,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures",{"_index":2641,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures(features",{"_index":2655,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation",{"_index":2642,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation(location",{"_index":2657,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["settings",{"_index":2045,"title":{},"body":{"modules/ODataModule.html":{}}}],["setversion",{"_index":2643,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setversion(version",{"_index":2659,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["shall",{"_index":3099,"title":{},"body":{"license.html":{}}}],["shortcuts",{"_index":1692,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["singleton",{"_index":53,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"classes/ODataPathSegmentsHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["singleton(singletonname",{"_index":2757,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singleton.ts",{"_index":643,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:3",{"_index":645,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:5",{"_index":646,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:6",{"_index":648,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:7",{"_index":647,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singletonname",{"_index":2759,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singletons",{"_index":494,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["singletonschema",{"_index":2765,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["skip",{"_index":69,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["skip(opts",{"_index":2303,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["skiptoken",{"_index":70,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["skiptoken(opts",{"_index":2305,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["software",{"_index":3078,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["specific",{"_index":1704,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["specified",{"_index":853,"title":{},"body":{"classes/Field.html":{}}}],["split",{"_index":2600,"title":{},"body":{"classes/ODataResponse.html":{}}}],["srid",{"_index":433,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["standardaggregatemethods",{"_index":2876,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["start",{"_index":250,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["started",{"_index":2955,"title":{"index.html":{},"license.html":{}},"body":{}}],["started/advanced",{"_index":1202,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataSingletonService.html":{}}}],["startindex",{"_index":1287,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["startswith",{"_index":2830,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["startswith(field",{"_index":247,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["startwith",{"_index":1343,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["states",{"_index":3015,"title":{},"body":{"index.html":{}}}],["static",{"_index":718,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"modules/ODataModule.html":{},"classes/ODataResponse.html":{}}}],["status",{"_index":1129,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["status.code",{"_index":1185,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["status.message",{"_index":1187,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["status.text",{"_index":1198,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["statustext",{"_index":1186,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["storage",{"_index":2009,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["store",{"_index":47,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["store'].indexof(directive",{"_index":2684,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["streaming",{"_index":78,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["string",{"_index":75,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["stringandcollectionfunctions",{"_index":236,"title":{"classes/StringAndCollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["stringasenum",{"_index":73,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["stringfunctions",{"_index":261,"title":{"classes/StringFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["strings",{"_index":1162,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strings.uniqueid(batch_prefix",{"_index":1243,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strings.uniqueid(changeset_prefix",{"_index":1264,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strip",{"_index":1019,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["stripmetadata",{"_index":20,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structural",{"_index":481,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["structured",{"_index":464,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["structured.fields.find((f",{"_index":1860,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["structuredtype",{"_index":1732,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["structuredtypeconfig",{"_index":139,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldconfig",{"_index":93,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldoptions",{"_index":91,"title":{"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structuredtypeschema",{"_index":1599,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["strucuturedtype",{"_index":1510,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["styleurls",{"_index":2989,"title":{},"body":{"index.html":{}}}],["sub",{"_index":396,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["sub(left",{"_index":355,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["subject",{"_index":1121,"title":{},"body":{"classes/ODataBatchRequest.html":{},"license.html":{}}}],["sublicense",{"_index":3088,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":3001,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":3101,"title":{},"body":{"license.html":{}}}],["substring",{"_index":2831,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["substring(field",{"_index":249,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["sum",{"_index":2885,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["super",{"_index":1164,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["super(annotationlist",{"_index":449,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["super(init",{"_index":2578,"title":{},"body":{"classes/ODataResponse.html":{}}}],["super(name",{"_index":482,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{}}}],["super(op",{"_index":375,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["super.flush",{"_index":2025,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["support",{"_index":3046,"title":{},"body":{"index.html":{}}}],["supported",{"_index":857,"title":{},"body":{"classes/Field.html":{}}}],["switch",{"_index":1225,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["switchmap",{"_index":3008,"title":{},"body":{"index.html":{}}}],["symbol.tostringtag",{"_index":228,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["sync",{"_index":3167,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["syntax",{"_index":390,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["t",{"_index":99,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["table",{"_index":2970,"title":{},"body":{"index.html":{}}}],["tag",{"_index":715,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["tag_action",{"_index":751,"title":{},"body":{"classes/Field.html":{}}}],["tag_action_import",{"_index":757,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotation",{"_index":732,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotations",{"_index":731,"title":{},"body":{"classes/Field.html":{}}}],["tag_complex_type",{"_index":737,"title":{},"body":{"classes/Field.html":{}}}],["tag_data_services",{"_index":722,"title":{},"body":{"classes/Field.html":{}}}],["tag_edmx",{"_index":720,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_container",{"_index":752,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_set",{"_index":753,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_type",{"_index":739,"title":{},"body":{"classes/Field.html":{}}}],["tag_enum_type",{"_index":734,"title":{},"body":{"classes/Field.html":{}}}],["tag_function",{"_index":748,"title":{},"body":{"classes/Field.html":{}}}],["tag_function_import",{"_index":755,"title":{},"body":{"classes/Field.html":{}}}],["tag_include",{"_index":726,"title":{},"body":{"classes/Field.html":{}}}],["tag_include_annotations",{"_index":728,"title":{},"body":{"classes/Field.html":{}}}],["tag_key",{"_index":741,"title":{},"body":{"classes/Field.html":{}}}],["tag_member",{"_index":736,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property",{"_index":744,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property_binding",{"_index":759,"title":{},"body":{"classes/Field.html":{}}}],["tag_on_delete",{"_index":747,"title":{},"body":{"classes/Field.html":{}}}],["tag_parameter",{"_index":750,"title":{},"body":{"classes/Field.html":{}}}],["tag_property",{"_index":740,"title":{},"body":{"classes/Field.html":{}}}],["tag_property_ref",{"_index":742,"title":{},"body":{"classes/Field.html":{}}}],["tag_reference",{"_index":724,"title":{},"body":{"classes/Field.html":{}}}],["tag_referential_constraint",{"_index":745,"title":{},"body":{"classes/Field.html":{}}}],["tag_return_type",{"_index":749,"title":{},"body":{"classes/Field.html":{}}}],["tag_schema",{"_index":733,"title":{},"body":{"classes/Field.html":{}}}],["tag_singleton",{"_index":754,"title":{},"body":{"classes/Field.html":{}}}],["tag_term",{"_index":730,"title":{},"body":{"classes/Field.html":{}}}],["tag_type_definition",{"_index":760,"title":{},"body":{"classes/Field.html":{}}}],["tags",{"_index":717,"title":{},"body":{"classes/Field.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["tags(req",{"_index":1338,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["tags.length",{"_index":1380,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push",{"_index":1358,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push(context.type",{"_index":1362,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.some((t",{"_index":1381,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap",{"_index":1344,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap((res",{"_index":1395,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["targe",{"_index":2945,"title":{},"body":{"miscellaneous/functions.html":{}}}],["target",{"_index":447,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["targetnamespace",{"_index":551,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["templateurl",{"_index":2987,"title":{},"body":{"index.html":{}}}],["term",{"_index":129,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["termnamespace",{"_index":550,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["terms",{"_index":626,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["text",{"_index":1196,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["text/plain",{"_index":2495,"title":{},"body":{"classes/ODataRequest.html":{}}}],["text/xml",{"_index":810,"title":{},"body":{"classes/Field.html":{}}}],["text_plain",{"_index":2449,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._annotations",{"_index":2621,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._body",{"_index":2461,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._context",{"_index":2617,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._functions",{"_index":978,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._headers",{"_index":2510,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._method",{"_index":2450,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._options",{"_index":2595,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setcache(cachecontrol",{"_index":2613,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setfeatures(features",{"_index":2603,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setlocation(location",{"_index":2610,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setversion(version",{"_index":2607,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._params",{"_index":2522,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.has(`$${name",{"_index":2527,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.keys().length",{"_index":2536,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path",{"_index":2473,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path.endswith($batch",{"_index":2540,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}/${$query",{"_index":2529,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._payload",{"_index":2614,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._properties",{"_index":973,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._querybody",{"_index":2524,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._requests",{"_index":1244,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.length",{"_index":1242,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.map((r",{"_index":1208,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.push(new",{"_index":1236,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests[this._requests.length",{"_index":1238,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responsetype",{"_index":2459,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._segments",{"_index":2116,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.map((s",{"_index":2139,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.push(segment",{"_index":2156,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.reduce",{"_index":2117,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments].reverse().find(predicate",{"_index":2147,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.accept",{"_index":1065,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.alias",{"_index":1512,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.annotations",{"_index":950,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.annotations.find(predicate",{"_index":1595,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.api",{"_index":1228,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["this.api.findentitysetbyname(this.name",{"_index":1679,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.api.findentitysetfortype(this.parser.return.type)?.name",{"_index":1456,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.api.findstructuredtypefortype(this.apinameorentitytype",{"_index":1615,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["this.api.options",{"_index":1464,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.api.options.accept?.exponentialdecimals",{"_index":2490,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.ieee754compatible",{"_index":2485,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.metadata",{"_index":2482,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.streaming",{"_index":2488,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.bodyqueryoptions",{"_index":2469,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifmatch",{"_index":2476,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifnonematch",{"_index":2479,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.fetchpolicy",{"_index":2467,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.headers",{"_index":2511,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.params",{"_index":2520,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.continueonerror",{"_index":2505,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.includeannotations",{"_index":2501,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.maxpagesize",{"_index":2499,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.return",{"_index":2496,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.stripmetadata",{"_index":2632,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.api.options.withcredentials",{"_index":2465,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.request",{"_index":1224,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.request(request).subscribe((response",{"_index":1250,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.servicerooturl}${this._path",{"_index":2538,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.servicerooturl}${this.pathwithparams",{"_index":2539,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.apinameorentitytype",{"_index":1614,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.assertarray",{"_index":2254,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().filter((v",{"_index":2245,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().push(value",{"_index":2244,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray()[index",{"_index":2250,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(false",{"_index":2260,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(true",{"_index":2258,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.base",{"_index":1816,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.body",{"_index":2589,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.body)['d",{"_index":2616,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.bodyqueryoptions",{"_index":1063,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.length",{"_index":2525,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.map((name",{"_index":2532,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.some((name",{"_index":2526,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bound",{"_index":1447,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.buildentry(payload",{"_index":1365,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey([...(scope",{"_index":1366,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey(scope",{"_index":1376,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.cacheability",{"_index":2685,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.callables",{"_index":2726,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.find",{"_index":2740,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.foreach((callable",{"_index":2748,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.checkversion(document",{"_index":811,"title":{},"body":{"classes/Field.html":{}}}],["this.children",{"_index":1836,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.client",{"_index":2761,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["this.client.apifor(this.apinameorentitytype",{"_index":1114,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["this.client.entityset(this.name",{"_index":1673,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.client.singleton(this.name",{"_index":2775,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.clonesegments",{"_index":1216,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.collection",{"_index":1493,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.complete",{"_index":1190,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.composable",{"_index":1449,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.containers",{"_index":2729,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.containers.reduce",{"_index":2735,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.context",{"_index":951,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["this.context?.entityset",{"_index":944,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.context?.type",{"_index":946,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.create(attrs",{"_index":1698,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.default",{"_index":1739,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.deserialize(this.default",{"_index":1773,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.entities",{"_index":2723,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities().create(attrs",{"_index":1684,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().entity(key",{"_index":1674,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetch(options",{"_index":1682,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetchall(options",{"_index":1680,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities.find((e",{"_index":2739,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities.foreach((config",{"_index":2746,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entity",{"_index":2777,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.entity(key",{"_index":1685,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entity(key).fetch(options",{"_index":1683,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entitysetpath",{"_index":1445,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.entitysets",{"_index":1590,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["this.entitysets.find((e",{"_index":2742,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entitytype",{"_index":1621,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.entries",{"_index":1348,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.entries.delete(k",{"_index":1383,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.foreach((entry",{"_index":1377,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.get(key",{"_index":1369,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.set(key",{"_index":1367,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.enum().validate(value",{"_index":1755,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.enums",{"_index":2720,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.find((e",{"_index":2737,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.foreach((enu",{"_index":2744,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.error",{"_index":1194,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.error(res",{"_index":1200,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.expand(query.expand",{"_index":2319,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.factory.entity(\"airports",{"_index":2996,"title":{},"body":{"index.html":{}}}],["this.factory.entity(\"people",{"_index":2998,"title":{},"body":{"index.html":{}}}],["this.fetchone(key",{"_index":1693,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.fetchpolicy",{"_index":1061,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{}}}],["this.field",{"_index":368,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.fields",{"_index":1824,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.fields().find((f",{"_index":1935,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.fields().map(mapper",{"_index":1943,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.fields.filter",{"_index":1842,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.fields.filter((f",{"_index":1899,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.fields.find((f",{"_index":1829,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.fields.foreach((f",{"_index":1853,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.fields.map((f",{"_index":1968,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.field}/${render(this.value",{"_index":370,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.filter(query.filter",{"_index":2325,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.find((s",{"_index":2158,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.findannotation((a",{"_index":1756,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.findchildparser(predicate",{"_index":1840,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.flags",{"_index":1950,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.forget",{"_index":1368,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.functions[name",{"_index":981,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.get(req.pathwithparams",{"_index":2006,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.getfieldvaluebyattribute",{"_index":813,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects",{"_index":818,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects(dataservices",{"_index":832,"title":{},"body":{"classes/Field.html":{}}}],["this.getresponse(req",{"_index":1391,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.group.tojson",{"_index":366,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.handlefetch(req",{"_index":1386,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.handlemutate(req",{"_index":1388,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.headers",{"_index":1055,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponse.html":{}}}],["this.headers.get(cache_control",{"_index":2612,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(content_type",{"_index":2597,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(header",{"_index":2605,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(key",{"_index":2623,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(location_header",{"_index":2609,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.getall(name",{"_index":2591,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.helper",{"_index":949,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.attributes(data",{"_index":943,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.count(this.annotations",{"_index":984,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.deltalink(this.annotations",{"_index":988,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.editlink(this.annotations",{"_index":965,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entities(data",{"_index":983,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entity(data",{"_index":954,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.etag(this.annotations",{"_index":957,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.functions(this.annotations",{"_index":979,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.id(this.annotations",{"_index":956,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediacontenttype(this.annotations",{"_index":971,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaeditlink(this.annotations",{"_index":969,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaetag(this.annotations",{"_index":959,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediareadlink(this.annotations",{"_index":967,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.metadataetag(this.annotations",{"_index":961,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.nextlink(this.annotations",{"_index":986,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.properties(this.annotations",{"_index":974,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.property(data",{"_index":952,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.readlink(this.annotations",{"_index":963,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.type(this.annotations",{"_index":945,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.ieee754compatible",{"_index":2673,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.isenumtype",{"_index":1506,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.isexpired(entry",{"_index":1370,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.isstructuredtype",{"_index":1509,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.keys",{"_index":1821,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.keys.length",{"_index":1858,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.location",{"_index":2678,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxage",{"_index":2683,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxlength",{"_index":1741,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.members",{"_index":1932,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.metadata",{"_index":2670,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.modify(key",{"_index":1709,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.n",{"_index":2239,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.name",{"_index":229,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.namespace",{"_index":1511,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.namespace}.${this.name",{"_index":1518,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.namespace}.${this.name}'${name",{"_index":1962,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.namespace}.${this.name}'${names.join",{"_index":1959,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.name}(${params.join",{"_index":235,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.navigation",{"_index":1745,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.next(odataresponse.fromhttpresponse(this.request",{"_index":1189,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.nextlink",{"_index":990,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.normalize",{"_index":231,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.normalize)).join",{"_index":326,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.nullable",{"_index":1491,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.o[this.n",{"_index":2240,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o[this.n].filter((v",{"_index":2263,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o[this.n].length",{"_index":2248,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o[this.n][0",{"_index":2249,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.observe",{"_index":2457,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.odata",{"_index":3030,"title":{},"body":{"index.html":{}}}],["this.odata.fromjson(json",{"_index":3022,"title":{},"body":{"index.html":{}}}],["this.op",{"_index":320,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.open",{"_index":1818,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.option(name).clear",{"_index":2386,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options",{"_index":2360,"title":{},"body":{"classes/ODataQueryOptions.html":{},"classes/ODataResponse.html":{}}}],["this.options.expression",{"_index":2282,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.helper.context",{"_index":2618,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.option(queryoptionnames.compute",{"_index":2287,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.format",{"_index":2290,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.search",{"_index":2294,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.skip",{"_index":2304,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.skiptoken",{"_index":2306,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.top",{"_index":2302,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.expand",{"_index":2277,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.filter",{"_index":2297,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.orderby",{"_index":2300,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.select",{"_index":2275,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.transform",{"_index":2292,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.version",{"_index":2615,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options[k",{"_index":2391,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[key",{"_index":2363,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[name",{"_index":2380,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.compute",{"_index":2371,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.expand",{"_index":2369,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.filter",{"_index":2373,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.orderby",{"_index":2374,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.search",{"_index":2372,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.select",{"_index":2368,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.skip",{"_index":2376,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.skiptoken",{"_index":2377,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.top",{"_index":2375,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.transform",{"_index":2370,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.optionshelper",{"_index":1497,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.op}(${left",{"_index":328,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.orderby(query.orderby",{"_index":2327,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.paging(query",{"_index":2328,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.parameters",{"_index":1515,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.find((p",{"_index":1530,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.foreach((p",{"_index":1528,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.params",{"_index":1053,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.parent",{"_index":1831,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent.deserialize(value",{"_index":1841,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent.serialize(value",{"_index":1847,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent.typefor(name",{"_index":1832,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent?.defaults",{"_index":1871,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent?.resolvekey(value",{"_index":1856,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent?.tojsonschema(options",{"_index":1877,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent?.validate(attrs",{"_index":1898,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parse(parser",{"_index":1768,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parser",{"_index":1451,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parser.binding",{"_index":1468,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.configure",{"_index":1463,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.parser.deserialize(value",{"_index":1465,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parser.encode(v",{"_index":1501,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.encode(value",{"_index":1467,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parser.fields",{"_index":1934,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.istypeof(type",{"_index":1460,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.parser.return",{"_index":1455,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.serialize(v",{"_index":1500,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.serialize(value",{"_index":1466,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parser.tojsonschema(options",{"_index":1777,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.pathandparams",{"_index":2135,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["this.payload",{"_index":2620,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.precision",{"_index":1747,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.prefer",{"_index":1069,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.properties[name",{"_index":976,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.property",{"_index":1730,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.put(req.pathwithparams",{"_index":2004,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.putresponse(req",{"_index":1397,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.queries",{"_index":2993,"title":{},"body":{"index.html":{}}}],["this.referencedproperty",{"_index":1731,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.references",{"_index":817,"title":{},"body":{"classes/Field.html":{}}}],["this.referentials",{"_index":1736,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.referentials.length",{"_index":1814,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.reportprogress",{"_index":2455,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.request.headers",{"_index":1174,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.method",{"_index":1169,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.pathwithparams",{"_index":1170,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.urlwithparams",{"_index":1188,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.resource",{"_index":2452,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entities",{"_index":2634,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entity",{"_index":2633,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(property",{"_index":2635,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(value",{"_index":2638,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.pathandparams",{"_index":2472,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.resource.serialize(this._body",{"_index":2463,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.restore",{"_index":2019,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.return",{"_index":1513,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.scale",{"_index":1749,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.schema",{"_index":1443,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["this.schema.alias",{"_index":1459,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["this.schema.api",{"_index":1461,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["this.schema.namespace}.${this.name",{"_index":1454,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["this.schemas",{"_index":831,"title":{},"body":{"classes/Field.html":{}}}],["this.scope(r",{"_index":1403,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.scope(req",{"_index":2002,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.search(query.search",{"_index":2323,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.segment.key",{"_index":2178,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.name",{"_index":2172,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.parameters",{"_index":2183,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.path",{"_index":2176,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.type",{"_index":2174,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments",{"_index":2125,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.segments.get(pathsegmentnames.action",{"_index":2189,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.entityset",{"_index":2187,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.function",{"_index":2190,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.navigationproperty",{"_index":2193,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.property",{"_index":2192,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.singleton",{"_index":2188,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.keys(values",{"_index":2191,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.select(query.select",{"_index":2317,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.serialize(value",{"_index":1963,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.service",{"_index":1623,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.skip().clear",{"_index":2312,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skip(skip",{"_index":2309,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skiptoken().clear",{"_index":2314,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skiptoken(skiptoken",{"_index":2308,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.status",{"_index":2592,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.statustext",{"_index":2593,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.storage",{"_index":2018,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storage.setitem",{"_index":2022,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.store",{"_index":2021,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.streaming",{"_index":2672,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.stringasenum",{"_index":1051,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["this.stripmetadata",{"_index":1059,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.structured().validate(value",{"_index":1754,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.structuredtype",{"_index":1733,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.structuredtype.keys?.find((k",{"_index":1811,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.structuredtypeschema",{"_index":1700,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.tags(req",{"_index":2003,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.term",{"_index":922,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["this.timeout",{"_index":1347,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.tojson(parser",{"_index":1772,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.top().clear",{"_index":2313,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.top(top",{"_index":2310,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.transform(query.transform",{"_index":2321,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.type",{"_index":1489,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.type.startswith('edm",{"_index":1504,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.update(key",{"_index":1710,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.url",{"_index":2594,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.validate(v",{"_index":1753,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.value",{"_index":369,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.values",{"_index":230,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.version",{"_index":812,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["this.withcredentials",{"_index":1057,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{}}}],["throw",{"_index":846,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["throwerror",{"_index":1342,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{}}}],["throwerror(\"can't",{"_index":1707,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["throwerror('no",{"_index":1393,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["throwerror('resource",{"_index":1687,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["throwerror(error",{"_index":1699,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["time",{"_index":686,"title":{},"body":{"classes/DateAndTimeFunctions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["time(value",{"_index":292,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["timeout",{"_index":1294,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["title",{"_index":1778,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"index.html":{}}}],["todo",{"_index":1165,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["tojson",{"_index":200,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tojsonschema",{"_index":1966,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["tojsonschema(options",{"_index":1776,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["tokens",{"_index":2042,"title":{},"body":{"modules/ODataModule.html":{}}}],["tolower",{"_index":2840,"title":{},"body":{"classes/StringFunctions.html":{}}}],["tolower(value",{"_index":265,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tools",{"_index":2383,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["top",{"_index":68,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["top(opts",{"_index":2301,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["toqueryarguments",{"_index":2332,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["tort",{"_index":3124,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":199,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["totaloffsetminutes",{"_index":687,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totaloffsetminutes(value",{"_index":294,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["totalseconds",{"_index":688,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totalseconds(value",{"_index":296,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["toupper",{"_index":2841,"title":{},"body":{"classes/StringFunctions.html":{}}}],["toupper(value",{"_index":267,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["transform",{"_index":66,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["transform(opts",{"_index":2291,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["transforms",{"_index":2931,"title":{},"body":{"miscellaneous/functions.html":{}}}],["trim",{"_index":2675,"title":{},"body":{"classes/ODataResponseOptions.html":{},"classes/StringFunctions.html":{}}}],["trim(value",{"_index":269,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["trippin",{"_index":2992,"title":{},"body":{"index.html":{}}}],["trippinconfig",{"_index":3038,"title":{},"body":{"index.html":{}}}],["trippinmodule",{"_index":3039,"title":{},"body":{"index.html":{}}}],["trips",{"_index":3029,"title":{},"body":{"index.html":{}}}],["true",{"_index":227,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["try",{"_index":806,"title":{},"body":{"classes/Field.html":{}}}],["tslib",{"_index":2862,"title":{},"body":{"dependencies.html":{}}}],["tutorial/#batch",{"_index":1203,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#singleton",{"_index":2764,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["type",{"_index":23,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["type(undefined",{"_index":1438,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["type(value",{"_index":2173,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["type.startswith(this.alias",{"_index":2734,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.startswith(this.namespace",{"_index":2733,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.ts",{"_index":465,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["type.ts:1",{"_index":523,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:10",{"_index":518,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:105",{"_index":1978,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:11",{"_index":519,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:117",{"_index":1980,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:119",{"_index":1926,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:12",{"_index":655,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:126",{"_index":1982,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:129",{"_index":1910,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:13",{"_index":653,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:139",{"_index":1930,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:14",{"_index":1946,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:149",{"_index":1912,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:15",{"_index":1947,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:16",{"_index":1945,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:17",{"_index":473,"title":{},"body":{"classes/CsdlComplexType.html":{}}}],["type.ts:3",{"_index":526,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:30",{"_index":514,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:31",{"_index":1948,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:32",{"_index":1931,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:33",{"_index":516,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:347",{"_index":2786,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:348",{"_index":2787,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:349",{"_index":2788,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:35",{"_index":1714,"title":{},"body":{"classes/ODataEntityTypeKey.html":{}}}],["type.ts:350",{"_index":2783,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:351",{"_index":2781,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:352",{"_index":2782,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:353",{"_index":2789,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:354",{"_index":2785,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:355",{"_index":2784,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:356",{"_index":2780,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:36",{"_index":1713,"title":{},"body":{"classes/ODataEntityTypeKey.html":{}}}],["type.ts:37",{"_index":1974,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:377",{"_index":2798,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:38",{"_index":1975,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:383",{"_index":2802,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:39",{"_index":515,"title":{},"body":{"classes/CsdlEntityType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:390",{"_index":2797,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:4",{"_index":525,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:40",{"_index":1973,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:402",{"_index":2791,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:409",{"_index":2794,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:41",{"_index":1924,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:42",{"_index":1972,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:43",{"_index":1971,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:433",{"_index":2800,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:44",{"_index":2392,"title":{},"body":{"classes/ODataReferential.html":{}}}],["type.ts:45",{"_index":558,"title":{},"body":{"classes/CsdlKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{}}}],["type.ts:459",{"_index":2795,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:46",{"_index":559,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:467",{"_index":2792,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:483",{"_index":2799,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:49",{"_index":600,"title":{},"body":{"classes/CsdlPropertyRef.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:5",{"_index":527,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:50",{"_index":601,"title":{},"body":{"classes/CsdlPropertyRef.html":{}}}],["type.ts:509",{"_index":2793,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:526",{"_index":2801,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:56",{"_index":1976,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:574",{"_index":2804,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:58",{"_index":1919,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:6",{"_index":524,"title":{},"body":{"classes/CsdlEnumType.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:60",{"_index":1979,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:66",{"_index":1913,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:67",{"_index":1977,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:75",{"_index":1921,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:8",{"_index":654,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:84",{"_index":1923,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:9",{"_index":656,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:94",{"_index":1917,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["typealiases",{"_index":3134,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedefinition",{"_index":761,"title":{},"body":{"classes/Field.html":{}}}],["typedefinitions",{"_index":627,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["typefor",{"_index":2779,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["typefor(name",{"_index":1828,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["typefunctions",{"_index":303,"title":{"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["typeof",{"_index":218,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types",{"_index":710,"title":{},"body":{"classes/Field.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/SegmentHandler.html":{}}}],["types(undefined",{"_index":2096,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["types.isarray(this.o[this.n",{"_index":2243,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(errors",{"_index":1762,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["types.isempty(key",{"_index":1868,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["types.isempty(this.o[this.n",{"_index":2241,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(this.options[key",{"_index":2362,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isempty(this.segment.key",{"_index":2180,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.segment.parameters",{"_index":2185,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(v",{"_index":2264,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(value",{"_index":1876,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["types.isfunction(opts",{"_index":2281,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isplainobject(data",{"_index":2630,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(payload",{"_index":2636,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(this.o[this.n",{"_index":2252,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isplainobject(this.payload",{"_index":2619,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(v",{"_index":1861,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["types.isplainobject(value",{"_index":1763,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["types.rawtype(value",{"_index":2364,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["unchanged",{"_index":2882,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":113,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["underlayingtype",{"_index":669,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["underlyingtype",{"_index":521,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["unicode",{"_index":576,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["united",{"_index":3014,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":1199,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["unnamed",{"_index":2913,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unpacked",{"_index":3160,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unset",{"_index":2204,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unset(path",{"_index":2229,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unsuccessful",{"_index":1191,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["update",{"_index":1636,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["update(attrs",{"_index":2771,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["update(key",{"_index":1666,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["update/patch",{"_index":1708,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["updating",{"_index":2960,"title":{},"body":{"index.html":{}}}],["uri",{"_index":547,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["url",{"_index":102,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["urlwithparams",{"_index":2406,"title":{},"body":{"classes/ODataRequest.html":{}}}],["usage",{"_index":2973,"title":{},"body":{"index.html":{}}}],["use",{"_index":1457,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"index.html":{},"license.html":{}}}],["usefactory",{"_index":2051,"title":{},"body":{"modules/ODataModule.html":{}}}],["usevalue",{"_index":2050,"title":{},"body":{"modules/ODataModule.html":{}}}],["using",{"_index":3054,"title":{},"body":{"index.html":{}}}],["utils",{"_index":1715,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/SegmentHandler.html":{}}}],["utils/http",{"_index":1155,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["utils/odata",{"_index":2717,"title":{},"body":{"classes/ODataSchema.html":{}}}],["utils/strings",{"_index":1163,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/types",{"_index":711,"title":{},"body":{"classes/Field.html":{},"classes/ODataResponse.html":{}}}],["v",{"_index":1769,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["v4",{"_index":3053,"title":{},"body":{"index.html":{}}}],["v4.0",{"_index":1039,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["v4.01",{"_index":2270,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["v4.01.html#sec_requestingthejsonformat",{"_index":1036,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["v[field.name",{"_index":1862,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["val",{"_index":2941,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validate",{"_index":1751,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["validate(attrs",{"_index":2803,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["validate(member",{"_index":1981,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["value",{"_index":57,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["value(v",{"_index":2231,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["value).reduce",{"_index":1955,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["value.length",{"_index":1760,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["value.map((v",{"_index":1499,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["value.render(aliases",{"_index":2365,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value.tojson",{"_index":2367,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value/s",{"_index":96,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["value[f.name",{"_index":1844,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["values",{"_index":226,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values.map((v",{"_index":233,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values.push(length",{"_index":252,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values[index",{"_index":2130,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["van",{"_index":3068,"title":{},"body":{"license.html":{}}}],["var",{"_index":1182,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["variables",{"_index":1205,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["version",{"_index":72,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["version.replace(/\\;/g",{"_index":2674,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_2_0",{"_index":2663,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_3_0",{"_index":2664,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_4_0",{"_index":712,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["version_4_0].indexof(value",{"_index":2676,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["versions",{"_index":3047,"title":{},"body":{"index.html":{}}}],["viewed",{"_index":3056,"title":{},"body":{"index.html":{}}}],["void",{"_index":111,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["warranties",{"_index":3109,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3104,"title":{},"body":{"license.html":{}}}],["whether",{"_index":3122,"title":{},"body":{"license.html":{}}}],["wiki",{"_index":3060,"title":{},"body":{"index.html":{}}}],["window.addeventlistener('beforeunload",{"_index":2020,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["withcount",{"_index":1681,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["withcredentials",{"_index":21,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["without",{"_index":1688,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"license.html":{}}}],["works",{"_index":3041,"title":{},"body":{"index.html":{}}}],["www.odata.org/getting",{"_index":2763,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["x",{"_index":202,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["xssi_prefix",{"_index":1150,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["year",{"_index":689,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["year(value",{"_index":298,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["yes",{"_index":398,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["zone.js",{"_index":2864,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiOptions.html":{"url":"interfaces/ApiOptions.html","title":"interface - ApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Options\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accept\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodyQueryOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            etag\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetchPolicy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            params\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prefer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stripMetadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            withCredentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accept\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accept:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodyQueryOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodyQueryOptions:         QueryOptionNames[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QueryOptionNames[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        etag\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        etag:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetchPolicy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetchPolicy:         FetchPolicy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FetchPolicy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefer:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stripMetadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stripMetadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticFunctions.html":{"url":"classes/ArithmeticFunctions.html","title":"class - ArithmeticFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ceiling\n                            \n                            \n                                floor\n                            \n                            \n                                round\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ceiling\n                        \n                    \n                \n            \n            \n                \nceiling(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        floor\n                        \n                    \n                \n            \n            \n                \nfloor(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        round\n                        \n                    \n                \n            \n            \n                \nround(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticOperators.html":{"url":"classes/ArithmeticOperators.html","title":"class - ArithmeticOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                div\n                            \n                            \n                                mod\n                            \n                            \n                                mul\n                            \n                            \n                                neg\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:280\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        div\n                        \n                    \n                \n            \n            \n                \ndiv(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:289\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mod\n                        \n                    \n                \n            \n            \n                \nmod(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:292\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mul\n                        \n                    \n                \n            \n            \n                \nmul(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:286\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neg\n                        \n                    \n                \n            \n            \n                \nneg(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:295\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n            \n                \nsub(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:283\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cache.html":{"url":"interfaces/Cache.html","title":"interface - Cache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        get\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:115\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, payload: T, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:114\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionFunctions.html":{"url":"classes/CollectionFunctions.html","title":"class - CollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasSubsequence\n                            \n                            \n                                hasSubset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubsequence\n                        \n                    \n                \n            \n            \n                \nhasSubsequence(s1: T, s2: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s1\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    s2\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubset\n                        \n                    \n                \n            \n            \n                \nhasSubset(s1: T, s2: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s1\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    s2\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConditionalFunctions.html":{"url":"classes/ConditionalFunctions.html","title":"class - ConditionalFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConditionalFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                case\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        case\n                        \n                    \n                \n            \n            \n                \ncase(condition: T | string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:205\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    condition\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAction.html":{"url":"classes/CsdlAction.html","title":"class - CsdlAction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                    Optional\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType?: CsdlReturnType, isBound?: boolean, entitySetPath?: string, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlActionImport.html":{"url":"classes/CsdlActionImport.html","title":"class - CsdlActionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlActionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, action: string, entitySet?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotable.html":{"url":"classes/CsdlAnnotable.html","title":"class - CsdlAnnotable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotation.html":{"url":"classes/CsdlAnnotation.html","title":"class - CsdlAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(term: string, qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        term\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotations.html":{"url":"classes/CsdlAnnotations.html","title":"class - CsdlAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(target: string, annotationList: CsdlAnnotation[], qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlComplexType.html":{"url":"classes/CsdlComplexType.html","title":"class - CsdlComplexType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlComplexType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                    CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityContainer.html":{"url":"classes/CsdlEntityContainer.html","title":"class - CsdlEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actionImports\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySets\n                            \n                            \n                                    Public\n                                    Optional\n                                extend\n                            \n                            \n                                    Public\n                                    Optional\n                                functionImports\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                singletons\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, extend?: string, entitySets?: CsdlEntitySet[], singletons?: CsdlSingleton[], functionImports?: CsdlFunctionImport[], actionImports?: CsdlActionImport[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        extend\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySets\n                                                  \n                                                        \n                                                                        CsdlEntitySet[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        singletons\n                                                  \n                                                        \n                                                                        CsdlSingleton[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionImports\n                                                  \n                                                        \n                                                                    CsdlFunctionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actionImports\n                                                  \n                                                        \n                                                                    CsdlActionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlActionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        extend\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunctionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        singletons\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlSingleton[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlEntitySet } from './csdl-entity-set';\nimport { CsdlSingleton } from './csdl-singleton';\nimport { CsdlFunctionImport, CsdlActionImport } from './csdl-function-action';\n\nexport class CsdlEntityContainer {\n  constructor(\n    public name: string,\n    public extend?: string,\n    public entitySets?: CsdlEntitySet[],\n    public singletons?: CsdlSingleton[],\n    public functionImports?: CsdlFunctionImport[],\n    public actionImports?: CsdlActionImport[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntitySet.html":{"url":"classes/CsdlEntitySet.html","title":"class - CsdlEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                entityType\n                            \n                            \n                                    Public\n                                    Optional\n                                includeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBinding\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, entityType: string, navigationPropertyBinding?: CsdlNavigationPropertyBinding[], includeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBinding\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlEntitySet {\n  constructor(\n    public name: string,\n    public entityType: string,\n    public navigationPropertyBinding?: CsdlNavigationPropertyBinding[],\n    public includeInServiceDocument?: boolean\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityType.html":{"url":"classes/CsdlEntityType.html","title":"class - CsdlEntityType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                hasStream\n                            \n                            \n                                    Public\n                                    Optional\n                                key\n                            \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, key?: CsdlKey, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean, hasStream?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        CsdlKey\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                    CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        hasStream\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        hasStream\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlKey\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumMember.html":{"url":"classes/CsdlEnumMember.html","title":"class - CsdlEnumMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value?: number)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(public name: string, public value?: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumType.html":{"url":"classes/CsdlEnumType.html","title":"class - CsdlEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                isFlags\n                            \n                            \n                                    Public\n                                members\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                underlyingType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, members: CsdlEnumMember[], underlyingType?: string, isFlags?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        members\n                                                  \n                                                        \n                                                                        CsdlEnumMember[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlyingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isFlags\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isFlags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumMember[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        underlyingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(public name: string, public value?: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunction.html":{"url":"classes/CsdlFunction.html","title":"class - CsdlFunction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                    Optional\n                                isComposable\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType: CsdlReturnType, isBound?: boolean, entitySetPath?: string, isComposable?: boolean, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isComposable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isComposable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunctionImport.html":{"url":"classes/CsdlFunctionImport.html","title":"class - CsdlFunctionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunctionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                functionName\n                            \n                            \n                                    Public\n                                    Optional\n                                IncludeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, functionName: string, entitySet?: string, IncludeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        IncludeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        functionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        IncludeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlInclude.html":{"url":"classes/CsdlInclude.html","title":"class - CsdlInclude","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlInclude\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                namespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlIncludeAnnotations.html":{"url":"classes/CsdlIncludeAnnotations.html","title":"class - CsdlIncludeAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlIncludeAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                    Optional\n                                targetNamespace\n                            \n                            \n                                    Public\n                                termNamespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(termNamespace: string, qualifier?: string, targetNamespace?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        termNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        targetNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        termNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlKey.html":{"url":"classes/CsdlKey.html","title":"class - CsdlKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                propertyRefs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(propertyRefs: CsdlPropertyRef[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        propertyRefs\n                                                  \n                                                        \n                                                                    CsdlPropertyRef[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        propertyRefs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlPropertyRef[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationProperty.html":{"url":"classes/CsdlNavigationProperty.html","title":"class - CsdlNavigationProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                containsTarget\n                            \n                            \n                                    Public\n                                    Optional\n                                onDelete\n                            \n                            \n                                    Public\n                                    Optional\n                                partner\n                            \n                            \n                                    Public\n                                    Optional\n                                referentialConstraints\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, partner?: string, containsTarget?: boolean, referentialConstraints?: CsdlReferentialConstraint[], onDelete?: CsdlOnDelete)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        partner\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        containsTarget\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        referentialConstraints\n                                                  \n                                                        \n                                                                        CsdlReferentialConstraint[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        onDelete\n                                                  \n                                                        \n                                                                        CsdlOnDelete\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        containsTarget\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onDelete\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlOnDelete\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        partner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        referentialConstraints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReferentialConstraint[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationPropertyBinding.html":{"url":"classes/CsdlNavigationPropertyBinding.html","title":"class - CsdlNavigationPropertyBinding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationPropertyBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                path\n                            \n                            \n                                    Public\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(path: string, target: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlNavigationPropertyBinding {\n  constructor(public path: string, public target: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlOnDelete.html":{"url":"classes/CsdlOnDelete.html","title":"class - CsdlOnDelete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlOnDelete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(action: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlParameter.html":{"url":"classes/CsdlParameter.html","title":"class - CsdlParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlProperty.html":{"url":"classes/CsdlProperty.html","title":"class - CsdlProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, defaultValue?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlPropertyRef.html":{"url":"classes/CsdlPropertyRef.html","title":"class - CsdlPropertyRef","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlPropertyRef\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReference.html":{"url":"classes/CsdlReference.html","title":"class - CsdlReference","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReference\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                includeAnnotations\n                            \n                            \n                                    Public\n                                    Optional\n                                includes\n                            \n                            \n                                    Public\n                                uri\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uri: string, includes?: CsdlInclude[], includeAnnotations?: CsdlIncludeAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uri\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        includes\n                                                  \n                                                        \n                                                                        CsdlInclude[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeAnnotations\n                                                  \n                                                        \n                                                                    CsdlIncludeAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeAnnotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlIncludeAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlInclude[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReferentialConstraint.html":{"url":"classes/CsdlReferentialConstraint.html","title":"class - CsdlReferentialConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReferentialConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                property\n                            \n                            \n                                    Public\n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(property: string, referencedProperty: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        property\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        referencedProperty\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReturnType.html":{"url":"classes/CsdlReturnType.html","title":"class - CsdlReturnType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReturnType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:51\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSchema.html":{"url":"classes/CsdlSchema.html","title":"class - CsdlSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actions\n                            \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationsList\n                            \n                            \n                                    Public\n                                    Optional\n                                complexTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                entityContainer\n                            \n                            \n                                    Public\n                                    Optional\n                                entityTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                enumTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                functions\n                            \n                            \n                                    Public\n                                namespace\n                            \n                            \n                                    Public\n                                    Optional\n                                terms\n                            \n                            \n                                    Public\n                                    Optional\n                                typeDefinitions\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string, enumTypes?: CsdlEnumType[], complexTypes?: CsdlComplexType[], entityTypes?: CsdlEntityType[], functions?: CsdlFunction[], actions?: CsdlAction[], entityContainer?: CsdlEntityContainer, typeDefinitions?: CsdlTypeDefinition[], terms?: CsdlTerm[], annotationsList?: CsdlAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        enumTypes\n                                                  \n                                                        \n                                                                        CsdlEnumType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        complexTypes\n                                                  \n                                                        \n                                                                        CsdlComplexType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityTypes\n                                                  \n                                                        \n                                                                        CsdlEntityType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functions\n                                                  \n                                                        \n                                                                    CsdlFunction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions\n                                                  \n                                                        \n                                                                        CsdlAction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityContainer\n                                                  \n                                                        \n                                                                        CsdlEntityContainer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        typeDefinitions\n                                                  \n                                                        \n                                                                        CsdlTypeDefinition[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        terms\n                                                  \n                                                        \n                                                                        CsdlTerm[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationsList\n                                                  \n                                                        \n                                                                    CsdlAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        complexTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlComplexType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityContainer\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        enumTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        terms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTerm[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        typeDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTypeDefinition[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAnnotation,\n  CsdlAnnotable,\n  CsdlTerm,\n  CsdlAnnotations,\n} from './csdl-annotation';\nimport { CsdlTypeDefinition } from './csdl-type-definition';\nimport { CsdlEnumType } from './csdl-enum-type';\nimport { CsdlEntityType, CsdlComplexType } from './csdl-structured-type';\nimport { CsdlFunction, CsdlAction } from './csdl-function-action';\nimport { CsdlEntityContainer } from './csdl-entity-container';\n\nexport class CsdlSchema extends CsdlAnnotable {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n    public enumTypes?: CsdlEnumType[],\n    public complexTypes?: CsdlComplexType[],\n    public entityTypes?: CsdlEntityType[],\n    public functions?: CsdlFunction[],\n    public actions?: CsdlAction[],\n    public entityContainer?: CsdlEntityContainer,\n    public typeDefinitions?: CsdlTypeDefinition[],\n    public terms?: CsdlTerm[],\n    public annotationsList?: CsdlAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSingleton.html":{"url":"classes/CsdlSingleton.html","title":"class - CsdlSingleton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSingleton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBindings\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, navigationPropertyBindings?: CsdlNavigationPropertyBinding[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBindings\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlSingleton {\n  constructor(\n    public name: string,\n    public type: string,\n    public navigationPropertyBindings?: CsdlNavigationPropertyBinding[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuralProperty.html":{"url":"classes/CsdlStructuralProperty.html","title":"class - CsdlStructuralProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuralProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuredType.html":{"url":"classes/CsdlStructuredType.html","title":"class - CsdlStructuredType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuredType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                    CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTerm.html":{"url":"classes/CsdlTerm.html","title":"class - CsdlTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appliesTo\n                            \n                            \n                                    Public\n                                    Optional\n                                baseTerm\n                            \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, baseTerm?: string, defaultValue?: string, appliesTo?: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseTerm\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        appliesTo\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appliesTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTypeDefinition.html":{"url":"classes/CsdlTypeDefinition.html","title":"class - CsdlTypeDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTypeDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                underlayingType\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, underlayingType: string, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlayingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        underlayingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlTypeDefinition extends CsdlAnnotable {\n  constructor(\n    public name: string,\n    public underlayingType: string,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DateAndTimeFunctions.html":{"url":"classes/DateAndTimeFunctions.html","title":"class - DateAndTimeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateAndTimeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                day\n                            \n                            \n                                fractionalseconds\n                            \n                            \n                                hour\n                            \n                            \n                                maxdatetime\n                            \n                            \n                                mindatetime\n                            \n                            \n                                minute\n                            \n                            \n                                month\n                            \n                            \n                                now\n                            \n                            \n                                second\n                            \n                            \n                                time\n                            \n                            \n                                totaloffsetminutes\n                            \n                            \n                                totalseconds\n                            \n                            \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n            \n                \ndate(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        day\n                        \n                    \n                \n            \n            \n                \nday(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fractionalseconds\n                        \n                    \n                \n            \n            \n                \nfractionalseconds(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hour\n                        \n                    \n                \n            \n            \n                \nhour(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxdatetime\n                        \n                    \n                \n            \n            \n                \nmaxdatetime(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mindatetime\n                        \n                    \n                \n            \n            \n                \nmindatetime(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        minute\n                        \n                    \n                \n            \n            \n                \nminute(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        month\n                        \n                    \n                \n            \n            \n                \nmonth(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        now\n                        \n                    \n                \n            \n            \n                \nnow()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        second\n                        \n                    \n                \n            \n            \n                \nsecond(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time\n                        \n                    \n                \n            \n            \n                \ntime(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totaloffsetminutes\n                        \n                    \n                \n            \n            \n                \ntotaloffsetminutes(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalseconds\n                        \n                    \n                \n            \n            \n                \ntotalseconds(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        year\n                        \n                    \n                \n            \n            \n                \nyear(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/metadata.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fieldType\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, fieldType: FieldType)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fieldType\n                                                  \n                                                        \n                                                                        FieldType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fieldType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FieldType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAction,\n  CsdlActionImport,\n  CsdlFunction,\n  CsdlFunctionImport,\n  CsdlParameter,\n  CsdlReturnType,\n} from './csdl/csdl-function-action';\nimport {\n  CsdlAnnotation,\n  CsdlAnnotations,\n  CsdlTerm,\n} from './csdl/csdl-annotation';\nimport {\n  CsdlComplexType,\n  CsdlEntityType,\n  CsdlKey,\n  CsdlPropertyRef,\n} from './csdl/csdl-structured-type';\nimport { CsdlEnumMember, CsdlEnumType } from './csdl/csdl-enum-type';\nimport {\n  CsdlInclude,\n  CsdlIncludeAnnotations,\n  CsdlReference,\n} from './csdl/csdl-reference';\nimport {\n  CsdlNavigationProperty,\n  CsdlOnDelete,\n  CsdlProperty,\n  CsdlReferentialConstraint,\n} from './csdl/csdl-structural-property';\n\nimport { CsdlEntityContainer } from './csdl/csdl-entity-container';\nimport { CsdlEntitySet } from './csdl/csdl-entity-set';\nimport { CsdlNavigationPropertyBinding } from './csdl/csdl-navigation-property-binding';\nimport { CsdlSchema } from './csdl/csdl-schema';\nimport { CsdlSingleton } from './csdl/csdl-singleton';\nimport { CsdlTypeDefinition } from './csdl/csdl-type-definition';\nimport { Types } from '../../utils/types';\nimport { VERSION_4_0 } from '../../constants';\n\nenum FieldType {\n  ATTRIBUTE,\n  TAG,\n}\n\nclass Field {\n  constructor(public name: string, public fieldType: FieldType) {}\n}\n\nexport class ODataMetadata {\n  // TAGS\n  private static readonly TAG_EDMX = 'edmx:Edmx';\n  private static readonly TAG_DATA_SERVICES = 'edmx:DataServices';\n  private static readonly TAG_REFERENCE = 'edmx:Reference';\n  private static readonly TAG_INCLUDE = 'edmx:Include';\n  private static readonly TAG_INCLUDE_ANNOTATIONS = 'edmx:IncludeAnnotations';\n  private static readonly TAG_TERM = 'Term';\n  private static readonly TAG_ANNOTATIONS = 'Annotations';\n  private static readonly TAG_ANNOTATION = 'Annotation';\n  private static readonly TAG_SCHEMA = 'Schema';\n  private static readonly TAG_ENUM_TYPE = 'EnumType';\n  private static readonly TAG_MEMBER = 'Member';\n  private static readonly TAG_COMPLEX_TYPE = 'ComplexType';\n  private static readonly TAG_ENTITY_TYPE = 'EntityType';\n  private static readonly TAG_PROPERTY = 'Property';\n  private static readonly TAG_KEY = 'Key';\n  private static readonly TAG_PROPERTY_REF = 'PropertyRef';\n  private static readonly TAG_NAVIGATION_PROPERTY = 'NavigationProperty';\n  private static readonly TAG_REFERENTIAL_CONSTRAINT = 'ReferentialConstraint';\n  private static readonly TAG_ON_DELETE = 'OnDelete';\n  private static readonly TAG_FUNCTION = 'Function';\n  private static readonly TAG_RETURN_TYPE = 'ReturnType';\n  private static readonly TAG_PARAMETER = 'Parameter';\n  private static readonly TAG_ACTION = 'Action';\n  private static readonly TAG_ENTITY_CONTAINER = 'EntityContainer';\n  private static readonly TAG_ENTITY_SET = 'EntitySet';\n  private static readonly TAG_SINGLETON = 'Singleton';\n  private static readonly TAG_FUNCTION_IMPORT = 'FunctionImport';\n  private static readonly TAG_ACTION_IMPORT = 'ActionImport';\n  private static readonly TAG_NAVIGATION_PROPERTY_BINDING =\n    'NavigationPropertyBinding';\n  private static readonly TAG_TYPE_DEFINITION = 'TypeDefinition';\n\n  // ATTRIBUTES\n  private static readonly ATTRIBUTE_VERSION = 'Version';\n  private static readonly ATTRIBUTE_URI = 'Uri';\n  private static readonly ATTRIBUTE_ALIAS = 'Alias';\n  private static readonly ATTRIBUTE_NAMESPACE = 'Namespace';\n  private static readonly ATTRIBUTE_TERM_NAMESPACE = 'TermNamespace';\n  private static readonly ATTRIBUTE_QUALIFIER = 'Qualifier';\n  private static readonly ATTRIBUTE_TARGET_NAMESPACE = 'TargetNamespace';\n  private static readonly ATTRIBUTE_TERM = 'Term';\n  private static readonly ATTRIBUTE_NAME = 'Name';\n  private static readonly ATTRIBUTE_VALUE = 'Value';\n  private static readonly ATTRIBUTE_BASE_TYPE = 'BaseType';\n  private static readonly ATTRIBUTE_OPEN_TYPE = 'OpenType';\n  private static readonly ATTRIBUTE_TYPE = 'Type';\n  private static readonly ATTRIBUTE_NULLABLE = 'Nullable';\n  private static readonly ATTRIBUTE_MAX_LENGTH = 'MaxLength';\n  private static readonly ATTRIBUTE_PRECISION = 'Precision';\n  private static readonly ATTRIBUTE_SCALE = 'Scale';\n  private static readonly ATTRIBUTE_UNICODE = 'Unicode';\n  private static readonly ATTRIBUTE_SRID = 'SRID';\n  private static readonly ATTRIBUTE_DEFAULT_VALUE = 'DefaultValue';\n  private static readonly ATTRIBUTE_PARTNER = 'Partner';\n  private static readonly ATTRIBUTE_PROPERTY = 'Property';\n  private static readonly ATTRIBUTE_REFERENCED_PROPERTY = 'ReferencedProperty';\n  private static readonly ATTRIBUTE_HAS_STREAM = 'HasStream';\n  private static readonly ATTRIBUTE_CONTAINS_TARGET = 'ContainsTarget';\n  private static readonly ATTRIBUTE_IS_BOUND = 'IsBound';\n  private static readonly ATTRIBUTE_ENTITY_SET_PATH = 'EntitySetPath';\n  private static readonly ATTRIBUTE_IS_COMPOSABLE = 'IsComposable';\n  private static readonly ATTRIBUTE_ENTITY_TYPE = 'EntityType';\n  private static readonly ATTRIBUTE_PATH = 'Path';\n  private static readonly ATTRIBUTE_TARGET = 'Target';\n  private static readonly ATTRIBUTE_FUNCTION = 'Function';\n  private static readonly ATTRIBUTE_ACTION = 'Action';\n  private static readonly ATTRIBUTE_ENTITY_SET = 'EntitySet';\n  private static readonly ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT =\n    'IncludeInServiceDocument';\n  private static readonly ATTRIBUTE_ABSTRACT = 'Abstract';\n  private static readonly ATTRIBUTE_UNDERLYING_TYPE = 'UnderlyingType';\n  private static readonly ATTRIBUTE_IS_FLAGS = 'IsFlags';\n  private static readonly ATTRIBUTE_EXTENDS = 'Extends';\n  private static readonly ATTRIBUTE_BASE_TERM = 'BaseTerm';\n  private static readonly ATTRIBUTE_APPLIES_TO = 'AppliesTo';\n\n  public readonly version: string;\n  public readonly references: CsdlReference[];\n  public readonly schemas: CsdlSchema[];\n\n  constructor(xml: string) {\n    try {\n      const parser: DOMParser = new DOMParser();\n      const document: Document = parser.parseFromString(xml, 'text/xml');\n\n      this.checkVersion(document);\n\n      this.version = this.getFieldValueByAttribute(\n        new Field(ODataMetadata.ATTRIBUTE_VERSION, FieldType.ATTRIBUTE),\n        document.documentElement.attributes\n      );\n\n      this.references = this.getObjects(\n        document.documentElement,\n        ODataMetadata.TAG_REFERENCE,\n        [\n          new Field(ODataMetadata.ATTRIBUTE_URI, FieldType.ATTRIBUTE),\n          new Field(ODataMetadata.TAG_INCLUDE, FieldType.TAG),\n          new Field(ODataMetadata.TAG_INCLUDE_ANNOTATIONS, FieldType.TAG),\n          new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n        ]\n      );\n\n      const dataServices: Element =\n        document.documentElement.getElementsByTagName(\n          ODataMetadata.TAG_DATA_SERVICES\n        )[0];\n      this.schemas = this.getObjects(dataServices, ODataMetadata.TAG_SCHEMA, [\n        new Field(ODataMetadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.TAG_ENUM_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_COMPLEX_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_FUNCTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ACTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_CONTAINER, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TYPE_DEFINITION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TERM, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATIONS, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n      ]);\n    } catch (error) {\n      throw new Error('Unable to parse metadata, ' + error);\n    }\n  }\n\n  protected checkVersion(document: Document) {\n    // check version\n    const attributes: NamedNodeMap = document.documentElement.attributes;\n    if (!attributes) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const attr: Attr | null = attributes.getNamedItem('Version');\n    if (attr === null) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const odataVersion = attr?.nodeValue;\n    if (odataVersion !== VERSION_4_0) {\n      throw new Error('OData version \"' + odataVersion + '\" is not supported');\n    }\n  }\n\n  protected getObjects(\n    parentElement: Element,\n    tag: string,\n    fieldNames: Field[]\n  ): any[] {\n    let objects: any[] = [];\n\n    const children: HTMLCollection = parentElement.children;\n    for (let index = 0; index \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Function.html":{"url":"classes/Function.html","title":"class - Function","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Function\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, values: any[], normalize: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(aliases?: QueryCustomType[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aliases\n                                    \n                                                QueryCustomType[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { name: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:49\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeoFunctions.html":{"url":"classes/GeoFunctions.html","title":"class - GeoFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeoFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                distance\n                            \n                            \n                                intersects\n                            \n                            \n                                length\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        distance\n                        \n                    \n                \n            \n            \n                \ndistance(value: T, point: string, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    point\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        intersects\n                        \n                    \n                \n            \n            \n                \nintersects(value: T, polygon: string, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    polygon\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength(value: T, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grouping.html":{"url":"classes/Grouping.html","title":"class - Grouping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grouping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(group: Renderable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:300\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(aliases?: QueryCustomType[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:313\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aliases\n                                    \n                                                QueryCustomType[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:307\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { group: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:303\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupingAndNavigationOperators.html":{"url":"classes/GroupingAndNavigationOperators.html","title":"class - GroupingAndNavigationOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupingAndNavigationOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                grouping\n                            \n                            \n                                navigation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        grouping\n                        \n                    \n                \n            \n            \n                \ngrouping(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:338\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Grouping\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigation\n                        \n                    \n                \n            \n            \n                \nnavigation(field: T, value: Field)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:342\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        N\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                Field\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Navigation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Lambda.html":{"url":"classes/Lambda.html","title":"class - Lambda","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Lambda\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Operator\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], normalize: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:347\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(aliases?: QueryCustomType[])\n                \n            \n\n\n            \n                \n                    Inherited from         Operator\n\n                \n            \n            \n                \n                        Defined in         Operator:360\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aliases\n                                    \n                                                QueryCustomType[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Operator\n\n                \n            \n            \n                \n                        Defined in         Operator:221\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { op: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:356\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LambdaOperators.html":{"url":"classes/LambdaOperators.html","title":"class - LambdaOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LambdaOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                all\n                            \n                            \n                                any\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        all\n                        \n                    \n                \n            \n            \n                \nall(field: T, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:374\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        any\n                        \n                    \n                \n            \n            \n                \nany(field: T, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:370\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogicalOperators.html":{"url":"classes/LogicalOperators.html","title":"class - LogicalOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogicalOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                and\n                            \n                            \n                                eq\n                            \n                            \n                                ge\n                            \n                            \n                                gt\n                            \n                            \n                                has\n                            \n                            \n                                in\n                            \n                            \n                                le\n                            \n                            \n                                lt\n                            \n                            \n                                ne\n                            \n                            \n                                not\n                            \n                            \n                                or\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        and\n                        \n                    \n                \n            \n            \n                \nand(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:262\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eq\n                        \n                    \n                \n            \n            \n                \neq(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:244\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ge\n                        \n                    \n                \n            \n            \n                \nge(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:253\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gt\n                        \n                    \n                \n            \n            \n                \ngt(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:250\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:271\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        in\n                        \n                    \n                \n            \n            \n                \nin(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:274\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        le\n                        \n                    \n                \n            \n            \n                \nle(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:259\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lt\n                        \n                    \n                \n            \n            \n                \nlt(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ne\n                        \n                    \n                \n            \n            \n                \nne(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:247\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        not\n                        \n                    \n                \n            \n            \n                \nnot(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:268\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        or\n                        \n                    \n                \n            \n            \n                \nor(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:265\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Navigation.html":{"url":"classes/Navigation.html","title":"class - Navigation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Navigation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: T, value: Field)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:318\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        Field\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(aliases?: QueryCustomType[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:332\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aliases\n                                    \n                                                QueryCustomType[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:325\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { field: T; value: Field; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:321\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotation.html":{"url":"classes/ODataAnnotation.html","title":"class - ODataAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bool\n                            \n                            \n                                    Optional\n                                int\n                            \n                            \n                                    Optional\n                                permissions\n                            \n                            \n                                    Optional\n                                properties\n                            \n                            \n                                    Optional\n                                string\n                            \n                            \n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annot: AnnotationConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annot\n                                                  \n                                                        \n                                                                        AnnotationConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bool\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        int\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        string\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotations.html":{"url":"classes/ODataAnnotations.html","title":"class - ODataAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attributes\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                    Abstract\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySet\n                                \n                                \n                                    type\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(helper: ODataVersionHelper, annotations: literal type, context?: ODataContext)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        helper\n                                                  \n                                                        \n                                                                        ODataVersionHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotations\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        ODataContext\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:12\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                    \n                    clone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        data\n                        \n                    \n                \n            \n            \n                \n                    \n                    data(data: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySet\n                    \n                \n\n                \n                    \n                        getentitySet()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:16\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:20\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataApiOptions.html":{"url":"classes/ODataApiOptions.html","title":"class - ODataApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ApiOptions\n                            OptionsHelper\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accept\n                            \n                            \n                                bodyQueryOptions\n                            \n                            \n                                etag\n                            \n                            \n                                fetchPolicy\n                            \n                            \n                                headers\n                            \n                            \n                                params\n                            \n                            \n                                    Optional\n                                prefer\n                            \n                            \n                                    Optional\n                                stringAsEnum\n                            \n                            \n                                stripMetadata\n                            \n                            \n                                version\n                            \n                            \n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/options.ts:88\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accept\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:55\n                        \n                    \n\n            \n                \n                    Customize accept header with OData options\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOptionNames[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:50\n                        \n                    \n\n            \n                \n                    Send query options in the request body\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        etag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : { ifMatch: true, ifNoneMatch: false }\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FetchPolicy\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:34\n                        \n                    \n\n            \n                \n                    Cache fetch policy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:42\n                        \n                    \n\n            \n                \n                    Extra headers to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:38\n                        \n                    \n\n            \n                \n                    Extra params to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        prefer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:26\n                        \n                    \n\n            \n                \n                    Send enum as string in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stripMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:30\n                        \n                    \n\n            \n                \n                    Strip metadata from the response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:22\n                        \n                    \n\n            \n                \n                    Default OData version\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:46\n                        \n                    \n\n            \n                \n                    Http request with credentials\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:104\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ApiOptions,\n  FetchPolicy,\n  ODataMetadataType,\n  ODataVersion,\n  Options,\n  OptionsHelper,\n  QueryOptionNames,\n} from './types';\nimport {\n  DEFAULT_FETCH_POLICY,\n  DEFAULT_STRIP_METADATA,\n  DEFAULT_VERSION,\n} from './constants';\n\nimport { ODataHelper } from './helper';\n\nexport class ODataApiOptions implements ApiOptions, OptionsHelper {\n  /**\n   * Default OData version\n   */\n  version: ODataVersion;\n  /**\n   * Send enum as string in the request\n   */\n  stringAsEnum?: boolean;\n  /**\n   * Strip metadata from the response\n   */\n  stripMetadata: ODataMetadataType;\n  /**\n   * Cache fetch policy\n   */\n  fetchPolicy: FetchPolicy;\n  /**\n   * Extra params to be sent in the request\n   */\n  params: { [param: string]: string | string[] };\n  /**\n   * Extra headers to be sent in the request\n   */\n  headers: { [param: string]: string | string[] };\n  /**\n   * Http request with credentials\n   */\n  withCredentials?: boolean;\n  /**\n   * Send query options in the request body\n   */\n  bodyQueryOptions: QueryOptionNames[];\n  /**\n   * Customize accept header with OData options\n   * @link http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_RequestingtheJSONFormat\n   */\n  accept?: {\n    exponentialDecimals?: boolean;\n    ieee754Compatible?: boolean;\n    metadata?: ODataMetadataType;\n    streaming?: boolean;\n  };\n  etag: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398229\n     */\n    ifMatch: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398230\n     */\n    ifNoneMatch: boolean;\n  } = { ifMatch: true, ifNoneMatch: false };\n  prefer?: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398238\n     */\n    maxPageSize?: number;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398240\n     */\n    return?: 'representation' | 'minimal';\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398236\n     */\n    continueOnError?: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398237\n     */\n    includeAnnotations?: string;\n  };\n\n  constructor(config: ApiOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n    this.params = config.params || {};\n    this.headers = config.headers || {};\n    this.withCredentials = config.withCredentials;\n    this.stripMetadata = config.stripMetadata || DEFAULT_STRIP_METADATA;\n    this.fetchPolicy = config.fetchPolicy || DEFAULT_FETCH_POLICY;\n    this.bodyQueryOptions = config.bodyQueryOptions || [];\n    this.accept = config.accept;\n    Object.assign(this.etag, config.etag || {});\n    this.prefer = config.prefer;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\nexport class ODataParserOptions implements OptionsHelper {\n  version: ODataVersion;\n  stringAsEnum?: boolean;\n\n  constructor(config: Options) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBaseService.html":{"url":"classes/ODataBaseService.html","title":"class - ODataBaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/base.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient, name: string, apiNameOrEntityType?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/base.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        apiNameOrEntityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:62\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:68\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:74\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:80\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:86\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:25\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:31\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:37\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:43\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:49\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:99\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:104\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType: \"entity\" | \"entities\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:109\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"entity\" | \"entities\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/base.ts:21\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ODataActionResource,\n  ODataEntities,\n  ODataEntity,\n  ODataFunctionResource,\n  ODataNavigationPropertyResource,\n  ODataProperty,\n  ODataQueryArgumentsOptions,\n} from '../resources';\n\nimport { ODataClient } from '../client';\nimport { Observable } from 'rxjs';\n\nexport abstract class ODataBaseService {\n  constructor(\n    protected client: ODataClient,\n    protected name: string,\n    protected apiNameOrEntityType?: string\n  ) {}\n\n  get api() {\n    return this.client.apiFor(this.apiNameOrEntityType);\n  }\n\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'none',\n    options?: ODataQueryArgumentsOptions\n  ): Observable;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'none',\n    options?: ODataQueryArgumentsOptions\n  ): Observable;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity' | 'entities',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.fetch({ responseType: responseType as any, ...options });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBatchRequest.html":{"url":"classes/ODataBatchRequest.html","title":"class - ODataBatchRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBatchRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/types/batch.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Subject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                request\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onError\n                            \n                            \n                                onLoad\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: ODataRequest)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        ODataRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataRequest\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:40\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onError\n                        \n                    \n                \n            \n            \n                \nonError(content: string[], status: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onLoad\n                        \n                    \n                \n            \n            \n                \nonLoad(content: string[], status: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  $BATCH,\n  ACCEPT,\n  APPLICATION_HTTP,\n  APPLICATION_JSON,\n  BATCH_PREFIX,\n  BINARY,\n  BOUNDARY_PREFIX_SUFFIX,\n  CHANGESET_PREFIX,\n  CONTENT_ID,\n  CONTENT_TRANSFER_ENCODING,\n  CONTENT_TYPE,\n  HTTP11,\n  MULTIPART_MIXED,\n  MULTIPART_MIXED_BOUNDARY,\n  NEWLINE,\n  NEWLINE_REGEXP,\n  ODATA_VERSION,\n  VERSION_4_0,\n  XSSI_PREFIX,\n} from '../../constants';\nimport {\n  HttpErrorResponse,\n  HttpHeaders,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\n\nimport { Http } from '../../utils/http';\nimport { ODataApi } from '../../api';\nimport { ODataOptions } from './options';\nimport { ODataPathSegments } from '../path';\nimport { ODataRequest } from '../request';\nimport { ODataResource } from '../resource';\nimport { ODataResponse } from '../responses';\nimport { PathSegmentNames } from '../../types';\nimport { Strings } from '../../utils/strings';\n\nexport class ODataBatchRequest extends Subject> {\n  constructor(public request: ODataRequest) {\n    super();\n  }\n\n  toString() {\n    //TODO: Relative or Absolute url ?\n    let res = [\n      `${this.request.method} ${this.request.pathWithParams} ${HTTP11}`,\n    ];\n    if (\n      this.request.method === 'POST' ||\n      this.request.method === 'PATCH' ||\n      this.request.method === 'PUT'\n    ) {\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_JSON}`);\n    }\n\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res = [\n        ...res,\n        ...headers\n          .keys()\n          .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`),\n      ];\n    }\n\n    return res.join(NEWLINE);\n  }\n\n  onLoad(content: string[], status: { code: number; message: string }) {\n    let headers: HttpHeaders = new HttpHeaders();\n    var index = 1;\n    for (; index = 200 && status.code ({\n        body,\n        headers,\n        status: status.code,\n        statusText: status.message,\n        url: this.request.urlWithParams,\n      });\n      this.next(ODataResponse.fromHttpResponse(this.request, res));\n      this.complete();\n    } else {\n      // An unsuccessful request is delivered on the error channel.\n      this.error(\n        new HttpErrorResponse({\n          // The error in this case is the response body (error from the server).\n          error: body,\n          headers,\n          status: status.code,\n          statusText: status.message,\n          url: this.request.urlWithParams,\n        })\n      );\n    }\n  }\n\n  onError(content: string[], status: { code: number; text: string }) {\n    const res = new HttpErrorResponse({\n      error: content.join(NEWLINE),\n      status: status.code || 0,\n      statusText: status.text || 'Unknown Error',\n      url: this.request.urlWithParams || undefined,\n    });\n    this.error(res);\n  }\n}\n\n/**\n * OData Batch Resource\n * https://www.odata.org/getting-started/advanced-tutorial/#batch\n */\nexport class ODataBatchResource extends ODataResource {\n  // VARIABLES\n  private _requests: ODataBatchRequest[] = [];\n  requests() {\n    return this._requests.map((r) => r.request);\n  }\n\n  //#region Factory\n  static factory(api: ODataApi) {\n    let segments = new ODataPathSegments();\n    segments.add(PathSegmentNames.batch, $BATCH);\n    return new ODataBatchResource(api, segments);\n  }\n\n  clone() {\n    return new ODataBatchResource(this.api, this.cloneSegments());\n  }\n  //#endregion\n\n  schema() {\n    return undefined;\n  }\n\n  /**\n   * Execute the batch request\n   * @param ctx The context for the request\n   * @param options The options of the batch request\n   * @returns The result of execute the context\n   */\n  exec(\n    ctx: (batch: this) => Observable,\n    options?: ODataOptions\n  ): Observable {\n    // Store original requester\n    const current = this.api.request;\n    // Switch to the batch requester\n    this.api.request = (req: ODataRequest): Observable => {\n      if (req.api !== this.api)\n        throw new Error('Batch Request are for the same api.');\n      if (req.observe === 'events')\n        throw new Error(\"Batch Request does not allows observe == 'events'.\");\n      this._requests.push(new ODataBatchRequest(req));\n      return this._requests[this._requests.length - 1];\n    };\n    // Execute the context\n    const obs$ = ctx(this);\n    // Restore original requester\n    this.api.request = current;\n\n    if (this._requests.length >= 0) {\n      const bound = Strings.uniqueId(BATCH_PREFIX);\n      const requests = this._requests;\n      const headers = Http.mergeHttpHeaders(\n        (options && options.headers) || {},\n        {\n          [ODATA_VERSION]: VERSION_4_0,\n          [CONTENT_TYPE]: MULTIPART_MIXED_BOUNDARY + bound,\n          [ACCEPT]: MULTIPART_MIXED,\n        }\n      );\n      const request = new ODataRequest({\n        method: 'POST',\n        body: ODataBatchResource.buildBody(bound, requests),\n        api: this.api,\n        resource: this,\n        observe: 'response',\n        responseType: 'text',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      });\n      this.api.request(request).subscribe((response) => {\n        ODataBatchResource.handleResponse(requests, response);\n      });\n    }\n\n    return obs$;\n  }\n\n  body() {\n    return ODataBatchResource.buildBody(\n      Strings.uniqueId(BATCH_PREFIX),\n      this._requests\n    );\n  }\n\n  static buildBody(\n    batchBoundary: string,\n    requests: ODataBatchRequest[]\n  ): string {\n    let res = [];\n    let changesetBoundary: string | null = null;\n    let changesetId = 1;\n\n    for (const batch of requests) {\n      // if method is GET and there is a changeset boundary open then close it\n      if (batch.request.method === 'GET' && changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n\n      // if there is no changeset boundary open then open a batch boundary\n      if (changesetBoundary === null) {\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}`);\n      }\n\n      // if method is not GET and there is no changeset boundary open then open a changeset boundary\n      if (batch.request.method !== 'GET') {\n        if (changesetBoundary === null) {\n          changesetBoundary = Strings.uniqueId(CHANGESET_PREFIX);\n          res.push(\n            `${CONTENT_TYPE}: ${MULTIPART_MIXED_BOUNDARY}${changesetBoundary}`\n          );\n          res.push(NEWLINE);\n        }\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}`);\n      }\n\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_HTTP}`);\n      res.push(`${CONTENT_TRANSFER_ENCODING}: ${BINARY}`);\n\n      if (batch.request.method !== 'GET') {\n        res.push(`${CONTENT_ID}: ${changesetId++}`);\n      }\n\n      res.push(NEWLINE);\n      res.push(`${batch}`);\n\n      if (batch.request.method === 'GET' || batch.request.method === 'DELETE') {\n        res.push(NEWLINE);\n      } else {\n        res.push(`${NEWLINE}${JSON.stringify(batch.request.body)}`);\n      }\n    }\n\n    if (res.length) {\n      if (changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n      res.push(\n        `${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n      );\n    }\n    return res.join(NEWLINE);\n  }\n\n  static handleResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse\n  ) {\n    let chunks: string[][] = [];\n    const contentType: string = response.headers.get(CONTENT_TYPE) || '';\n    const batchBoundary: string = Http.boundaryDelimiter(contentType);\n    const endLine: string = Http.boundaryEnd(batchBoundary);\n\n    const lines: string[] = response.body.split(NEWLINE_REGEXP);\n\n    let changesetResponses: string[][] | null = null;\n    let contentId: number | null = null;\n    let changesetBoundary: string | null = null;\n    let changesetEndLine: string | null = null;\n    let startIndex: number | null = null;\n    for (let index = 0; index  {\n      const req = requests[index];\n      const { code, message } = Http.parseResponseStatus(chunk[0]);\n      req.onLoad(chunk.slice(1), { code, message });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCache.html":{"url":"classes/ODataCache.html","title":"class - ODataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Cache\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Abstract\n                                getResponse\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                    Abstract\n                                putResponse\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:50\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:81\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    getResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:66\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        putResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    putResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { Cache, PathSegmentNames } from '../types';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\n\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegmentNames.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request']\n    );\n  }\n\n  tags(req: ODataRequest, res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key ? `${context.entitySet}(${context.key})` : context.entitySet\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] }\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {}\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    // Remove expired cache entries\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  flush() {\n    // Remove all cache entries\n    this.entries = new Map>();\n  }\n\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError('No Cached');\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        })\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ODataCacheEntry.html":{"url":"interfaces/ODataCacheEntry.html","title":"interface - ODataCacheEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ODataCacheEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lastRead\n                                        \n                                \n                                \n                                        \n                                            payload\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastRead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastRead:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { Cache, PathSegmentNames } from '../types';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\n\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegmentNames.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request']\n    );\n  }\n\n  tags(req: ODataRequest, res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key ? `${context.entitySet}(${context.key})` : context.entitySet\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] }\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {}\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    // Remove expired cache entries\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  flush() {\n    // Remove all cache entries\n    this.entries = new Map>();\n  }\n\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError('No Cached');\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        })\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallable.html":{"url":"classes/ODataCallable.html","title":"class - ODataCallable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/callable.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bound\n                            \n                            \n                                    Optional\n                                composable\n                            \n                            \n                                    Optional\n                                entitySetPath\n                            \n                            \n                                name\n                            \n                            \n                                parser\n                            \n                            \n                                schema\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                path\n                            \n                            \n                                serialize\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        composable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallableParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:103\n                \n            \n\n\n            \n                \n                    Returns the binding parameter of the callable.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The binding parameter of the callable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:75\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:95\n                \n            \n\n\n            \n                \n                    Encode the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:53\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the callable is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:85\n                \n            \n\n\n            \n                \n                    Serialize the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:44\n                \n            \n\n\n            \n                \n                    Returns a full type of the callable including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/callable.ts:57\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { CallableConfig, Options, Parser } from '../types';\n\nimport { ODataCallableParser } from '../parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataCallable {\n  schema: ODataSchema;\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parser: ODataCallableParser;\n\n  constructor(config: CallableConfig, schema: ODataSchema) {\n    this.schema = schema;\n    this.name = config.name;\n    this.entitySetPath = config.entitySetPath;\n    this.bound = config.bound;\n    this.composable = config.composable;\n    this.parser = new ODataCallableParser(\n      config,\n      schema.namespace,\n      schema.alias\n    );\n  }\n\n  path() {\n    let path: string;\n    if (this.entitySetPath) path = this.entitySetPath;\n    else if (this.bound) path = `${this.schema.namespace}.${this.name}`;\n    else\n      path = this.parser.return\n        ? this.api.findEntitySetForType(this.parser.return.type)?.name ||\n          this.name\n        : this.name;\n    return path;\n  }\n\n  /**\n   * Returns a full type of the callable including the namespace/alias.\n   * @param alias Use the alias of the namespace instead of the namespace.\n   * @returns The string representation of the type.\n   */\n  type({ alias = false }: { alias?: boolean } = {}) {\n    return `${alias ? this.schema.alias : this.schema.namespace}.${this.name}`;\n  }\n\n  /**\n   * Returns a boolean indicating if the callable is of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isTypeOf(type: string) {\n    return this.parser.isTypeOf(type);\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  configure({\n    parserForType,\n  }: {\n    parserForType: (type: string) => Parser;\n  }) {\n    this.parser.configure({ options: this.api.options, parserForType });\n  }\n\n  /**\n   * Deseialize the given value from the callable.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: Options): any {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the callable.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: any, options?: Options): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the callable.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: any, options?: Options): any {\n    return this.parser.encode(value, options);\n  }\n\n  /**\n   * Returns the binding parameter of the callable.\n   * @returns The binding parameter of the callable.\n   */\n  binding() {\n    return this.parser.binding();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallableParser.html":{"url":"classes/ODataCallableParser.html","title":"class - ODataCallableParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallableParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/callable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                            \n                                parameters\n                            \n                            \n                                parser\n                            \n                            \n                                    Optional\n                                return\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:94\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataParameterParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        return\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:91\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(params: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(params: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CallableConfig,\n  NONE_PARSER,\n  Options,\n  OptionsHelper,\n  Parameter,\n  Parser,\n} from '../types';\n\nimport { CALLABLE_BINDING_PARAMETER } from '../constants';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataParserOptions } from '../options';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  optionsHelper?: OptionsHelper;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): R {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) => p.configure({ parserForType, options }));\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitiesAnnotations.html":{"url":"classes/ODataEntitiesAnnotations.html","title":"class - ODataEntitiesAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitiesAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                attributes\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    readLink\n                                \n                                \n                                    count\n                                \n                                \n                                    nextLink\n                                \n                                \n                                    deltaLink\n                                \n                                \n                                    top\n                                \n                                \n                                    skip\n                                \n                                \n                                    skiptoken\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:118\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntitiesAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:126\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:130\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        count\n                    \n                \n\n                \n                    \n                        getcount()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:134\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        nextLink\n                    \n                \n\n                \n                    \n                        getnextLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:138\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        deltaLink\n                    \n                \n\n                \n                    \n                        getdeltaLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:142\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n\n                \n                    \n                        gettop()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:146\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:151\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skiptoken\n                    \n                \n\n                \n                    \n                        getskiptoken()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:156\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:162\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityAnnotations.html":{"url":"classes/ODataEntityAnnotations.html","title":"class - ODataEntityAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Private\n                                    Optional\n                                _properties\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                property\n                            \n                            \n                                attributes\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    id\n                                \n                                \n                                    etag\n                                \n                                \n                                    mediaEtag\n                                \n                                \n                                    metadataEtag\n                                \n                                \n                                    readLink\n                                \n                                \n                                    editLink\n                                \n                                \n                                    mediaReadLink\n                                \n                                \n                                    mediaEditLink\n                                \n                                \n                                    mediaContentType\n                                \n                                \n                                    properties\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:44\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntityAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:52\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n\n                \n                    \n                        getid()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:56\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        etag\n                    \n                \n\n                \n                    \n                        getetag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:60\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEtag\n                    \n                \n\n                \n                    \n                        getmediaEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:64\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadataEtag\n                    \n                \n\n                \n                    \n                        getmetadataEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:68\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:72\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        editLink\n                    \n                \n\n                \n                    \n                        geteditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:76\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaReadLink\n                    \n                \n\n                \n                    \n                        getmediaReadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:80\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEditLink\n                    \n                \n\n                \n                    \n                        getmediaEditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:84\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaContentType\n                    \n                \n\n                \n                    \n                        getmediaContentType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:88\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        properties\n                    \n                \n\n                \n                    \n                        getproperties()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:93\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:105\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityContainer.html":{"url":"classes/ODataEntityContainer.html","title":"class - ODataEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-container.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                            \n                                entitySets\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntityContainerConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntityContainerConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/entity-container.ts:32\n                \n            \n\n\n            \n                \n                    Find an annotation inside the entity container.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/entity-container.ts:23\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { EntityContainerConfig } from '../types';\nimport { ODataAnnotation } from './annotation';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntityContainer {\n  schema: ODataSchema;\n  name: string;\n  annotations: ODataAnnotation[];\n  entitySets: ODataEntitySet[];\n\n  constructor(config: EntityContainerConfig, schema: ODataSchema) {\n    this.schema = schema;\n    this.name = config.name;\n    this.entitySets = (config.entitySets || []).map(\n      (config) => new ODataEntitySet(config, schema)\n    );\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  /**\n   * Find an annotation inside the entity container.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityService.html":{"url":"classes/ODataEntityService.html","title":"class - ODataEntityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataBaseService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                attach\n                            \n                            \n                                    Public\n                                    Abstract\n                                entity\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    structuredTypeSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(value: M)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:8\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:62\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:25\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:99\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        structuredTypeSchema\n                    \n                \n\n                \n                    \n                        getstructuredTypeSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity.ts:13\n                                \n                            \n                    \n                        \n                                The schema for the structured type.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { EntityKey, ODataResource } from '../resources';\n\nimport { ODataBaseService } from './base';\nimport { ODataModel } from '../models/model';\n\nexport abstract class ODataEntityService extends ODataBaseService {\n  public abstract entity(key?: EntityKey): ODataResource;\n  public abstract attach>(value: M): void;\n\n  /**\n   * The schema for the structured type.\n   */\n  get structuredTypeSchema() {\n    return this.apiNameOrEntityType !== undefined\n      ? this.api.findStructuredTypeForType(this.apiNameOrEntityType)\n      : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySet.html":{"url":"classes/ODataEntitySet.html","title":"class - ODataEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-set.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                            \n                                entityType\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                service\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAnnotation\n                            \n                            \n                                isTypeOf\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntitySetConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntitySetConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        service\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/entity-set.ts:41\n                \n            \n\n\n            \n                \n                    Find an annotation inside the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/entity-set.ts:26\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the entity set is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/entity-set.ts:32\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { EntitySetConfig } from '../types';\nimport { ODataAnnotation } from './annotation';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntitySet {\n  schema: ODataSchema;\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations: ODataAnnotation[];\n  constructor(config: EntitySetConfig, schema: ODataSchema) {\n    this.schema = schema;\n    this.name = config.name;\n    this.entityType = config.entityType;\n    this.service = config.service;\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Returns a boolean indicating if the entity set is of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isTypeOf(type: string) {\n    var names = [`${this.schema.namespace}.${this.name}`];\n    if (this.schema.alias) names.push(`${this.schema.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  /**\n   * Find an annotation inside the entity set.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySetService.html":{"url":"classes/ODataEntitySetService.html","title":"class - ODataEntitySetService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                create\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                entities\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                fetchAll\n                            \n                            \n                                    Public\n                                fetchMany\n                            \n                            \n                                    Public\n                                fetchOne\n                            \n                            \n                                    Public\n                                fetchOrCreate\n                            \n                            \n                                    Public\n                                modify\n                            \n                            \n                                    Public\n                                save\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySetSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:37\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:38\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(attrs: Partial, options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:91\n                \n            \n\n\n            \n                \n                    Create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        destroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy(key: EntityKey, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:138\n                \n            \n\n\n            \n                \n                    Delete an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entities\n                        \n                    \n                \n            \n            \n                \n                    \n                    entities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:21\n                \n            \n\n\n            \n                \n                    Get the entity set resource for this service.\n\n\n                    \n                        Returns :         ODataEntitySetResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:29\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAll(options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:58\n                \n            \n\n\n            \n                \n                    Get all entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchMany(options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:67\n                \n            \n\n\n            \n                \n                    Get entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOne(key: EntityKey, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:79\n                \n            \n\n\n            \n                \n                    Get an entity from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOrCreate(key: EntityKey, attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:155\n                \n            \n\n\n            \n                \n                    Get or create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        modify\n                        \n                    \n                \n            \n            \n                \n                    \n                    modify(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:122\n                \n            \n\n\n            \n                \n                    Patch an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:175\n                \n            \n\n\n            \n                \n                    Save an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:105\n                \n            \n\n\n            \n                \n                    Update an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:62\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:25\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:99\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySetSchema\n                    \n                \n\n                \n                    \n                        getentitySetSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:50\n                                \n                            \n                    \n                        \n                                The schema for the entity set.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import {\n  EntityKey,\n  ODataEntities,\n  ODataEntity,\n  ODataEntityResource,\n  ODataEntitySetResource,\n  ODataOptions,\n} from '../resources';\nimport { Observable, throwError } from 'rxjs';\n\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ODataCollection } from '../models/collection';\nimport { ODataEntityService } from './entity';\nimport { ODataModel } from '../models/model';\nimport { catchError } from 'rxjs/operators';\n\nexport class ODataEntitySetService extends ODataEntityService {\n  /**\n   * Get the entity set resource for this service.\n   */\n  public entities(): ODataEntitySetResource {\n    return this.client.entitySet(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(key?: EntityKey): ODataEntityResource {\n    return this.entities().entity(key);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M): void;\n  public attach>>(model: C): void;\n  public attach(model: any): void {\n    if (model instanceof ODataModel) {\n      model.attach(this.entities().entity());\n    } else if (model instanceof ODataCollection) {\n      model.attach(this.entities());\n    }\n  }\n\n  /**\n   * The schema for the entity set.\n   */\n  get entitySetSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Get all entities from the entity set.\n   * @param options The options for the request.\n   */\n  public fetchAll(options?: ODataOptions): Observable {\n    return this.entities().fetchAll(options);\n  }\n\n  /**\n   * Get entities from the entity set.\n   * @param withCount Get the count of the entities.\n   * @param options The options for the request.\n   */\n  public fetchMany(\n    options?: ODataOptions & { withCount?: boolean }\n  ): Observable> {\n    return this.entities().fetch(options);\n  }\n\n  /**\n   * Get an entity from the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOne(\n    key: EntityKey,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    return this.entity(key).fetch(options);\n  }\n\n  /**\n   * Create an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param options The options for the request.\n   */\n  public create(\n    attrs: Partial,\n    options?: ODataOptions\n  ): Observable> {\n    return this.entities().create(attrs, options);\n  }\n\n  /**\n   * Update an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey()) return throwError('Resource without key');\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public modify(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey()) return throwError('Resource without key');\n    return res.modify(attrs, options);\n  }\n\n  /**\n   * Delete an entity in the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public destroy(\n    key: EntityKey,\n    options?: ODataOptions & { etag?: string }\n  ) {\n    const res = this.entity(key);\n    if (!res.hasKey()) return throwError('Resource without key');\n    return res.destroy(options);\n  }\n\n  //#region Shortcuts\n  /**\n   * Get or create an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOrCreate(\n    key: EntityKey,\n    attrs: Partial,\n    { etag, ...options }: { etag?: string } & ODataOptions = {}\n  ): Observable> {\n    return this.fetchOne(key, { etag, ...options }).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 404) return this.create(attrs, options);\n        else return throwError(error);\n      })\n    );\n  }\n\n  /**\n   * Save an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param method The method to use.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public save(\n    attrs: Partial,\n    {\n      etag,\n      method,\n      ...options\n    }: {\n      etag?: string;\n      method?: 'create' | 'update' | 'modify';\n    } & ODataOptions = {}\n  ) {\n    let schema = this.structuredTypeSchema;\n    if (method === undefined && schema !== undefined && schema.isCompoundKey())\n      return throwError(\n        'Composite key require a specific method, use create/update/patch'\n      );\n    let key = schema && schema.resolveKey(attrs);\n    if (method === undefined) method = key !== undefined ? 'update' : 'create';\n    if ((method === 'update' || method === 'modify') && key === undefined)\n      return throwError(\"Can't update/patch entity without key\");\n    return method === 'create'\n      ? this.create(attrs, options)\n      : method === 'modify'\n      ? this.modify(key, attrs, { etag, ...options })\n      : this.update(key, attrs, { etag, ...options });\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityTypeKey.html":{"url":"classes/ODataEntityTypeKey.html","title":"class - ODataEntityTypeKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityTypeKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../utils';\nimport {\n  Parser,\n  StructuredTypeFieldConfig,\n  StructuredTypeConfig,\n  OptionsHelper,\n  NONE_PARSER,\n  StructuredTypeFieldOptions,\n  Options,\n} from '../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { COMPUTED } from '../constants';\nimport { ODataAnnotation } from '../schema/annotation';\nimport { raw } from '../resources/query';\nimport { ODataParserOptions } from '../options';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser implements Parser {\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string;\n  private parser: Parser;\n  default?: any;\n  maxLength?: number;\n  collection: boolean;\n  nullable: boolean;\n  navigation: boolean;\n  precision?: number;\n  scale?: number;\n  referentials: ODataReferential[];\n  annotations: ODataAnnotation[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.annotations = (field.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.collection = field.collection !== undefined ? field.collection : false;\n    this.nullable = field.nullable !== undefined ? field.nullable : true;\n    this.navigation = field.navigation !== undefined ? field.navigation : false;\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  /**\n   * Find an annotation inside the structured field type.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.findAnnotation((a) => a.term === COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed?.bool && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined)\n      this.default = this.deserialize(this.default, options);\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        'Edm.String',\n        'Edm.Date',\n        'Edm.TimeOfDay',\n        'Edm.DateTimeOffset',\n        'Edm.Guid',\n        'Edm.Binary',\n      ].indexOf(this.type) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === 'Edm.Date') schema.format = 'date';\n      else if (this.type === 'Edm.TimeOfDay') schema.format = 'time';\n      else if (this.type === 'Edm.DateTimeOffset') schema.format = 'date-time';\n      else if (this.type === 'Edm.Guid')\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === 'Edm.Binary') schema.contentEncoding = 'base64';\n      else if (this.type === 'Edm.String' && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      ['Edm.Int64', 'Edm.Int32', 'Edm.Int16', 'Edm.Byte', 'Edm.SByte'].indexOf(\n        this.type\n      ) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (['Edm.Decimal', 'Edm.Double'].indexOf(this.type) !== -1) {\n      schema.type = 'number';\n    } else if (['Edm.Boolean'].indexOf(this.type) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType.keys?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataStructuredTypeParser implements Parser {\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  keys?: ODataEntityTypeKey[];\n  fields: ODataStructuredTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this.keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    this.fields = Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).map(\n      ([name, config]) => new ODataStructuredTypeFieldParser(name, this, config)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  typeFor(name: string): string | undefined {\n    const field = this.fields.find((f) => f.name === name);\n    if (field === undefined && this.parent !== undefined)\n      return this.parent.typeFor(name);\n    return field !== undefined ? field.type : undefined;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.deserialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.serialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this.fields.forEach((f) => f.configure({ parserForType, options }));\n  }\n\n  resolveKey(value: any): any {\n    let key = this.parent?.resolveKey(value) || {};\n    if (Array.isArray(this.keys) && this.keys.length > 0) {\n      for (var k of this.keys) {\n        let v = value as any;\n        let structured = this as ODataStructuredTypeParser | undefined;\n        let field: ODataStructuredTypeFieldParser | undefined;\n        for (let name of k.name.split('/')) {\n          if (structured === undefined) break;\n          field = structured.fields.find((f) => f.name === name);\n          if (field !== undefined) {\n            v = Types.isPlainObject(v) ? v[field.name] : v;\n            structured = field.isStructuredType()\n              ? field.structured()\n              : undefined;\n          }\n        }\n        if (field !== undefined && v !== undefined) {\n          key[k.alias || field.name] = field.encode(v);\n        }\n      }\n    }\n    if (Types.isEmpty(key)) return undefined;\n    return Objects.resolveKey(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let value = this.parent?.defaults() || {};\n    let fields = this.fields.filter(\n      (f) => f.default !== undefined || f.isStructuredType()\n    );\n    return {\n      ...value,\n      ...fields.reduce((acc, f) => {\n        let value = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = this.parent?.toJsonSchema(options) || {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.name,\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields.filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = (this.parent?.validate(attrs, { method, navigation }) ||\n      {}) as { [name: string]: any };\n    const fields = this.fields.filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumType.html":{"url":"classes/ODataEnumType.html","title":"class - ODataEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                parser\n                            \n                            \n                                schema\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                fields\n                            \n                            \n                                fieldTitle\n                            \n                            \n                                findAnnotation\n                            \n                            \n                                findFieldByName\n                            \n                            \n                                findFieldByValue\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                mapFields\n                            \n                            \n                                serialize\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:129\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:149\n                \n            \n\n\n            \n                \n                    Encode the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:66\n                \n            \n\n\n            \n                \n                    Returns the fields of the enum type.\n\n\n                    \n                    \n                    \n                        Returns :         ODataEnumTypeFieldParser[]\n\n                    \n                    \n                        The fields of the enum type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fieldTitle\n                        \n                    \n                \n            \n            \n                \nfieldTitle(value: number | string, pattern?: RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:94\n                \n            \n\n\n            \n                \n                    Find a title for a given value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            number | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value of the field\n\n                                    \n                                \n                                \n                                    pattern\n                                    \n                                            RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Pattern to use for find in annotations\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The name or annotation of the filed that matches with the value.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:58\n                \n            \n\n\n            \n                \n                    Find an annotation inside the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findFieldByName\n                        \n                    \n                \n            \n            \n                \nfindFieldByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:75\n                \n            \n\n\n            \n                \n                    Find a field by name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the field\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The field with the given name\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findFieldByValue\n                        \n                    \n                \n            \n            \n                \nfindFieldByValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:84\n                \n            \n\n\n            \n                \n                    Find a field by value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value of the field\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The field with the given value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:41\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the enum type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:119\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Map the fields of the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mapper\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that maps the value to the new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The fields mapped by the mapper\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:139\n                \n            \n\n\n            \n                \n                    Serialize the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:32\n                \n            \n\n\n            \n                \n                    Returns a full type of the enum type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:45\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { EnumTypeConfig, Options } from '../types';\nimport { ODataEnumTypeFieldParser, ODataEnumTypeParser } from '../parsers';\n\nimport { ODataAnnotation } from './annotation';\nimport { ODataSchema } from './schema';\n\nexport class ODataEnumType {\n  schema: ODataSchema;\n  name: string;\n  parser: ODataEnumTypeParser;\n  members: { [name: string]: number } | { [value: number]: string };\n  annotations: ODataAnnotation[];\n  constructor(config: EnumTypeConfig, schema: ODataSchema) {\n    this.schema = schema;\n    this.name = config.name;\n    this.members = config.members;\n    this.parser = new ODataEnumTypeParser(\n      config,\n      schema.namespace,\n      schema.alias\n    );\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Returns a full type of the enum type including the namespace/alias.\n   * @param alias Use the alias of the namespace instead of the namespace.\n   * @returns The string representation of the type.\n   */\n  type({ alias = false }: { alias?: boolean } = {}) {\n    return `${alias ? this.schema.alias : this.schema.namespace}.${this.name}`;\n  }\n\n  /**\n   * Returns a boolean indicating if the enum type is of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isTypeOf(type: string) {\n    return this.parser.isTypeOf(type);\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  configure() {\n    this.parser.configure({ options: this.api.options });\n  }\n\n  /**\n   * Find an annotation inside the enum type.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Returns the fields of the enum type.\n   * @returns The fields of the enum type.\n   */\n  fields(): ODataEnumTypeFieldParser[] {\n    return this.parser.fields;\n  }\n\n  /**\n   * Find a field by name.\n   * @param name The name of the field\n   * @returns The field with the given name\n   */\n  findFieldByName(name: string) {\n    return this.fields().find((f) => f.name === name);\n  }\n\n  /**\n   * Find a field by value.\n   * @param value The value of the field\n   * @returns The field with the given value\n   */\n  findFieldByValue(value: number) {\n    return this.fields().find((f) => f.value === value);\n  }\n\n  /**\n   * Find a title for a given value.\n   * @param value Value of the field\n   * @param pattern Pattern to use for find in annotations\n   * @returns The name or annotation of the filed that matches with the value.\n   */\n  fieldTitle(value: number | string, pattern?: RegExp) {\n    const resolveTitle = (field?: ODataEnumTypeFieldParser) => {\n      if (field !== undefined) {\n        if (pattern !== undefined) {\n          const annotation = field.findAnnotation((a) => pattern.test(a.term));\n          if (annotation !== undefined && annotation.string !== undefined) {\n            return annotation.string;\n          }\n        }\n        return field.name;\n      }\n      return '';\n    };\n    if (typeof value === 'number') {\n      return resolveTitle(this.findFieldByValue(value));\n    } else {\n      return resolveTitle(this.findFieldByName(value));\n    }\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => T) {\n    return this.fields().map(mapper);\n  }\n\n  /**\n   * Deseialize the given value from the enum type.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: Options): E {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the enum type.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: E, options?: Options): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the enum type.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: E, options?: Options): any {\n    return this.parser.encode(value, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeFieldParser.html":{"url":"classes/ODataEnumTypeFieldParser.html","title":"class - ODataEnumTypeFieldParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeFieldParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                            \n                                name\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, field: EnumTypeFieldConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        EnumTypeFieldConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:31\n                \n            \n\n\n            \n                \n                    Find an annotation inside the enum field.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Enums } from '../utils';\nimport { raw } from '../resources/query';\nimport { ODataAnnotation } from '../schema/annotation';\nimport {\n  EnumTypeConfig,\n  Parser,\n  OptionsHelper,\n  EnumTypeFieldConfig,\n  Options,\n} from '../types';\nimport { ODataParserOptions } from '../options';\n\nexport class ODataEnumTypeFieldParser {\n  name: string;\n  value: number;\n  annotations: ODataAnnotation[];\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    this.name = name;\n    this.value = field.value;\n    this.annotations = (field.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Find an annotation inside the enum field.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n}\n\nexport class ODataEnumTypeParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: ODataEnumTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this.fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f)\n    );\n  }\n\n  configure({ options }: { options: OptionsHelper }) {\n    this.optionsHelper = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: Options): T {\n    // string -> number\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): string {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      const names = Enums.toNames(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      const name = Enums.toName(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const serialized = this.serialize(value, parserOptions);\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this.fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeParser.html":{"url":"classes/ODataEnumTypeParser.html","title":"class - ODataEnumTypeParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/enum-type.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                fields\n                            \n                            \n                                    Optional\n                                flags\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                serialize\n                            \n                            \n                                toJsonSchema\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeFieldParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:43\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: string, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJsonSchema\n                        \n                    \n                \n            \n            \n                \ntoJsonSchema()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(member: string | number, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    member\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [] | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Enums } from '../utils';\nimport { raw } from '../resources/query';\nimport { ODataAnnotation } from '../schema/annotation';\nimport {\n  EnumTypeConfig,\n  Parser,\n  OptionsHelper,\n  EnumTypeFieldConfig,\n  Options,\n} from '../types';\nimport { ODataParserOptions } from '../options';\n\nexport class ODataEnumTypeFieldParser {\n  name: string;\n  value: number;\n  annotations: ODataAnnotation[];\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    this.name = name;\n    this.value = field.value;\n    this.annotations = (field.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Find an annotation inside the enum field.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n}\n\nexport class ODataEnumTypeParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: ODataEnumTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this.fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f)\n    );\n  }\n\n  configure({ options }: { options: OptionsHelper }) {\n    this.optionsHelper = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: Options): T {\n    // string -> number\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): string {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      const names = Enums.toNames(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      const name = Enums.toName(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const serialized = this.serialize(value, parserOptions);\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this.fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInMemoryCache.html":{"url":"classes/ODataInMemoryCache.html","title":"class - ODataInMemoryCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInMemoryCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/memory.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/memory.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:15\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:20\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:10\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:50\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:108\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:81\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:128\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:66\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { ODataRequest, ODataResponse } from '../resources';\n\nimport { ODataCache } from './cache';\n\nexport class ODataInMemoryCache extends ODataCache {\n  constructor({ timeout }: { timeout?: number } = {}) {\n    super({ timeout });\n  }\n\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    var scope = this.scope(req);\n    var tags = this.tags(req, res);\n    this.put(req.pathWithParams, res, {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    var scope = this.scope(req);\n    return this.get(req.pathWithParams, { scope });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInStorageCache.html":{"url":"classes/ODataInStorageCache.html","title":"class - ODataInStorageCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInStorageCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                storage\n                            \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                flush\n                            \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                restore\n                            \n                            \n                                store\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Storage\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:15\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:60\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:50\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restore\n                        \n                    \n                \n            \n            \n                \nrestore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:50\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:81\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:128\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:66\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataCache, ODataCacheEntry } from './cache';\nimport { ODataRequest, ODataResponse } from '../resources';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries()))\n    );\n  }\n\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]')\n    );\n  }\n\n  flush() {\n    super.flush();\n    this.store();\n  }\n\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(req, res);\n    this.put(req.pathWithParams, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.pathWithParams, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ODataModule.html":{"url":"modules/ODataModule.html","title":"module - ODataModule","body":"\n                   \n\n\n\n\n    Modules\n    ODataModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ODataClient\n                        \n                        \n                            ODataServiceFactory\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(configs: ApiConfig[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/module.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configs\n                                    \n                                                ApiConfig[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { ApiConfig } from './types';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ODATA_CONFIGURATIONS } from './tokens';\nimport { ODataClient } from './client';\nimport { ODataServiceFactory } from './services/index';\nimport { ODataSettings } from './settings';\n\nexport function createSettings(configs: ApiConfig[]) {\n  return new ODataSettings(...configs);\n}\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  public static forRoot(\n    ...configs: ApiConfig[]\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        { provide: ODATA_CONFIGURATIONS, useValue: configs },\n        {\n          provide: ODataSettings,\n          useFactory: createSettings,\n          deps: [ODATA_CONFIGURATIONS],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataParameterParser.html":{"url":"classes/ODataParameterParser.html","title":"class - ODataParameterParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataParameterParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/callable.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                collection\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                nullable\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                            \n                                    Private\n                                parser\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                encode\n                            \n                            \n                                enum\n                            \n                            \n                                isEdmType\n                            \n                            \n                                isEnumType\n                            \n                            \n                                isStructuredType\n                            \n                            \n                                serialize\n                            \n                            \n                                structured\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, parameter: Parameter)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameter\n                                                  \n                                                        \n                                                                        Parameter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enum\n                        \n                    \n                \n            \n            \n                \nenum()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEdmType\n                        \n                    \n                \n            \n            \n                \nisEdmType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnumType\n                        \n                    \n                \n            \n            \n                \nisEnumType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isStructuredType\n                        \n                    \n                \n            \n            \n                \nisStructuredType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        structured\n                        \n                    \n                \n            \n            \n                \nstructured()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CallableConfig,\n  NONE_PARSER,\n  Options,\n  OptionsHelper,\n  Parameter,\n  Parser,\n} from '../types';\n\nimport { CALLABLE_BINDING_PARAMETER } from '../constants';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataParserOptions } from '../options';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  optionsHelper?: OptionsHelper;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): R {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) => p.configure({ parserForType, options }));\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataParserOptions.html":{"url":"classes/ODataParserOptions.html","title":"class - ODataParserOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataParserOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            OptionsHelper\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                stringAsEnum\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: Options)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/options.ts:111\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        Options\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:110\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:118\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ApiOptions,\n  FetchPolicy,\n  ODataMetadataType,\n  ODataVersion,\n  Options,\n  OptionsHelper,\n  QueryOptionNames,\n} from './types';\nimport {\n  DEFAULT_FETCH_POLICY,\n  DEFAULT_STRIP_METADATA,\n  DEFAULT_VERSION,\n} from './constants';\n\nimport { ODataHelper } from './helper';\n\nexport class ODataApiOptions implements ApiOptions, OptionsHelper {\n  /**\n   * Default OData version\n   */\n  version: ODataVersion;\n  /**\n   * Send enum as string in the request\n   */\n  stringAsEnum?: boolean;\n  /**\n   * Strip metadata from the response\n   */\n  stripMetadata: ODataMetadataType;\n  /**\n   * Cache fetch policy\n   */\n  fetchPolicy: FetchPolicy;\n  /**\n   * Extra params to be sent in the request\n   */\n  params: { [param: string]: string | string[] };\n  /**\n   * Extra headers to be sent in the request\n   */\n  headers: { [param: string]: string | string[] };\n  /**\n   * Http request with credentials\n   */\n  withCredentials?: boolean;\n  /**\n   * Send query options in the request body\n   */\n  bodyQueryOptions: QueryOptionNames[];\n  /**\n   * Customize accept header with OData options\n   * @link http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_RequestingtheJSONFormat\n   */\n  accept?: {\n    exponentialDecimals?: boolean;\n    ieee754Compatible?: boolean;\n    metadata?: ODataMetadataType;\n    streaming?: boolean;\n  };\n  etag: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398229\n     */\n    ifMatch: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398230\n     */\n    ifNoneMatch: boolean;\n  } = { ifMatch: true, ifNoneMatch: false };\n  prefer?: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398238\n     */\n    maxPageSize?: number;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398240\n     */\n    return?: 'representation' | 'minimal';\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398236\n     */\n    continueOnError?: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398237\n     */\n    includeAnnotations?: string;\n  };\n\n  constructor(config: ApiOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n    this.params = config.params || {};\n    this.headers = config.headers || {};\n    this.withCredentials = config.withCredentials;\n    this.stripMetadata = config.stripMetadata || DEFAULT_STRIP_METADATA;\n    this.fetchPolicy = config.fetchPolicy || DEFAULT_FETCH_POLICY;\n    this.bodyQueryOptions = config.bodyQueryOptions || [];\n    this.accept = config.accept;\n    Object.assign(this.etag, config.etag || {});\n    this.prefer = config.prefer;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\nexport class ODataParserOptions implements OptionsHelper {\n  version: ODataVersion;\n  stringAsEnum?: boolean;\n\n  constructor(config: Options) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegments.html":{"url":"classes/ODataPathSegments.html","title":"class - ODataPathSegments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/segments.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _segments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                clone\n                            \n                            \n                                find\n                            \n                            \n                                first\n                            \n                            \n                                get\n                            \n                            \n                                keys\n                            \n                            \n                                last\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                segments\n                            \n                            \n                                toJSON\n                            \n                            \n                                toString\n                            \n                            \n                                types\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments?: ODataSegment[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataSegment[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _segments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSegment[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:46\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(name: string, path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPathSegments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(predicate: (segment: ODataSegment) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first\n                        \n                    \n                \n            \n            \n                \nfirst(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last\n                        \n                    \n                \n            \n            \n                \nlast(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:52\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        segments\n                        \n                    \n                \n            \n            \n                \nsegments(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        types\n                        \n                    \n                \n            \n            \n                \ntypes(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { raw, buildPathAndQuery } from '../query';\n\nimport { Types, Dates, Objects } from '../../utils';\n\nimport { PATH_SEPARATOR } from '../../constants';\nimport { EntityKey } from '../resource';\nimport { PathSegmentNames } from '../../types';\nimport { SegmentHandler } from './handlers';\n\nexport type ODataSegment = {\n  name: PathSegmentNames;\n  path: string;\n  type?: string;\n  key?: any;\n  parameters?: any;\n};\n\nfunction pathSegmentsBuilder(\n  segment: ODataSegment\n): [string, { [name: string]: any }] {\n  if (segment.name === PathSegmentNames.function) {\n    let [path, params] = segment.parameters\n      ? buildPathAndQuery({ func: { [segment.path]: segment.parameters } })\n      : buildPathAndQuery({ func: segment.path });\n    if (path.startsWith(PATH_SEPARATOR)) {\n      path = path.slice(1);\n    }\n    return [path, params];\n  } else {\n    let key = segment.key;\n    // HACK: Check guid string\n    if (\n      typeof key === 'string' &&\n      /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(\n        key\n      )\n    ) {\n      key = raw(key);\n    }\n    let [path, params] = key ? buildPathAndQuery({ key }) : ['', {}];\n    return [segment.path + path, params];\n  }\n}\n\nexport class ODataPathSegments {\n  private _segments: ODataSegment[];\n\n  constructor(segments?: ODataSegment[]) {\n    this._segments = segments || [];\n  }\n\n  pathAndParams(): [string, { [name: string]: any }] {\n    const result = this._segments.reduce(\n      (acc, segment) => {\n        const [path, params] = pathSegmentsBuilder(segment);\n        acc.paths.push(path);\n        acc.params = Object.assign(acc.params, params);\n        return acc;\n      },\n      { paths: [] as string[], params: {} as { [name: string]: any } }\n    );\n    return [result.paths.join(PATH_SEPARATOR), result.params];\n  }\n\n  types({ key = false }: { key?: boolean } = {}): string[] {\n    return this.segments({ key })\n      .map((s) => s.type())\n      .filter((t) => t !== undefined) as string[];\n  }\n\n  keys(values?: (EntityKey | undefined)[]) {\n    const segments = this.segments({ key: true });\n    if (values !== undefined) {\n      segments.forEach((segment, index) => {\n        const key = values[index];\n        if (key === undefined) {\n          segment.clearKey();\n        } else {\n          segment.key(key);\n        }\n      });\n    }\n    return segments.map((s) => s.key() as EntityKey | undefined);\n  }\n\n  toString(): string {\n    const [path, params] = this.pathAndParams();\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => value)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return this._segments.map((s) => {\n      let json = {\n        name: s.name as string,\n        path: s.path,\n      } as any;\n      if (s.type !== undefined) json.type = s.type;\n      if (s.key !== undefined) json.key = s.key;\n      if (s.parameters !== undefined) json.parameters = s.parameters;\n      return json;\n    });\n  }\n\n  clone() {\n    const segments = Objects.clone(this._segments);\n    return new ODataPathSegments(segments);\n  }\n\n  find(predicate: (segment: ODataSegment) => boolean) {\n    //Backward Find\n    return [...this._segments].reverse().find(predicate);\n  }\n\n  segments({ key = false }: { key?: boolean } = {}) {\n    let segments = [...this._segments];\n    if (key)\n      segments = segments.filter(\n        (s) =>\n          [\n            PathSegmentNames.entitySet,\n            PathSegmentNames.navigationProperty,\n            PathSegmentNames.property,\n          ].indexOf(s.name) !== -1\n      );\n    return segments.map((s) => new SegmentHandler(s));\n  }\n\n  first({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[0] : undefined;\n  }\n\n  last({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[segments.length - 1] : undefined;\n  }\n\n  add(name: string, path: string) {\n    const segment = { name, path } as ODataSegment;\n    this._segments.push(segment);\n    return new SegmentHandler(segment);\n  }\n\n  get(name: string) {\n    let segment = this.find((s) => s.name === name);\n    if (segment === undefined)\n      throw Error(`No Segment for name ${name} was found`);\n    return new SegmentHandler(segment);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegmentsHandler.html":{"url":"classes/ODataPathSegmentsHandler.html","title":"class - ODataPathSegmentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegmentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                action\n                            \n                            \n                                entitySet\n                            \n                            \n                                function\n                            \n                            \n                                keys\n                            \n                            \n                                navigationProperty\n                            \n                            \n                                property\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments: ODataPathSegments)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataPathSegments\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        action\n                        \n                    \n                \n            \n            \n                \naction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigationProperty\n                        \n                    \n                \n            \n            \n                \nnavigationProperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PathSegmentNames } from '../../types';\nimport { Types } from '../../utils';\n\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegmentNames.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegmentNames.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegmentNames.action);\n  }\n  function() {\n    return this.segments.get(PathSegmentNames.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegmentNames.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegmentNames.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPropertyAnnotations.html":{"url":"classes/ODataPropertyAnnotations.html","title":"class - ODataPropertyAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPropertyAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                attributes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPropertyAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptionHandler.html":{"url":"classes/ODataQueryOptionHandler.html","title":"class - ODataQueryOptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                assertArray\n                            \n                            \n                                    Private\n                                assertObject\n                            \n                            \n                                assign\n                            \n                            \n                                at\n                            \n                            \n                                clear\n                            \n                            \n                                empty\n                            \n                            \n                                get\n                            \n                            \n                                has\n                            \n                            \n                                push\n                            \n                            \n                                remove\n                            \n                            \n                                set\n                            \n                            \n                                toJSON\n                            \n                            \n                                unset\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(o: literal type, n: QueryOptionNames)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        o\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        n\n                                                  \n                                                        \n                                                                        QueryOptionNames\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertArray()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     any[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertObject(create: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    create\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        assign\n                        \n                    \n                \n            \n            \n                \nassign(values: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        at\n                        \n                    \n                \n            \n            \n                \nat(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        empty\n                        \n                    \n                \n            \n            \n                \nempty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(path: string, def?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    def\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        push\n                        \n                    \n                \n            \n            \n                \npush(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(path: string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unset\n                        \n                    \n                \n            \n            \n                \nunset(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue(v?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:14\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../utils';\nimport { alias, Expand, Filter, OrderBy, Select, Transform } from './builder';\n\nimport { QueryOptionNames } from '../../types';\nimport { Expression } from './expressions';\nimport type { ODataQueryArguments, ODataQueryOptions } from './options';\n\nexport class ODataQueryOptionHandler {\n  constructor(\n    private o: { [name: string]: any },\n    private n: QueryOptionNames\n  ) {}\n\n  get name() {\n    return this.n;\n  }\n\n  toJSON() {\n    return this.o[this.n];\n  }\n\n  empty() {\n    return Types.isEmpty(this.o[this.n]);\n  }\n\n  //#region Primitive Value\n  value(v?: any) {\n    return (v !== undefined && (this.o[this.n] = v)) || this.o[this.n];\n  }\n  //#endregion\n\n  //#region Array Value\n  private assertArray(): any[] {\n    if (!Types.isArray(this.o[this.n]))\n      this.o[this.n] = this.o[this.n] !== undefined ? [this.o[this.n]] : [];\n    return this.o[this.n];\n  }\n\n  push(value: any) {\n    this.assertArray().push(value);\n  }\n\n  remove(value: any) {\n    this.o[this.n] = this.assertArray().filter((v) => v !== value);\n    // If only one... down to value\n    if (this.o[this.n].length === 1) this.o[this.n] = this.o[this.n][0];\n  }\n\n  at(index: number) {\n    return this.assertArray()[index];\n  }\n  //#endregion\n\n  //#region HashMap Value\n  private assertObject(create: boolean): { [name: string]: any } {\n    if (!Types.isArray(this.o[this.n]) && Types.isPlainObject(this.o[this.n])) {\n      return this.o[this.n];\n    }\n    let arr = this.assertArray();\n    let obj = arr.find((v) => Types.isPlainObject(v));\n    if (!obj && create) {\n      obj = {};\n      arr.push(obj);\n    }\n    return obj;\n  }\n\n  set(path: string, value: any) {\n    let obj = this.assertObject(true);\n    Objects.set(obj, path, value);\n  }\n\n  get(path: string, def?: any): any {\n    let obj = this.assertObject(false) || {};\n    return Objects.get(obj, path, def);\n  }\n\n  unset(path: string) {\n    let obj = this.assertObject(true);\n    Objects.unset(obj, path);\n\n    if (Types.isArray(this.o[this.n])) {\n      this.o[this.n] = this.o[this.n].filter((v: any) => !Types.isEmpty(v));\n      if (this.o[this.n].length === 1) this.o[this.n] = this.o[this.n][0];\n    }\n  }\n\n  has(path: string) {\n    let obj = this.assertObject(false) || {};\n    return Objects.has(obj, path);\n  }\n\n  assign(values: { [attr: string]: any }) {\n    let obj = this.assertObject(true);\n    return Objects.merge(obj, values);\n  }\n  //#endregion\n\n  clear() {\n    delete this.o[this.n];\n  }\n}\n\nexport class ODataQueryOptionsHandler {\n  constructor(protected options: ODataQueryOptions) {}\n\n  /**\n   * Create a new odata alias parameter\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_ParameterAliases\n   * @param value The value of the alias\n   * @param name The name of the alias\n   * @returns The alias\n   */\n  alias(value: any, name?: string) {\n    return alias(value, name);\n  }\n\n  select(opts: Select): ODataQueryOptionHandler;\n  select(): ODataQueryOptionHandler;\n  select(opts?: Select): any {\n    return this.options.option>(QueryOptionNames.select, opts);\n  }\n\n  expand(opts: Expand): ODataQueryOptionHandler;\n  expand(): ODataQueryOptionHandler;\n  expand(opts?: Expand): any {\n    return this.options.option>(QueryOptionNames.expand, opts);\n  }\n\n  /**\n   * Url: https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptioncompute\n   */\n  compute(\n    opts: (e: {\n      e: Expression;\n      and: Expression;\n      or: Expression;\n      not: typeof Expression.not;\n    }) => Expression\n  ): Expression;\n  compute(opts: string): ODataQueryOptionHandler;\n  compute(): ODataQueryOptionHandler;\n  compute(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.compute,\n        opts({\n          e: Expression.e(),\n          and: Expression.and(),\n          or: Expression.or(),\n          not: Expression.not,\n        }) as Expression\n      );\n    }\n    return this.options.option(QueryOptionNames.compute, opts);\n  }\n\n  /**\n   * Url: https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptionformat\n   */\n  format(opts: string): ODataQueryOptionHandler;\n  format(): ODataQueryOptionHandler;\n  format(opts?: string): any {\n    return this.options.option(QueryOptionNames.format, opts);\n  }\n\n  transform(opts: Transform): ODataQueryOptionHandler;\n  transform(): ODataQueryOptionHandler;\n  transform(opts?: Transform): any {\n    return this.options.option>(QueryOptionNames.transform, opts);\n  }\n\n  search(opts: string): ODataQueryOptionHandler;\n  search(): ODataQueryOptionHandler;\n  search(opts?: string): any {\n    return this.options.option(QueryOptionNames.search, opts);\n  }\n\n  filter(\n    opts: (e: {\n      e: Expression;\n      and: Expression;\n      or: Expression;\n      not: typeof Expression.not;\n    }) => Expression\n  ): Expression;\n  filter(opts: Filter): ODataQueryOptionHandler;\n  filter(): ODataQueryOptionHandler;\n  filter(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.filter,\n        opts({\n          e: Expression.e(),\n          and: Expression.and(),\n          or: Expression.or(),\n          not: Expression.not,\n        }) as Expression\n      );\n    }\n    return this.options.option>(QueryOptionNames.filter, opts);\n  }\n\n  orderBy(\n    opts: (e: {\n      e: Expression;\n      and: Expression;\n      or: Expression;\n      not: typeof Expression.not;\n    }) => Expression\n  ): Expression;\n  orderBy(opts: OrderBy): ODataQueryOptionHandler;\n  orderBy(): ODataQueryOptionHandler;\n  orderBy(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.orderBy,\n        opts({\n          e: Expression.e(),\n          and: Expression.and(),\n          or: Expression.or(),\n          not: Expression.not,\n        }) as Expression\n      );\n    }\n    return this.options.option>(QueryOptionNames.orderBy, opts);\n  }\n\n  top(opts: number): ODataQueryOptionHandler;\n  top(): ODataQueryOptionHandler;\n  top(opts?: number): any {\n    return this.options.option(QueryOptionNames.top, opts);\n  }\n\n  skip(opts: number): ODataQueryOptionHandler;\n  skip(): ODataQueryOptionHandler;\n  skip(opts?: number): any {\n    return this.options.option(QueryOptionNames.skip, opts);\n  }\n\n  skiptoken(opts: string): ODataQueryOptionHandler;\n  skiptoken(): ODataQueryOptionHandler;\n  skiptoken(opts?: string): any {\n    return this.options.option(QueryOptionNames.skiptoken, opts);\n  }\n\n  paging({\n    skip,\n    skiptoken,\n    top,\n  }: { skip?: number; skiptoken?: string; top?: number } = {}) {\n    if (skiptoken !== undefined) this.skiptoken(skiptoken);\n    else if (skip !== undefined) this.skip(skip);\n    if (top !== undefined) this.top(top);\n  }\n\n  clearPaging() {\n    this.skip().clear();\n    this.top().clear();\n    this.skiptoken().clear();\n  }\n\n  apply(query: ODataQueryArguments) {\n    if (query.select !== undefined) {\n      this.select(query.select);\n    }\n    if (query.expand !== undefined) {\n      this.expand(query.expand);\n    }\n    if (query.transform !== undefined) {\n      this.transform(query.transform);\n    }\n    if (query.search !== undefined) {\n      this.search(query.search);\n    }\n    if (query.filter !== undefined) {\n      this.filter(query.filter);\n    }\n    if (query.orderBy !== undefined) {\n      this.orderBy(query.orderBy);\n    }\n    this.paging(query);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptions.html":{"url":"classes/ODataQueryOptions.html","title":"class - ODataQueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/options.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                clone\n                            \n                            \n                                expression\n                            \n                            \n                                has\n                            \n                            \n                                keep\n                            \n                            \n                                option\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                remove\n                            \n                            \n                                toJSON\n                            \n                            \n                                toQueryArguments\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:32\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:102\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :         ODataQueryOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expression\n                        \n                    \n                \n            \n            \n                \nexpression(name: QueryOptionNames, exp: Expression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exp\n                                    \n                                                Expression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(name: QueryOptionNames)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keep\n                        \n                    \n                \n            \n            \n                \nkeep(names: QueryOptionNames[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                                QueryOptionNames[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        option\n                        \n                    \n                \n            \n            \n                \noption(name: QueryOptionNames, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:119\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:39\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(names: QueryOptionNames[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                                QueryOptionNames[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toQueryArguments\n                        \n                    \n                \n            \n            \n                \ntoQueryArguments()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataQueryArguments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../utils';\nimport {\n  Expand,\n  Filter,\n  OrderBy,\n  Select,\n  Transform,\n  buildPathAndQuery,\n  QueryCustomType,\n  alias,\n} from './builder';\n\nimport { QueryOptionNames } from '../../types';\nimport { ODataQueryOptionHandler } from './handlers';\nimport { Expression } from './expressions';\n\nexport type ODataQueryArguments = {\n  [QueryOptionNames.select]?: Select;\n  [QueryOptionNames.filter]?: Filter;\n  [QueryOptionNames.search]?: string;\n  [QueryOptionNames.compute]?: string;\n  [QueryOptionNames.transform]?: Transform;\n  [QueryOptionNames.orderBy]?: OrderBy;\n  [QueryOptionNames.top]?: number;\n  [QueryOptionNames.skip]?: number;\n  [QueryOptionNames.skiptoken]?: string;\n  [QueryOptionNames.expand]?: Expand;\n  [QueryOptionNames.format]?: string;\n};\n\nexport class ODataQueryOptions {\n  options: { [name: string]: any };\n\n  constructor(options?: { [name: string]: any }) {\n    this.options = options || {};\n  }\n\n  // Params\n  pathAndParams(): [string, { [name: string]: any }] {\n    let aliases: QueryCustomType[] = [];\n    let options = [\n      QueryOptionNames.select,\n      QueryOptionNames.filter,\n      QueryOptionNames.search,\n      QueryOptionNames.compute,\n      QueryOptionNames.transform,\n      QueryOptionNames.orderBy,\n      QueryOptionNames.top,\n      QueryOptionNames.skip,\n      QueryOptionNames.skiptoken,\n      QueryOptionNames.expand,\n      QueryOptionNames.format,\n    ]\n      .filter((key) => !Types.isEmpty(this.options[key]))\n      .reduce((acc, key) => {\n        let value = this.options[key];\n        if (Types.rawType(value) === 'Expression') {\n          value = value.render(aliases);\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n\n    return buildPathAndQuery({ ...options, aliases });\n  }\n\n  toString(): string {\n    const [path, params] = this.pathAndParams();\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => !Types.isEmpty(value))\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return Object.keys(this.options).reduce((acc, key) => {\n      let value = this.options[key];\n      if (Types.rawType(value) === 'Expression') {\n        value = value.toJSON();\n      }\n      return Object.assign(acc, { [key]: value });\n    }, {});\n  }\n\n  toQueryArguments(): ODataQueryArguments {\n    return {\n      select: this.options[QueryOptionNames.select],\n      expand: this.options[QueryOptionNames.expand],\n      transform: this.options[QueryOptionNames.transform],\n      compute: this.options[QueryOptionNames.compute],\n      search: this.options[QueryOptionNames.search],\n      filter: this.options[QueryOptionNames.filter],\n      orderBy: this.options[QueryOptionNames.orderBy],\n      top: this.options[QueryOptionNames.top],\n      skip: this.options[QueryOptionNames.skip],\n      skiptoken: this.options[QueryOptionNames.skiptoken],\n    } as ODataQueryArguments;\n  }\n\n  clone() {\n    const options = Object.keys(this.options).reduce((acc, key) => {\n      let value = this.options[key];\n      if (Types.rawType(value) !== 'Expression') {\n        value = Objects.clone(value);\n      }\n      return Object.assign(acc, { [key]: value });\n    }, {});\n    return new ODataQueryOptions(options);\n  }\n\n  // Set Expression\n  expression(name: QueryOptionNames, exp: Expression) {\n    return (this.options[name] = exp);\n  }\n\n  // Option Handler\n  option(name: QueryOptionNames, opts?: O) {\n    if (opts !== undefined) this.options[name] = opts;\n    return new ODataQueryOptionHandler(this.options, name);\n  }\n\n  // Query Options tools\n  has(name: QueryOptionNames) {\n    return this.options[name] !== undefined;\n  }\n\n  remove(...names: QueryOptionNames[]) {\n    names.forEach((name) => this.option(name).clear());\n  }\n\n  keep(...names: QueryOptionNames[]) {\n    this.options = Object.keys(this.options)\n      .filter((k) => names.indexOf(k as QueryOptionNames) !== -1)\n      .reduce((acc, k) => Object.assign(acc, { [k]: this.options[k] }), {});\n  }\n\n  // Clear\n  clear() {\n    this.options = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataReferential.html":{"url":"classes/ODataReferential.html","title":"class - ODataReferential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataReferential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                property\n                            \n                            \n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:45\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../utils';\nimport {\n  Parser,\n  StructuredTypeFieldConfig,\n  StructuredTypeConfig,\n  OptionsHelper,\n  NONE_PARSER,\n  StructuredTypeFieldOptions,\n  Options,\n} from '../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { COMPUTED } from '../constants';\nimport { ODataAnnotation } from '../schema/annotation';\nimport { raw } from '../resources/query';\nimport { ODataParserOptions } from '../options';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser implements Parser {\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string;\n  private parser: Parser;\n  default?: any;\n  maxLength?: number;\n  collection: boolean;\n  nullable: boolean;\n  navigation: boolean;\n  precision?: number;\n  scale?: number;\n  referentials: ODataReferential[];\n  annotations: ODataAnnotation[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.annotations = (field.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.collection = field.collection !== undefined ? field.collection : false;\n    this.nullable = field.nullable !== undefined ? field.nullable : true;\n    this.navigation = field.navigation !== undefined ? field.navigation : false;\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  /**\n   * Find an annotation inside the structured field type.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.findAnnotation((a) => a.term === COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed?.bool && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined)\n      this.default = this.deserialize(this.default, options);\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        'Edm.String',\n        'Edm.Date',\n        'Edm.TimeOfDay',\n        'Edm.DateTimeOffset',\n        'Edm.Guid',\n        'Edm.Binary',\n      ].indexOf(this.type) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === 'Edm.Date') schema.format = 'date';\n      else if (this.type === 'Edm.TimeOfDay') schema.format = 'time';\n      else if (this.type === 'Edm.DateTimeOffset') schema.format = 'date-time';\n      else if (this.type === 'Edm.Guid')\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === 'Edm.Binary') schema.contentEncoding = 'base64';\n      else if (this.type === 'Edm.String' && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      ['Edm.Int64', 'Edm.Int32', 'Edm.Int16', 'Edm.Byte', 'Edm.SByte'].indexOf(\n        this.type\n      ) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (['Edm.Decimal', 'Edm.Double'].indexOf(this.type) !== -1) {\n      schema.type = 'number';\n    } else if (['Edm.Boolean'].indexOf(this.type) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType.keys?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataStructuredTypeParser implements Parser {\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  keys?: ODataEntityTypeKey[];\n  fields: ODataStructuredTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this.keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    this.fields = Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).map(\n      ([name, config]) => new ODataStructuredTypeFieldParser(name, this, config)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  typeFor(name: string): string | undefined {\n    const field = this.fields.find((f) => f.name === name);\n    if (field === undefined && this.parent !== undefined)\n      return this.parent.typeFor(name);\n    return field !== undefined ? field.type : undefined;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.deserialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.serialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this.fields.forEach((f) => f.configure({ parserForType, options }));\n  }\n\n  resolveKey(value: any): any {\n    let key = this.parent?.resolveKey(value) || {};\n    if (Array.isArray(this.keys) && this.keys.length > 0) {\n      for (var k of this.keys) {\n        let v = value as any;\n        let structured = this as ODataStructuredTypeParser | undefined;\n        let field: ODataStructuredTypeFieldParser | undefined;\n        for (let name of k.name.split('/')) {\n          if (structured === undefined) break;\n          field = structured.fields.find((f) => f.name === name);\n          if (field !== undefined) {\n            v = Types.isPlainObject(v) ? v[field.name] : v;\n            structured = field.isStructuredType()\n              ? field.structured()\n              : undefined;\n          }\n        }\n        if (field !== undefined && v !== undefined) {\n          key[k.alias || field.name] = field.encode(v);\n        }\n      }\n    }\n    if (Types.isEmpty(key)) return undefined;\n    return Objects.resolveKey(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let value = this.parent?.defaults() || {};\n    let fields = this.fields.filter(\n      (f) => f.default !== undefined || f.isStructuredType()\n    );\n    return {\n      ...value,\n      ...fields.reduce((acc, f) => {\n        let value = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = this.parent?.toJsonSchema(options) || {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.name,\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields.filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = (this.parent?.validate(attrs, { method, navigation }) ||\n      {}) as { [name: string]: any };\n    const fields = this.fields.filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataRequest.html":{"url":"classes/ODataRequest.html","title":"class - ODataRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/request.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _body\n                            \n                            \n                                    Private\n                                    Readonly\n                                _headers\n                            \n                            \n                                    Private\n                                    Readonly\n                                _method\n                            \n                            \n                                    Private\n                                    Readonly\n                                _params\n                            \n                            \n                                    Private\n                                    Readonly\n                                _path\n                            \n                            \n                                    Private\n                                    Readonly\n                                _queryBody\n                            \n                            \n                                    Private\n                                    Readonly\n                                    Optional\n                                _responseType\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                bodyQueryOptions\n                            \n                            \n                                    Readonly\n                                fetchPolicy\n                            \n                            \n                                    Readonly\n                                observe\n                            \n                            \n                                    Readonly\n                                    Optional\n                                reportProgress\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                            \n                                    Readonly\n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isBatch\n                            \n                            \n                                isFetch\n                            \n                            \n                                isMutate\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    responseType\n                                \n                                \n                                    path\n                                \n                                \n                                    method\n                                \n                                \n                                    body\n                                \n                                \n                                    params\n                                \n                                \n                                    headers\n                                \n                                \n                                    pathWithParams\n                                \n                                \n                                    url\n                                \n                                \n                                    urlWithParams\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any | null\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpHeaders\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpParams\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _queryBody\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                            Optional\n                        _responseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"arraybuffer\" | \"blob\" | \"json\" | \"text\" | \"value\" | \"property\" | \"entity\" | \"entities\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOptionNames[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        observe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"events\" | \"response\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reportProgress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isBatch\n                        \n                    \n                \n            \n            \n                \nisBatch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:277\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFetch\n                        \n                    \n                \n            \n            \n                \nisFetch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:281\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMutate\n                        \n                    \n                \n            \n            \n                \nisMutate()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        responseType\n                    \n                \n\n                \n                    \n                        getresponseType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:212\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        path\n                    \n                \n\n                \n                    \n                        getpath()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:221\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        method\n                    \n                \n\n                \n                    \n                        getmethod()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:225\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        body\n                    \n                \n\n                \n                    \n                        getbody()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:229\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        params\n                    \n                \n\n                \n                    \n                        getparams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:241\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        headers\n                    \n                \n\n                \n                    \n                        getheaders()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:253\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pathWithParams\n                    \n                \n\n                \n                    \n                        getpathWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:261\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n\n                \n                    \n                        geturl()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:269\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        urlWithParams\n                    \n                \n\n                \n                    \n                        geturlWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:273\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  $BATCH,\n  $QUERY,\n  ACCEPT,\n  IF_MATCH_HEADER,\n  IF_NONE_MATCH_HEADER,\n  PREFER,\n  TEXT_PLAIN,\n} from '../constants';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\n\nimport { Http } from '../utils';\nimport { ODataApi } from '../api';\nimport { ODataResource } from './resource';\nimport { QueryOptionNames } from '../types';\n\nexport class ODataRequest {\n  readonly api: ODataApi;\n  readonly observe: 'events' | 'response';\n  readonly reportProgress?: boolean;\n  readonly withCredentials?: boolean;\n  readonly bodyQueryOptions: QueryOptionNames[];\n  readonly fetchPolicy:\n    | 'cache-first'\n    | 'cache-and-network'\n    | 'network-only'\n    | 'no-cache'\n    | 'cache-only';\n  readonly resource: ODataResource;\n  private readonly _responseType?:\n    | 'arraybuffer'\n    | 'blob'\n    | 'json'\n    | 'text'\n    | 'value'\n    | 'property'\n    | 'entity'\n    | 'entities';\n  private readonly _method: string;\n  private readonly _body: any | null;\n  private readonly _headers: HttpHeaders;\n  private readonly _params: HttpParams;\n  private readonly _path: string;\n  private readonly _queryBody: boolean;\n\n  constructor(init: {\n    method: string;\n    api: ODataApi;\n    resource: ODataResource;\n    body: any;\n    observe: 'events' | 'response';\n    etag?: string;\n    headers?: HttpHeaders | { [header: string]: string | string[] };\n    reportProgress?: boolean;\n    params?: HttpParams | { [param: string]: string | string[] };\n    responseType?:\n      | 'arraybuffer'\n      | 'blob'\n      | 'json'\n      | 'text'\n      | 'value'\n      | 'property'\n      | 'entity'\n      | 'entities';\n    fetchPolicy?:\n      | 'cache-first'\n      | 'cache-and-network'\n      | 'network-only'\n      | 'no-cache'\n      | 'cache-only';\n    withCredentials?: boolean;\n    bodyQueryOptions?: QueryOptionNames[];\n  }) {\n    this._method = init.method;\n    this.resource = init.resource;\n\n    this.api = init.api;\n    this.reportProgress = init.reportProgress;\n    this.observe = init.observe;\n\n    // Response Type\n    this._responseType = init.responseType;\n\n    // The Body\n    this._body = init.body !== undefined ? init.body : null;\n    if (this._body !== null) this._body = this.resource.serialize(this._body);\n\n    this.withCredentials =\n      init.withCredentials === undefined\n        ? this.api.options.withCredentials\n        : init.withCredentials;\n    this.fetchPolicy = init.fetchPolicy || this.api.options.fetchPolicy;\n    this.bodyQueryOptions =\n      init.bodyQueryOptions || this.api.options.bodyQueryOptions;\n\n    // The Path and Params from resource\n    const [resourcePath, resourceParams] = this.resource.pathAndParams();\n    this._path = resourcePath;\n\n    //#region Headers\n    const customHeaders: { [name: string]: string | string[] } = {};\n    if (typeof init.etag === 'string') {\n      if (\n        this.api.options.etag.ifMatch &&\n        ['PUT', 'PATCH', 'DELETE'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_MATCH_HEADER] = init.etag;\n      else if (\n        this.api.options.etag.ifNoneMatch &&\n        ['GET'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_NONE_MATCH_HEADER] = init.etag;\n    }\n\n    const accept = [];\n    // Metadata\n    if (this.api.options.accept?.metadata !== undefined)\n      accept.push(`odata.metadata=${this.api.options.accept?.metadata}`);\n    // IEEE754\n    if (this.api.options.accept?.ieee754Compatible !== undefined)\n      accept.push(\n        `IEEE754Compatible=${this.api.options.accept?.ieee754Compatible}`\n      );\n    // streaming\n    if (this.api.options.accept?.streaming !== undefined)\n      accept.push(`streaming=${this.api.options.accept?.streaming}`);\n    // ExponentialDecimals\n    if (this.api.options.accept?.exponentialDecimals !== undefined)\n      accept.push(\n        `ExponentialDecimals=${this.api.options.accept?.exponentialDecimals}`\n      );\n    if (accept.length > 0)\n      customHeaders[ACCEPT] = [\n        `application/json;${accept.join(';')}`,\n        'text/plain',\n        '*/*',\n      ];\n\n    const prefer = [];\n    // Return\n    if (\n      this.api.options.prefer?.return !== undefined &&\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1\n    )\n      prefer.push(`return=${this.api.options.prefer?.return}`);\n    // MaxPageSize\n    if (\n      this.api.options.prefer?.maxPageSize !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxPageSize}`);\n    // Annotations\n    if (\n      this.api.options.prefer?.includeAnnotations !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(\n        `odata.include-annotations=${this.api.options.prefer?.includeAnnotations}`\n      );\n    if (\n      this.api.options.prefer?.continueOnError === true &&\n      ['POST'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.continue-on-error`);\n    if (prefer.length > 0) customHeaders[PREFER] = prefer;\n    this._headers = Http.mergeHttpHeaders(\n      this.api.options.headers,\n      customHeaders,\n      init.headers || {}\n    );\n    //#endregion\n\n    //#region Params\n    const customParams: { [name: string]: string | string[] } = {};\n    if (\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1 &&\n      '$select' in resourceParams\n    ) {\n      customParams['$select'] = resourceParams['$select'];\n    }\n    if (['POST'].indexOf(this._method) !== -1 && '$expand' in resourceParams) {\n      customParams['$expand'] = resourceParams['$expand'];\n    }\n    if (['GET'].indexOf(this._method) !== -1) {\n      Object.assign(customParams, resourceParams);\n    }\n\n    const params = Http.mergeHttpParams(\n      this.api.options.params,\n      customParams,\n      init.params || {}\n    );\n\n    this._params =\n      this._responseType === 'entity'\n        ? Http.withoutHttpParams(params, [\n            '$filter',\n            '$orderby',\n            '$count',\n            '$skip',\n            '$top',\n          ])\n        : params;\n    //#endregion\n\n    this._queryBody =\n      this._method === 'GET' &&\n      this.bodyQueryOptions.length > 0 &&\n      this.bodyQueryOptions.some((name) => this._params.has(`$${name}`));\n  }\n\n  get responseType(): 'arraybuffer' | 'blob' | 'json' | 'text' {\n    return this._responseType &&\n      ['property', 'entity', 'entities'].indexOf(this._responseType) !== -1\n      ? 'json'\n      : this._responseType === 'value'\n      ? 'text'\n      : this._responseType;\n  }\n\n  get path() {\n    return this._queryBody ? `${this._path}/${$QUERY}` : this._path;\n  }\n\n  get method() {\n    return this._queryBody ? 'POST' : this._method;\n  }\n\n  get body() {\n    if (this._queryBody) {\n      let [, bodyParams] = Http.splitHttpParams(\n        this._params,\n        this.bodyQueryOptions.map((name) => `$${name}`)\n      );\n      return bodyParams.toString();\n    } else {\n      return this._body;\n    }\n  }\n\n  get params() {\n    if (this._queryBody) {\n      let [queryParams] = Http.splitHttpParams(\n        this._params,\n        this.bodyQueryOptions.map((name) => `$${name}`)\n      );\n      return queryParams;\n    } else {\n      return this._params;\n    }\n  }\n\n  get headers() {\n    if (this._queryBody) {\n      return Http.mergeHttpHeaders(this._headers, { CONTENT_TYPE: TEXT_PLAIN });\n    } else {\n      return this._headers;\n    }\n  }\n\n  get pathWithParams() {\n    let path = this._path;\n    if (this._params.keys().length > 0) {\n      path = `${path}?${this._params}`;\n    }\n    return path;\n  }\n\n  get url() {\n    return `${this.api.serviceRootUrl}${this._path}`;\n  }\n\n  get urlWithParams() {\n    return `${this.api.serviceRootUrl}${this.pathWithParams}`;\n  }\n\n  isBatch() {\n    return this._path.endsWith($BATCH);\n  }\n\n  isFetch() {\n    return ['GET'].indexOf(this._method) !== -1;\n  }\n\n  isMutate() {\n    return ['PUT', 'PATCH', 'POST', 'DELETE'].indexOf(this._method) !== -1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponse.html":{"url":"classes/ODataResponse.html","title":"class - ODataResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/response.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Response\n\n            \n\n            \n                Extends\n            \n            \n                        HttpResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _annotations\n                            \n                            \n                                    Private\n                                    Optional\n                                _context\n                            \n                            \n                                    Private\n                                    Optional\n                                _options\n                            \n                            \n                                    Private\n                                    Optional\n                                _payload\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entities\n                            \n                            \n                                entity\n                            \n                            \n                                    Static\n                                fromHttpResponse\n                            \n                            \n                                    Static\n                                fromJSON\n                            \n                            \n                                property\n                            \n                            \n                                toJSON\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                                \n                                    payload\n                                \n                                \n                                    context\n                                \n                                \n                                    annotations\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResponseOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n            \n                \nentities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:193\n                \n            \n\n\n            \n                \n                    Handle the response body as entities\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntities\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entity\n                        \n                    \n                \n            \n            \n                \nentity()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:169\n                \n            \n\n\n            \n                \n                    Handle the response body as an entity\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntity\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromHttpResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromHttpResponse(req: ODataRequest, res: HttpResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:46\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                HttpResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromJSON(req: ODataRequest, json: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:58\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    json\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:212\n                \n            \n\n\n            \n                \n                    Handle the response body as a property\n\n\n                    \n                    \n                    \n                        Returns :         ODataProperty\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { body: any; headers: any; status: any; statusText: any; url: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:236\n                \n            \n\n\n            \n                \n                    Handle the response body as a value\n\n\n                    \n                    \n                    \n                        Returns :     T | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:93\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        payload\n                    \n                \n\n                \n                    \n                        getpayload()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:126\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        context\n                    \n                \n\n                \n                    \n                        getcontext()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:137\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        annotations\n                    \n                \n\n                \n                    \n                        getannotations()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:147\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport {\n  ODataEntityAnnotations,\n  ODataEntitiesAnnotations,\n  ODataPropertyAnnotations,\n} from './annotations';\nimport { Types } from '../../utils/types';\nimport { ODataResource } from '../resource';\nimport { ODataEntities, ODataEntity, ODataProperty } from './types';\nimport {\n  APPLICATION_JSON,\n  ODATA_VERSION_HEADERS,\n  CONTENT_TYPE,\n  CACHE_CONTROL,\n  LOCATION_HEADER,\n  ETAG_HEADERS,\n  ODATA_ENTITYID_HEADERS,\n} from '../../constants';\nimport { ODataApi } from '../../api';\nimport { ODataRequest } from '../request';\nimport { ODataResponseOptions } from './options';\nimport { Http } from '../../utils/http';\nimport { ODataContext } from '../../helper';\n\n/**\n * OData Response\n */\nexport class ODataResponse extends HttpResponse {\n  readonly api: ODataApi;\n  readonly resource: ODataResource;\n\n  constructor(init: {\n    api: ODataApi;\n    resource: ODataResource;\n    body: T | null;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n    url?: string;\n  }) {\n    super(init);\n    this.api = init.api;\n    this.resource = init.resource;\n  }\n\n  static fromHttpResponse(req: ODataRequest, res: HttpResponse) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: res.body,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n      url: res.url || undefined,\n    });\n  }\n\n  static fromJSON(\n    req: ODataRequest,\n    json: {\n      body: T | null;\n      headers: { [name: string]: string | string[] };\n      status: number;\n      statusText: string;\n      url: string | null;\n    }\n  ) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: json.body,\n      headers: new HttpHeaders(json.headers),\n      status: json.status,\n      statusText: json.statusText,\n      url: json.url || undefined,\n    });\n  }\n\n  toJSON() {\n    return {\n      body: this.body,\n      headers: this.headers\n        .keys()\n        .map((name) => ({ [name]: this.headers.getAll(name) || [] }))\n        .reduce((acc, header) => Object.assign(acc, header), {}),\n      status: this.status,\n      statusText: this.statusText,\n      url: this.url,\n    };\n  }\n\n  private _options?: ODataResponseOptions;\n  get options(): ODataResponseOptions {\n    if (this._options === undefined) {\n      this._options = new ODataResponseOptions(this.api.options);\n      const contentType = this.headers.get(CONTENT_TYPE);\n      if (contentType && contentType.indexOf(APPLICATION_JSON) !== -1) {\n        const features = contentType\n          .split(',')\n          .find((p) => p.startsWith(APPLICATION_JSON)) as string;\n        this._options.setFeatures(features);\n      }\n      const header = Http.resolveHeaderKey(this.headers, ODATA_VERSION_HEADERS);\n      if (header) {\n        const version = (this.headers.get(header) || '').replace(/\\;/g, '') as\n          | '2.0'\n          | '3.0'\n          | '4.0';\n        this._options.setVersion(version);\n      }\n\n      const location = this.headers.get(LOCATION_HEADER);\n      if (location) {\n        this._options.setLocation(location);\n      }\n\n      const cacheControl = this.headers.get(CACHE_CONTROL);\n      if (cacheControl) {\n        this._options.setCache(cacheControl);\n      }\n    }\n    return this._options;\n  }\n\n  private _payload?: any;\n  get payload() {\n    if (this._payload === undefined) {\n      this._payload =\n        this.body && this.options.version === '2.0'\n          ? (this.body)['d']\n          : this.body;\n    }\n    return this._payload;\n  }\n\n  private _context?: any;\n  get context(): ODataContext {\n    if (this._context === undefined) {\n      this._context = this.options.helper.context(\n        Types.isPlainObject(this.payload) ? this.payload : {}\n      );\n    }\n    return this._context;\n  }\n\n  private _annotations?: any;\n  get annotations(): { [name: string]: any } {\n    if (this._annotations === undefined) {\n      const options = this.options;\n      this._annotations = options.helper.annotations(this.payload || {});\n      let key = Http.resolveHeaderKey(this.headers, ETAG_HEADERS);\n      if (key) {\n        const etag = this.headers.get(key);\n        if (etag) options.helper.etag(this._annotations, etag);\n      }\n      key = Http.resolveHeaderKey(this.headers, ODATA_ENTITYID_HEADERS);\n      if (key) {\n        const entityId = this.headers.get(key);\n        if (entityId) options.helper.id(this._annotations, entityId);\n      }\n    }\n    return this._annotations;\n  }\n\n  /**\n   * Handle the response body as an entity\n   * @returns\n   */\n  entity(): ODataEntity {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntityAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    const data = payload ? annots.data(payload) : null;\n    let entity = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(data, this.api.options.stripMetadata)\n        : data\n    ) as T | null;\n\n    if (entity !== null)\n      entity = this.resource.deserialize(entity, options) as T;\n    return { entity, annots };\n  }\n\n  /**\n   * Handle the response body as entities\n   * @returns\n   */\n  entities(): ODataEntities {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntitiesAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    let entities = payload ? annots.data(payload) : null;\n\n    if (entities !== null)\n      entities = this.resource.deserialize(entities, options) as T[];\n    return { entities, annots };\n  }\n\n  /**\n   * Handle the response body as a property\n   * @returns\n   */\n  property(): ODataProperty {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataPropertyAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    const data = payload ? (annots.data(payload) as T) : null;\n    let property = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(data, this.api.options.stripMetadata)\n        : data\n    ) as T | null;\n\n    if (property !== null)\n      property = this.resource.deserialize(property, options) as T;\n    return { property, annots };\n  }\n\n  /**\n   * Handle the response body as a value\n   * @returns\n   */\n  value(): T | null {\n    const options = this.options;\n    const payload = this.payload;\n    let value = (\n      payload !== null && Types.isPlainObject(payload)\n        ? options.helper.attributes(payload, this.api.options.stripMetadata)\n        : payload\n    ) as T | null;\n\n    if (value !== null) value = this.resource.deserialize(value, options) as T;\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponseOptions.html":{"url":"classes/ODataResponseOptions.html","title":"class - ODataResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ResponseOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                cacheability\n                            \n                            \n                                    Optional\n                                ieee754Compatible\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Optional\n                                maxAge\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                            \n                                    Optional\n                                streaming\n                            \n                            \n                                    Optional\n                                stringAsEnum\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                setCache\n                            \n                            \n                                setFeatures\n                            \n                            \n                                setLocation\n                            \n                            \n                                setVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: Options)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        Options\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cacheability\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ieee754Compatible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxAge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        streaming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataResponseOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCache\n                        \n                    \n                \n            \n            \n                \nsetCache(cacheControl: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cacheControl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFeatures\n                        \n                    \n                \n            \n            \n                \nsetFeatures(features: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    features\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setLocation\n                        \n                    \n                \n            \n            \n                \nsetLocation(location: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVersion\n                        \n                    \n                \n            \n            \n                \nsetVersion(version: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    version\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:36\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  CacheCacheability,\n  ODataMetadataType,\n  ODataVersion,\n  Options,\n  ResponseOptions,\n} from '../../types';\nimport {\n  DEFAULT_VERSION,\n  MAX_AGE,\n  VERSION_2_0,\n  VERSION_3_0,\n  VERSION_4_0,\n} from '../../constants';\n\nimport { ODataHelper } from '../../helper';\n\nexport class ODataResponseOptions implements ResponseOptions {\n  version: ODataVersion;\n  streaming?: boolean;\n  // OData\n  metadata?: ODataMetadataType;\n  stringAsEnum?: boolean;\n  ieee754Compatible?: boolean;\n  // Location\n  location?: string;\n  // Cache\n  cacheability?: 'public' | 'private' | 'no-cache' | 'no-store';\n  maxAge?: number;\n\n  constructor(config: Options) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n\n  clone() {\n    return new ODataResponseOptions(this);\n  }\n\n  setFeatures(features: string) {\n    features.split(';').forEach((o) => {\n      let [k, v] = o.split('=');\n      switch (k.trim()) {\n        case 'odata.metadata':\n          this.metadata = v as ODataMetadataType;\n          break;\n        case 'odata.streaming':\n          this.streaming = v == 'true';\n          break;\n        case 'IEEE754Compatible':\n          this.ieee754Compatible = v == 'true';\n          break;\n      }\n    });\n  }\n\n  setVersion(version: string) {\n    const value = version.replace(/\\;/g, '').trim();\n    if ([VERSION_2_0, VERSION_3_0, VERSION_4_0].indexOf(value) !== -1)\n      this.version = value as ODataVersion;\n  }\n\n  setLocation(location: string) {\n    // TODO: resolve location?\n    this.location = location;\n  }\n\n  setCache(cacheControl: string) {\n    cacheControl.split(',').forEach((directive) => {\n      if (directive.startsWith(MAX_AGE)) {\n        let maxAge = Number(directive.split('=')[1]);\n        if (!Number.isNaN(maxAge)) this.maxAge = maxAge;\n      }\n      if (\n        ['public', 'private', 'no-cache', 'no-store'].indexOf(directive) !== -1\n      ) {\n        this.cacheability = directive as CacheCacheability;\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchema.html":{"url":"classes/ODataSchema.html","title":"class - ODataSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                annotations\n                            \n                            \n                                api\n                            \n                            \n                                callables\n                            \n                            \n                                containers\n                            \n                            \n                                entities\n                            \n                            \n                                enums\n                            \n                            \n                                namespace\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                findAnnotation\n                            \n                            \n                                    Public\n                                findCallableForType\n                            \n                            \n                                    Public\n                                findEntitySetForType\n                            \n                            \n                                    Public\n                                findEnumTypeForType\n                            \n                            \n                                    Public\n                                findStructuredTypeForType\n                            \n                            \n                                isNamespaceOf\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySets\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: SchemaConfig, api: ODataApi)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        SchemaConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        api\n                                                  \n                                                        \n                                                                        ODataApi\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        callables\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntityContainer[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:62\n                \n            \n\n\n            \n                \n                    Find an annotation inside the schema.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findCallableForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCallableForType(type: string, bindingType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:79\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bindingType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEntitySetForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEntitySetForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEnumTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEnumTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:67\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findStructuredTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findStructuredTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:73\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNamespaceOf\n                        \n                    \n                \n            \n            \n                \nisNamespaceOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySets\n                    \n                \n\n                \n                    \n                        getentitySets()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/schema.ts:50\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, SchemaConfig } from '../types';\n\nimport { OData } from '../utils/odata';\nimport { ODataAnnotation } from './annotation';\nimport { ODataApi } from '../api';\nimport { ODataCallable } from './callable';\nimport { ODataEntityContainer } from './entity-container';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataEnumType } from './enum-type';\nimport { ODataStructuredType } from './structured-type';\n\nexport class ODataSchema {\n  api: ODataApi;\n  namespace: string;\n  alias?: string;\n  enums: ODataEnumType[];\n  entities: ODataStructuredType[];\n  callables: ODataCallable[];\n  containers: ODataEntityContainer[];\n  annotations: ODataAnnotation[];\n\n  constructor(config: SchemaConfig, api: ODataApi) {\n    this.api = api;\n    this.namespace = config.namespace;\n    this.alias = config.alias;\n    this.enums = (config.enums || []).map(\n      (config) => new ODataEnumType(config, this)\n    );\n    this.entities = (config.entities || []).map(\n      (config) => new ODataStructuredType(config, this)\n    );\n    this.callables = OData.mergeCallableParameters(config.callables || []).map(\n      (config) => new ODataCallable(config, this)\n    );\n    this.containers = (config.containers || []).map(\n      (config) => new ODataEntityContainer(config, this)\n    );\n    this.annotations = (config.annotations || []).map(\n      (config) => new ODataAnnotation(config)\n    );\n  }\n\n  isNamespaceOf(type: string) {\n    return (\n      type.startsWith(this.namespace) ||\n      (this.alias && type.startsWith(this.alias))\n    );\n  }\n\n  get entitySets() {\n    return this.containers.reduce(\n      (acc, container) => [...acc, ...container.entitySets],\n      [] as ODataEntitySet[]\n    );\n  }\n\n  /**\n   * Find an annotation inside the schema.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  //#region Find for Type\n  public findEnumTypeForType(type: string) {\n    return this.enums.find((e) => e.isTypeOf(type)) as\n      | ODataEnumType\n      | undefined;\n  }\n\n  public findStructuredTypeForType(type: string) {\n    return this.entities.find((e) => e.isTypeOf(type)) as\n      | ODataStructuredType\n      | undefined;\n  }\n\n  public findCallableForType(type: string, bindingType?: string) {\n    return this.callables.find(\n      (c) =>\n        c.isTypeOf(type) &&\n        (bindingType === undefined || bindingType === c.binding()?.type)\n    ) as ODataCallable | undefined;\n  }\n\n  public findEntitySetForType(type: string) {\n    return this.entitySets.find((e) => e.isTypeOf(type));\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    findOptionsForType,\n  }: {\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    // Configure Enums\n    this.enums.forEach((enu) => enu.configure());\n    // Configure Entities\n    this.entities.forEach((config) =>\n      config.configure({ parserForType, findOptionsForType })\n    );\n    // Configure callables\n    this.callables.forEach((callable) => callable.configure({ parserForType }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ODataServiceFactory.html":{"url":"injectables/ODataServiceFactory.html","title":"injectable - ODataServiceFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ODataServiceFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entitySet\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/factory.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet(entitySetName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:15\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create an entity set service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entitySetName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the entity set.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntitySetService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton(singletonName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:30\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create a singleton service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    singletonName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the singleton.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataSingletonService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ODataClient } from '../client';\nimport { ODataEntitySetService } from './entity-set';\nimport { ODataSingletonService } from './singleton';\n\n@Injectable()\nexport class ODataServiceFactory {\n  constructor(protected client: ODataClient) {}\n\n  /**\n   * Factory method to create an entity set service.\n   * @param entitySetName Name of the entity set.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  entitySet(\n    entitySetName: string,\n    apiNameOrEntityType?: string\n  ): ODataEntitySetService {\n    return new (class extends ODataEntitySetService {})(\n      this.client,\n      entitySetName,\n      apiNameOrEntityType\n    );\n  }\n\n  /** Factory method to create a singleton service.\n   * @param singletonName Name of the singleton.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  singleton(\n    singletonName: string,\n    apiNameOrEntityType?: string\n  ): ODataSingletonService {\n    return new (class extends ODataSingletonService {})(\n      this.client,\n      singletonName,\n      apiNameOrEntityType\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSingletonService.html":{"url":"classes/ODataSingletonService.html","title":"class - ODataSingletonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSingletonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/singleton.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Singleton Service\nwww.odata.org/getting-started/advanced-tutorial/#singleton\n\n            \n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    singletonSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:28\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:20\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Returns :         ODataSingletonResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:59\n                \n            \n\n\n            \n                \n                    Patch the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:45\n                \n            \n\n\n            \n                \n                    Update the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:62\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:25\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:99\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        singletonSchema\n                    \n                \n\n                \n                    \n                        getsingletonSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/singleton.ts:35\n                                \n                            \n                    \n                        \n                                The schema for the singleton.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import type {\n  ODataEntity,\n  ODataOptions,\n  ODataSingletonResource,\n} from '../resources';\n\nimport { ODataEntityService } from './entity';\nimport type { ODataModel } from '../models/model';\nimport { Observable } from 'rxjs';\n\n/**\n * OData Singleton Service\n * www.odata.org/getting-started/advanced-tutorial/#singleton\n */\nexport class ODataSingletonService extends ODataEntityService {\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(): ODataSingletonResource {\n    return this.client.singleton(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M) {\n    model.attach(this.entity());\n  }\n\n  /**\n   * The schema for the singleton.\n   */\n  get singletonSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Update the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity();\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public patch(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity();\n    return res.modify(attrs, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataStructuredTypeParser.html":{"url":"classes/ODataStructuredTypeParser.html","title":"class - ODataStructuredTypeParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataStructuredTypeParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/structured-type.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                    Optional\n                                base\n                            \n                            \n                                children\n                            \n                            \n                                fields\n                            \n                            \n                                    Optional\n                                keys\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                open\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                            \n                                    Optional\n                                parent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                childParser\n                            \n                            \n                                configure\n                            \n                            \n                                defaults\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                findChildParser\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                resolveKey\n                            \n                            \n                                serialize\n                            \n                            \n                                toJsonSchema\n                            \n                            \n                                typeFor\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: StructuredTypeConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:356\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        StructuredTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:351\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        base\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:352\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredTypeParser[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:350\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredTypeFieldParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:355\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntityTypeKey[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:354\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:347\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:348\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        open\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:349\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:356\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredTypeParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:353\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        childParser\n                        \n                    \n                \n            \n            \n                \nchildParser(predicate: (p: ODataStructuredTypeParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:402\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Parser\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:467\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        defaults\n                        \n                    \n                \n            \n            \n                \ndefaults()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:509\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     literal type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:409\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:459\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findChildParser\n                        \n                    \n                \n            \n            \n                \nfindChildParser(predicate: (p: ODataStructuredTypeParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:390\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataStructuredTypeParser | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:377\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolveKey\n                        \n                    \n                \n            \n            \n                \nresolveKey(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:483\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:433\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJsonSchema\n                        \n                    \n                \n            \n            \n                \ntoJsonSchema(options: JsonSchemaOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:526\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                JsonSchemaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typeFor\n                        \n                    \n                \n            \n            \n                \ntypeFor(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:383\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(attrs: any, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:574\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../utils';\nimport {\n  Parser,\n  StructuredTypeFieldConfig,\n  StructuredTypeConfig,\n  OptionsHelper,\n  NONE_PARSER,\n  StructuredTypeFieldOptions,\n  Options,\n} from '../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { COMPUTED } from '../constants';\nimport { ODataAnnotation } from '../schema/annotation';\nimport { raw } from '../resources/query';\nimport { ODataParserOptions } from '../options';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser implements Parser {\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string;\n  private parser: Parser;\n  default?: any;\n  maxLength?: number;\n  collection: boolean;\n  nullable: boolean;\n  navigation: boolean;\n  precision?: number;\n  scale?: number;\n  referentials: ODataReferential[];\n  annotations: ODataAnnotation[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.annotations = (field.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.collection = field.collection !== undefined ? field.collection : false;\n    this.nullable = field.nullable !== undefined ? field.nullable : true;\n    this.navigation = field.navigation !== undefined ? field.navigation : false;\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  /**\n   * Find an annotation inside the structured field type.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.findAnnotation((a) => a.term === COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed?.bool && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined)\n      this.default = this.deserialize(this.default, options);\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        'Edm.String',\n        'Edm.Date',\n        'Edm.TimeOfDay',\n        'Edm.DateTimeOffset',\n        'Edm.Guid',\n        'Edm.Binary',\n      ].indexOf(this.type) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === 'Edm.Date') schema.format = 'date';\n      else if (this.type === 'Edm.TimeOfDay') schema.format = 'time';\n      else if (this.type === 'Edm.DateTimeOffset') schema.format = 'date-time';\n      else if (this.type === 'Edm.Guid')\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === 'Edm.Binary') schema.contentEncoding = 'base64';\n      else if (this.type === 'Edm.String' && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      ['Edm.Int64', 'Edm.Int32', 'Edm.Int16', 'Edm.Byte', 'Edm.SByte'].indexOf(\n        this.type\n      ) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (['Edm.Decimal', 'Edm.Double'].indexOf(this.type) !== -1) {\n      schema.type = 'number';\n    } else if (['Edm.Boolean'].indexOf(this.type) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType.keys?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataStructuredTypeParser implements Parser {\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  keys?: ODataEntityTypeKey[];\n  fields: ODataStructuredTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this.keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    this.fields = Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).map(\n      ([name, config]) => new ODataStructuredTypeFieldParser(name, this, config)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  typeFor(name: string): string | undefined {\n    const field = this.fields.find((f) => f.name === name);\n    if (field === undefined && this.parent !== undefined)\n      return this.parent.typeFor(name);\n    return field !== undefined ? field.type : undefined;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.deserialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.serialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this.fields.forEach((f) => f.configure({ parserForType, options }));\n  }\n\n  resolveKey(value: any): any {\n    let key = this.parent?.resolveKey(value) || {};\n    if (Array.isArray(this.keys) && this.keys.length > 0) {\n      for (var k of this.keys) {\n        let v = value as any;\n        let structured = this as ODataStructuredTypeParser | undefined;\n        let field: ODataStructuredTypeFieldParser | undefined;\n        for (let name of k.name.split('/')) {\n          if (structured === undefined) break;\n          field = structured.fields.find((f) => f.name === name);\n          if (field !== undefined) {\n            v = Types.isPlainObject(v) ? v[field.name] : v;\n            structured = field.isStructuredType()\n              ? field.structured()\n              : undefined;\n          }\n        }\n        if (field !== undefined && v !== undefined) {\n          key[k.alias || field.name] = field.encode(v);\n        }\n      }\n    }\n    if (Types.isEmpty(key)) return undefined;\n    return Objects.resolveKey(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let value = this.parent?.defaults() || {};\n    let fields = this.fields.filter(\n      (f) => f.default !== undefined || f.isStructuredType()\n    );\n    return {\n      ...value,\n      ...fields.reduce((acc, f) => {\n        let value = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = this.parent?.toJsonSchema(options) || {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.name,\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields.filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = (this.parent?.validate(attrs, { method, navigation }) ||\n      {}) as { [name: string]: any };\n    const fields = this.fields.filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Operator.html":{"url":"classes/Operator.html","title":"class - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], normalize: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:210\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(aliases?: QueryCustomType[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aliases\n                                    \n                                                QueryCustomType[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { op: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:217\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Options.html":{"url":"interfaces/Options.html","title":"interface - Options","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Options\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OptionsHelper.html":{"url":"interfaces/OptionsHelper.html","title":"interface - OptionsHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OptionsHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Options\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            exponentialDecimals\n                                        \n                                \n                                \n                                        \n                                            helper\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ieee754Compatible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            streaming\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exponentialDecimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exponentialDecimals:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        helper\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        helper:         ODataVersionHelper\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersionHelper\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ieee754Compatible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ieee754Compatible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        streaming\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        streaming:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Parser.html":{"url":"interfaces/Parser.html","title":"interface - Parser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Parser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deserialize\n                                    \n                                \n                                \n                                    \n                                        encode\n                                    \n                                \n                                \n                                    \n                                        serialize\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: OptionsHelper | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                OptionsHelper | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                OptionsHelper | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: OptionsHelper | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                OptionsHelper | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Renderable.html":{"url":"interfaces/Renderable.html","title":"interface - Renderable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Renderable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        render\n                                    \n                                \n                                \n                                    \n                                        toJSON\n                                    \n                                \n                                \n                                    \n                                        toString\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(aliases?: QueryCustomType[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aliases\n                                    \n                                                QueryCustomType[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseJson.html":{"url":"interfaces/ResponseJson.html","title":"interface - ResponseJson","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseJson\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            statusText\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     any | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataCache, ODataCacheEntry } from './cache';\nimport { ODataRequest, ODataResponse } from '../resources';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries()))\n    );\n  }\n\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]')\n    );\n  }\n\n  flush() {\n    super.flush();\n    this.store();\n  }\n\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(req, res);\n    this.put(req.pathWithParams, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.pathWithParams, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseOptions.html":{"url":"interfaces/ResponseOptions.html","title":"interface - ResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OptionsHelper\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cacheability\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxAge\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cacheability\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheability:         CacheCacheability\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CacheCacheability\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxAge\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxAge:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SegmentHandler.html":{"url":"classes/SegmentHandler.html","title":"class - SegmentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SegmentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearKey\n                            \n                            \n                                clearParameters\n                            \n                            \n                                hasKey\n                            \n                            \n                                hasParameters\n                            \n                            \n                                key\n                            \n                            \n                                parameters\n                            \n                            \n                                path\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segment: ODataSegment)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segment\n                                                  \n                                                        \n                                                                        ODataSegment\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearKey\n                        \n                    \n                \n            \n            \n                \nclearKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearParameters\n                        \n                    \n                \n            \n            \n                \nclearParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasKey\n                        \n                    \n                \n            \n            \n                \nhasKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasParameters\n                        \n                    \n                \n            \n            \n                \nhasParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n            \n                \nkey(value?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:20\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n            \n                \nparameters(value?: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:30\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:9\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PathSegmentNames } from '../../types';\nimport { Types } from '../../utils';\n\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegmentNames.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegmentNames.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegmentNames.action);\n  }\n  function() {\n    return this.segments.get(PathSegmentNames.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegmentNames.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegmentNames.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringAndCollectionFunctions.html":{"url":"classes/StringAndCollectionFunctions.html","title":"class - StringAndCollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringAndCollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                concat\n                            \n                            \n                                contains\n                            \n                            \n                                endsWith\n                            \n                            \n                                indexOf\n                            \n                            \n                                length\n                            \n                            \n                                startsWith\n                            \n                            \n                                subString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        concat\n                        \n                    \n                \n            \n            \n                \nconcat(field: T, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contains\n                        \n                    \n                \n            \n            \n                \ncontains(field: T, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endsWith\n                        \n                    \n                \n            \n            \n                \nendsWith(field: T, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        indexOf\n                        \n                    \n                \n            \n            \n                \nindexOf(field: T, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength(value: T, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startsWith\n                        \n                    \n                \n            \n            \n                \nstartsWith(field: T, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subString\n                        \n                    \n                \n            \n            \n                \nsubString(field: T, start: any, length?: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringFunctions.html":{"url":"classes/StringFunctions.html","title":"class - StringFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                matchesPattern\n                            \n                            \n                                toLower\n                            \n                            \n                                toUpper\n                            \n                            \n                                trim\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        matchesPattern\n                        \n                    \n                \n            \n            \n                \nmatchesPattern(value: T | string, pattern: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLower\n                        \n                    \n                \n            \n            \n                \ntoLower(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toUpper\n                        \n                    \n                \n            \n            \n                \ntoUpper(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trim\n                        \n                    \n                \n            \n            \n                \ntrim(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuredTypeFieldOptions.html":{"url":"interfaces/StructuredTypeFieldOptions.html","title":"interface - StructuredTypeFieldOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructuredTypeFieldOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OptionsHelper\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            field\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         StructuredTypeFieldConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuredTypeFieldConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeFunctions.html":{"url":"classes/TypeFunctions.html","title":"class - TypeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cast\n                            \n                            \n                                isof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cast\n                        \n                    \n                \n            \n            \n                \ncast(value: T | string, type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:183\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isof\n                        \n                    \n                \n            \n            \n                \nisof(value: T | string, type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~12.2.0\n        \n            @angular/common : ~12.2.0\n        \n            @angular/compiler : ~12.2.0\n        \n            @angular/core : ~12.2.0\n        \n            @angular/forms : ~12.2.0\n        \n            @angular/platform-browser : ~12.2.0\n        \n            @angular/platform-browser-dynamic : ~12.2.0\n        \n            @angular/router : ~12.2.0\n        \n            rxjs : ~6.6.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Connector   (projects/.../expressions.ts)\n                        \n                        \n                            FieldType   (projects/.../metadata.ts)\n                        \n                        \n                            ODataModelState   (projects/.../options.ts)\n                        \n                        \n                            PathSegmentNames   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomTypes   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptionNames   (projects/.../types.ts)\n                        \n                        \n                            StandardAggregateMethods   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/query/expressions.ts\n    \n        \n            \n                \n                    \n                        \n                        Connector\n                    \n                \n                        \n                            \n                                 AND\n                            \n                        \n                        \n                            \n                                Value : and\n                            \n                        \n                        \n                            \n                                 OR\n                            \n                        \n                        \n                            \n                                Value : or\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/responses/metadata.ts\n    \n        \n            \n                \n                    \n                        \n                        FieldType\n                    \n                \n                        \n                            \n                                 ATTRIBUTE\n                            \n                        \n                        \n                            \n                                 TAG\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/models/options.ts\n    \n        \n            \n                \n                    \n                        \n                        ODataModelState\n                    \n                \n                        \n                            \n                                 Added\n                            \n                        \n                        \n                            \n                                 Removed\n                            \n                        \n                        \n                            \n                                 Changed\n                            \n                        \n                        \n                            \n                                 Unchanged\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/types.ts\n    \n        \n            \n                \n                    \n                        \n                        PathSegmentNames\n                    \n                \n                        \n                            \n                                 batch\n                            \n                        \n                        \n                            \n                                Value : batch\n                            \n                        \n                        \n                            \n                                 metadata\n                            \n                        \n                        \n                            \n                                Value : metadata\n                            \n                        \n                        \n                            \n                                 entitySet\n                            \n                        \n                        \n                            \n                                Value : entitySet\n                            \n                        \n                        \n                            \n                                 singleton\n                            \n                        \n                        \n                            \n                                Value : singleton\n                            \n                        \n                        \n                            \n                                 type\n                            \n                        \n                        \n                            \n                                Value : type\n                            \n                        \n                        \n                            \n                                 property\n                            \n                        \n                        \n                            \n                                Value : property\n                            \n                        \n                        \n                            \n                                 navigationProperty\n                            \n                        \n                        \n                            \n                                Value : navigationProperty\n                            \n                        \n                        \n                            \n                                 reference\n                            \n                        \n                        \n                            \n                                Value : reference\n                            \n                        \n                        \n                            \n                                 value\n                            \n                        \n                        \n                            \n                                Value : value\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 function\n                            \n                        \n                        \n                            \n                                Value : function\n                            \n                        \n                        \n                            \n                                 action\n                            \n                        \n                        \n                            \n                                Value : action\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        QueryOptionNames\n                    \n                \n                        \n                            \n                                 select\n                            \n                        \n                        \n                            \n                                Value : select\n                            \n                        \n                        \n                            \n                                 expand\n                            \n                        \n                        \n                            \n                                Value : expand\n                            \n                        \n                        \n                            \n                                 compute\n                            \n                        \n                        \n                            \n                                Value : compute\n                            \n                        \n                        \n                            \n                                 filter\n                            \n                        \n                        \n                            \n                                Value : filter\n                            \n                        \n                        \n                            \n                                 search\n                            \n                        \n                        \n                            \n                                Value : search\n                            \n                        \n                        \n                            \n                                 transform\n                            \n                        \n                        \n                            \n                                Value : transform\n                            \n                        \n                        \n                            \n                                 orderBy\n                            \n                        \n                        \n                            \n                                Value : orderBy\n                            \n                        \n                        \n                            \n                                 top\n                            \n                        \n                        \n                            \n                                Value : top\n                            \n                        \n                        \n                            \n                                 skip\n                            \n                        \n                        \n                            \n                                Value : skip\n                            \n                        \n                        \n                            \n                                 skiptoken\n                            \n                        \n                        \n                            \n                                Value : skiptoken\n                            \n                        \n                        \n                            \n                                 format\n                            \n                        \n                        \n                            \n                                Value : format\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n        \n            \n                \n                    \n                        \n                        QueryCustomTypes\n                    \n                \n                        \n                            \n                                 Raw\n                            \n                        \n                        \n                            \n                                 Alias\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                 Binary\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardAggregateMethods\n                    \n                \n                        \n                            \n                                 sum\n                            \n                        \n                        \n                            \n                                Value : sum\n                            \n                        \n                        \n                            \n                                 min\n                            \n                        \n                        \n                            \n                                Value : min\n                            \n                        \n                        \n                            \n                                 max\n                            \n                        \n                        \n                            \n                                Value : max\n                            \n                        \n                        \n                            \n                                 average\n                            \n                        \n                        \n                            \n                                Value : average\n                            \n                        \n                        \n                            \n                                 countdistinct\n                            \n                        \n                        \n                            \n                                Value : countdistinct\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addBody   (projects/.../client.ts)\n                        \n                        \n                            applyMixins   (projects/.../syntax.ts)\n                        \n                        \n                            buildAggregate   (projects/.../builder.ts)\n                        \n                        \n                            buildExpand   (projects/.../builder.ts)\n                        \n                        \n                            buildFilter   (projects/.../builder.ts)\n                        \n                        \n                            buildGroupBy   (projects/.../builder.ts)\n                        \n                        \n                            buildOrderBy   (projects/.../builder.ts)\n                        \n                        \n                            buildPathAndQuery   (projects/.../builder.ts)\n                        \n                        \n                            buildTransforms   (projects/.../builder.ts)\n                        \n                        \n                            buildUrl   (projects/.../builder.ts)\n                        \n                        \n                            cloneReg   (projects/.../types.ts)\n                        \n                        \n                            cloneSymbol   (projects/.../types.ts)\n                        \n                        \n                            createSettings   (projects/.../module.ts)\n                        \n                        \n                            escapeIllegalChars   (projects/.../builder.ts)\n                        \n                        \n                            forEach   (projects/.../objects.ts)\n                        \n                        \n                            getStringCollectionClause   (projects/.../builder.ts)\n                        \n                        \n                            Model   (projects/.../options.ts)\n                        \n                        \n                            ModelField   (projects/.../options.ts)\n                        \n                        \n                            normalizeValue   (projects/.../builder.ts)\n                        \n                        \n                            now   (projects/.../strings.ts)\n                        \n                        \n                            parseNot   (projects/.../builder.ts)\n                        \n                        \n                            pathSegmentsBuilder   (projects/.../segments.ts)\n                        \n                        \n                            render   (projects/.../syntax.ts)\n                        \n                        \n                            renderPrimitiveValue   (projects/.../builder.ts)\n                        \n                        \n                            Unnamed function   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/client.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addBody\n                        \n                    \n                \n            \n            \n                \naddBody(options, body)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/syntax.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        applyMixins\n                        \n                    \n                \n            \n            \n                \napplyMixins(derivedCtor: any, constructors)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    derivedCtor\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    constructors\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(value: any, aliases?, normalize?: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    aliases\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | number | boolean | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        buildAggregate\n                        \n                    \n                \n            \n            \n                \nbuildAggregate(aggregate)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aggregate\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildExpand\n                        \n                    \n                \n            \n            \n                \nbuildExpand(expands: Expand)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expands\n                                    \n                                                Expand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildFilter\n                        \n                    \n                \n            \n            \n                \nbuildFilter(filters: Filter, aliases, propPrefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filters\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    aliases\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                                \n                                    propPrefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildGroupBy\n                        \n                    \n                \n            \n            \n                \nbuildGroupBy(groupBy: GroupBy)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupBy\n                                    \n                                                GroupBy\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildOrderBy\n                        \n                    \n                \n            \n            \n                \nbuildOrderBy(orderBy: OrderBy, prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    orderBy\n                                    \n                                                OrderBy\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildPathAndQuery\n                        \n                    \n                \n            \n            \n                \nbuildPathAndQuery(__namedParameters: {select: Partial>, search, skiptoken, format, top, skip, filter, transform, orderBy, key, count, expand, action, func, aliases})\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    select\n                                    \n                                                Partial>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    search\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    skiptoken\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    format\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    top\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    skip\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filter\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    transform\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    orderBy\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    count\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expand\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    func\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    aliases\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildTransforms\n                        \n                    \n                \n            \n            \n                \nbuildTransforms(transforms)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transforms\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildUrl\n                        \n                    \n                \n            \n            \n                \nbuildUrl(path: string, params)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        escapeIllegalChars\n                        \n                    \n                \n            \n            \n                \nescapeIllegalChars(string: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    string\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStringCollectionClause\n                        \n                    \n                \n            \n            \n                \ngetStringCollectionClause(lambdaParameter: string, value: any, collectionOperator: string, propName: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lambdaParameter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    collectionOperator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    propName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        normalizeValue\n                        \n                    \n                \n            \n            \n                \nnormalizeValue(value: Value, aliases?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Value\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    aliases\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseNot\n                        \n                    \n                \n            \n            \n                \nparseNot(builtFilters)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    builtFilters\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        renderPrimitiveValue\n                        \n                    \n                \n            \n            \n                \nrenderPrimitiveValue(key: string, val: any, aliases)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    aliases\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Unnamed function\n                        \n                    \n                \n            \n            \n                \nUnnamed function(__namedParameters: {select: Partial>, search, skiptoken, format, top, skip, filter, transform, orderBy, key, count, expand, action, func, aliases})\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    select\n                                    \n                                                Partial>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    search\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    skiptoken\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    format\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    top\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    skip\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filter\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    transform\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    orderBy\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    count\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expand\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    func\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    aliases\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cloneReg\n                        \n                    \n                \n            \n            \n                \ncloneReg(targe: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    targe\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cloneSymbol\n                        \n                    \n                \n            \n            \n                \ncloneSymbol(targe: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    targe\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createSettings\n                        \n                    \n                \n            \n            \n                \ncreateSettings(configs)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configs\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/objects.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        forEach\n                        \n                    \n                \n            \n            \n                \nforEach(array, iteratee)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    iteratee\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/models/options.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Model\n                        \n                    \n                \n            \n            \n                \nModel(__namedParameters: {cid: string})\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    cid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        CID\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ModelField\n                        \n                    \n                \n            \n            \n                \nModelField(__namedParameters: {name, ...options: any[]})\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/strings.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        now\n                        \n                    \n                \n            \n            \n                \nnow()\n                \n            \n\n\n\n\n        \n    \n    projects/angular-odata/src/lib/resources/path/segments.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pathSegmentsBuilder\n                        \n                    \n                \n            \n            \n                \npathSegmentsBuilder(segment: ODataSegment)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    segment\n                                    \n                                                ODataSegment\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngular OData\n\n\nA fluent API for querying, creating, updating and deleting OData resources in Angular.\nOData service for Angular.\nPlease check also my other related project, OData Angular Generator\nDemo:\nFull examples of the library:\n\nAngularODataEntity\n\nTable of contents\n\nInstallation\nUsage\nGenerator\nOData Version\nQuery Builder\nDocumentation\n\nInstallation\nInstall from npm:\nnpm i angular-odataUsage\n\nAdd module to your project\n\nimport { NgModule } from '@angular/core';\nimport { ODataModule } from 'angular-odata';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot({\n      serviceRootUrl: 'https://services.odata.org/V4/(S(4m0tuxtnhcfctl4gzem3gr10))/TripPinServiceRW/'\n    })\n    ...\n  ]\n})\nexport class AppModule {}\nInject and use the ODataServiceFactory\n\nimport { Component } from \"@angular/core\";\nimport { ODataClient, ODATA_ETAG } from \"angular-odata\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"TripPin\";\n  constructor(private factory: ODataServiceFactory) {\n    this.queries();\n  }\n\n  queries() {\n    // Use OData Service Factory\n    let airportsService = this.factory.entity(\"Airports\");\n    let peopleService = this.factory.entity(\"People\");\n\n    let airports = airportsService.entities();\n\n    // Fetch airports with count\n    airports\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    // Fetch all airports\n    airports.fetchAll().subscribe((aports) => console.log(\"All: \", aports));\n\n    // Fetch airport with key\n    airports\n      .entity(\"CYYZ\")\n      .fetch()\n      .pipe(\n        switchMap(() =>\n          airports.entity(\"CYYZ\").fetch({ fetchPolicy: \"cache-first\" })\n        )\n      ) // From Cache!\n      .subscribe(({ entity, annots }) =>\n        console.log(\"Airport: \", entity, \"Annotations: \", annots)\n      );\n\n    // Filter airports (inmutable resource)\n    airports\n      .filter({ Location: { City: { CountryRegion: \"United States\" } } })\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports of United States: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Add filter (mutable resource)\n    airports.query\n      .filter()\n      .push({ Location: { City: { Region: \"California\" } } });\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports in California: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Resource to JSON\n    const json = airports.toJSON();\n    console.log(json);\n    // JSON to Resource\n    const query = this.odata.fromJSON(json);\n    console.log(query);\n\n    // Remove filter (mutable resource)\n    airports.query.filter().clear();\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    let people = peopleService.entities();\n\n    // Expand (inmutable resource)\n    people\n      .expand({\n        Friends: {\n          expand: { Friends: { select: [\"AddressInfo\"] } },\n        },\n        Trips: { select: [\"Name\", \"Tags\"] },\n      })\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    this.odata\n      .batch(\"TripPin\")\n      .exec((batch) =>\n        forkJoin([\n          airports.fetch(),\n          airport.fetch(),\n          people.fetch({ withCount: true }),\n        ])\n      )\n      .subscribe();\n  }\n}Generator\nIf you use OData Angular Generator, import the config and the module from generated source.\nimport { NgModule } from '@angular/core';\n\nimport { ODataModule } from 'angular-odata';\nimport { TripPinConfig, TripPinModule } from './trippin';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot(TripPinConfig),\n    TripPinModule\n  ]\n  ...\n})\nexport class AppModule {}OData Version\nThe library works mainly with OData Version 4, however, it incorporates basic support for versions 3 and 2.\nQuery Builder\nFor a deep query customizations the library use odata-query and odata-filter-builder as a builders.\n\nOData v4 query builder\nOData Filter Builder\n\nDocumentation\nThe api documentation is generated using compodoc and can be viewed here: https://diegomvh.github.io/angular-odata/docs/\nLibrary documentation can be viewed on the wiki here: https://github.com/diegomvh/angular-odata/wiki\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Diego van Haaster\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ODataModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    110 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Aggregate   (projects/.../builder.ts)\n                        \n                        \n                            AnnotationConfig   (projects/.../types.ts)\n                        \n                        \n                            ApiConfig   (projects/.../types.ts)\n                        \n                        \n                            CacheCacheability   (projects/.../types.ts)\n                        \n                        \n                            CallableConfig   (projects/.../types.ts)\n                        \n                        \n                            Duration   (projects/.../durations.ts)\n                        \n                        \n                            EntityContainerConfig   (projects/.../types.ts)\n                        \n                        \n                            EntityKey   (projects/.../resource.ts)\n                        \n                        \n                            EntitySetConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Expand   (projects/.../builder.ts)\n                        \n                        \n                            ExpandObject   (projects/.../builder.ts)\n                        \n                        \n                            ExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ExpandType   (projects/.../builder.ts)\n                        \n                        \n                            FetchPolicy   (projects/.../types.ts)\n                        \n                        \n                            Field   (projects/.../syntax.ts)\n                        \n                        \n                            Filter   (projects/.../builder.ts)\n                        \n                        \n                            FilterType   (projects/.../builder.ts)\n                        \n                        \n                            Funcs   (projects/.../syntax.ts)\n                        \n                        \n                            GroupBy   (projects/.../builder.ts)\n                        \n                        \n                            JsonSchemaCustom   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaExpand   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaOptions   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaRequired   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaSelect   (projects/.../structured-type.ts)\n                        \n                        \n                            ModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ModelOptions   (projects/.../options.ts)\n                        \n                        \n                            NestedExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ODataCollectionResource   (projects/.../options.ts)\n                        \n                        \n                            ODataContext   (projects/.../helper.ts)\n                        \n                        \n                            ODataEntities   (projects/.../types.ts)\n                        \n                        \n                            ODataEntitiesOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataEntity   (projects/.../types.ts)\n                        \n                        \n                            ODataEntityOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataMetadataType   (projects/.../types.ts)\n                        \n                        \n                            ODataModelEntry   (projects/.../options.ts)\n                        \n                        \n                            ODataModelEventType   (projects/.../options.ts)\n                        \n                        \n                            ODataModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataModelRelation   (projects/.../options.ts)\n                        \n                        \n                            ODataModelResource   (projects/.../options.ts)\n                        \n                        \n                            ODataNoneOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataProperty   (projects/.../types.ts)\n                        \n                        \n                            ODataPropertyOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArguments   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArgumentsOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataSegment   (projects/.../segments.ts)\n                        \n                        \n                            ODataVersion   (projects/.../types.ts)\n                        \n                        \n                            OrderBy   (projects/.../builder.ts)\n                        \n                        \n                            OrderByObject   (projects/.../builder.ts)\n                        \n                        \n                            OrderByType   (projects/.../builder.ts)\n                        \n                        \n                            Parameter   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomType   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptions   (projects/.../builder.ts)\n                        \n                        \n                            SchemaConfig   (projects/.../types.ts)\n                        \n                        \n                            Select   (projects/.../builder.ts)\n                        \n                        \n                            SelectType   (projects/.../builder.ts)\n                        \n                        \n                            StructuredTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            StructuredTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Transform   (projects/.../builder.ts)\n                        \n                        \n                            Unpacked   (projects/.../builder.ts)\n                        \n                        \n                            Value   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n    \n        \n            \n                \n                    \n                    Aggregate\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Expand\n                \n            \n            \n                \n                        ExpandType | ExpandType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandObject\n                \n            \n            \n                \n                             | NestedExpandOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandType\n                \n            \n            \n                \n                        string | ExpandObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                        FilterType | FilterType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterType\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GroupBy\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NestedExpandOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderBy\n                \n            \n            \n                \n                        OrderByType | OrderByType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByObject\n                \n            \n            \n                \n                         | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByType\n                \n            \n            \n                \n                        string | OrderByObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryCustomType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Select\n                \n            \n            \n                \n                        SelectType | SelectType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectType\n                \n            \n            \n                \n                        string | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Transform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Unpacked\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Value\n                \n            \n            \n                \n                            string | Date | number | boolean | QueryCustomType\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/types.ts\n    \n    \n        \n            \n                \n                    \n                    AnnotationConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ApiConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CacheCacheability\n                \n            \n            \n                \n                        \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CallableConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntityContainerConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntitySetConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FetchPolicy\n                \n            \n            \n                \n                        \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataMetadataType\n                \n            \n            \n                \n                        \"minimal\" | \"full\" | \"none\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataVersion\n                \n            \n            \n                \n                        \"2.0\" | \"3.0\" | \"4.0\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Parameter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SchemaConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/durations.ts\n    \n    \n        \n            \n                \n                    \n                    Duration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/resource.ts\n    \n    \n        \n            \n                \n                    \n                    EntityKey\n                \n            \n            \n                \n                             | QueryCustomType | string | number\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/syntax.ts\n    \n    \n        \n            \n                \n                    \n                    Field\n                \n            \n            \n                \n                             | Funcs\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Funcs\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/parsers/structured-type.ts\n    \n    \n        \n            \n                \n                    \n                    JsonSchemaCustom\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaExpand\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaRequired\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaSelect\n                \n            \n            \n                \n                        Array\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/models/options.ts\n    \n    \n        \n            \n                \n                    \n                    ModelFieldOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataCollectionResource\n                \n            \n            \n                \n                            ODataEntitySetResource | ODataNavigationPropertyResource | ODataPropertyResource\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEntry\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEventType\n                \n            \n            \n                \n                        \"change\" | \"reset\" | \"update\" | \"destroy\" | \"add\" | \"remove\" | \"invalid\" | \"request\" | \"sync\" | \"attach\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelFieldOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelRelation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelResource\n                \n            \n            \n                \n                            ODataEntityResource | ODataSingletonResource | ODataNavigationPropertyResource | ODataPropertyResource\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/helper.ts\n    \n    \n        \n            \n                \n                    \n                    ODataContext\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/responses/types.ts\n    \n    \n        \n            \n                \n                    \n                    ODataEntities\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntity\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataProperty\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/types/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataEntitiesOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntityOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataNoneOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataPropertyOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataQueryArgumentsOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataQueryArguments\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/path/segments.ts\n    \n    \n        \n            \n                \n                    \n                    ODataSegment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
