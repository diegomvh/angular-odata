var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ApiOptions.html",[0,0.989,1,2.329]],["body/interfaces/ApiOptions.html",[0,1.797,1,3.471,2,2.046,3,0.078,4,0.069,5,0.078,6,0.05,7,2.223,8,1.009,9,2.383,10,0.05,11,0.622,12,0.215,13,3.619,14,3.768,15,2.932,16,3.994,17,3.414,18,1.797,19,3.768,20,3.931,21,3.619,22,2.59,23,0.114,24,0.01,25,3.356,26,3.423,27,0.662,28,0.362,29,2.881,30,2.492,31,2.79,32,1.831,33,0.155,34,3.208,35,2.223,36,2.223,37,2.223,38,3.16,39,1.898,40,2.881,41,2.999,42,2.046,43,2.223,44,3.129,45,0.659,46,1.206,47,1.77,48,2.006,49,1.831,50,2.999,51,2.932,52,2.006,53,2.579,54,1.722,55,2.881,56,3.129,57,1.258,58,3.028,59,0.878,60,1.793,61,2.334,62,2.334,63,2.999,64,2.492,65,2.881,66,2.772,67,2.672,68,2.41,69,2.41,70,2.492,71,2.772,72,2.672,73,2.13,74,1.843,75,0.18,76,2.999,77,2.999,78,2.881,79,2.223,80,2.223,81,2.13,82,0.93,83,0.655,84,1.969,85,2.223,86,1.969,87,3.206,88,2.223,89,2.326,90,2.326,91,3.619,92,1.03,93,3.334,94,2.538,95,2.79,96,3.978,97,2.41,98,2.492,99,1.298,100,2.79,101,2.41,102,1.898,103,3.092,104,1.898,105,1.712,106,0.753,107,1.969,108,2.441,109,1.969,110,3.129,111,1.144,112,2.441,113,0.624,114,1.712,115,2.223,116,2.223,117,2.326,118,0.122,119,2.006,120,2.441,121,1.969,122,2.441,123,2.13,124,2.441,125,2.223,126,2.326,127,3.129,128,4.509,129,1.898,130,2.326,131,2.326,132,2.326,133,1.425,134,1.006,135,2.675,136,2.13,137,2.881,138,1.898,139,2.881,140,2.326,141,2.881,142,2.326,143,3.129,144,2.13,145,3.129,146,2.999,147,2.223,148,1.969,149,2.672,150,2.13,151,1.239,152,1.206,153,3.482,154,1.699,155,1.003,156,1.239,157,1.239,158,2.13,159,1.712,160,2.13,161,2.441,162,2.046,163,2.046,164,2.13,165,0.961,166,1.831,167,1.712,168,1.206,169,1.77,170,2.223,171,2.326,172,0.088,173,2.13,174,1.969,175,1.77,176,0.006,177,0.006]],["title/classes/ArithmeticFunctions.html",[178,0.339,179,1.703]],["body/classes/ArithmeticFunctions.html",[0,1.392,3,0.058,4,0.051,5,0.058,6,0.077,8,0.833,10,0.037,12,0.134,18,0.676,23,0.097,24,0.01,27,0.652,28,0.293,33,0.152,57,1.351,59,1.194,75,0.173,82,0.337,83,1.075,92,2.155,99,1.666,106,1.037,113,0.709,118,0.107,134,0.534,155,1.381,165,1.353,168,0.901,172,0.121,176,0.005,177,0.005,178,0.665,179,2.396,180,0.142,181,1.129,182,0.729,183,4.469,184,4.469,185,4.469,186,1.826,187,0.203,188,2.937,189,0.812,190,1.826,191,2.937,192,1.826,193,2.937,194,1.164,195,1.668,196,2.823,197,2.716,198,2.801,199,1.096,200,2.168,201,1.771,202,1.2,203,2.659,204,2.578,205,2.144,206,1.164,207,1.164,208,1.2,209,1.2,210,1.2,211,1.2,212,1.2,213,1.2,214,1.771,215,2.911,216,3.582,217,1.112,218,1.489,219,1.2,220,1.096,221,1.2,222,1.164,223,1.76,224,0.262,225,2.419,226,2.808,227,1.346,228,2.659,229,0.832,230,2.659,231,2.471,232,1.2,233,1.2,234,1.826,235,1.2,236,2.144,237,1.2,238,1.2,239,1.2,240,1.2,241,1.2,242,1.2,243,1.2,244,1.2,245,1.826,246,1.826,247,1.2,248,1.2,249,1.2,250,1.826,251,1.826,252,1.2,253,1.2,254,2.144,255,1.2,256,2.471,257,1.2,258,1.826,259,1.2,260,1.2,261,2.144,262,1.2,263,1.771,264,1.2,265,1.2,266,1.2,267,1.2,268,1.2,269,1.2,270,1.2,271,2.144,272,1.2,273,1.2,274,1.2,275,1.2,276,1.2,277,1.2,278,1.2,279,1.2,280,1.2,281,1.2,282,1.2,283,1.2,284,1.2,285,1.2,286,1.2,287,1.2,288,1.164,289,1.2,290,1.2,291,1.2,292,1.2,293,1.2,294,1.2,295,1.2,296,1.2,297,1.2,298,1.2,299,1.2,300,1.2,301,1.2,302,1.2,303,2.144,304,1.2,305,1.2,306,1.2,307,1.2,308,2.144,309,1.2,310,1.826,311,1.2,312,1.2,313,1.826,314,1.2,315,2.144,316,1.2,317,1.2,318,1.2,319,2.211,320,1.826,321,3.444,322,3.595,323,1.826,324,1.2,325,1.2,326,1.2,327,1.2,328,1.2,329,2.144,330,1.2,331,1.2,332,1.2,333,1.2,334,1.2,335,1.2,336,1.2,337,1.2,338,1.2,339,1.2,340,1.2,341,1.2,342,1.2,343,1.2,344,1.2,345,1.2,346,1.2,347,1.2,348,1.2,349,1.2,350,1.2,351,1.2,352,2.144,353,1.2,354,1.2,355,1.2,356,1.2,357,1.2,358,1.2,359,1.2,360,1.2,361,1.2,362,1.2,363,1.2,364,1.621,365,1.826,366,1.2,367,1.2,368,1.2,369,1.129,370,1.2,371,2.144,372,1.826,373,1.826,374,1.771,375,1.2,376,1.2,377,1.2,378,2.144,379,1.2,380,1.2,381,1.2,382,1.2,383,2.801,384,1.2,385,1.2,386,2.801,387,1.2,388,0.978,389,1.2,390,1.2]],["title/classes/ArithmeticOperators.html",[178,0.339,352,1.703]],["body/classes/ArithmeticOperators.html",[0,1.368,3,0.056,4,0.05,5,0.056,6,0.089,8,0.819,10,0.036,12,0.168,18,0.654,23,0.101,24,0.01,27,0.662,28,0.286,33,0.151,57,1.347,59,1.074,75,0.169,82,0.326,83,1.074,92,2.142,99,1.651,106,1.017,113,0.692,118,0.114,134,0.517,155,1.354,165,1.351,168,0.873,172,0.151,176,0.005,177,0.005,178,0.662,179,2.102,180,0.137,181,1.093,182,0.711,186,1.162,187,0.254,189,1.016,190,1.162,192,1.162,194,1.127,195,1.628,196,2.795,197,2.682,198,2.765,199,1.061,200,2.136,201,1.728,202,1.162,203,2.621,204,3.066,205,2.102,206,1.127,207,1.127,208,1.162,209,1.162,210,1.162,211,1.162,212,1.162,213,1.162,214,1.728,215,2.888,216,3.596,217,1.084,218,1.452,219,1.162,220,1.061,221,1.162,222,1.127,223,1.73,224,0.256,225,2.399,226,2.782,227,1.319,228,2.621,229,0.806,230,2.621,231,2.43,232,1.162,233,1.162,234,1.782,235,1.162,236,2.102,237,1.162,238,1.162,239,1.162,240,1.162,241,1.162,242,1.162,243,1.162,244,1.162,245,1.782,246,1.782,247,1.162,248,1.162,249,1.162,250,1.782,251,1.782,252,1.162,253,1.162,254,2.102,255,1.162,256,2.43,257,1.162,258,1.782,259,1.162,260,1.162,261,2.102,262,1.162,263,1.728,264,1.162,265,1.162,266,1.162,267,1.162,268,1.162,269,1.162,270,1.162,271,2.102,272,1.162,273,1.162,274,1.162,275,1.162,276,1.162,277,1.162,278,1.162,279,1.162,280,1.162,281,1.162,282,1.162,283,1.162,284,1.162,285,1.162,286,1.162,287,1.162,288,1.127,289,1.162,290,1.162,291,1.162,292,1.162,293,1.162,294,1.162,295,1.162,296,1.162,297,1.162,298,1.162,299,1.162,300,1.162,301,1.162,302,1.162,303,2.102,304,1.162,305,1.162,306,1.162,307,1.162,308,2.102,309,1.162,310,1.782,311,1.162,312,1.162,313,1.782,314,1.162,315,2.102,316,1.162,317,1.162,318,1.162,319,2.167,320,1.782,321,3.499,322,3.635,323,1.782,324,1.162,325,1.162,326,1.162,327,1.162,328,1.162,329,2.102,330,1.162,331,1.162,332,1.162,333,1.162,334,1.162,335,1.162,336,1.162,337,1.162,338,1.162,339,1.162,340,1.162,341,1.162,342,1.162,343,1.162,344,1.162,345,1.162,346,1.162,347,1.162,348,1.162,349,1.162,350,1.162,351,1.162,352,2.356,353,1.782,354,1.162,355,1.782,356,1.162,357,1.782,358,1.162,359,1.782,360,1.162,361,1.782,362,1.162,363,1.782,364,1.581,365,1.782,366,1.162,367,1.162,368,1.162,369,1.093,370,1.162,371,2.102,372,1.782,373,1.782,374,1.728,375,1.162,376,1.162,377,1.162,378,2.102,379,1.162,380,1.162,381,1.162,382,1.162,383,2.765,384,1.162,385,1.162,386,2.765,387,1.162,388,0.947,389,1.162,390,1.162,391,3.233,392,4.36,393,4.36,394,4.36,395,4.36,396,4.36,397,2.843,398,0.932,399,2.843,400,2.843,401,2.843,402,2.843,403,2.843]],["title/interfaces/Cache.html",[0,0.989,38,1.703]],["body/interfaces/Cache.html",[0,1.812,1,3.06,2,2.105,3,0.08,4,0.071,5,0.08,6,0.082,7,2.287,8,0.969,9,2.353,10,0.051,11,0.393,12,0.14,13,2.105,14,2.192,15,1.706,16,3.258,17,2.631,18,1.62,19,2.192,20,2.287,21,2.105,23,0.112,24,0.01,25,2.726,26,3.17,27,0.661,28,0.37,29,2.939,30,2.542,31,2.833,32,1.885,33,0.155,34,3.258,35,2.287,36,2.287,37,2.287,38,3.233,39,1.953,40,2.939,41,3.06,42,2.105,43,2.287,44,3.193,45,0.678,46,1.241,47,1.821,48,2.047,49,1.885,50,3.06,51,2.969,52,2.047,53,2.631,54,1.749,55,2.939,56,3.193,57,1.265,58,3.066,59,0.896,60,1.83,61,2.381,62,2.381,63,3.06,64,2.542,65,2.939,66,2.828,67,2.726,68,2.459,69,2.459,70,2.542,71,2.828,72,2.726,73,2.192,74,1.881,75,0.18,76,3.06,77,3.06,78,2.939,79,2.287,80,2.287,81,2.192,82,0.936,83,0.668,84,2.026,85,2.287,86,2.026,87,3.235,88,2.287,89,2.393,90,2.393,91,3.665,92,1.06,93,3.386,94,2.578,95,2.833,96,4.04,97,2.459,98,2.542,99,1.523,100,2.833,101,2.459,102,1.953,103,3.141,104,1.953,105,1.762,106,0.775,107,2.026,108,3.507,109,3.258,110,4.338,111,1.643,112,3.507,113,0.896,114,1.762,115,2.287,116,2.287,117,2.393,118,0.126,119,2.047,120,2.512,121,2.026,122,2.512,123,2.192,124,2.512,125,2.287,126,2.393,127,3.193,128,4.542,129,1.953,130,2.393,131,2.393,132,2.393,133,1.467,134,1.026,135,2.697,136,2.192,137,2.939,138,1.953,139,2.939,140,2.393,141,2.939,142,2.393,143,3.193,144,2.192,145,3.193,146,3.06,147,2.287,148,2.026,149,2.726,150,2.192,151,1.275,152,1.997,153,3.526,154,1.733,155,1.032,156,1.275,157,1.275,158,2.192,159,1.762,160,2.192,161,2.512,162,2.105,163,2.105,164,2.192,165,0.976,166,1.885,167,1.762,168,1.241,169,1.821,170,2.287,171,2.393,172,0.165,173,2.192,174,2.026,175,1.821,176,0.006,177,0.006,182,0.921,187,0.212,189,0.847,404,3.507,405,4.045,406,4.045]],["title/classes/CollectionFunctions.html",[178,0.339,254,1.703]],["body/classes/CollectionFunctions.html",[0,1.4,3,0.059,4,0.052,5,0.059,6,0.069,8,0.838,10,0.038,12,0.112,18,0.684,23,0.096,24,0.01,27,0.653,28,0.295,33,0.152,57,1.349,59,1.17,75,0.17,82,0.341,83,1.076,92,2.159,99,1.664,106,1.045,113,0.716,118,0.104,134,0.541,155,1.392,165,1.354,168,0.913,172,0.101,176,0.005,177,0.005,178,0.666,179,2.16,180,0.144,181,1.143,182,0.736,186,1.215,187,0.17,189,0.677,190,1.215,192,1.215,194,1.178,195,1.684,196,2.834,197,2.729,198,2.814,199,1.11,200,2.179,201,1.788,202,1.215,203,2.674,204,2.592,205,2.16,206,1.178,207,1.178,208,1.215,209,1.215,210,1.215,211,1.215,212,1.215,213,1.215,214,1.788,215,2.92,216,3.584,217,1.122,218,1.503,219,1.215,220,1.11,221,1.215,222,1.178,223,1.771,224,0.264,225,2.427,226,2.818,227,1.356,228,2.674,229,0.843,230,2.674,231,2.487,232,1.215,233,1.215,234,1.844,235,1.215,236,2.16,237,1.215,238,1.215,239,1.215,240,1.215,241,1.215,242,1.215,243,1.215,244,1.215,245,1.844,246,1.844,247,1.215,248,1.215,249,1.215,250,1.844,251,1.844,252,1.215,253,1.215,254,2.412,255,1.844,256,3.013,257,1.215,258,2.487,259,1.844,260,1.215,261,2.16,262,1.215,263,1.788,264,1.215,265,1.215,266,1.215,267,1.215,268,1.215,269,1.215,270,1.215,271,2.16,272,1.215,273,1.215,274,1.215,275,1.215,276,1.215,277,1.215,278,1.215,279,1.215,280,1.215,281,1.215,282,1.215,283,1.215,284,1.215,285,1.215,286,1.215,287,1.215,288,1.178,289,1.215,290,1.215,291,1.215,292,1.215,293,1.215,294,1.215,295,1.215,296,1.215,297,1.215,298,1.215,299,1.215,300,1.215,301,1.215,302,1.215,303,2.16,304,1.215,305,1.215,306,1.215,307,1.215,308,2.16,309,1.215,310,1.844,311,1.215,312,1.215,313,1.844,314,1.215,315,2.16,316,1.215,317,1.215,318,1.215,319,2.228,320,1.844,321,3.45,322,3.599,323,1.844,324,1.215,325,1.215,326,1.215,327,1.215,328,1.215,329,2.16,330,1.215,331,1.215,332,1.215,333,1.215,334,1.215,335,1.215,336,1.215,337,1.215,338,1.215,339,1.215,340,1.215,341,1.215,342,1.215,343,1.215,344,1.215,345,1.215,346,1.215,347,1.215,348,1.215,349,1.215,350,1.215,351,1.215,352,2.16,353,1.215,354,1.215,355,1.215,356,1.215,357,1.215,358,1.215,359,1.215,360,1.215,361,1.215,362,1.215,363,1.215,364,1.636,365,1.844,366,1.215,367,1.215,368,1.215,369,1.143,370,1.215,371,2.16,372,1.844,373,1.844,374,1.788,375,1.215,376,1.215,377,1.215,378,2.16,379,1.215,380,1.215,381,1.215,382,1.215,383,2.814,384,1.215,385,1.215,386,2.814,387,1.215,388,0.991,389,1.215,390,1.215,407,4.512,408,4.512,409,2.973,410,2.973]],["title/classes/ConditionalFunctions.html",[178,0.339,315,1.703]],["body/classes/ConditionalFunctions.html",[0,1.406,3,0.06,4,0.052,5,0.06,6,0.057,8,0.841,10,0.038,12,0.074,18,0.689,23,0.094,24,0.01,27,0.653,28,0.297,33,0.152,57,1.352,59,1.139,75,0.171,82,0.344,83,1.076,92,2.162,99,1.661,106,1.05,113,0.72,118,0.099,134,0.545,155,1.398,165,1.355,168,0.92,172,0.067,176,0.005,177,0.005,178,0.667,179,2.17,180,0.145,181,1.152,182,0.74,186,1.224,187,0.113,189,0.45,190,1.224,192,1.224,194,1.187,195,1.694,196,2.841,197,2.737,198,2.822,199,1.118,200,2.187,201,1.798,202,1.224,203,2.682,204,2.601,205,2.17,206,1.187,207,1.187,208,1.224,209,1.224,210,1.224,211,1.224,212,1.224,213,1.224,214,1.798,215,2.925,216,3.585,217,1.128,218,1.512,219,1.224,220,1.118,221,1.224,222,1.187,223,1.778,224,0.265,225,2.432,226,2.824,227,1.362,228,2.682,229,0.849,230,2.682,231,2.497,232,1.224,233,1.224,234,1.854,235,1.224,236,2.17,237,1.224,238,1.224,239,1.224,240,1.224,241,1.224,242,1.224,243,1.224,244,1.224,245,1.854,246,1.854,247,1.224,248,1.224,249,1.224,250,1.854,251,1.854,252,1.224,253,1.224,254,2.17,255,1.224,256,2.497,257,1.224,258,1.854,259,1.224,260,1.224,261,2.17,262,1.224,263,1.798,264,1.224,265,1.224,266,1.224,267,1.224,268,1.224,269,1.224,270,1.224,271,2.17,272,1.224,273,1.224,274,1.224,275,1.224,276,1.224,277,1.224,278,1.224,279,1.224,280,1.224,281,1.224,282,1.224,283,1.224,284,1.224,285,1.224,286,1.224,287,1.224,288,1.187,289,1.224,290,1.224,291,1.224,292,1.224,293,1.224,294,1.224,295,1.224,296,1.224,297,1.224,298,1.224,299,1.224,300,1.224,301,1.224,302,1.224,303,2.17,304,1.224,305,1.224,306,1.224,307,1.224,308,2.17,309,1.224,310,1.854,311,1.224,312,1.224,313,1.854,314,1.224,315,2.421,316,1.854,317,1.224,318,1.854,319,2.238,320,1.854,321,3.454,322,3.601,323,1.854,324,1.224,325,1.224,326,1.224,327,1.224,328,1.224,329,2.17,330,1.224,331,1.224,332,1.224,333,1.224,334,1.224,335,1.224,336,1.224,337,1.224,338,1.224,339,1.224,340,1.224,341,1.224,342,1.224,343,1.224,344,1.224,345,1.224,346,1.224,347,1.224,348,1.224,349,1.224,350,1.224,351,1.224,352,2.17,353,1.224,354,1.224,355,1.224,356,1.224,357,1.224,358,1.224,359,1.224,360,1.224,361,1.224,362,1.224,363,1.224,364,1.645,365,1.854,366,1.224,367,1.224,368,1.224,369,1.152,370,1.224,371,2.17,372,1.854,373,1.854,374,1.798,375,1.224,376,1.224,377,1.224,378,2.17,379,1.224,380,1.224,381,1.224,382,1.224,383,2.822,384,1.224,385,1.224,386,2.822,387,1.224,388,0.998,389,1.224,390,1.224,411,3.632,412,2.996]],["title/classes/CsdlAction.html",[178,0.339,413,2.431]],["body/classes/CsdlAction.html",[3,0.109,4,0.095,5,0.109,6,0.107,10,0.069,11,0.67,12,0.215,23,0.109,24,0.01,27,0.646,33,0.146,45,1.541,52,2.501,59,1.347,60,1.771,75,0.18,82,0.959,118,0.13,151,2.175,154,2.117,156,2.175,157,2.175,169,3.764,172,0.189,176,0.008,177,0.008,178,0.659,180,0.264,187,0.314,224,0.41,398,1.093,413,3.901,414,2.405,415,3.579,416,5.192,417,5.192,418,1.821,419,4.945,420,4.945,421,5.466,422,5.466,423,5.466,424,5.466,425,5.466,426,5.466,427,3.091,428,3.395,429,3.091,430,3.579,431,3.234,432,3.091,433,2.909]],["title/classes/CsdlActionImport.html",[178,0.339,432,2.431]],["body/classes/CsdlActionImport.html",[3,0.113,4,0.099,5,0.113,6,0.105,10,0.072,11,0.686,12,0.191,23,0.107,24,0.01,27,0.629,33,0.147,45,1.54,52,3.06,59,1.314,60,2.683,75,0.181,82,0.968,118,0.131,151,2.228,154,2.169,156,2.228,157,2.228,169,3.182,172,0.172,176,0.008,177,0.008,178,0.666,180,0.275,187,0.303,224,0.414,398,0.782,413,3.212,414,2.346,415,3.719,416,4.389,417,4.389,418,1.892,419,4.551,420,4.551,427,3.212,428,3.528,429,3.212,430,3.719,431,3.36,432,3.996,433,2.98,434,5.679,435,5.679,436,5.679,437,5.679]],["title/classes/CsdlAnnotable.html",[178,0.339,438,2.329]],["body/classes/CsdlAnnotable.html",[3,0.124,4,0.109,5,0.124,6,0.102,8,0.861,10,0.079,11,0.728,12,0.199,23,0.102,24,0.01,27,0.466,33,0.145,45,1.517,75,0.177,82,0.92,118,0.113,129,3.021,151,1.973,154,1.92,156,1.973,157,1.973,172,0.14,176,0.008,177,0.008,178,0.656,180,0.303,187,0.282,224,0.388,398,0.861,414,2.274,433,2.638,438,4.349,439,4.638,440,4.811,441,6.256,442,4.495,443,6.256,444,6.256,445,2.718,446,3.886,447,4.097,448,4.435,449,3.538,450,3.886,451,4.343,452,3.391,453,4.343]],["title/classes/CsdlAnnotation.html",[178,0.339,442,2.237]],["body/classes/CsdlAnnotation.html",[3,0.122,4,0.107,5,0.122,6,0.105,8,0.848,10,0.078,11,0.721,12,0.198,23,0.105,24,0.01,27,0.459,33,0.144,45,1.521,75,0.18,82,0.914,118,0.112,129,3.996,151,1.942,154,1.891,156,1.942,157,1.942,172,0.137,176,0.008,177,0.008,178,0.653,180,0.298,187,0.3,224,0.385,398,0.848,414,2.345,433,2.598,438,4.024,439,4.567,440,4.199,442,4.308,445,2.692,446,3.826,447,4.033,448,5.091,449,3.483,450,3.826,451,4.276,452,3.338,453,4.276,454,6.159,455,6.159,456,7.425]],["title/classes/CsdlAnnotations.html",[178,0.339,446,2.67]],["body/classes/CsdlAnnotations.html",[3,0.12,4,0.105,5,0.12,6,0.104,8,1.01,10,0.077,11,0.713,12,0.209,23,0.107,24,0.01,27,0.45,33,0.143,45,1.523,75,0.18,82,0.907,118,0.11,129,2.917,151,1.905,154,1.854,156,1.905,157,1.905,172,0.135,176,0.008,177,0.008,178,0.649,180,0.292,187,0.309,224,0.382,398,0.832,414,2.33,433,2.548,438,4.456,439,4.479,440,4.844,442,4.459,445,2.661,446,4.559,447,5.384,448,5.068,449,3.416,450,3.752,451,4.193,452,3.274,453,4.193,457,6.041,458,6.041,459,6.041,460,6.041,461,2.548,462,4.479]],["title/classes/CsdlComplexType.html",[178,0.339,463,2.543]],["body/classes/CsdlComplexType.html",[3,0.109,4,0.096,5,0.109,6,0.088,8,1.044,10,0.07,11,0.854,12,0.218,23,0.108,24,0.01,27,0.661,28,0.36,33,0.143,45,1.517,54,1.479,75,0.177,118,0.129,134,1,152,1.689,172,0.123,176,0.008,177,0.008,178,0.647,180,0.266,187,0.319,224,0.385,398,1.129,414,1.963,418,1.833,445,2.511,461,3.531,463,4.098,464,3.228,465,2.564,466,5.721,467,3.437,468,5.68,469,6.021,470,5.68,471,4.257,472,4.257,473,5.501,474,4.84,475,4.84,476,4.84,477,4.84,478,4.84,479,4.84,480,2.656,481,2.864,482,3.754,483,3.255,484,4.302,485,3.602,486,3.819,487,4.302]],["title/classes/CsdlEntityContainer.html",[178,0.339,488,3.186]],["body/classes/CsdlEntityContainer.html",[3,0.117,4,0.102,5,0.117,6,0.11,10,0.074,11,0.7,12,0.22,23,0.109,24,0.01,28,0.511,33,0.102,45,1.517,53,2.735,59,0.931,60,1.902,75,0.173,118,0.126,144,4.529,172,0.131,176,0.008,177,0.008,178,0.463,180,0.284,187,0.324,224,0.349,398,1.15,414,2.466,418,1.955,429,4.726,432,4.726,480,3.768,488,5.346,489,3.949,490,5.163,491,8.356,492,8.356,493,8.356,494,8.356,495,6.195,496,6.195,497,5.869,498,5.869,499,5.163,500,5.163,501,5.869,502,5.163,503,5.163,504,3.319]],["title/classes/CsdlEntitySet.html",[178,0.339,495,3.186]],["body/classes/CsdlEntitySet.html",[3,0.124,4,0.109,5,0.124,6,0.109,10,0.079,11,0.727,12,0.211,23,0.108,24,0.01,27,0.619,28,0.408,33,0.109,45,1.505,54,1.677,75,0.175,118,0.128,155,1.592,172,0.139,173,4.606,176,0.008,177,0.008,178,0.492,180,0.302,187,0.32,224,0.362,398,1.03,414,2.445,418,2.078,431,5.029,480,3.011,489,3.886,495,5.547,505,4.993,506,7.477,507,5.9,508,6.236,509,5.487,510,5.487,511,6.236,512,5.487,513,4.084]],["title/classes/CsdlEntityType.html",[178,0.339,483,2.543]],["body/classes/CsdlEntityType.html",[3,0.106,4,0.093,5,0.106,6,0.099,8,1.027,10,0.067,11,0.849,12,0.221,23,0.109,24,0.01,27,0.665,28,0.348,33,0.142,45,1.521,54,1.429,75,0.176,118,0.128,134,0.966,152,2.491,172,0.119,176,0.008,177,0.008,178,0.64,180,0.257,187,0.324,224,0.38,398,1.161,414,2.227,418,1.771,445,2.457,461,3.499,463,3.145,464,3.661,465,2.477,466,5.689,467,3.416,468,5.645,469,5.984,470,5.645,471,4.224,472,4.224,474,4.676,475,4.676,476,4.676,477,4.676,478,4.676,479,4.676,480,2.566,481,2.767,482,3.673,483,4.01,484,5.041,485,5.315,486,3.69,487,4.209,514,5.315,515,4.676,516,5.315]],["title/classes/CsdlEnumMember.html",[178,0.339,517,3.186]],["body/classes/CsdlEnumMember.html",[3,0.128,4,0.112,5,0.128,6,0.106,10,0.082,11,0.741,12,0.202,23,0.103,24,0.01,27,0.48,33,0.133,45,1.493,48,3.046,57,1.287,75,0.173,82,0.964,118,0.131,148,3.229,172,0.144,176,0.009,177,0.009,178,0.602,180,0.312,187,0.306,224,0.369,398,0.887,414,2.381,418,2.147,445,2.337,465,3.003,517,6.025,518,5.16,519,6.108,520,4.474,521,5.16,522,5.16]],["title/classes/CsdlEnumType.html",[178,0.339,520,2.983]],["body/classes/CsdlEnumType.html",[3,0.123,4,0.108,5,0.123,6,0.109,10,0.079,11,0.725,12,0.211,23,0.108,24,0.01,27,0.619,33,0.13,45,1.509,48,3.126,57,0.932,75,0.176,82,0.712,118,0.13,148,4.253,172,0.139,176,0.008,177,0.008,178,0.589,180,0.3,187,0.319,224,0.361,398,1.027,414,2.443,418,2.069,445,2.252,465,2.894,517,6.294,520,5.18,521,6.796,522,6.796,523,6.21,524,5.464,525,6.21,526,6.21,527,6.21]],["title/classes/CsdlFunction.html",[178,0.339,427,2.431]],["body/classes/CsdlFunction.html",[3,0.107,4,0.094,5,0.107,6,0.108,10,0.068,11,0.664,12,0.214,23,0.109,24,0.01,27,0.656,33,0.145,45,1.541,52,2.478,59,1.359,60,1.746,75,0.179,82,0.955,118,0.13,151,2.155,154,2.098,156,2.155,157,2.155,169,3.75,172,0.189,176,0.008,177,0.008,178,0.657,180,0.261,187,0.318,224,0.409,398,1.087,413,3.047,414,2.426,415,3.528,416,5.172,417,5.172,418,1.795,419,4.927,420,4.927,427,3.865,428,5.062,429,3.047,430,3.528,431,3.188,432,3.047,433,2.883,528,5.387,529,5.387,530,5.387,531,5.387,532,5.387,533,5.387,534,5.387]],["title/classes/CsdlFunctionImport.html",[178,0.339,429,2.431]],["body/classes/CsdlFunctionImport.html",[3,0.111,4,0.097,5,0.111,6,0.106,10,0.071,11,0.679,12,0.204,23,0.108,24,0.01,27,0.648,33,0.147,45,1.541,52,3.046,59,1.333,60,1.808,75,0.181,82,0.964,118,0.131,151,2.203,154,2.145,156,2.203,157,2.203,169,3.146,172,0.17,176,0.008,177,0.008,178,0.663,180,0.27,187,0.31,224,0.412,398,0.962,413,3.155,414,2.381,415,3.653,416,4.34,417,4.34,418,1.858,419,4.514,420,4.514,427,3.155,428,3.465,429,3.951,430,5.392,431,4.872,432,3.155,433,2.947,535,5.578,536,5.578,537,5.578,538,5.578,539,5.578]],["title/classes/CsdlInclude.html",[178,0.339,540,2.983]],["body/classes/CsdlInclude.html",[3,0.125,4,0.11,5,0.125,6,0.106,8,0.866,10,0.08,11,0.73,12,0.199,23,0.102,24,0.01,28,0.412,33,0.14,45,1.501,75,0.178,86,3.15,118,0.095,133,3.022,134,1.549,172,0.14,176,0.008,177,0.008,178,0.635,180,0.304,187,0.302,224,0.389,398,0.866,414,2.362,438,4.075,440,3.557,442,3.914,445,2.28,448,3.721,449,3.557,480,3.036,540,5.583,541,5.035,542,5.533,543,6.289,544,7.519,545,2.832,546,4.366,547,4.663,548,5.035,549,5.219,550,4.663,551,4.663]],["title/classes/CsdlIncludeAnnotations.html",[178,0.339,549,2.983]],["body/classes/CsdlIncludeAnnotations.html",[3,0.123,4,0.108,5,0.123,6,0.107,8,0.85,10,0.078,11,0.722,12,0.21,23,0.105,24,0.01,28,0.404,33,0.139,45,1.508,75,0.18,86,3.092,118,0.093,133,2.238,134,1.122,172,0.138,176,0.008,177,0.008,178,0.63,180,0.298,187,0.311,224,0.386,398,1.024,414,2.402,438,4.029,440,3.49,442,3.87,445,2.238,448,5.015,449,3.49,480,2.98,540,5.161,541,4.941,545,2.779,546,4.284,547,4.576,548,4.941,549,5.539,550,6.14,551,6.283,552,6.172,553,6.172,554,6.172,555,6.172,556,6.172]],["title/classes/CsdlKey.html",[178,0.339,484,2.67]],["body/classes/CsdlKey.html",[3,0.119,4,0.105,5,0.119,6,0.1,8,1.007,10,0.076,11,0.841,12,0.149,23,0.093,24,0.01,27,0.645,28,0.393,33,0.147,45,1.492,54,1.615,75,0.174,118,0.127,134,1.092,152,1.843,172,0.134,176,0.008,177,0.008,178,0.664,180,0.29,187,0.275,224,0.397,414,2.234,445,2.651,463,3.553,464,3.674,465,2.798,466,5.163,467,3.333,468,5.508,469,5.838,470,5.508,471,4.11,472,4.11,480,2.899,481,3.126,482,3.963,483,3.553,484,4.897,485,3.932,486,5.696,487,5.224,557,6.004,558,4.807,559,6.004]],["title/classes/CsdlNavigationProperty.html",[178,0.339,472,2.153]],["body/classes/CsdlNavigationProperty.html",[3,0.108,4,0.095,5,0.108,6,0.106,8,1.04,10,0.069,11,0.669,12,0.218,23,0.114,24,0.01,27,0.654,33,0.143,45,1.528,54,1.467,60,1.768,75,0.18,82,0.866,118,0.128,151,1.721,154,2.658,156,1.721,157,1.721,159,2.377,172,0.122,176,0.008,177,0.008,178,0.645,180,0.264,187,0.323,224,0.384,398,1.126,414,2.367,418,1.818,433,2.301,445,2.498,452,2.957,461,3.185,467,2.162,471,2.733,472,3.451,481,4.349,482,3.734,560,3.787,561,5.555,562,5.357,563,5.357,564,5.357,565,5.678,566,5.081,567,5.081,568,5.456,569,5.456,570,5.456,571,5.456,572,5.456,573,4.8,574,4.8,575,4.8,576,3.389]],["title/classes/CsdlNavigationPropertyBinding.html",[178,0.339,507,2.983]],["body/classes/CsdlNavigationPropertyBinding.html",[3,0.131,4,0.115,5,0.131,6,0.107,10,0.083,11,0.75,12,0.163,23,0.104,24,0.01,33,0.115,45,1.446,54,2.274,75,0.176,118,0.099,155,2.159,172,0.147,176,0.009,177,0.009,178,0.519,180,0.318,187,0.308,224,0.318,414,2.397,445,2.386,447,5.646,507,5.361,577,6.58,578,4.584,579,6.58,580,6.58,581,7.723]],["title/classes/CsdlOnDelete.html",[178,0.339,567,2.67]],["body/classes/CsdlOnDelete.html",[3,0.121,4,0.106,5,0.121,6,0.1,8,1.013,10,0.077,11,0.715,12,0.15,23,0.11,24,0.01,27,0.629,33,0.147,45,1.516,54,1.631,60,2.668,75,0.179,82,0.908,118,0.124,151,1.913,154,2.589,156,1.913,157,1.913,159,2.642,172,0.135,176,0.008,177,0.008,178,0.666,180,0.293,187,0.277,224,0.398,414,2.244,433,2.558,445,2.667,452,3.287,467,2.404,471,3.038,472,3.038,481,4.122,482,3.987,560,4.21,561,5.186,562,3.972,563,3.972,564,3.972,565,4.21,566,4.57,567,4.919,576,3.768,582,6.065,583,6.065,584,6.065]],["title/classes/CsdlParameter.html",[178,0.339,420,2.543]],["body/classes/CsdlParameter.html",[3,0.105,4,0.092,5,0.105,6,0.109,10,0.067,11,0.657,12,0.217,23,0.112,24,0.01,27,0.642,33,0.145,45,1.541,52,2.452,59,1.367,60,1.716,75,0.18,82,1.02,118,0.13,151,2.614,154,2.545,156,2.614,157,2.614,169,3.045,172,0.166,176,0.008,177,0.008,178,0.654,180,0.256,187,0.321,224,0.407,398,1.116,413,2.995,414,2.441,415,3.468,416,4.2,417,4.2,418,1.764,419,4.407,420,4.643,427,2.995,428,3.29,429,2.995,430,3.468,431,3.134,432,2.995,433,3.496,585,5.296,586,5.296,587,5.296,588,5.296,589,5.296,590,5.296,591,5.296,592,5.296]],["title/classes/CsdlProperty.html",[178,0.339,471,2.153]],["body/classes/CsdlProperty.html",[3,0.105,4,0.092,5,0.105,6,0.108,8,1.023,10,0.067,11,0.655,12,0.22,23,0.114,24,0.01,27,0.651,33,0.141,45,1.53,54,1.418,60,1.709,75,0.18,82,1.007,118,0.127,151,2.553,154,2.642,156,2.553,157,2.553,159,2.297,172,0.118,176,0.008,177,0.008,178,0.639,180,0.255,187,0.326,224,0.379,398,1.159,414,2.415,418,1.757,433,3.414,445,2.445,452,4.388,461,3.135,467,2.09,471,3.377,472,2.641,481,4.437,482,3.654,560,3.66,561,5.512,562,3.453,563,3.453,564,3.453,565,3.66,566,4.188,567,4.188,573,4.639,574,4.639,575,4.639,576,5.029,593,5.273,594,5.273,595,5.273,596,5.273,597,5.273,598,5.273,599,5.273]],["title/classes/CsdlPropertyRef.html",[178,0.339,487,2.67]],["body/classes/CsdlPropertyRef.html",[3,0.117,4,0.103,5,0.117,6,0.103,8,0.995,10,0.075,11,0.838,12,0.194,23,0.099,24,0.01,27,0.643,28,0.386,33,0.146,45,1.5,54,1.584,75,0.178,118,0.131,134,1.521,152,1.808,172,0.132,176,0.008,177,0.008,178,0.66,180,0.285,187,0.294,224,0.394,398,0.811,414,2.31,418,1.963,445,2.621,463,3.486,464,3.799,465,2.746,466,5.12,467,3.315,468,5.478,469,5.807,470,5.478,471,4.084,472,4.084,480,2.845,481,3.067,482,3.917,483,3.486,484,4.49,485,3.858,486,4.09,487,4.857,600,5.183,601,7.228]],["title/classes/CsdlReference.html",[178,0.339,546,2.983]],["body/classes/CsdlReference.html",[3,0.12,4,0.105,5,0.12,6,0.107,8,1.011,10,0.077,11,0.713,12,0.215,23,0.107,24,0.01,28,0.396,33,0.138,45,1.512,75,0.175,86,4.221,118,0.091,133,2.193,134,1.099,172,0.135,176,0.008,177,0.008,178,0.624,180,0.292,187,0.317,224,0.382,398,1.089,414,2.388,438,4.458,440,4.766,442,4.387,445,2.193,448,3.578,449,3.42,461,2.55,462,4.483,480,2.92,540,5.85,541,4.841,545,2.723,546,5.097,547,6.098,548,6.746,549,5.85,550,4.483,551,4.483,602,6.047,603,6.047,604,6.047,605,6.047,606,6.047]],["title/classes/CsdlReferentialConstraint.html",[178,0.339,566,2.67]],["body/classes/CsdlReferentialConstraint.html",[3,0.119,4,0.104,5,0.119,6,0.104,8,1.003,10,0.076,11,0.708,12,0.148,23,0.111,24,0.01,27,0.626,33,0.146,45,1.519,54,2.202,60,1.934,75,0.18,82,0.902,118,0.123,151,1.882,154,2.577,156,1.882,157,1.882,159,3.657,172,0.133,176,0.008,177,0.008,178,0.663,180,0.289,187,0.296,224,0.396,414,2.32,433,2.517,445,2.641,452,3.235,467,2.365,471,2.99,472,2.99,481,4.262,482,3.948,560,4.143,561,5.149,562,3.908,563,3.908,564,3.908,565,4.143,566,4.884,567,4.525,576,3.707,607,5.968,608,5.968,609,7.285]],["title/classes/CsdlReturnType.html",[178,0.339,419,2.543]],["body/classes/CsdlReturnType.html",[3,0.107,4,0.094,5,0.107,6,0.108,10,0.068,11,0.663,12,0.217,23,0.111,24,0.01,27,0.644,33,0.145,45,1.541,52,2.474,59,1.358,60,1.741,75,0.179,82,1.022,118,0.125,151,2.624,154,2.554,156,2.624,157,2.624,169,3.072,172,0.167,176,0.008,177,0.008,178,0.657,180,0.26,187,0.318,224,0.409,398,1.121,413,3.038,414,2.425,415,3.518,416,4.238,417,4.238,419,4.667,420,4.437,427,3.038,428,3.337,429,3.038,430,3.518,431,3.179,432,3.038,433,3.509,610,5.373,611,5.373,612,5.373,613,5.373,614,5.373,615,5.373,616,5.373,617,5.373]],["title/classes/CsdlSchema.html",[178,0.339,618,3.441]],["body/classes/CsdlSchema.html",[3,0.102,4,0.089,5,0.102,6,0.111,8,0.911,10,0.065,11,0.643,12,0.224,23,0.113,24,0.01,28,0.538,33,0.089,45,1.531,48,1.858,59,0.813,60,1.66,75,0.168,118,0.077,133,2.81,134,1.459,172,0.114,176,0.007,177,0.007,178,0.404,180,0.248,187,0.33,224,0.32,388,2.673,398,1.197,413,4.538,414,2.491,427,4.538,438,4.2,440,4.538,442,4.177,446,4.984,449,2.898,450,4.984,461,2.161,462,3.799,463,4.748,464,2.388,480,3.968,483,4.748,488,5.949,489,2.307,520,5.57,542,4.508,545,2.307,618,5.299,619,5.124,620,8.024,621,8.024,622,8.024,623,7.059,624,8.024,625,8.024,626,8.024,627,8.024,628,5.949,629,5.124,630,5.124,631,5.124,632,5.124,633,5.124,634,5.124,635,5.124,636,5.124,637,5.124,638,5.124,639,5.124,640,5.124,641,4.102,642,3.799]],["title/classes/CsdlSingleton.html",[178,0.339,496,3.186]],["body/classes/CsdlSingleton.html",[3,0.128,4,0.112,5,0.128,6,0.108,10,0.081,11,0.739,12,0.201,23,0.113,24,0.01,28,0.42,33,0.112,45,1.492,54,1.726,75,0.176,118,0.129,155,1.638,172,0.143,176,0.009,177,0.009,178,0.506,180,0.31,187,0.315,224,0.368,398,0.884,414,2.427,418,2.138,480,3.098,496,5.642,507,5.945,513,4.202,643,6.417,644,8.565,645,6.417,646,6.417,647,6.417,648,6.417]],["title/classes/CsdlStructuralProperty.html",[178,0.339,561,2.814]],["body/classes/CsdlStructuralProperty.html",[3,0.116,4,0.102,5,0.116,6,0.106,8,0.992,10,0.074,11,0.699,12,0.193,23,0.113,24,0.01,27,0.648,33,0.146,45,1.522,54,1.575,60,1.898,75,0.18,82,0.894,118,0.13,151,1.847,154,2.691,156,1.847,157,1.847,159,2.551,172,0.131,176,0.008,177,0.008,178,0.659,180,0.283,187,0.306,224,0.393,398,0.806,414,2.367,418,1.951,433,2.47,445,2.611,452,3.174,467,2.321,471,2.934,472,2.934,481,4.348,482,3.903,560,4.066,561,5.327,562,3.836,563,3.836,564,3.836,565,4.066,566,4.473,567,4.473,576,3.638,649,5.857,650,5.857,651,5.857,652,5.857]],["title/classes/CsdlStructuredType.html",[178,0.339,466,2.814]],["body/classes/CsdlStructuredType.html",[3,0.109,4,0.096,5,0.109,6,0.109,8,0.951,10,0.069,11,0.853,12,0.218,23,0.108,24,0.01,27,0.661,28,0.359,33,0.143,45,1.516,54,1.474,75,0.177,118,0.129,134,0.996,152,1.682,172,0.122,176,0.008,177,0.008,178,0.646,180,0.265,187,0.319,224,0.384,398,1.128,414,2.434,418,1.826,445,2.505,463,3.243,464,4.003,465,2.554,466,5.203,467,3.435,468,5.676,469,6.017,470,5.676,471,4.254,472,4.254,480,2.646,481,2.853,482,3.745,483,3.243,484,4.292,485,3.589,486,3.805,487,4.292,518,4.388,519,4.388,524,4.822,653,5.481,654,4.822,655,4.822,656,4.822]],["title/classes/CsdlTerm.html",[178,0.339,450,2.67]],["body/classes/CsdlTerm.html",[3,0.107,4,0.094,5,0.107,6,0.112,8,0.74,10,0.068,11,0.663,12,0.222,23,0.113,24,0.01,27,0.588,33,0.138,45,1.533,75,0.181,82,1.01,118,0.123,129,2.596,151,2.568,154,2.5,156,2.568,157,2.568,172,0.12,176,0.008,177,0.008,178,0.623,180,0.26,187,0.329,224,0.363,398,1.178,414,2.495,418,1.791,433,3.435,438,3.7,439,3.987,440,3.861,442,3.905,445,2.475,446,3.34,447,3.521,448,4.04,449,3.041,450,4.241,451,5.654,452,4.414,453,5.654,657,5.377,658,5.377,659,5.377,660,5.377,661,5.377,662,5.377,663,5.377,664,5.377,665,5.377,666,5.377,667,5.377]],["title/classes/CsdlTypeDefinition.html",[178,0.339,628,3.186]],["body/classes/CsdlTypeDefinition.html",[3,0.113,4,0.099,5,0.113,6,0.11,8,0.974,10,0.072,11,0.687,12,0.221,23,0.114,24,0.01,27,0.6,28,0.373,33,0.099,45,1.525,75,0.176,82,1.018,118,0.125,151,2.613,156,2.613,157,2.613,172,0.127,176,0.008,177,0.008,178,0.449,180,0.275,187,0.328,224,0.342,398,1.163,414,2.473,418,1.897,433,3.494,438,4.366,440,4.685,442,4.313,449,3.221,461,2.402,462,4.223,480,2.75,545,2.565,576,5.146,628,5.248,668,5.695,669,8.284,670,5.695,671,5.695,672,5.695,673,5.695,674,5.695,675,5.695,676,5.695,677,5.695]],["title/classes/DateAndTimeFunctions.html",[178,0.339,271,1.703]],["body/classes/DateAndTimeFunctions.html",[0,1.335,3,0.054,4,0.047,5,0.054,6,0.102,8,0.799,10,0.034,12,0.195,18,0.625,23,0.105,24,0.01,27,0.647,28,0.275,33,0.15,57,1.353,59,1.322,75,0.168,82,0.311,83,1.072,92,2.124,99,1.683,106,0.987,113,0.668,118,0.123,121,2.107,134,0.493,155,1.315,165,1.348,168,0.833,172,0.176,176,0.005,177,0.005,178,0.657,179,2.041,180,0.131,181,1.044,182,0.686,186,1.109,187,0.299,189,1.194,190,1.109,192,1.109,194,1.075,195,1.57,196,2.753,197,2.632,198,2.714,199,1.013,200,2.091,201,1.667,202,1.109,203,2.566,204,2.488,205,2.041,206,1.075,207,1.075,208,1.109,209,1.109,210,1.109,211,1.109,212,1.109,213,1.109,214,1.667,215,2.855,216,3.568,217,1.046,218,1.401,219,1.109,220,1.013,221,1.109,222,1.075,223,1.688,224,0.249,225,2.369,226,2.744,227,1.281,228,2.566,229,0.769,230,2.566,231,2.371,232,1.109,233,1.109,234,1.719,235,1.109,236,2.041,237,1.109,238,1.109,239,1.109,240,1.109,241,1.109,242,1.109,243,1.109,244,1.109,245,1.719,246,1.719,247,1.109,248,1.109,249,1.109,250,1.719,251,1.719,252,1.109,253,1.109,254,2.041,255,1.109,256,2.371,257,1.109,258,1.719,259,1.109,260,1.109,261,2.041,262,1.109,263,1.667,264,1.109,265,1.109,266,1.109,267,1.109,268,1.109,269,1.109,270,1.109,271,2.299,272,1.719,273,1.109,274,1.719,275,1.109,276,1.719,277,1.109,278,1.719,279,1.109,280,1.719,281,1.109,282,1.719,283,1.109,284,1.719,285,1.109,286,1.719,287,1.109,288,2.299,289,1.109,290,1.719,291,1.109,292,1.719,293,1.109,294,1.719,295,1.109,296,1.719,297,1.109,298,1.719,299,1.109,300,1.109,301,1.109,302,1.109,303,2.041,304,1.109,305,1.109,306,1.109,307,1.109,308,2.041,309,1.109,310,1.719,311,1.109,312,1.109,313,1.719,314,1.109,315,2.041,316,1.109,317,1.109,318,1.109,319,2.105,320,1.719,321,3.404,322,3.57,323,1.719,324,1.109,325,1.109,326,1.109,327,1.109,328,1.109,329,2.041,330,1.109,331,1.109,332,1.109,333,1.109,334,1.109,335,1.109,336,1.109,337,1.109,338,1.109,339,1.109,340,1.109,341,1.109,342,1.109,343,1.109,344,1.109,345,1.109,346,1.109,347,1.109,348,1.109,349,1.109,350,1.109,351,1.109,352,2.041,353,1.109,354,1.109,355,1.109,356,1.109,357,1.109,358,1.109,359,1.109,360,1.109,361,1.109,362,1.109,363,1.109,364,1.525,365,1.719,366,1.109,367,1.109,368,1.109,369,1.044,370,1.109,371,2.041,372,1.719,373,1.719,374,1.667,375,1.109,376,1.109,377,1.109,378,2.041,379,1.109,380,1.109,381,1.109,382,1.109,383,2.714,384,1.109,385,1.109,386,2.714,387,1.109,388,0.904,389,1.109,390,1.109,678,4.207,679,4.207,680,4.207,681,4.207,682,4.207,683,4.207,684,4.207,685,4.207,686,3.119,687,4.207,688,4.207,689,4.207,690,2.714,691,2.714,692,2.714,693,2.714,694,2.714,695,2.714,696,2.714,697,2.714,698,2.714,699,2.714,700,2.714,701,2.714,702,2.714,703,2.714]],["title/classes/Field.html",[92,1.126,178,0.339]],["body/classes/Field.html",[3,0.072,4,0.063,5,0.072,6,0.085,8,0.5,10,0.078,11,0.508,12,0.09,23,0.097,24,0.01,28,0.55,33,0.063,34,3.072,45,1.31,46,2.807,48,1.897,51,2.586,52,1.897,53,2.439,54,1.804,55,1.892,56,2.055,57,0.545,59,0.973,60,1.987,72,3.576,75,0.152,92,1.607,94,1.44,103,1.754,106,1.463,118,0.111,123,2.836,126,2.15,129,2.527,133,1.318,134,0.661,135,1.245,150,1.969,151,1.146,152,1.115,154,1.115,155,0.928,156,1.146,157,1.146,159,1.583,165,1.309,169,1.636,172,0.081,173,2.836,176,0.006,177,0.006,178,0.413,180,0.176,187,0.231,217,1.302,224,0.176,225,1.65,413,2.055,416,2.257,417,2.257,418,1.21,419,2.15,420,2.15,427,2.055,428,2.257,429,2.055,431,2.15,432,2.055,433,1.532,442,1.892,445,1.318,446,2.257,447,2.38,448,2.15,450,2.257,451,2.522,452,1.969,453,2.522,463,2.15,464,1.693,467,1.44,468,2.38,470,2.38,471,1.82,472,1.82,481,1.892,483,2.15,484,2.257,485,2.38,487,2.257,488,2.694,489,2.356,495,2.694,496,2.694,504,2.055,506,3.197,507,2.522,513,2.38,517,2.694,520,2.522,521,2.909,522,2.909,540,2.522,545,2.356,546,3.633,547,2.694,549,2.522,550,2.694,551,2.694,562,2.38,563,2.38,564,2.38,566,2.257,567,2.257,576,2.257,578,1.969,618,4.189,623,3.197,628,2.694,641,2.909,642,2.694,704,3.197,705,7.106,706,3.634,707,5.233,708,8.264,709,2.356,710,1.003,711,3.197,712,4.189,713,1.636,714,3.197,715,4.604,716,3.634,717,2.257,718,6.78,719,7.327,720,3.634,721,3.634,722,3.634,723,3.634,724,3.634,725,3.634,726,3.634,727,3.634,728,3.634,729,3.634,730,3.634,731,3.634,732,3.634,733,3.634,734,3.634,735,2.38,736,3.634,737,3.634,738,3.634,739,3.634,740,3.634,741,3.634,742,3.634,743,3.634,744,3.634,745,3.634,746,3.634,747,3.634,748,3.634,749,3.634,750,3.634,751,3.634,752,3.634,753,3.634,754,3.634,755,3.634,756,3.634,757,3.634,758,3.634,759,3.634,760,3.634,761,3.634,762,3.809,763,3.634,764,3.634,765,3.634,766,3.634,767,3.634,768,3.634,769,3.634,770,3.634,771,3.634,772,3.634,773,3.634,774,3.634,775,3.634,776,3.634,777,3.634,778,3.634,779,3.634,780,3.634,781,3.634,782,3.634,783,3.634,784,3.634,785,3.634,786,3.634,787,3.634,788,3.634,789,3.634,790,3.634,791,3.634,792,3.634,793,3.634,794,3.634,795,3.634,796,3.634,797,3.634,798,3.634,799,3.634,800,3.634,801,3.634,802,3.634,803,3.634,804,3.634,805,3.634,806,3.634,807,5.233,808,6.133,809,3.634,810,3.634,811,3.634,812,2.694,813,3.634,814,3.634,815,6.71,816,5.233,817,3.634,818,3.634,819,3.634,820,3.634,821,3.634,822,3.634,823,8.338,824,3.634,825,5.233,826,3.634,827,5.233,828,3.634,829,3.634,830,2.724,831,3.634,832,3.634,833,3.634,834,3.634,835,3.634,836,3.634,837,3.634,838,3.634,839,3.634,840,3.634,841,3.634,842,3.634,843,3.634,844,3.634,845,3.634,846,3.97,847,3.634,848,2.694,849,3.634,850,2.909,851,3.634,852,6.133,853,5.233,854,5.395,855,3.634,856,3.634,857,3.634,858,3.634,859,3.634,860,3.634,861,2.257,862,2.694,863,3.634,864,3.634]],["title/classes/Function.html",[59,0.682,178,0.339]],["body/classes/Function.html",[0,1.392,3,0.058,4,0.051,5,0.058,6,0.082,8,0.833,10,0.037,12,0.111,18,0.676,23,0.095,24,0.01,27,0.656,28,0.293,33,0.152,57,1.348,59,1.131,75,0.172,82,0.337,83,1.075,92,2.155,99,1.655,106,1.038,113,0.96,118,0.11,134,0.534,155,1.381,165,1.353,168,0.902,172,0.1,176,0.005,177,0.005,178,0.665,179,2.145,180,0.142,181,1.13,182,0.729,186,1.201,187,0.227,189,0.671,190,1.201,192,1.201,194,1.164,195,1.669,196,2.95,197,2.824,198,2.912,199,1.097,200,2.447,201,1.772,202,1.201,203,2.66,204,2.579,205,2.145,206,1.164,207,1.164,208,1.201,209,1.201,210,1.201,211,1.201,212,1.201,213,1.201,214,2.397,215,2.952,216,3.587,217,1.112,218,1.489,219,1.201,220,1.097,221,1.201,222,1.164,223,1.894,224,0.292,225,2.42,226,2.952,227,1.346,228,2.66,229,0.833,230,2.66,231,2.472,232,1.201,233,1.201,234,1.827,235,1.201,236,2.145,237,1.201,238,1.201,239,1.201,240,1.201,241,1.201,242,1.201,243,1.201,244,1.201,245,1.827,246,1.827,247,1.201,248,1.201,249,1.201,250,1.827,251,1.827,252,1.201,253,1.201,254,2.145,255,1.201,256,2.472,257,1.201,258,1.827,259,1.201,260,1.201,261,2.145,262,1.201,263,1.772,264,1.201,265,1.201,266,1.201,267,1.201,268,1.201,269,1.201,270,1.201,271,2.145,272,1.201,273,1.201,274,1.201,275,1.201,276,1.201,277,1.201,278,1.201,279,1.201,280,1.201,281,1.201,282,1.201,283,1.201,284,1.201,285,1.201,286,1.201,287,1.201,288,1.164,289,1.201,290,1.201,291,1.201,292,1.201,293,1.201,294,1.201,295,1.201,296,1.201,297,1.201,298,1.201,299,1.201,300,1.201,301,1.201,302,1.201,303,2.145,304,1.201,305,1.201,306,1.201,307,1.201,308,2.145,309,1.201,310,1.827,311,1.201,312,1.201,313,1.827,314,1.201,315,2.145,316,1.201,317,1.201,318,1.201,319,2.212,320,1.827,321,3.444,322,3.596,323,1.827,324,1.201,325,1.201,326,1.201,327,1.201,328,1.201,329,2.145,330,1.201,331,1.201,332,1.201,333,1.201,334,1.201,335,1.201,336,1.201,337,1.201,338,1.201,339,1.201,340,1.201,341,1.201,342,1.201,343,1.201,344,1.201,345,1.201,346,1.201,347,1.201,348,1.201,349,1.201,350,1.201,351,1.201,352,2.145,353,1.201,354,1.201,355,1.201,356,1.201,357,1.201,358,1.201,359,1.201,360,1.201,361,1.201,362,1.201,363,1.201,364,1.621,365,1.827,366,1.201,367,1.201,368,1.201,369,1.13,370,1.201,371,2.145,372,1.827,373,1.827,374,1.772,375,1.201,376,1.201,377,1.201,378,2.145,379,1.201,380,1.201,381,1.201,382,1.201,383,2.801,384,1.201,385,1.201,386,2.801,387,1.201,388,0.979,389,1.201,390,1.201,398,0.405,418,0.979,865,1.532,866,2.938,867,2.938,868,2.938,869,2.938]],["title/classes/GeoFunctions.html",[178,0.339,308,1.703]],["body/classes/GeoFunctions.html",[0,1.388,3,0.058,4,0.051,5,0.058,6,0.076,8,0.83,10,0.037,12,0.134,18,0.672,23,0.097,24,0.01,27,0.659,28,0.291,33,0.152,57,1.351,59,1.192,75,0.172,82,0.335,83,1.075,92,2.153,99,1.665,106,1.034,113,0.706,118,0.107,134,0.531,155,1.376,165,1.353,168,0.897,172,0.12,176,0.005,177,0.005,178,0.664,179,2.137,180,0.141,181,1.123,182,0.726,186,1.194,187,0.203,189,0.809,190,1.194,192,1.194,194,1.158,195,1.662,196,2.819,197,2.71,198,2.795,199,1.09,200,2.162,201,1.764,202,1.194,203,2.653,204,2.572,205,2.137,206,1.158,207,1.158,208,1.194,209,1.194,210,1.194,211,1.194,212,1.194,213,1.194,214,1.764,215,2.908,216,3.591,217,1.107,218,1.483,219,1.194,220,1.09,221,1.194,222,1.158,223,1.755,224,0.261,225,2.416,226,2.804,227,1.341,228,2.653,229,0.828,230,2.653,231,2.464,232,1.194,233,1.194,234,1.819,235,1.194,236,2.137,237,1.194,238,1.194,239,1.194,240,1.194,241,1.194,242,1.194,243,1.194,244,1.194,245,2.204,246,1.819,247,1.194,248,1.194,249,1.194,250,1.819,251,2.464,252,1.194,253,1.194,254,2.137,255,1.194,256,2.464,257,1.194,258,1.819,259,1.194,260,1.194,261,2.137,262,1.194,263,1.764,264,1.194,265,1.194,266,1.194,267,1.194,268,1.194,269,1.194,270,1.194,271,2.137,272,1.194,273,1.194,274,1.194,275,1.194,276,1.194,277,1.194,278,1.194,279,1.194,280,1.194,281,1.194,282,1.194,283,1.194,284,1.194,285,1.194,286,1.194,287,1.194,288,1.158,289,1.194,290,1.194,291,1.194,292,1.194,293,1.194,294,1.194,295,1.194,296,1.194,297,1.194,298,1.194,299,1.194,300,1.194,301,1.194,302,1.194,303,2.137,304,1.194,305,1.194,306,1.194,307,1.194,308,2.39,309,1.819,310,2.464,311,1.194,312,1.819,313,2.464,314,1.194,315,2.137,316,1.194,317,1.194,318,1.194,319,2.204,320,1.819,321,3.441,322,3.594,323,1.819,324,1.194,325,1.194,326,1.194,327,1.194,328,1.194,329,2.137,330,1.194,331,1.194,332,1.194,333,1.194,334,1.194,335,1.194,336,1.194,337,1.194,338,1.194,339,1.194,340,1.194,341,1.194,342,1.194,343,1.194,344,1.194,345,1.194,346,1.194,347,1.194,348,1.194,349,1.194,350,1.194,351,1.194,352,2.137,353,1.194,354,1.194,355,1.194,356,1.194,357,1.194,358,1.194,359,1.194,360,1.194,361,1.194,362,1.194,363,1.194,364,1.614,365,1.819,366,1.194,367,1.194,368,1.194,369,1.123,370,1.194,371,2.137,372,1.819,373,1.819,374,1.764,375,1.194,376,1.194,377,1.194,378,2.137,379,1.194,380,1.194,381,1.194,382,1.194,383,2.795,384,1.194,385,1.194,386,2.795,387,1.194,388,0.973,389,1.194,390,1.194,398,0.742,870,4.451,871,4.451,872,2.921,873,2.921,874,2.921]],["title/classes/Grouping.html",[178,0.339,205,1.703]],["body/classes/Grouping.html",[0,1.396,3,0.059,4,0.052,5,0.059,6,0.083,8,0.835,10,0.037,12,0.111,18,0.68,23,0.095,24,0.01,27,0.653,28,0.294,33,0.152,57,1.349,59,1.09,75,0.17,82,0.339,83,1.075,92,2.157,99,1.656,106,1.041,113,0.963,118,0.103,134,0.537,155,1.386,165,1.354,168,0.907,172,0.1,176,0.005,177,0.005,178,0.666,179,2.152,180,0.143,181,1.136,182,0.732,186,1.207,187,0.228,189,0.674,190,1.207,192,1.207,194,1.171,195,1.676,196,2.955,197,2.986,198,2.918,199,1.103,200,2.451,201,1.779,202,1.207,203,2.666,204,2.585,205,2.404,206,1.171,207,1.171,208,1.207,209,1.207,210,1.207,211,1.207,212,1.207,213,1.207,214,2.404,215,2.956,216,3.583,217,1.117,218,1.496,219,1.207,220,1.103,221,1.207,222,1.171,223,1.898,224,0.293,225,2.423,226,2.813,227,1.351,228,2.666,229,0.837,230,2.666,231,2.479,232,1.207,233,1.207,234,1.835,235,1.207,236,2.152,237,1.207,238,1.207,239,1.207,240,1.207,241,1.207,242,1.207,243,1.207,244,1.207,245,1.835,246,1.835,247,1.207,248,1.207,249,1.207,250,1.835,251,1.835,252,1.207,253,1.207,254,2.152,255,1.207,256,2.479,257,1.207,258,1.835,259,1.207,260,1.207,261,2.152,262,1.207,263,1.779,264,1.207,265,1.207,266,1.207,267,1.207,268,1.207,269,1.207,270,1.207,271,2.152,272,1.207,273,1.207,274,1.207,275,1.207,276,1.207,277,1.207,278,1.207,279,1.207,280,1.207,281,1.207,282,1.207,283,1.207,284,1.207,285,1.207,286,1.207,287,1.207,288,1.171,289,1.207,290,1.207,291,1.207,292,1.207,293,1.207,294,1.207,295,1.207,296,1.207,297,1.207,298,1.207,299,1.207,300,1.207,301,1.207,302,1.207,303,2.152,304,1.207,305,1.207,306,1.207,307,1.207,308,2.152,309,1.207,310,1.835,311,1.207,312,1.207,313,1.835,314,1.207,315,2.152,316,1.207,317,1.207,318,1.207,319,2.219,320,1.835,321,3.447,322,3.597,323,1.835,324,1.207,325,1.207,326,1.207,327,1.207,328,1.207,329,2.152,330,1.207,331,1.207,332,1.207,333,1.207,334,1.207,335,1.207,336,1.207,337,1.207,338,1.207,339,1.207,340,1.207,341,1.207,342,1.207,343,1.207,344,1.207,345,1.207,346,1.207,347,1.207,348,1.207,349,1.207,350,1.207,351,1.207,352,2.152,353,1.207,354,1.207,355,1.207,356,1.207,357,1.207,358,1.207,359,1.207,360,1.207,361,1.207,362,1.207,363,1.207,364,1.628,365,2.479,366,1.207,367,1.207,368,1.207,369,1.136,370,1.207,371,2.152,372,1.835,373,1.835,374,1.779,375,1.207,376,1.207,377,1.207,378,2.152,379,1.207,380,1.207,381,1.207,382,1.207,383,2.807,384,1.207,385,1.207,386,2.807,387,1.207,388,0.984,389,1.207,390,1.207,398,0.407,865,1.538,875,2.954,876,2.954,877,2.954,878,2.954,879,2.954]],["title/classes/GroupingAndNavigationOperators.html",[178,0.339,371,1.703]],["body/classes/GroupingAndNavigationOperators.html",[0,1.4,3,0.059,4,0.052,5,0.059,6,0.069,8,0.837,10,0.038,12,0.112,18,0.684,23,0.097,24,0.01,27,0.653,28,0.295,33,0.152,57,1.352,59,1.093,75,0.17,82,0.341,83,1.076,92,2.2,99,1.66,106,1.045,113,0.716,118,0.104,134,0.54,155,1.757,165,1.354,168,0.912,172,0.122,176,0.005,177,0.005,178,0.666,179,2.159,180,0.144,181,1.142,182,0.736,186,1.214,187,0.169,189,0.677,190,1.214,192,1.214,194,1.177,195,1.683,196,2.834,197,2.728,198,2.813,199,1.109,200,2.178,201,1.786,202,1.214,203,2.672,204,2.591,205,2.728,206,1.177,207,1.177,208,1.214,209,1.214,210,1.214,211,1.214,212,1.214,213,1.214,214,1.786,215,2.919,216,3.584,217,1.121,218,1.502,219,1.214,220,1.109,221,1.214,222,1.177,223,1.77,224,0.263,225,2.427,226,2.817,227,1.355,228,2.672,229,0.842,230,2.672,231,2.486,232,1.214,233,1.214,234,1.842,235,1.214,236,2.159,237,1.214,238,1.214,239,1.214,240,1.214,241,1.214,242,1.214,243,1.214,244,1.214,245,1.842,246,1.842,247,1.214,248,1.214,249,1.214,250,1.842,251,1.842,252,1.214,253,1.214,254,2.159,255,1.214,256,2.486,257,1.214,258,1.842,259,1.214,260,1.214,261,2.159,262,1.214,263,1.786,264,1.214,265,1.214,266,1.214,267,1.214,268,1.214,269,1.214,270,1.214,271,2.159,272,1.214,273,1.214,274,1.214,275,1.214,276,1.214,277,1.214,278,1.214,279,1.214,280,1.214,281,1.214,282,1.214,283,1.214,284,1.214,285,1.214,286,1.214,287,1.214,288,1.177,289,1.214,290,1.214,291,1.214,292,1.214,293,1.214,294,1.214,295,1.214,296,1.214,297,1.214,298,1.214,299,1.214,300,1.214,301,1.214,302,1.214,303,2.159,304,1.214,305,1.214,306,1.214,307,1.214,308,2.159,309,1.214,310,1.842,311,1.214,312,1.214,313,1.842,314,1.214,315,2.159,316,1.214,317,1.214,318,1.214,319,2.227,320,1.842,321,3.449,322,3.599,323,1.842,324,1.214,325,1.214,326,1.214,327,1.214,328,1.214,329,2.159,330,1.214,331,1.214,332,1.214,333,1.214,334,1.214,335,1.214,336,1.214,337,1.214,338,1.214,339,1.214,340,1.214,341,1.214,342,1.214,343,1.214,344,1.214,345,1.214,346,1.214,347,1.214,348,1.214,349,1.214,350,1.214,351,1.214,352,2.159,353,1.214,354,1.214,355,1.214,356,1.214,357,1.214,358,1.214,359,1.214,360,1.214,361,1.214,362,1.214,363,1.214,364,1.635,365,1.842,366,1.214,367,1.214,368,1.214,369,1.142,370,1.214,371,2.41,372,2.227,373,2.227,374,1.786,375,1.214,376,1.214,377,1.214,378,2.159,379,1.214,380,1.214,381,1.214,382,1.214,383,2.813,384,1.214,385,1.214,386,2.813,387,1.214,388,0.99,389,1.214,390,1.214,880,2.971,881,2.971,882,2.613]],["title/classes/Lambda.html",[178,0.339,374,1.703]],["body/classes/Lambda.html",[0,1.391,3,0.058,4,0.051,5,0.058,6,0.068,8,0.896,10,0.037,12,0.111,18,0.676,23,0.095,24,0.01,27,0.656,28,0.293,33,0.152,57,1.348,59,1.088,75,0.172,82,0.337,83,1.075,92,2.155,99,1.655,106,1.037,113,0.96,118,0.103,134,0.534,155,1.381,165,1.353,168,0.901,172,0.1,176,0.005,177,0.005,178,0.665,179,2.143,180,0.142,181,1.129,182,0.729,186,1.2,187,0.227,189,0.67,190,1.2,192,1.2,194,1.163,195,1.668,196,2.95,197,2.715,198,2.911,199,1.096,200,2.446,201,1.77,202,1.2,203,2.658,204,2.909,205,2.143,206,1.163,207,1.163,208,1.2,209,1.2,210,1.2,211,1.2,212,1.2,213,1.2,214,2.396,215,2.952,216,3.587,217,1.111,218,1.488,219,1.2,220,1.096,221,1.2,222,1.163,223,1.759,224,0.292,225,2.419,226,2.952,227,1.345,228,2.658,229,0.832,230,2.658,231,2.471,232,1.2,233,1.2,234,1.826,235,1.2,236,2.143,237,1.2,238,1.2,239,1.2,240,1.2,241,1.2,242,1.2,243,1.2,244,1.2,245,1.826,246,1.826,247,1.2,248,1.2,249,1.2,250,1.826,251,1.826,252,1.2,253,1.2,254,2.143,255,1.2,256,2.471,257,1.2,258,1.826,259,1.2,260,1.2,261,2.143,262,1.2,263,1.77,264,1.2,265,1.2,266,1.2,267,1.2,268,1.2,269,1.2,270,1.2,271,2.143,272,1.2,273,1.2,274,1.2,275,1.2,276,1.2,277,1.2,278,1.2,279,1.2,280,1.2,281,1.2,282,1.2,283,1.2,284,1.2,285,1.2,286,1.2,287,1.2,288,1.163,289,1.2,290,1.2,291,1.2,292,1.2,293,1.2,294,1.2,295,1.2,296,1.2,297,1.2,298,1.2,299,1.2,300,1.2,301,1.2,302,1.2,303,2.143,304,1.2,305,1.2,306,1.2,307,1.2,308,2.143,309,1.2,310,1.826,311,1.2,312,1.2,313,1.826,314,1.2,315,2.143,316,1.2,317,1.2,318,1.2,319,2.658,320,1.826,321,3.444,322,3.595,323,1.826,324,1.2,325,1.2,326,1.2,327,1.2,328,1.2,329,2.143,330,1.2,331,1.2,332,1.2,333,1.2,334,1.2,335,1.2,336,1.2,337,1.2,338,1.2,339,1.2,340,1.2,341,1.2,342,1.2,343,1.2,344,1.2,345,1.2,346,1.2,347,1.2,348,1.2,349,1.2,350,1.2,351,1.2,352,2.143,353,1.2,354,1.2,355,1.2,356,1.2,357,1.2,358,1.2,359,1.2,360,1.2,361,1.2,362,1.2,363,1.2,364,1.62,365,1.826,366,1.2,367,1.2,368,1.2,369,1.129,370,1.2,371,2.143,372,1.826,373,1.826,374,2.143,375,1.2,376,1.2,377,1.2,378,2.143,379,1.2,380,1.2,381,1.2,382,1.2,383,2.8,384,1.2,385,1.2,386,2.8,387,1.2,388,0.978,389,1.2,390,1.2,398,0.404,461,1.884,865,1.53,883,2.583,884,2.935,885,2.935,886,2.935,887,2.935]],["title/classes/LambdaOperators.html",[178,0.339,378,1.703]],["body/classes/LambdaOperators.html",[0,1.402,3,0.059,4,0.052,5,0.059,6,0.069,8,0.839,10,0.038,12,0.112,18,0.686,23,0.096,24,0.01,27,0.653,28,0.296,33,0.152,57,1.353,59,1.094,75,0.17,82,0.342,83,1.076,92,2.189,99,1.664,106,1.046,113,0.717,118,0.104,134,0.542,155,1.393,165,1.354,168,0.915,172,0.101,176,0.005,177,0.005,178,0.666,179,2.163,180,0.144,181,1.146,182,0.737,186,1.218,187,0.17,189,0.678,190,1.218,192,1.218,194,1.181,195,1.687,196,2.836,197,2.731,198,2.816,199,1.112,200,2.181,201,1.791,202,1.218,203,2.676,204,2.595,205,2.163,206,1.181,207,1.181,208,1.218,209,1.218,210,1.218,211,1.218,212,1.218,213,1.218,214,1.791,215,2.921,216,3.584,217,1.124,218,1.505,219,1.218,220,1.112,221,1.218,222,1.181,223,1.773,224,0.264,225,2.429,226,2.819,227,1.358,228,2.676,229,0.844,230,2.676,231,2.49,232,1.218,233,1.218,234,1.847,235,1.218,236,2.163,237,1.218,238,1.218,239,1.218,240,1.218,241,1.218,242,1.218,243,1.218,244,1.218,245,1.847,246,1.847,247,1.218,248,1.218,249,1.218,250,1.847,251,1.847,252,1.218,253,1.218,254,2.163,255,1.218,256,2.49,257,1.218,258,1.847,259,1.218,260,1.218,261,2.163,262,1.218,263,1.791,264,1.218,265,1.218,266,1.218,267,1.218,268,1.218,269,1.218,270,1.218,271,2.163,272,1.218,273,1.218,274,1.218,275,1.218,276,1.218,277,1.218,278,1.218,279,1.218,280,1.218,281,1.218,282,1.218,283,1.218,284,1.218,285,1.218,286,1.218,287,1.218,288,1.181,289,1.218,290,1.218,291,1.218,292,1.218,293,1.218,294,1.218,295,1.218,296,1.218,297,1.218,298,1.218,299,1.218,300,1.218,301,1.218,302,1.218,303,2.163,304,1.218,305,1.218,306,1.218,307,1.218,308,2.163,309,1.218,310,1.847,311,1.218,312,1.218,313,1.847,314,1.218,315,2.163,316,1.218,317,1.218,318,1.218,319,2.231,320,1.847,321,3.451,322,3.6,323,1.847,324,1.218,325,1.218,326,1.218,327,1.218,328,1.218,329,2.163,330,1.218,331,1.218,332,1.218,333,1.218,334,1.218,335,1.218,336,1.218,337,1.218,338,1.218,339,1.218,340,1.218,341,1.218,342,1.218,343,1.218,344,1.218,345,1.218,346,1.218,347,1.218,348,1.218,349,1.218,350,1.218,351,1.218,352,2.163,353,1.218,354,1.218,355,1.218,356,1.218,357,1.218,358,1.218,359,1.218,360,1.218,361,1.218,362,1.218,363,1.218,364,1.638,365,1.847,366,1.218,367,1.218,368,1.218,369,1.146,370,1.218,371,2.163,372,1.847,373,1.847,374,2.414,375,1.218,376,1.218,377,1.218,378,2.414,379,1.847,380,1.218,381,1.847,382,1.218,383,2.816,384,1.218,385,1.218,386,2.816,387,1.218,388,0.993,389,1.218,390,1.218,888,2.979,889,2.979]],["title/classes/LogicalOperators.html",[178,0.339,329,1.703]],["body/classes/LogicalOperators.html",[0,1.335,3,0.054,4,0.047,5,0.054,6,0.098,8,0.799,10,0.034,12,0.19,18,0.625,23,0.104,24,0.01,27,0.667,28,0.275,33,0.15,57,1.343,59,1.054,75,0.168,82,0.311,83,1.072,92,2.124,99,1.645,106,0.987,113,0.668,118,0.121,134,0.493,155,1.315,165,1.348,168,0.833,172,0.171,176,0.005,177,0.005,178,0.657,179,2.041,180,0.131,181,1.044,182,0.686,186,1.109,187,0.288,189,1.148,190,1.109,192,1.109,194,1.075,195,1.57,196,2.753,197,2.632,198,2.714,199,1.013,200,2.091,201,1.667,202,1.109,203,2.566,204,3.213,205,2.041,206,1.075,207,1.075,208,1.109,209,1.109,210,1.109,211,1.109,212,1.109,213,1.109,214,1.667,215,2.855,216,3.601,217,1.046,218,1.401,219,1.109,220,1.013,221,1.109,222,1.075,223,1.688,224,0.249,225,2.369,226,2.744,227,1.281,228,2.566,229,0.769,230,2.566,231,2.371,232,1.109,233,1.109,234,1.719,235,1.109,236,2.041,237,1.109,238,1.109,239,1.109,240,1.109,241,1.109,242,1.109,243,1.109,244,1.109,245,1.719,246,1.719,247,1.109,248,1.109,249,1.109,250,1.719,251,1.719,252,1.109,253,1.109,254,2.041,255,1.109,256,2.371,257,1.109,258,1.719,259,1.109,260,1.109,261,2.041,262,1.109,263,1.667,264,1.109,265,1.109,266,1.109,267,1.109,268,1.109,269,1.109,270,1.109,271,2.041,272,1.109,273,1.109,274,1.109,275,1.109,276,1.109,277,1.109,278,1.109,279,1.109,280,1.109,281,1.109,282,1.109,283,1.109,284,1.109,285,1.109,286,1.109,287,1.109,288,1.075,289,1.109,290,1.109,291,1.109,292,1.109,293,1.109,294,1.109,295,1.109,296,1.109,297,1.109,298,1.109,299,1.109,300,1.109,301,1.109,302,1.109,303,2.041,304,1.109,305,1.109,306,1.109,307,1.109,308,2.041,309,1.109,310,1.719,311,1.109,312,1.109,313,1.719,314,1.109,315,2.041,316,1.109,317,1.109,318,1.109,319,2.105,320,1.719,321,3.532,322,3.657,323,1.719,324,1.109,325,1.109,326,1.109,327,1.109,328,1.109,329,2.299,330,1.719,331,1.109,332,1.719,333,1.109,334,1.719,335,1.109,336,1.719,337,1.109,338,1.719,339,1.109,340,1.719,341,1.109,342,1.719,343,1.109,344,1.719,345,1.109,346,1.719,347,1.109,348,1.719,349,1.109,350,1.719,351,1.109,352,2.041,353,1.109,354,1.109,355,1.109,356,1.109,357,1.109,358,1.109,359,1.109,360,1.109,361,1.109,362,1.109,363,1.109,364,1.525,365,1.719,366,1.109,367,1.109,368,1.109,369,1.044,370,1.109,371,2.041,372,1.719,373,1.719,374,1.667,375,1.109,376,1.109,377,1.109,378,2.041,379,1.109,380,1.109,381,1.109,382,1.109,383,2.714,384,1.109,385,1.109,386,2.714,387,1.109,388,0.904,389,1.109,390,1.109,398,1.053,890,4.207,891,4.207,892,4.207,893,4.207,894,4.207,895,4.207,896,2.714,897,2.714,898,2.714,899,2.714,900,2.714,901,2.714,902,2.714,903,2.714,904,2.714,905,2.714,906,2.714]],["title/classes/Navigation.html",[155,1.097,178,0.339]],["body/classes/Navigation.html",[0,1.393,3,0.059,4,0.051,5,0.059,6,0.082,8,0.834,10,0.037,12,0.111,18,0.678,23,0.095,24,0.01,27,0.652,28,0.293,33,0.152,57,1.351,59,1.089,75,0.17,82,0.338,83,1.075,92,2.219,99,1.661,106,1.039,113,0.961,118,0.103,134,0.535,155,1.546,165,1.354,168,0.904,172,0.1,176,0.005,177,0.005,178,0.665,179,2.147,180,0.142,181,1.132,182,0.731,186,1.203,187,0.228,189,0.672,190,1.203,192,1.203,194,1.167,195,1.672,196,2.952,197,2.826,198,2.914,199,1.099,200,2.448,201,1.774,202,1.203,203,2.662,204,2.581,205,2.147,206,1.167,207,1.167,208,1.203,209,1.203,210,1.203,211,1.203,212,1.203,213,1.203,214,2.399,215,2.954,216,3.582,217,1.114,218,1.492,219,1.203,220,1.099,221,1.203,222,1.167,223,1.895,224,0.293,225,2.421,226,2.81,227,1.348,228,2.662,229,0.834,230,2.662,231,2.474,232,1.203,233,1.203,234,1.83,235,1.203,236,2.147,237,1.203,238,1.203,239,1.203,240,1.203,241,1.203,242,1.203,243,1.203,244,1.203,245,1.83,246,1.83,247,1.203,248,1.203,249,1.203,250,1.83,251,1.83,252,1.203,253,1.203,254,2.147,255,1.203,256,2.474,257,1.203,258,1.83,259,1.203,260,1.203,261,2.147,262,1.203,263,1.774,264,1.203,265,1.203,266,1.203,267,1.203,268,1.203,269,1.203,270,1.203,271,2.147,272,1.203,273,1.203,274,1.203,275,1.203,276,1.203,277,1.203,278,1.203,279,1.203,280,1.203,281,1.203,282,1.203,283,1.203,284,1.203,285,1.203,286,1.203,287,1.203,288,1.167,289,1.203,290,1.203,291,1.203,292,1.203,293,1.203,294,1.203,295,1.203,296,1.203,297,1.203,298,1.203,299,1.203,300,1.203,301,1.203,302,1.203,303,2.147,304,1.203,305,1.203,306,1.203,307,1.203,308,2.147,309,1.203,310,1.83,311,1.203,312,1.203,313,1.83,314,1.203,315,2.147,316,1.203,317,1.203,318,1.203,319,2.214,320,1.83,321,3.445,322,3.596,323,1.83,324,1.203,325,1.203,326,1.203,327,1.203,328,1.203,329,2.147,330,1.203,331,1.203,332,1.203,333,1.203,334,1.203,335,1.203,336,1.203,337,1.203,338,1.203,339,1.203,340,1.203,341,1.203,342,1.203,343,1.203,344,1.203,345,1.203,346,1.203,347,1.203,348,1.203,349,1.203,350,1.203,351,1.203,352,2.147,353,1.203,354,1.203,355,1.203,356,1.203,357,1.203,358,1.203,359,1.203,360,1.203,361,1.203,362,1.203,363,1.203,364,1.624,365,1.83,366,1.203,367,1.203,368,1.203,369,1.132,370,1.203,371,2.147,372,1.83,373,1.83,374,1.774,375,1.203,376,1.203,377,1.203,378,2.147,379,1.203,380,1.203,381,1.203,382,1.203,383,2.804,384,1.203,385,1.203,386,2.804,387,1.203,388,0.981,389,1.203,390,1.203,398,0.405,865,1.534,907,2.944,908,2.944,909,2.944,910,2.944,911,2.944]],["title/classes/ODataAnnotation.html",[178,0.339,912,2.237]],["body/classes/ODataAnnotation.html",[3,0.125,4,0.11,5,0.125,6,0.112,10,0.08,11,0.828,12,0.222,23,0.111,24,0.01,27,0.561,28,0.412,33,0.11,75,0.178,82,0.863,118,0.095,128,4.715,129,3.885,130,4.761,131,4.761,132,4.761,172,0.141,176,0.008,177,0.008,178,0.497,180,0.304,187,0.329,224,0.304,710,1.738,912,3.916,913,6.296,914,7.524,915,7.524,916,3.506,917,6.296,918,6.296,919,6.296,920,6.296,921,6.296,922,6.296,923,6.296,924,6.296]],["title/classes/ODataAnnotations.html",[178,0.339,925,2.983]],["body/classes/ODataAnnotations.html",[3,0.091,4,0.08,5,0.091,6,0.105,8,0.954,10,0.058,11,0.673,12,0.172,15,1.928,22,2.565,23,0.111,24,0.01,26,3.337,28,0.402,29,4.025,30,3.481,33,0.129,45,1.162,46,2.128,51,3.125,52,2.514,58,1.991,68,1.991,69,1.991,70,2.058,75,0.172,83,1.07,99,1.384,113,1.263,118,0.129,135,2.375,165,1.04,172,0.165,176,0.007,177,0.007,178,0.585,180,0.221,182,1.002,187,0.306,189,1.04,217,1.724,224,0.297,225,1.936,388,2.045,398,0.629,467,3.223,710,1.262,762,3.814,865,2.103,916,2.13,925,5.646,926,3.389,927,4.599,928,4.603,929,4.571,930,4.102,931,4.853,932,4.571,933,4.571,934,4.552,935,4.571,936,4.571,937,5.732,938,4.571,939,4.571,940,4.571,941,4.571,942,4.571,943,3.389,944,3.389,945,3.389,946,3.389,947,2.207,948,4.54,949,5.14,950,3.23,951,4.812,952,3.389,953,4.54,954,3.389,955,2.839,956,3.389,957,3.389,958,3.389,959,3.389,960,3.389,961,3.389,962,4.552,963,4.552,964,3.389,965,3.389,966,3.389,967,3.389,968,3.389,969,3.389,970,3.389,971,3.389,972,3.389,973,5.14,974,3.389,975,3.389,976,3.389,977,4.552,978,5.902,979,4.552,980,4.552,981,4.552,982,4.54,983,3.389,984,3.389,985,3.389,986,3.389,987,3.389,988,3.389,989,3.843,990,5.14,991,3.389,992,4.552,993,3.389,994,3.389,995,3.389]],["title/classes/ODataApiOptions.html",[178,0.339,996,3.441]],["body/classes/ODataApiOptions.html",[1,4.28,3,0.088,4,0.078,5,0.088,6,0.11,9,2.36,10,0.056,11,0.585,12,0.207,13,3.987,14,3.706,15,2.883,16,3.956,17,3.569,18,1.763,19,3.706,20,3.867,21,3.559,22,2.416,23,0.111,24,0.01,25,3.301,26,3.3,27,0.633,28,0.448,30,3.449,33,0.105,34,3.671,38,2.389,41,2.411,48,2.186,51,2.883,57,0.668,71,2.228,72,3.813,73,3.972,74,2.008,75,0.165,76,2.411,77,2.411,78,2.316,79,3.867,80,3.867,81,2.411,82,0.51,83,0.809,84,2.228,85,2.516,86,2.228,87,3.091,97,3.667,98,2.714,104,2.91,118,0.067,119,2.479,172,0.099,176,0.007,177,0.007,178,0.476,180,0.215,187,0.324,223,1.989,224,0.215,227,1.499,710,1.228,713,2.003,812,4.469,865,2.065,996,4.826,997,3.913,998,3.301,999,4.448,1000,2.073,1001,4.448,1002,5.303,1003,4.469,1004,4.145,1005,4.448,1006,6.448,1007,3.267,1008,4.448,1009,4.448,1010,4.826,1011,4.469,1012,4.448,1013,6.448,1014,6.448,1015,4.448,1016,4.448,1017,4.448,1018,4.448,1019,5.303,1020,4.184,1021,4.448,1022,4.448,1023,4.184,1024,5.303,1025,3.561,1026,4.448,1027,5.303,1028,5.303,1029,5.474,1030,3.561,1031,6.466,1032,7.105,1033,3.913,1034,3.138,1035,3.913,1036,3.913,1037,6.948,1038,6.948,1039,6.948,1040,6.948,1041,6.948,1042,6.948,1043,6.948,1044,3.913,1045,3.913,1046,3.913,1047,3.913,1048,3.913,1049,3.913,1050,4.826,1051,4.826,1052,4.826,1053,3.913,1054,3.913,1055,3.561,1056,3.913,1057,3.561,1058,3.913,1059,3.913,1060,3.913,1061,3.561,1062,3.913,1063,3.561,1064,3.913,1065,3.913,1066,3.913,1067,3.913,1068,3.913,1069,3.913,1070,3.913,1071,4.826,1072,2.411]],["title/classes/ODataBaseService.html",[178,0.339,1073,2.983]],["body/classes/ODataBaseService.html",[3,0.071,4,0.063,5,0.071,6,0.108,9,2.69,10,0.045,12,0.208,18,1.991,23,0.112,24,0.01,28,0.399,31,3.843,32,1.671,33,0.063,43,4.402,54,2.093,57,0.913,75,0.146,83,0.789,118,0.128,119,2.207,138,3.98,167,3.914,172,0.197,176,0.006,177,0.006,178,0.283,180,0.173,182,0.846,187,0.317,189,1.248,217,2.206,224,0.251,225,2.839,398,1.123,467,1.421,489,3.712,865,1.775,1073,3.598,1074,3.586,1075,6.259,1076,6.259,1077,5.88,1078,3.169,1079,3.155,1080,4.944,1081,5.355,1082,3.586,1083,4.873,1084,5.245,1085,4.658,1086,6.297,1087,5.91,1088,6.238,1089,3.586,1090,4.765,1091,3.586,1092,3.586,1093,3.586,1094,3.586,1095,5.245,1096,6.297,1097,3.586,1098,3.586,1099,3.586,1100,3.586,1101,3.586,1102,4.513,1103,5.59,1104,3.586,1105,3.781,1106,3.586,1107,3.586,1108,2.489,1109,3.586,1110,2.659,1111,2.489,1112,2.871,1113,1.943,1114,3.586,1115,6.087,1116,6.087,1117,5.183,1118,3.586]],["title/classes/ODataBatchRequest.html",[178,0.339,1119,3.781]],["body/classes/ODataBatchRequest.html",[3,0.073,4,0.064,5,0.073,6,0.094,8,0.849,9,2.287,10,0.09,11,0.512,12,0.153,13,2.742,17,3.649,18,0.844,21,1.909,22,2.125,23,0.099,24,0.01,28,0.542,31,2.935,32,1.709,33,0.092,45,0.883,46,1.126,47,1.651,49,1.709,50,4.322,74,1.755,75,0.172,82,0.773,83,0.944,97,3.606,98,3.213,102,3.253,106,1.613,111,1.533,113,1.069,114,1.597,118,0.093,123,4.026,152,1.126,163,3.715,165,1.197,166,1.709,170,2.979,172,0.138,175,1.651,176,0.006,177,0.006,178,0.416,180,0.177,182,0.859,187,0.268,189,1.011,199,2.515,217,2.14,224,0.177,404,2.278,411,2.936,445,1.33,578,1.988,709,1.651,710,1.012,712,4.217,713,1.651,718,4.57,830,3.209,846,3.117,927,2.074,930,3.648,947,2.976,1004,2.074,1020,4.677,1023,2.546,1078,3.209,1085,3.209,1087,2.401,1119,6.278,1120,3.667,1121,5.423,1122,5.268,1123,5.268,1124,3.667,1125,4.328,1126,3.667,1127,3.667,1128,5.268,1129,5.912,1130,3.667,1131,5.268,1132,5.268,1133,3.667,1134,3.667,1135,5.268,1136,4.634,1137,3.667,1138,4.634,1139,3.667,1140,3.667,1141,3.667,1142,3.667,1143,4.935,1144,5.268,1145,5.268,1146,5.268,1147,3.667,1148,3.667,1149,5.268,1150,3.667,1151,5.423,1152,5.394,1153,3.226,1154,2.546,1155,3.226,1156,3.905,1157,3.905,1158,3.657,1159,3.905,1160,3.117,1161,3.667,1162,3.667,1163,3.667,1164,2.719,1165,2.546,1166,3.667,1167,3.667,1168,4.201,1169,6.738,1170,3.667,1171,4.634,1172,2.278,1173,5.268,1174,5.268,1175,2.278,1176,3.667,1177,3.667,1178,2.936,1179,5.268,1180,6.738,1181,6.164,1182,1.771,1183,2.519,1184,3.667,1185,6.738,1186,4.57,1187,5.268,1188,6.164,1189,3.667,1190,3.667,1191,3.667,1192,3.667,1193,3.667,1194,3.667,1195,3.667,1196,4.634,1197,3.667,1198,3.667,1199,3.667,1200,3.667,1201,3.667,1202,3.226,1203,3.667,1204,2.936,1205,3.667,1206,3.667,1207,5.947,1208,3.667,1209,3.667,1210,2.936,1211,3.667,1212,3.45,1213,3.667,1214,3.667,1215,3.667,1216,3.667,1217,6.164,1218,5.268,1219,3.226,1220,3.226,1221,5.268,1222,6.164,1223,5.268,1224,6.164,1225,3.226,1226,3.45,1227,3.226,1228,3.905,1229,3.667,1230,3.667,1231,3.667,1232,4.634,1233,3.667,1234,3.667,1235,4.634,1236,3.667,1237,3.667,1238,3.667,1239,5.268,1240,3.667,1241,2.936,1242,3.667,1243,5.268,1244,5.268,1245,3.226,1246,3.667,1247,3.667,1248,3.667,1249,3.667,1250,3.667,1251,3.667,1252,3.667,1253,3.667,1254,5.268,1255,7.974,1256,5.268,1257,6.738,1258,7.136,1259,3.667,1260,7.136,1261,6.738,1262,5.268,1263,3.667,1264,3.667,1265,3.667,1266,6.164,1267,3.667,1268,3.667,1269,3.667,1270,3.667,1271,2.546,1272,3.667,1273,3.667,1274,3.667,1275,3.667,1276,3.667,1277,3.226,1278,3.667,1279,3.667,1280,3.667,1281,3.667,1282,3.667,1283,3.667,1284,3.667,1285,3.667,1286,3.667,1287,3.667,1288,3.667,1289,3.667,1290,3.667]],["title/classes/ODataCache.html",[178,0.339,1291,2.814]],["body/classes/ODataCache.html",[0,0.821,3,0.071,4,0.062,5,0.071,6,0.109,10,0.045,11,0.501,12,0.208,22,2.536,23,0.112,24,0.01,27,0.266,28,0.462,31,3.697,32,1.662,33,0.09,38,3.187,39,1.722,40,3.463,46,2.259,47,1.606,49,1.662,57,0.911,75,0.174,82,0.871,83,0.984,97,1.554,99,1.537,106,1.579,109,3.802,111,2.054,113,1.293,118,0.131,119,2.2,152,2.259,165,0.775,172,0.19,176,0.006,177,0.006,178,0.281,180,0.172,182,0.842,187,0.321,189,1.257,223,1.502,224,0.25,227,0.887,404,3.77,467,3.007,710,0.984,713,1.606,717,5.24,830,2.688,930,2.11,1011,5.762,1090,2.11,1105,2.215,1113,1.933,1125,4.907,1160,4.759,1168,4.938,1182,1.722,1183,1.457,1204,4.133,1207,4.858,1212,2.336,1226,5.267,1291,3.381,1292,3.138,1293,5.233,1294,5.815,1295,4.499,1296,4.133,1297,4.617,1298,4.499,1299,4.133,1300,4.499,1301,4.499,1302,4.133,1303,4.133,1304,4.133,1305,5.583,1306,2.476,1307,5.163,1308,2.897,1309,3.566,1310,2.855,1311,3.566,1312,4.819,1313,3.828,1314,3.566,1315,1.787,1316,3.566,1317,2.855,1318,3.566,1319,3.584,1320,3.566,1321,3.584,1322,3.566,1323,2.855,1324,3.566,1325,2.855,1326,3.566,1327,2.855,1328,3.566,1329,3.828,1330,3.566,1331,5.233,1332,2.855,1333,3.566,1334,3.584,1335,3.566,1336,3.828,1337,3.566,1338,3.828,1339,3.566,1340,3.138,1341,4.542,1342,2.855,1343,3.138,1344,3.138,1345,2.855,1346,4.542,1347,4.542,1348,3.828,1349,3.138,1350,3.138,1351,3.138,1352,3.463,1353,2.855,1354,2.855,1355,2.855,1356,3.138,1357,4.542,1358,3.138,1359,3.138,1360,3.138,1361,3.138,1362,3.138,1363,3.138,1364,3.138,1365,3.138,1366,4.542,1367,3.138,1368,4.542,1369,3.138,1370,4.542,1371,3.138,1372,3.584,1373,4.542,1374,3.138,1375,3.138,1376,3.138,1377,3.138,1378,2.215,1379,3.138,1380,3.138,1381,3.138,1382,3.138,1383,3.138,1384,3.138,1385,3.138,1386,3.138,1387,3.138,1388,3.138,1389,3.138,1390,5.852,1391,3.138,1392,4.542,1393,3.138,1394,3.138,1395,3.138,1396,3.138,1397,3.138,1398,3.138,1399,3.138,1400,2.855,1401,3.138,1402,3.138,1403,3.138]],["title/interfaces/ODataCacheEntry.html",[0,0.989,1312,2.814]],["body/interfaces/ODataCacheEntry.html",[0,1.003,2,2.27,3,0.087,4,0.076,5,0.087,6,0.055,10,0.055,11,0.578,23,0.092,24,0.01,28,0.498,31,3.5,32,2.032,33,0.104,38,3.286,39,2.105,40,3.784,46,1.825,47,1.964,49,2.032,75,0.174,82,0.962,83,1.017,97,1.899,99,1.466,106,1.636,109,4.025,111,1.269,113,1.275,118,0.118,152,2.41,165,0.892,176,0.007,177,0.007,178,0.344,223,1.269,224,0.211,227,1.085,404,2.709,467,2.682,710,1.204,713,1.964,717,5.419,830,3.096,930,2.58,1011,6.063,1090,2.58,1105,2.709,1113,2.363,1125,4.544,1160,4.501,1168,4.859,1182,2.105,1183,1.782,1204,4.761,1207,5.418,1212,2.856,1226,4.432,1291,2.856,1292,3.836,1293,5.017,1294,6.029,1295,3.233,1297,3.027,1298,3.233,1300,3.233,1301,3.233,1305,5.677,1308,2.948,1312,4.76,1313,3.233,1319,3.027,1321,3.027,1329,3.233,1331,5.389,1334,3.027,1336,3.233,1338,3.233,1340,3.836,1341,5.232,1342,3.491,1343,3.836,1344,3.836,1345,3.491,1346,6.692,1347,5.232,1348,4.409,1349,3.836,1350,3.836,1351,3.836,1352,3.784,1353,3.491,1354,3.491,1355,3.491,1356,3.836,1357,5.232,1358,3.836,1359,3.836,1360,3.836,1361,3.836,1362,3.836,1363,3.836,1364,3.836,1365,3.836,1366,5.232,1367,3.836,1368,5.232,1369,3.836,1370,5.232,1371,3.836,1372,4.128,1373,5.232,1374,3.836,1375,3.836,1376,3.836,1377,3.836,1378,2.709,1379,3.836,1380,3.836,1381,3.836,1382,3.836,1383,3.836,1384,3.836,1385,3.836,1386,3.836,1387,3.836,1388,3.836,1389,3.836,1390,6.395,1391,3.836,1392,5.232,1393,3.836,1394,3.836,1395,3.836,1396,3.836,1397,3.836,1398,3.836,1399,3.836,1400,3.491,1401,3.836,1402,3.836,1403,3.836]],["title/classes/ODataCallable.html",[178,0.339,1404,3.441]],["body/classes/ODataCallable.html",[3,0.085,4,0.074,5,0.085,6,0.111,9,2.692,10,0.054,11,0.568,12,0.212,22,2.269,23,0.114,24,0.01,27,0.595,28,0.438,33,0.074,42,3.046,57,1.339,74,2.709,75,0.172,83,0.963,84,3.605,94,2.989,95,3.135,100,3.395,101,3.395,103,3.475,105,2.548,111,1.239,118,0.126,119,1.544,125,2.408,133,2.121,134,1.371,141,3.746,165,0.639,169,3.01,170,3.78,171,3.955,172,0.178,176,0.007,177,0.007,178,0.336,180,0.206,182,0.955,187,0.327,189,1.324,224,0.206,227,1.455,229,1.894,398,0.92,513,5.325,578,4.472,709,3.662,710,1.175,865,2.004,998,2.825,1000,2.726,1007,2.308,1078,3.479,1108,2.956,1404,4.684,1405,4.258,1406,3.623,1407,3.831,1408,5.104,1409,5.851,1410,4.258,1411,4.258,1412,4.258,1413,4.258,1414,5.336,1415,4.258,1416,4.258,1417,6.448,1418,2.788,1419,4.258,1420,3.171,1421,4.258,1422,5.147,1423,6.684,1424,3.9,1425,5.147,1426,5.147,1427,4.258,1428,5.147,1429,5.147,1430,3.171,1431,4.258,1432,4.684,1433,4.258,1434,3.171,1435,4.258,1436,5.147,1437,4.338,1438,3.746,1439,4.258,1440,4.684,1441,5.147,1442,4.258,1443,3.157,1444,2.217,1445,6.684,1446,4.258,1447,5.851,1448,4.258,1449,4.258,1450,4.258,1451,2.645,1452,3.746,1453,3.746,1454,4.684,1455,4.258,1456,4.258,1457,2.956,1458,3.746,1459,3.409,1460,3.746,1461,3.157,1462,4.152,1463,3.746,1464,3.746,1465,2.645,1466,2.645,1467,2.645,1468,4.258]],["title/classes/ODataCallableParser.html",[178,0.339,1414,3.186]],["body/classes/ODataCallableParser.html",[3,0.081,4,0.072,5,0.081,6,0.109,9,2.697,10,0.052,11,0.554,12,0.209,18,1.63,22,2.066,23,0.112,24,0.01,27,0.528,28,0.487,33,0.099,46,1.259,48,2.067,57,0.615,75,0.176,83,1.019,87,3.495,94,3.347,95,2.854,99,0.766,100,2.854,101,3.085,103,3.419,105,1.786,106,1.515,107,3.547,111,1.193,113,1.254,118,0.127,133,2.865,134,1.437,141,3.686,153,2.855,154,1.259,165,1.209,167,3.085,172,0.187,176,0.006,177,0.006,178,0.45,180,0.198,182,0.93,187,0.322,189,1.156,223,1.659,224,0.198,229,1.615,398,0.975,418,1.366,464,2.656,513,4.637,710,1.132,713,1.846,735,2.685,846,3.373,998,2.752,1000,1.911,1072,2.222,1090,3.373,1175,3.541,1182,1.98,1183,1.676,1308,1.786,1315,2.054,1352,3.686,1406,3.838,1407,3.733,1414,4.226,1418,2.685,1420,3.089,1430,3.089,1434,2.222,1444,2.134,1451,5.005,1462,4.623,1465,2.547,1466,2.547,1467,2.547,1469,3.607,1470,5.7,1471,4.1,1472,4.1,1473,4.1,1474,5.245,1475,4.1,1476,4.1,1477,4.1,1478,4.1,1479,4.1,1480,4.1,1481,5.015,1482,4.1,1483,4.1,1484,5.015,1485,4.1,1486,6.23,1487,3.705,1488,4.291,1489,2.846,1490,3.607,1491,2.846,1492,3.607,1493,2.846,1494,3.607,1495,5.246,1496,4.623,1497,4.909,1498,3.957,1499,3.957,1500,3.607,1501,3.607,1502,2.846,1503,2.846,1504,2.846,1505,2.846,1506,2.846,1507,3.957,1508,2.846,1509,2.846,1510,2.846,1511,2.426,1512,3.373,1513,5.015,1514,3.607,1515,5.764,1516,3.607,1517,3.607,1518,2.547,1519,2.547,1520,2.426,1521,6.23,1522,6.952,1523,5.015,1524,5.015,1525,3.607,1526,3.607,1527,3.607,1528,3.607,1529,3.607,1530,3.607]],["title/classes/ODataEntitiesAnnotations.html",[178,0.339,982,2.814]],["body/classes/ODataEntitiesAnnotations.html",[3,0.088,4,0.077,5,0.088,6,0.108,8,1.008,10,0.056,11,0.663,12,0.19,15,1.869,22,2.412,23,0.108,24,0.01,26,3.295,28,0.394,29,3.552,30,3.295,33,0.128,45,1.144,46,2.348,51,3.086,52,1.607,58,2.972,59,0.954,68,2.972,69,2.972,70,3.073,75,0.173,83,1.068,99,1.366,113,1.252,118,0.13,135,1.518,165,1.024,172,0.163,176,0.007,177,0.007,178,0.577,180,0.214,182,0.981,187,0.326,189,1.098,217,1.697,224,0.214,225,1.896,388,2.438,461,3.086,467,2.704,710,1.223,762,3.735,865,2.06,916,2.065,925,5.841,926,3.286,927,4.563,928,4.546,930,2.622,931,3.937,934,4.458,937,5.672,943,3.286,944,3.286,945,3.286,946,3.286,947,2.14,948,4.469,949,5.059,950,3.18,951,4.737,952,3.286,953,4.469,954,3.286,955,2.753,956,3.286,957,3.286,958,3.286,959,3.286,960,3.286,961,3.286,962,5.426,963,4.458,964,3.286,965,3.286,966,3.286,967,3.286,968,3.286,969,3.286,970,3.286,971,3.286,972,3.286,973,5.059,974,3.286,975,3.286,976,3.286,977,5.426,978,5.849,979,4.458,980,5.059,981,4.458,982,5.01,983,3.286,984,3.286,985,5.059,986,3.286,987,5.059,988,3.286,989,3.809,990,5.059,991,3.286,992,4.458,993,3.286,994,3.286,995,3.286,1531,4.432,1532,3.548,1533,4.432,1534,4.432,1535,4.432,1536,3.548,1537,3.899,1538,4.432,1539,4.432,1540,4.432,1541,4.432,1542,4.432,1543,4.432,1544,4.432,1545,4.432,1546,4.432,1547,4.432,1548,4.432,1549,4.432,1550,4.432,1551,3.899,1552,4.432]],["title/classes/ODataEntityAnnotations.html",[178,0.339,953,2.814]],["body/classes/ODataEntityAnnotations.html",[3,0.085,4,0.075,5,0.085,6,0.11,8,0.993,10,0.054,11,0.734,12,0.202,15,2.827,22,2.462,23,0.11,24,0.01,26,3.248,28,0.385,29,3.49,30,3.248,33,0.126,45,1.124,46,2.454,51,3.042,52,1.553,54,1.579,58,1.865,59,0.932,68,1.865,69,1.865,70,1.928,75,0.174,83,1.066,99,1.347,113,1.239,118,0.13,135,1.467,165,1.006,172,0.169,176,0.007,177,0.007,178,0.569,180,0.207,182,0.958,187,0.331,189,1.134,217,1.667,224,0.207,225,1.852,388,2.403,461,3.042,467,2.657,710,1.182,762,3.649,865,2.012,916,1.996,925,5.802,926,3.175,927,4.522,928,4.481,930,2.534,931,3.846,934,4.355,937,5.604,943,3.175,944,3.175,945,3.175,946,3.175,947,2.068,948,4.39,949,4.97,950,3.124,951,4.654,952,3.175,953,4.95,954,3.175,955,4.164,956,3.175,957,3.175,958,4.97,959,3.175,960,4.97,961,3.175,962,5.349,963,4.355,964,4.97,965,3.175,966,4.97,967,3.175,968,4.97,969,3.175,970,4.97,971,3.175,972,4.97,973,4.97,974,3.175,975,4.355,976,3.175,977,5.349,978,5.789,979,4.355,980,4.97,981,4.355,982,4.39,983,3.175,984,3.175,985,3.175,986,3.175,987,3.175,988,3.175,989,3.77,990,4.97,991,3.175,992,4.355,993,3.175,994,3.175,995,3.175,1532,3.428,1536,3.428,1537,3.768,1551,3.768,1553,4.282,1554,4.282,1555,4.282,1556,4.282,1557,4.282,1558,4.282,1559,4.282,1560,4.282,1561,4.282,1562,4.282,1563,4.282,1564,4.282,1565,4.282,1566,4.282,1567,4.282,1568,4.282,1569,4.282,1570,4.282,1571,4.282,1572,4.282,1573,4.282,1574,4.282,1575,4.282,1576,4.282,1577,4.282,1578,4.282]],["title/classes/ODataEntityContainer.html",[178,0.339,1579,3.441]],["body/classes/ODataEntityContainer.html",[3,0.113,4,0.099,5,0.113,6,0.11,10,0.072,11,0.687,12,0.176,23,0.107,24,0.01,27,0.425,28,0.527,33,0.099,59,1.222,74,1.897,75,0.141,83,0.838,111,1.657,118,0.125,135,2.638,143,4.556,144,4.174,165,1.062,172,0.158,176,0.008,177,0.008,178,0.449,180,0.275,182,1.155,187,0.322,189,1.209,224,0.275,227,1.76,229,1.614,489,3.468,490,5.01,499,5.01,500,5.01,502,5.01,503,6.227,504,3.221,545,3.856,642,5.248,709,3.929,710,1.572,865,2.424,912,4.313,916,3.589,950,2.654,989,3.417,998,3.417,1000,3.298,1078,4.009,1108,3.954,1308,3.083,1408,5.53,1424,3.087,1443,4.223,1444,2.965,1461,4.223,1579,5.666,1580,7.613,1581,4.913,1582,5.71,1583,4.003,1584,5.695,1585,3.836,1586,4.003,1587,4.366,1588,4.003,1589,5.695,1590,5.695,1591,5.695,1592,5.695,1593,4.223,1594,3.37,1595,3.221]],["title/classes/ODataEntityService.html",[178,0.339,1596,3.186]],["body/classes/ODataEntityService.html",[3,0.111,4,0.097,5,0.111,6,0.101,8,0.963,9,2.512,10,0.071,12,0.204,18,1.61,23,0.112,24,0.01,28,0.5,31,3.326,33,0.097,45,1.409,57,0.839,83,0.662,111,2.035,113,1.11,118,0.124,152,1.715,162,2.909,167,3.661,172,0.194,176,0.008,177,0.008,178,0.441,180,0.27,182,1.141,187,0.316,189,1.236,217,1.99,225,2.65,398,1.102,461,3.22,464,3.26,467,3.379,489,3.15,709,3.15,865,2.396,1073,5.834,1075,5.186,1076,5.186,1077,5.186,1084,4.144,1085,4.289,1086,5.186,1087,5.504,1088,5.834,1090,4.139,1095,4.144,1096,5.186,1102,4.144,1103,4.856,1105,3.472,1113,3.029,1159,5.661,1596,5.186,1597,5.589,1598,5.186,1599,7.635,1600,5.589,1601,6.406,1602,5.589,1603,6.154,1604,5.24,1605,5.589,1606,4.474,1607,4.474,1608,4.474,1609,5.589,1610,5.589,1611,4.474,1612,4.474,1613,5.589,1614,4.474,1615,5.589]],["title/classes/ODataEntitySet.html",[178,0.339,1582,3.186]],["body/classes/ODataEntitySet.html",[3,0.106,4,0.093,5,0.106,6,0.11,10,0.067,11,0.658,12,0.185,18,1.223,22,1.676,23,0.114,24,0.01,27,0.586,28,0.489,33,0.093,59,1.184,74,2.257,75,0.171,83,0.883,84,3.395,111,1.547,118,0.125,135,2.556,145,4.443,165,1.017,172,0.167,173,4.043,174,3.737,176,0.008,177,0.008,178,0.419,180,0.257,182,1.106,187,0.324,189,1.281,224,0.257,227,1.954,229,1.506,489,3.538,504,4.443,505,4.255,509,4.676,510,4.676,512,4.676,545,3.797,709,3.844,710,1.467,865,2.321,912,4.225,916,3.477,950,2.477,989,3.272,998,3.272,1000,2.477,1078,3.884,1108,3.69,1182,2.566,1183,2.172,1308,2.315,1315,2.663,1407,4.438,1408,5.434,1417,5.024,1423,6.29,1424,3.673,1430,3.673,1432,5.425,1443,3.941,1444,2.767,1454,4.255,1459,4.255,1461,3.941,1520,3.145,1580,7.643,1581,4.704,1582,5.024,1583,3.832,1585,3.673,1586,3.832,1587,4.258,1588,3.832,1593,3.941,1594,3.145,1595,3.006,1616,6.777,1617,5.315,1618,5.315,1619,5.315,1620,5.315,1621,5.315,1622,5.315,1623,5.315,1624,5.315,1625,5.315]],["title/classes/ODataEntitySetService.html",[178,0.339,1626,3.441]],["body/classes/ODataEntitySetService.html",[3,0.06,4,0.052,5,0.06,6,0.103,8,0.625,9,2.696,10,0.038,12,0.205,15,3.61,18,1.045,23,0.107,24,0.01,27,0.224,28,0.47,31,3.643,32,1.397,33,0.052,45,1.492,57,0.681,58,1.306,74,2.902,75,0.137,83,0.996,97,3.596,106,1.051,111,2.01,113,1.139,114,1.306,118,0.124,119,1.646,138,3.654,152,2.714,164,4.181,167,3.01,172,0.19,174,3.461,175,1.35,176,0.005,177,0.005,178,0.237,180,0.145,182,0.741,187,0.314,189,1.247,217,1.52,225,2.179,398,1.079,461,2.769,489,4.085,504,4.822,505,2.401,709,2.957,762,4.792,865,1.555,947,3.836,1073,3.804,1075,3.367,1076,3.367,1077,3.367,1084,2.223,1085,3.939,1086,3.367,1087,4.525,1088,4.796,1090,2.687,1095,2.223,1096,3.367,1102,2.223,1103,3.152,1105,1.863,1110,2.223,1111,2.082,1113,1.625,1151,3.995,1154,2.082,1157,6.02,1168,3.099,1172,2.821,1175,2.821,1271,3.152,1342,3.635,1345,2.401,1424,4.248,1457,3.152,1596,4.869,1598,5.719,1601,4.893,1603,3.995,1604,5.507,1606,2.401,1607,2.401,1608,2.401,1611,3.635,1612,2.401,1614,2.401,1626,3.635,1627,8.119,1628,4.564,1629,4.821,1630,3.995,1631,5.48,1632,5.48,1633,5.48,1634,4.292,1635,6.567,1636,4.373,1637,5.48,1638,5.377,1639,2.999,1640,3.995,1641,4.893,1642,2.999,1643,2.999,1644,2.999,1645,6.557,1646,2.999,1647,5.867,1648,2.999,1649,2.999,1650,2.999,1651,4.387,1652,2.999,1653,4.821,1654,4.541,1655,2.999,1656,2.999,1657,2.999,1658,2.999,1659,2.999,1660,2.999,1661,2.999,1662,2.999,1663,2.999,1664,2.999,1665,2.999,1666,2.999,1667,2.999,1668,2.999,1669,2.999,1670,4.541,1671,2.999,1672,2.999,1673,2.999,1674,2.999,1675,2.638,1676,2.999,1677,2.999,1678,2.999,1679,2.638,1680,2.999,1681,3.995,1682,2.999,1683,2.999,1684,2.999,1685,5.48,1686,5.48,1687,5.48,1688,4.243,1689,2.638,1690,2.638,1691,2.999,1692,2.999,1693,2.999,1694,2.638,1695,2.999,1696,2.999,1697,2.999,1698,4.541,1699,2.999,1700,2.999,1701,2.999,1702,2.999,1703,2.999,1704,2.999,1705,2.999,1706,2.999,1707,2.999,1708,2.999,1709,2.999,1710,2.999]],["title/classes/ODataEntityTypeKey.html",[178,0.339,1711,3.186]],["body/classes/ODataEntityTypeKey.html",[3,0.047,4,0.041,5,0.047,6,0.068,9,2.572,10,0.03,11,0.459,12,0.117,22,1.196,23,0.104,24,0.01,27,0.56,28,0.432,33,0.103,46,1.656,48,1.375,54,1.451,57,1.27,59,0.378,61,1.003,62,1.599,74,0.792,75,0.172,82,0.676,83,1.021,87,2.974,91,2.809,92,2.07,93,2.462,94,3.063,95,1.652,99,1.424,100,1.652,101,1.652,105,1.652,106,1.563,107,2.369,113,1.395,114,2.35,118,0.124,119,0.863,121,1.9,133,1.715,134,1.282,135,0.815,139,1.974,149,3.405,151,0.75,152,0.73,153,1.192,154,0.73,155,1.884,156,0.75,157,0.75,158,1.289,159,2.35,160,1.289,162,1.238,163,1.238,165,1.127,166,1.109,167,2.736,168,2.023,172,0.053,175,2.43,176,0.004,177,0.004,178,0.426,180,0.115,187,0.178,189,0.569,200,0.792,217,1.562,218,1.797,220,1.765,223,1.104,224,0.285,227,0.943,229,1.78,464,2.747,465,1.109,545,2.13,686,2.812,709,3.558,710,1.047,713,1.071,735,1.558,830,3.43,846,2.244,848,1.764,861,1.478,862,1.764,912,2.462,916,1.767,947,3.564,950,1.109,955,1.478,989,2.846,1000,2.204,1007,3.404,1034,2.462,1072,1.289,1165,1.651,1172,1.478,1175,4.093,1182,2.283,1183,2.567,1306,1.651,1308,2.06,1315,1.192,1352,3.27,1378,1.478,1406,2.056,1420,2.563,1430,1.289,1434,2.563,1444,1.238,1451,4.738,1462,3.661,1465,1.478,1466,1.478,1467,1.478,1487,3.051,1488,5.339,1489,4.749,1491,3.283,1493,3.283,1495,4.993,1496,3.901,1497,4.25,1498,3.283,1499,2.633,1502,1.651,1503,2.633,1504,1.651,1505,1.651,1506,2.633,1507,2.633,1508,1.651,1509,2.633,1510,1.651,1511,1.408,1512,2.798,1518,2.356,1519,1.478,1520,1.408,1583,1.345,1585,1.289,1586,1.345,1587,2.924,1588,1.345,1594,1.408,1595,1.345,1628,3.488,1634,2.938,1636,2.244,1647,1.651,1688,1.651,1711,3.506,1712,4,1713,3.793,1714,2.379,1715,1.238,1716,4.32,1717,1.651,1718,1.478,1719,1.651,1720,2.812,1721,2.484,1722,2.812,1723,5.028,1724,2.812,1725,4,1726,2.812,1727,1.905,1728,3.036,1729,2.812,1730,1.905,1731,1.905,1732,3.786,1733,1.905,1734,3.036,1735,1.651,1736,1.905,1737,1.905,1738,1.905,1739,4.719,1740,1.905,1741,4.719,1742,1.905,1743,3.036,1744,3.036,1745,3.036,1746,3.036,1747,1.905,1748,1.905,1749,1.905,1750,1.905,1751,2.633,1752,5.477,1753,1.905,1754,1.905,1755,1.905,1756,1.905,1757,1.905,1758,1.905,1759,1.905,1760,1.905,1761,1.905,1762,3.036,1763,3.036,1764,3.036,1765,3.036,1766,2.812,1767,1.905,1768,3.036,1769,4.25,1770,1.905,1771,1.905,1772,3.036,1773,1.905,1774,1.905,1775,1.905,1776,3.036,1777,1.905,1778,2.356,1779,3.036,1780,3.036,1781,3.036,1782,3.036,1783,3.036,1784,3.036,1785,1.905,1786,5.028,1787,3.786,1788,1.905,1789,4.37,1790,4.37,1791,1.764,1792,3.506,1793,1.905,1794,1.905,1795,1.905,1796,1.905,1797,1.905,1798,1.905,1799,1.905,1800,1.905,1801,1.905,1802,1.905,1803,1.905,1804,1.905,1805,1.905,1806,1.905,1807,1.905,1808,1.905,1809,1.905,1810,1.905,1811,1.905,1812,1.905,1813,1.905,1814,1.905,1815,3.786,1816,3.036,1817,1.905,1818,1.905,1819,1.905,1820,1.905,1821,3.036,1822,1.905,1823,1.905,1824,1.651,1825,1.905,1826,1.905,1827,1.905,1828,1.905,1829,1.905,1830,4.995,1831,4.32,1832,1.905,1833,1.905,1834,1.905,1835,1.905,1836,1.905,1837,1.905,1838,2.812,1839,1.905,1840,1.905,1841,1.905,1842,4.32,1843,4.749,1844,3.036,1845,3.036,1846,1.905,1847,1.905,1848,4.32,1849,1.905,1850,1.905,1851,1.905,1852,1.905,1853,1.905,1854,1.905,1855,1.905,1856,1.905,1857,1.905,1858,1.905,1859,1.905,1860,1.905,1861,1.764,1862,1.905,1863,1.905,1864,1.905,1865,1.905,1866,1.764,1867,1.905,1868,1.905,1869,1.905,1870,1.905,1871,1.905,1872,3.036,1873,3.036,1874,1.905,1875,1.905,1876,1.764,1877,1.905,1878,1.905,1879,1.905,1880,1.905,1881,3.036,1882,4.719,1883,1.905,1884,1.905,1885,3.036,1886,1.905,1887,3.036,1888,1.905,1889,3.036,1890,1.905,1891,1.651,1892,1.651,1893,3.036,1894,1.905,1895,3.036,1896,1.905,1897,1.905,1898,1.905,1899,1.905,1900,1.905,1901,3.786,1902,1.905,1903,1.905]],["title/classes/ODataEnumType.html",[178,0.339,1904,3.441]],["body/classes/ODataEnumType.html",[3,0.068,4,0.059,5,0.068,6,0.109,9,2.649,10,0.043,11,0.485,12,0.2,22,2.052,23,0.115,24,0.01,27,0.485,28,0.426,33,0.059,42,2.599,48,3.09,57,1.353,59,1.149,74,2.769,75,0.169,82,0.898,83,0.998,84,3.26,92,2.232,94,2.342,95,2.835,99,0.932,100,3.154,101,3.154,105,2.175,106,0.957,111,1.72,113,1.033,118,0.132,119,1.235,125,1.926,133,1.81,134,1.26,135,2.374,137,3.388,148,2.961,149,3.94,165,0.977,172,0.182,176,0.006,177,0.006,178,0.269,180,0.165,182,0.815,187,0.322,189,1.328,218,1.135,224,0.165,227,1.619,229,0.965,263,2.965,398,0.896,465,1.587,518,2.727,519,2.727,545,3.633,558,2.727,600,2.996,654,2.996,655,4.392,656,2.996,709,3.455,710,0.94,865,1.71,912,3.607,916,2.754,950,1.587,989,2.41,998,2.41,1000,2.326,1007,1.846,1078,3.077,1108,2.364,1308,2.574,1406,3.527,1407,3.269,1408,4.742,1417,3.701,1420,2.706,1422,4.392,1423,6.747,1424,4.243,1425,4.392,1426,4.392,1428,4.392,1429,4.392,1430,2.706,1432,3.997,1434,2.706,1436,4.392,1437,3.701,1438,2.996,1440,3.997,1441,4.392,1443,2.525,1444,1.773,1451,2.116,1452,2.996,1453,2.996,1454,2.727,1457,4.103,1458,2.996,1459,2.727,1460,2.996,1461,2.525,1463,2.996,1464,2.996,1465,2.116,1466,2.116,1467,2.116,1487,3.681,1581,3.466,1583,2.823,1585,4.313,1586,2.823,1587,3.527,1588,3.681,1593,2.525,1594,2.015,1595,1.926,1778,3.101,1830,2.23,1866,2.525,1904,3.997,1905,8.597,1906,4.992,1907,4.992,1908,4.992,1909,4.992,1910,3.406,1911,6.143,1912,3.406,1913,3.406,1914,5.369,1915,4.992,1916,5.91,1917,3.406,1918,4.992,1919,3.406,1920,4.992,1921,3.406,1922,4.992,1923,2.996,1924,2.996,1925,4.992,1926,3.406,1927,6.508,1928,4.992,1929,4.992,1930,3.406,1931,3.406,1932,2.727,1933,2.727,1934,3.406,1935,4.992,1936,3.406,1937,3.406,1938,3.406,1939,3.406,1940,4.992,1941,3.406,1942,3.406,1943,3.406]],["title/classes/ODataEnumTypeFieldParser.html",[178,0.339,1914,3.186]],["body/classes/ODataEnumTypeFieldParser.html",[3,0.09,4,0.079,5,0.09,6,0.101,9,2.596,10,0.057,11,0.593,12,0.151,23,0.101,24,0.01,27,0.515,28,0.505,33,0.106,48,2.503,54,1.642,57,1.218,59,1.096,74,1.51,75,0.177,82,0.946,83,1,87,3.115,92,2.02,94,2.419,95,1.974,99,1.289,100,1.974,101,1.974,105,1.974,106,1.522,111,1.319,113,1.26,118,0.129,133,2.503,134,1.255,135,2.365,136,2.457,137,3.178,146,4.003,147,2.563,148,3.058,149,2.188,150,4.003,155,1.558,165,1.157,172,0.136,176,0.007,177,0.007,178,0.482,180,0.219,182,0.996,187,0.29,189,1.108,223,1.319,224,0.219,227,1.518,229,1.956,369,1.743,418,2.034,465,2.112,545,3.576,709,2.041,710,1.251,830,2.36,912,4.013,916,3.217,947,2.948,950,2.112,989,2.948,998,2.188,1007,2.457,1034,2.36,1072,2.457,1182,2.188,1183,1.852,1308,1.974,1315,3.058,1352,3.178,1406,2.457,1420,2.457,1424,2.457,1430,2.457,1434,2.457,1437,3.361,1444,2.36,1487,2.563,1495,4.588,1496,4.288,1497,4.588,1511,2.682,1512,3.612,1518,2.816,1519,2.816,1520,2.682,1581,4.238,1583,3.452,1585,3.309,1586,3.452,1587,4.003,1588,3.452,1594,2.682,1595,2.563,1628,2.682,1634,2.816,1636,2.682,1715,2.36,1717,3.146,1718,2.816,1719,3.146,1735,3.146,1751,3.146,1769,3.792,1778,2.816,1824,3.146,1830,2.968,1843,4.238,1914,5.118,1932,5.526,1933,3.629,1944,6.986,1945,6.105,1946,4.533,1947,4.533,1948,4.533,1949,3.988,1950,6.498,1951,3.988,1952,3.988,1953,3.988,1954,5.371,1955,3.988,1956,3.988,1957,3.988,1958,6.073,1959,3.988,1960,3.988,1961,3.988,1962,3.988,1963,3.988,1964,3.988,1965,3.988,1966,3.629,1967,3.988,1968,3.988,1969,3.988,1970,5.371]],["title/classes/ODataEnumTypeParser.html",[178,0.339,1487,2.431]],["body/classes/ODataEnumTypeParser.html",[3,0.08,4,0.07,5,0.08,6,0.109,9,2.658,10,0.051,11,0.547,12,0.21,22,2.416,23,0.112,24,0.01,27,0.551,28,0.484,33,0.098,48,2.041,54,1.514,57,1.223,59,0.639,74,1.342,75,0.179,82,0.935,83,0.977,87,3.316,92,1.475,94,2.572,95,2.827,99,1.498,100,2.827,101,2.827,105,2.452,106,1.469,111,1.172,113,1.273,118,0.13,119,1.461,133,2.851,134,1.43,135,1.38,136,2.183,137,3.658,146,3.051,147,3.671,148,3.52,149,3.134,150,4.007,155,1.437,165,1.11,172,0.176,176,0.006,177,0.006,178,0.444,180,0.195,182,0.919,187,0.323,189,1.223,223,1.638,224,0.195,227,1.002,229,1.839,369,1.549,398,0.968,418,1.342,465,1.877,515,3.544,545,2.923,709,1.814,710,1.112,830,2.097,912,3.379,916,2.624,947,2.718,950,1.877,989,1.945,998,2.718,1000,1.877,1007,2.183,1034,2.097,1072,2.183,1182,1.945,1183,1.646,1308,1.755,1315,2.82,1352,2.931,1406,3.518,1407,3.687,1418,2.638,1420,3.051,1430,3.051,1434,3.051,1437,2.987,1444,2.097,1487,3.184,1495,4.365,1496,4.032,1497,4.365,1511,2.384,1512,3.331,1518,2.502,1519,2.502,1520,2.384,1583,2.278,1585,2.183,1586,2.278,1587,3.051,1588,2.278,1594,2.384,1595,2.278,1628,2.384,1634,2.502,1636,2.384,1715,2.097,1717,2.796,1718,2.502,1719,2.796,1735,2.796,1751,4.505,1769,3.497,1778,2.502,1824,2.796,1830,2.638,1843,3.908,1914,4.812,1923,3.544,1924,3.544,1932,5.196,1933,3.225,1944,7.596,1949,3.544,1950,6.182,1951,3.544,1952,3.544,1953,3.544,1954,4.953,1955,3.544,1956,3.544,1957,3.544,1958,5.71,1959,3.544,1960,3.544,1961,3.544,1962,3.544,1963,3.544,1964,3.544,1965,3.544,1966,5.626,1967,3.544,1968,3.544,1969,3.544,1970,4.953,1971,5.63,1972,4.028,1973,4.028,1974,4.028,1975,4.028,1976,4.028,1977,4.028,1978,4.028,1979,4.028,1980,4.028,1981,4.028,1982,4.028]],["title/classes/ODataInMemoryCache.html",[178,0.339,1983,3.781]],["body/classes/ODataInMemoryCache.html",[3,0.094,4,0.082,5,0.094,6,0.08,8,0.864,10,0.06,11,0.61,12,0.217,22,2.685,23,0.115,24,0.01,27,0.352,28,0.411,31,3.672,33,0.082,38,1.873,46,2.305,57,1.058,75,0.168,82,0.72,83,0.559,99,1.555,109,3.531,111,2.186,113,1.241,118,0.132,119,2.556,172,0.197,176,0.007,177,0.007,178,0.373,180,0.229,182,1.024,187,0.332,189,1.311,224,0.304,404,3.9,461,3.715,717,4.666,1113,2.562,1125,4.998,1160,4.928,1164,3.504,1168,4.916,1182,3.404,1226,5.371,1291,5.821,1293,4.655,1294,5.579,1295,4.655,1296,5.026,1297,4.894,1298,4.655,1299,5.026,1300,4.655,1301,4.655,1302,5.026,1303,5.026,1304,5.026,1305,5.579,1306,3.281,1308,2.059,1310,3.784,1312,4.616,1313,3.504,1315,2.368,1317,3.784,1319,3.281,1321,4.358,1323,3.784,1325,3.784,1327,3.784,1329,3.504,1331,3.504,1332,3.784,1334,4.358,1336,3.504,1338,3.504,1983,5.523,1984,4.726,1985,4.726,1986,4.158,1987,4.158,1988,4.726,1989,4.726,1990,4.158,1991,4.158,1992,4.726,1993,4.158,1994,4.158,1995,4.158,1996,4.158,1997,4.158,1998,4.158,1999,4.158,2000,4.158,2001,4.158,2002,5.026,2003,3.784,2004,3.784,2005,3.784,2006,3.784]],["title/classes/ODataInStorageCache.html",[178,0.339,2007,3.441]],["body/classes/ODataInStorageCache.html",[0,0.999,3,0.086,4,0.076,5,0.086,6,0.099,8,0.816,10,0.055,11,0.576,12,0.214,17,2.023,22,2.643,23,0.114,24,0.01,27,0.324,28,0.388,31,3.609,33,0.076,38,1.72,46,2.227,47,3.267,57,1.013,75,0.174,82,0.774,83,0.514,98,1.955,99,1.525,102,2.096,106,1.391,109,3.382,111,2.281,113,1.274,118,0.134,119,2.448,165,0.652,172,0.195,176,0.007,177,0.007,178,0.343,180,0.21,182,0.967,187,0.333,189,1.308,217,1.475,224,0.287,229,1.68,404,3.683,461,3.677,717,4.507,928,4.194,1113,2.353,1125,4.95,1129,3.219,1160,4.834,1164,3.219,1168,4.823,1186,3.219,1226,5.255,1241,5.809,1291,5.771,1293,4.396,1294,5.443,1295,4.396,1296,4.747,1297,5.037,1298,4.396,1299,4.747,1300,4.396,1301,4.396,1302,4.747,1303,4.747,1304,4.747,1305,5.443,1306,3.014,1308,2.583,1310,3.476,1312,4.751,1313,3.219,1315,2.175,1317,3.476,1319,3.014,1321,4.116,1323,3.476,1325,3.476,1327,3.476,1329,3.219,1331,3.219,1332,3.476,1334,4.116,1336,3.219,1338,3.219,1348,3.219,1986,3.82,1987,3.82,1990,5.216,1991,3.82,1993,3.82,1994,3.82,1995,3.82,1996,3.82,1997,3.82,1998,3.82,1999,3.82,2000,3.82,2001,3.82,2002,4.747,2003,3.476,2004,3.476,2005,3.476,2006,3.476,2007,4.747,2008,3.82,2009,7.289,2010,5.929,2011,4.342,2012,4.342,2013,4.342,2014,4.342,2015,4.342,2016,3.476,2017,3.82,2018,3.82,2019,3.82,2020,3.82,2021,5.216,2022,3.82,2023,3.82,2024,3.82,2025,3.82,2026,3.82,2027,3.82]],["title/modules/ODataModule.html",[2028,3.441,2029,3.186]],["body/modules/ODataModule.html",[3,0.124,4,0.109,5,0.124,6,0.095,12,0.155,23,0.079,24,0.01,28,0.572,33,0.131,45,1.049,59,0.993,83,0.887,115,4.538,116,4.811,118,0.094,165,0.939,172,0.14,176,0.008,177,0.008,178,0.494,182,1.021,187,0.235,189,0.939,710,1.727,718,5.557,1080,6.168,1083,5.008,1154,4.343,2029,5.95,2030,5.008,2031,5.504,2032,8.025,2033,6.168,2034,7.495,2035,6.256,2036,6.256,2037,8.025,2038,7.06,2039,4.638,2040,7.495,2041,8.025,2042,6.256,2043,6.256,2044,7.495,2045,6.256,2046,5.504,2047,6.256,2048,5.504,2049,7.495,2050,6.256,2051,6.256,2052,5.504,2053,6.256]],["title/classes/ODataParameterParser.html",[178,0.339,1474,3.441]],["body/classes/ODataParameterParser.html",[3,0.082,4,0.072,5,0.082,6,0.11,9,2.687,10,0.052,11,0.557,12,0.206,18,1.32,22,1.81,23,0.111,24,0.01,27,0.591,28,0.489,33,0.1,46,2.021,48,2.708,57,0.861,75,0.174,83,1.009,87,3.501,94,3.324,95,1.803,99,1.23,100,2.869,101,3.097,103,3.9,105,2.5,106,1.519,107,3.562,111,1.205,113,1.257,118,0.126,133,2.388,134,1.197,141,2.987,153,3.562,154,2.021,165,1.212,167,3.097,172,0.177,176,0.006,177,0.006,178,0.453,180,0.2,182,0.936,187,0.324,189,1.212,223,1.205,224,0.2,229,1.626,398,0.79,418,1.912,464,3.48,513,2.711,710,1.143,713,1.864,735,2.711,846,3.395,998,1.999,1072,2.244,1090,2.45,1175,3.564,1182,1.999,1183,1.692,1308,1.803,1315,2.074,1352,3.702,1406,3.854,1414,3.069,1418,2.711,1420,2.244,1430,2.244,1434,3.11,1444,2.155,1451,5.017,1462,4.639,1465,2.572,1466,2.572,1467,2.572,1469,3.642,1474,5.272,1481,3.642,1484,3.642,1486,6.256,1487,3.724,1488,4.313,1489,2.874,1490,3.642,1491,2.874,1492,3.642,1493,2.874,1494,3.642,1495,5.255,1496,4.639,1497,4.922,1498,3.983,1499,3.983,1500,3.642,1501,3.642,1502,2.874,1503,4.936,1504,2.874,1505,4.936,1506,2.874,1507,3.983,1508,4.936,1509,2.874,1510,2.874,1511,2.45,1512,3.395,1513,5.048,1514,3.642,1515,5.794,1516,3.642,1517,3.642,1518,2.572,1519,2.572,1520,2.45,1521,6.256,1522,6.971,1523,5.048,1524,5.048,1525,3.642,1526,3.642,1527,3.642,1528,3.642,1529,3.642,1530,3.642,2054,5.738,2055,4.14,2056,4.14,2057,4.14,2058,4.14,2059,4.14,2060,4.14,2061,4.14,2062,4.14,2063,4.14,2064,4.14,2065,4.14,2066,4.14,2067,4.14]],["title/classes/ODataParserOptions.html",[178,0.339,1072,2.329]],["body/classes/ODataParserOptions.html",[1,3.894,3,0.098,4,0.086,5,0.098,6,0.1,9,2.428,10,0.062,11,0.626,12,0.178,13,3.353,14,2.663,15,2.072,16,3.599,17,3.001,18,1.482,19,2.663,20,2.778,21,2.558,23,0.091,24,0.01,25,3.11,26,3.236,27,0.639,28,0.471,30,3.565,33,0.112,34,3.82,38,1.947,41,2.663,48,1.781,51,2.716,71,2.461,72,3.823,73,4.133,74,2.146,75,0.167,76,2.663,77,2.663,78,2.558,79,3.642,80,3.642,81,2.663,82,0.564,83,0.851,84,2.461,85,2.778,86,2.461,87,3.216,97,3.449,98,2.212,104,2.372,118,0.074,119,1.781,172,0.11,176,0.007,177,0.007,178,0.508,180,0.238,187,0.287,223,2.091,224,0.238,227,1.222,710,1.356,713,2.212,812,4.775,865,2.206,996,3.933,997,4.322,998,3.469,1000,2.289,1002,4.322,1003,3.643,1004,3.642,1006,5.666,1007,2.663,1010,3.933,1011,3.643,1013,5.666,1014,5.666,1019,4.322,1020,3.41,1023,3.41,1024,4.322,1025,3.933,1027,5.666,1028,5.666,1029,5.752,1030,3.933,1031,6.628,1032,7.284,1033,4.322,1034,3.353,1035,4.322,1036,4.322,1037,7.148,1038,7.148,1039,7.148,1040,7.148,1041,7.148,1042,7.148,1043,7.148,1044,4.322,1045,4.322,1046,4.322,1047,4.322,1048,4.322,1049,4.322,1050,5.156,1051,5.156,1052,5.156,1053,4.322,1054,4.322,1055,3.933,1056,4.322,1057,3.933,1058,4.322,1059,4.322,1060,4.322,1061,3.933,1062,4.322,1063,3.933,1064,4.322,1065,4.322,1066,4.322,1067,4.322,1068,4.322,1069,4.322,1070,4.322,1071,5.156,1072,3.491,2068,6.441,2069,4.913,2070,4.913]],["title/classes/ODataPathSegments.html",[178,0.339,1158,2.983]],["body/classes/ODataPathSegments.html",[3,0.076,4,0.067,5,0.076,6,0.108,10,0.069,11,0.529,12,0.2,18,1.824,22,2.5,23,0.11,24,0.01,27,0.542,28,0.494,33,0.095,39,3.055,46,1.942,49,2.539,57,1.165,59,0.865,64,1.731,75,0.176,83,1.016,99,0.718,104,1.856,106,1.546,111,1.119,113,1.336,118,0.131,119,2.496,152,2.694,165,1.033,166,2.539,172,0.183,176,0.006,177,0.006,178,0.303,180,0.186,182,0.889,187,0.319,189,1.241,199,2.57,200,2.293,218,1.281,224,0.186,226,2.034,227,0.956,391,4.039,398,0.75,578,4.596,710,2.006,713,1.731,830,4.04,846,2.275,850,3.078,861,2.388,927,3.893,1007,3.731,1034,2.836,1085,2.001,1105,2.388,1158,4.393,1178,3.078,1183,2.226,1212,5.416,1219,3.382,1319,3.782,1352,2.836,1353,4.361,1354,3.078,1355,3.078,1585,3.429,1587,2.083,1604,4.759,1715,2.001,1718,2.388,1789,5.387,1790,5.387,1791,2.85,1792,4.691,2071,3.078,2072,6.328,2073,6.328,2074,6.056,2075,4.793,2076,5.676,2077,5.448,2078,5.448,2079,3.844,2080,3.844,2081,5.448,2082,5.878,2083,3.844,2084,3.844,2085,3.844,2086,3.844,2087,4.361,2088,3.844,2089,3.844,2090,3.844,2091,3.844,2092,3.844,2093,3.844,2094,3.844,2095,3.844,2096,3.844,2097,3.844,2098,5.511,2099,3.844,2100,3.844,2101,2.85,2102,3.382,2103,3.382,2104,3.844,2105,3.844,2106,5.448,2107,4.793,2108,6.328,2109,3.844,2110,3.844,2111,3.844,2112,3.844,2113,3.844,2114,3.844,2115,3.844,2116,5.448,2117,3.844,2118,3.382,2119,3.844,2120,3.844,2121,3.844,2122,3.844,2123,3.844,2124,3.844,2125,6.883,2126,3.844,2127,6.328,2128,3.844,2129,3.844,2130,3.844,2131,3.844,2132,3.844,2133,5.448,2134,6.328,2135,3.382,2136,3.382,2137,3.382,2138,3.382,2139,3.844,2140,3.844,2141,3.844,2142,5.448,2143,3.844,2144,3.844,2145,3.844,2146,3.844,2147,3.844,2148,3.844,2149,3.844,2150,3.844,2151,3.844,2152,3.844,2153,5.448,2154,3.844,2155,3.844,2156,3.844,2157,5.448,2158,3.844,2159,3.844,2160,3.844]],["title/classes/ODataPathSegmentsHandler.html",[178,0.339,2161,3.441]],["body/classes/ODataPathSegmentsHandler.html",[3,0.11,4,0.096,5,0.11,6,0.11,10,0.07,12,0.172,23,0.096,24,0.01,28,0.522,33,0.121,49,2.573,52,2.889,53,3.713,54,2.142,55,4.147,57,1.291,59,1.264,60,2.582,75,0.138,83,1.054,99,1.296,113,1.35,118,0.114,166,3.235,172,0.155,176,0.008,177,0.008,178,0.548,180,0.267,182,1.133,187,0.323,189,1.276,224,0.267,226,2.061,364,2.002,398,0.76,710,1.916,1085,2.874,1158,5.53,1212,4.972,1271,4.819,1604,5.487,1715,2.874,2075,4.858,2076,4.819,2082,4.094,2087,5.558,2101,4.094,2161,5.558,2162,4.858,2163,5.522,2164,5.522,2165,5.522,2166,5.522,2167,5.522,2168,5.522,2169,5.522,2170,5.522,2171,4.42,2172,4.858,2173,4.858,2174,6.107,2175,4.858,2176,6.107,2177,4.858,2178,6.68,2179,4.858,2180,4.858,2181,4.858,2182,4.858,2183,6.68,2184,4.858,2185,4.858,2186,4.858,2187,4.858,2188,4.858,2189,4.858,2190,4.858,2191,4.858,2192,4.858,2193,4.858]],["title/classes/ODataPropertyAnnotations.html",[178,0.339,948,2.814]],["body/classes/ODataPropertyAnnotations.html",[3,0.094,4,0.082,5,0.094,6,0.06,8,1.032,10,0.06,11,0.683,12,0.155,15,1.985,22,2.365,23,0.107,24,0.01,26,3.377,28,0.41,29,3.663,30,3.377,33,0.131,45,1.18,46,2.16,51,3.163,52,1.707,58,2.051,68,2.051,69,2.051,70,2.12,75,0.173,83,1.072,99,1.4,113,1.274,118,0.129,135,1.613,165,1.056,172,0.157,176,0.007,177,0.007,178,0.592,180,0.228,182,1.022,187,0.282,189,1.056,217,1.75,224,0.228,225,1.975,388,2.086,461,3.163,467,2.788,710,1.299,762,3.89,916,2.194,925,5.906,926,3.49,927,4.634,928,4.658,930,2.786,931,4.1,934,4.642,937,5.789,943,3.49,944,3.49,945,3.49,946,3.49,947,2.273,948,5.113,949,5.216,950,3.279,951,4.884,952,3.49,953,4.607,954,3.49,955,2.924,956,3.49,957,3.49,958,3.49,959,3.49,960,3.49,961,3.49,962,4.642,963,4.642,964,3.49,965,3.49,966,3.49,967,3.49,968,3.49,969,3.49,970,3.49,971,3.49,972,3.49,973,5.216,974,3.49,975,3.49,976,3.49,977,4.642,978,5.952,979,4.642,980,4.642,981,4.642,982,4.607,983,3.49,984,3.49,985,3.49,986,3.49,987,3.49,988,3.49,989,3.876,990,5.216,991,3.49,992,4.642,993,3.49,994,3.49,995,3.49,1532,3.769,1536,3.769,2194,4.708,2195,4.708]],["title/classes/ODataQueryOptionHandler.html",[178,0.339,2196,3.441]],["body/classes/ODataQueryOptionHandler.html",[3,0.069,4,0.06,5,0.069,6,0.108,9,1.51,10,0.064,12,0.201,22,2.199,23,0.108,24,0.01,25,3.167,27,0.445,28,0.457,33,0.088,46,2.366,57,1.26,61,2.766,62,2.766,63,2.738,64,2.953,65,1.802,66,3.285,67,3.167,68,2.857,69,2.857,70,2.953,71,1.734,74,1.683,75,0.173,82,0.902,83,1.039,102,3.367,103,1.671,110,4.805,111,2.029,113,1.285,114,2.598,118,0.13,134,1.268,165,0.519,172,0.181,175,2.686,176,0.006,177,0.006,178,0.399,180,0.167,182,0.824,187,0.318,189,1.26,195,1.292,200,2.185,218,1.153,224,0.244,226,1.886,364,1.255,398,0.695,504,2.857,578,4.178,710,1.394,854,3.045,861,2.15,865,1.73,882,5.248,1004,1.957,1031,2.771,1183,2.064,1271,2.403,1372,3.507,1628,3.53,1715,1.802,1721,2.267,1769,4.074,1861,2.566,1911,6.672,2196,6.988,2197,3.461,2198,6.558,2199,5.052,2200,5.052,2201,5.77,2202,6.558,2203,5.052,2204,5.052,2205,3.461,2206,3.461,2207,4.444,2208,3.461,2209,5.052,2210,3.461,2211,5.052,2212,3.461,2213,5.052,2214,3.461,2215,3.461,2216,3.461,2217,5.052,2218,6.558,2219,3.461,2220,5.052,2221,3.461,2222,5.052,2223,3.461,2224,5.052,2225,3.461,2226,5.052,2227,3.461,2228,3.461,2229,5.052,2230,3.461,2231,5.052,2232,3.461,2233,3.045,2234,3.461,2235,7.718,2236,2.771,2237,4.044,2238,4.044,2239,3.461,2240,8.265,2241,3.461,2242,3.461,2243,5.965,2244,3.461,2245,3.461,2246,3.461,2247,3.461,2248,5.052,2249,5.052,2250,3.461,2251,3.461,2252,3.461,2253,3.461,2254,3.461,2255,7.861,2256,3.461,2257,3.461,2258,5.965,2259,3.461,2260,5.052,2261,3.461,2262,3.461,2263,3.461,2264,3.461,2265,3.461,2266,3.461,2267,3.461,2268,5.965,2269,5.965,2270,5.965,2271,5.965,2272,3.461,2273,5.052,2274,5.052,2275,3.461,2276,5.052,2277,3.461,2278,3.461,2279,3.461,2280,5.052,2281,5.965,2282,5.965,2283,3.045,2284,5.965,2285,5.965,2286,5.965,2287,5.965,2288,3.461,2289,3.461,2290,5.052,2291,3.461,2292,5.052,2293,3.461,2294,5.052,2295,3.461,2296,5.052,2297,3.045,2298,3.461,2299,5.052,2300,3.045,2301,3.461,2302,5.052,2303,3.461,2304,5.052,2305,3.461,2306,5.052,2307,3.461,2308,3.461,2309,3.461,2310,3.461,2311,3.461,2312,3.461,2313,3.461,2314,3.461,2315,3.461,2316,3.461,2317,3.461,2318,3.461,2319,3.461,2320,3.461,2321,3.461,2322,3.461,2323,3.461,2324,3.461,2325,3.461,2326,3.461,2327,3.461,2328,3.461,2329,3.461]],["title/classes/ODataQueryOptions.html",[178,0.339,2238,3.441]],["body/classes/ODataQueryOptions.html",[3,0.087,4,0.077,5,0.087,6,0.11,9,2.483,10,0.056,11,0.581,12,0.195,18,1.377,22,2.145,23,0.109,24,0.01,25,4.233,27,0.328,28,0.5,33,0.104,57,1.273,61,2.868,62,2.868,63,2.386,64,3.286,65,2.292,66,3.407,67,3.284,68,1.918,69,1.918,70,1.982,75,0.167,82,0.687,83,1.004,104,2.126,106,1.148,110,4.316,111,1.979,113,0.95,118,0.129,134,0.8,152,2.417,165,0.898,172,0.183,176,0.007,177,0.007,178,0.347,180,0.213,182,0.977,187,0.323,189,1.261,195,1.643,196,2.301,199,2.724,200,2.431,215,2.234,224,0.213,398,0.824,504,2.49,578,3.244,710,1.652,861,2.735,927,4.127,1178,3.524,1183,1.799,1315,2.998,1372,4.155,1378,3.718,1715,2.292,1876,3.264,1891,4.155,1892,5.066,2074,6.42,2098,4.792,2102,3.873,2135,3.873,2136,3.873,2137,3.873,2138,3.873,2196,3.524,2201,6.715,2207,6.715,2235,7.393,2236,3.524,2237,5.842,2238,5.444,2283,5.266,2297,5.266,2300,5.266,2330,3.873,2331,5.986,2332,6.801,2333,7.298,2334,5.986,2335,5.986,2336,4.402,2337,4.402,2338,5.986,2339,7.298,2340,4.402,2341,5.986,2342,4.402,2343,4.402,2344,4.402,2345,5.986,2346,4.402,2347,4.402,2348,4.402,2349,4.402,2350,4.402,2351,4.402,2352,4.402,2353,5.986,2354,5.986,2355,5.986,2356,5.986,2357,5.986,2358,5.986,2359,5.986,2360,5.986,2361,5.983,2362,4.402,2363,4.402,2364,6.801,2365,6.801,2366,4.402,2367,5.986,2368,4.402,2369,4.402,2370,4.402,2371,4.402,2372,4.402,2373,4.402,2374,4.402,2375,4.402,2376,4.402,2377,4.402,2378,4.402,2379,4.402,2380,4.402,2381,6.801,2382,4.402,2383,4.402,2384,4.402,2385,4.402,2386,4.402,2387,4.402,2388,4.402,2389,4.402,2390,4.402,2391,4.402,2392,4.402]],["title/classes/ODataReferential.html",[178,0.339,1729,3.186]],["body/classes/ODataReferential.html",[3,0.047,4,0.042,5,0.047,6,0.068,9,2.572,10,0.03,11,0.46,12,0.059,22,1.197,23,0.104,24,0.01,27,0.56,28,0.432,33,0.103,46,1.657,48,1.376,54,1.689,57,1.27,59,0.378,61,1.004,62,1.601,74,0.793,75,0.172,82,0.676,83,1.021,87,2.975,91,2.81,92,2.07,93,2.463,94,3.064,95,1.653,99,1.425,100,1.653,101,1.653,105,1.653,106,1.563,107,2.37,113,1.395,114,2.351,118,0.123,119,0.863,121,1.901,133,1.716,134,1.198,135,0.816,139,1.976,149,3.406,151,0.751,152,0.731,153,1.193,154,0.731,155,1.885,156,0.751,157,0.751,158,1.29,159,2.737,160,1.29,162,1.239,163,1.239,165,1.128,166,1.109,167,2.737,168,2.023,172,0.053,175,2.431,176,0.004,177,0.004,178,0.426,180,0.115,187,0.178,189,0.57,200,0.793,217,1.563,218,1.798,220,1.766,223,1.104,224,0.285,227,0.944,229,1.781,464,2.748,465,1.109,545,2.131,558,3.038,686,2.814,709,3.558,710,1.048,713,1.072,735,1.559,830,3.431,846,2.246,848,1.765,861,1.479,862,1.765,912,2.463,916,1.768,947,3.565,950,1.109,955,1.479,989,2.847,1000,2.205,1007,3.405,1034,2.463,1072,1.29,1165,1.653,1172,1.479,1175,4.095,1182,2.285,1183,2.568,1306,1.653,1308,2.061,1315,1.193,1352,3.271,1378,1.479,1406,2.057,1420,2.565,1430,1.29,1434,2.565,1444,1.239,1451,4.739,1462,3.663,1465,1.479,1466,1.479,1467,1.479,1487,3.053,1488,5.34,1489,4.751,1491,3.285,1493,3.285,1495,4.994,1496,3.903,1497,4.251,1498,3.285,1499,2.634,1502,1.653,1503,2.634,1504,1.653,1505,1.653,1506,2.634,1507,2.634,1508,1.653,1509,2.634,1510,1.653,1511,1.409,1512,2.8,1518,2.357,1519,1.479,1520,1.409,1583,1.346,1585,1.29,1586,1.346,1587,2.926,1588,1.346,1594,1.409,1595,1.346,1628,3.489,1634,2.939,1636,2.246,1647,1.653,1688,1.653,1711,2.814,1712,4.002,1715,1.239,1716,4.322,1717,1.653,1718,1.479,1719,1.653,1720,2.814,1721,2.485,1722,2.814,1723,5.03,1724,2.814,1725,4.002,1726,2.814,1727,1.906,1728,3.038,1729,3.508,1730,1.906,1731,1.906,1732,3.788,1733,1.906,1734,3.038,1735,1.653,1736,1.906,1737,1.906,1738,1.906,1739,4.72,1740,1.906,1741,4.72,1742,1.906,1743,3.038,1744,3.038,1745,3.038,1746,3.038,1747,1.906,1748,1.906,1749,1.906,1750,1.906,1751,2.634,1752,5.479,1753,1.906,1754,1.906,1755,1.906,1756,1.906,1757,1.906,1758,1.906,1759,1.906,1760,1.906,1761,1.906,1762,3.038,1763,3.038,1764,3.038,1765,3.038,1766,2.814,1767,1.906,1768,3.038,1769,4.251,1770,1.906,1771,1.906,1772,3.038,1773,1.906,1774,1.906,1775,1.906,1776,3.038,1777,1.906,1778,2.357,1779,3.038,1780,3.038,1781,3.038,1782,3.038,1783,3.038,1784,3.038,1785,1.906,1786,5.03,1787,3.788,1788,1.906,1789,4.372,1790,4.372,1791,1.765,1792,3.508,1793,1.906,1794,1.906,1795,1.906,1796,1.906,1797,1.906,1798,1.906,1799,1.906,1800,1.906,1801,1.906,1802,1.906,1803,1.906,1804,1.906,1805,1.906,1806,1.906,1807,1.906,1808,1.906,1809,1.906,1810,1.906,1811,1.906,1812,1.906,1813,1.906,1814,1.906,1815,3.788,1816,3.038,1817,1.906,1818,1.906,1819,1.906,1820,1.906,1821,3.038,1822,1.906,1823,1.906,1824,1.653,1825,1.906,1826,1.906,1827,1.906,1828,1.906,1829,1.906,1830,4.996,1831,4.322,1832,1.906,1833,1.906,1834,1.906,1835,1.906,1836,1.906,1837,1.906,1838,2.814,1839,1.906,1840,1.906,1841,1.906,1842,4.322,1843,4.751,1844,3.038,1845,3.038,1846,1.906,1847,1.906,1848,4.322,1849,1.906,1850,1.906,1851,1.906,1852,1.906,1853,1.906,1854,1.906,1855,1.906,1856,1.906,1857,1.906,1858,1.906,1859,1.906,1860,1.906,1861,1.765,1862,1.906,1863,1.906,1864,1.906,1865,1.906,1866,1.765,1867,1.906,1868,1.906,1869,1.906,1870,1.906,1871,1.906,1872,3.038,1873,3.038,1874,1.906,1875,1.906,1876,1.765,1877,1.906,1878,1.906,1879,1.906,1880,1.906,1881,3.038,1882,4.72,1883,1.906,1884,1.906,1885,3.038,1886,1.906,1887,3.038,1888,1.906,1889,3.038,1890,1.906,1891,1.653,1892,1.653,1893,3.038,1894,1.906,1895,3.038,1896,1.906,1897,1.906,1898,1.906,1899,1.906,1900,1.906,1901,3.788,1902,1.906,1903,1.906,2393,2.381]],["title/classes/ODataRequest.html",[178,0.339,1125,2.431]],["body/classes/ODataRequest.html",[3,0.066,4,0.058,5,0.066,6,0.111,10,0.042,11,0.478,12,0.184,13,2.564,14,3.496,15,1.41,16,3.231,17,3.205,18,1.757,19,3.169,21,3.358,22,1.553,23,0.108,24,0.01,25,3.114,27,0.591,28,0.471,33,0.058,38,3.222,39,2.823,40,3.745,46,2.643,50,1.812,51,1.41,54,1.735,57,0.968,58,1.456,61,1.41,62,1.41,64,1.505,67,1.614,68,1.456,69,1.456,74,1.114,75,0.17,76,1.812,78,1.74,81,1.812,83,0.995,98,3.097,102,2.823,104,1.614,106,1.379,113,1.237,114,2.145,118,0.103,123,1.812,135,1.145,138,2.823,172,0.075,175,2.218,176,0.006,177,0.006,178,0.264,180,0.162,182,0.803,187,0.329,189,0.877,217,1.604,218,1.114,224,0.162,227,0.831,404,4.007,489,3.097,578,4.031,710,0.923,713,1.505,719,7.176,830,3.358,865,1.687,947,3.114,1003,2.478,1020,4.478,1023,2.321,1034,3.58,1057,2.676,1061,2.676,1063,2.676,1078,3.58,1085,3.745,1087,4.224,1125,2.785,1143,2.676,1152,5.164,1154,2.321,1156,4.782,1159,4.782,1171,5.675,1172,3.059,1183,3.322,1196,6.05,1228,2.478,1232,5.144,1235,5.675,1245,2.941,1715,1.74,2394,3.343,2395,5.847,2396,5.847,2397,5.847,2398,5.847,2399,5.847,2400,5.847,2401,5.847,2402,6.45,2403,6.45,2404,6.45,2405,6.45,2406,5.847,2407,5.847,2408,4.332,2409,4.925,2410,2.941,2411,3.343,2412,3.343,2413,3.343,2414,6.45,2415,3.343,2416,3.343,2417,6.45,2418,6.45,2419,3.343,2420,3.343,2421,3.343,2422,3.343,2423,3.343,2424,3.343,2425,3.343,2426,3.343,2427,3.343,2428,3.343,2429,3.343,2430,3.343,2431,3.343,2432,3.343,2433,3.343,2434,3.343,2435,3.343,2436,3.343,2437,3.343,2438,3.343,2439,3.343,2440,3.343,2441,3.343,2442,3.343,2443,3.343,2444,3.343,2445,3.343,2446,3.343,2447,3.343,2448,3.343,2449,3.343,2450,4.925,2451,5.847,2452,3.343,2453,2.941,2454,2.941,2455,2.941,2456,3.343,2457,3.343,2458,3.343,2459,3.343,2460,6.877,2461,3.343,2462,6.45,2463,4.925,2464,3.343,2465,4.925,2466,3.343,2467,3.343,2468,3.343,2469,3.343,2470,3.343,2471,4.925,2472,6.45,2473,3.343,2474,5.847,2475,4.925,2476,5.847,2477,3.343,2478,4.925,2479,3.343,2480,3.343,2481,6.877,2482,3.343,2483,3.343,2484,3.343,2485,3.343,2486,3.343,2487,4.925,2488,3.343,2489,3.343,2490,3.343,2491,3.343,2492,3.343,2493,3.343,2494,3.343,2495,3.343,2496,3.343,2497,3.343,2498,4.925,2499,3.343,2500,3.343,2501,3.343,2502,3.343,2503,3.343,2504,3.343,2505,3.343,2506,3.343,2507,4.925,2508,3.343,2509,3.343,2510,3.343,2511,4.925,2512,3.343,2513,3.343,2514,4.925,2515,3.343,2516,3.343,2517,3.343,2518,3.343,2519,3.343,2520,3.343,2521,3.343,2522,3.343,2523,6.45,2524,3.343,2525,7.193,2526,3.343,2527,3.343,2528,3.343,2529,3.343,2530,3.343,2531,3.343,2532,4.925,2533,4.925,2534,3.343,2535,4.925,2536,3.343,2537,3.343,2538,3.343,2539,3.343,2540,3.343,2541,3.343]],["title/classes/ODataResponse.html",[178,0.339,1160,2.543]],["body/classes/ODataResponse.html",[3,0.069,4,0.061,5,0.069,6,0.109,8,0.698,9,2.472,10,0.044,11,0.492,12,0.201,15,2.523,17,3.399,22,2.073,23,0.106,24,0.01,28,0.531,30,1.566,33,0.061,35,2.867,36,1.966,37,1.966,46,2.515,54,2.15,57,1.2,72,1.679,75,0.156,82,0.581,83,0.959,97,1.515,98,3.756,99,1.557,102,3.522,106,1.664,109,4.105,113,1.158,118,0.11,135,2.251,138,3.861,152,2.018,165,1.13,166,1.62,172,0.156,176,0.006,177,0.006,178,0.274,180,0.168,182,0.827,187,0.321,189,1.216,200,2.19,217,2.125,224,0.168,489,3.601,710,1.399,711,3.059,713,1.566,718,5.408,719,5.84,865,1.736,928,4.531,930,3.539,931,3.319,948,3.319,950,2.787,951,4.152,953,3.319,982,3.319,1003,4.873,1004,2.867,1020,5.551,1023,2.414,1034,3.114,1055,2.784,1078,3.92,1085,3.92,1110,4.435,1111,4.152,1112,4.788,1125,4.259,1129,5.408,1136,3.059,1143,2.784,1152,4.058,1153,6.417,1154,2.414,1155,3.059,1156,4.873,1159,4.873,1160,4.316,1168,3.383,1183,1.421,1186,5.408,1226,3.917,1227,4.459,1228,2.578,1277,5.262,1400,4.058,1424,1.885,1891,2.414,1892,2.414,2361,6.147,2408,4.459,2410,3.059,2453,3.059,2454,3.059,2455,3.059,2542,3.477,2543,5.981,2544,5.981,2545,5.981,2546,5.981,2547,5.069,2548,5.981,2549,5.069,2550,3.477,2551,3.477,2552,5.262,2553,3.477,2554,3.477,2555,3.477,2556,3.477,2557,7.718,2558,3.477,2559,5.069,2560,3.477,2561,3.477,2562,3.477,2563,3.477,2564,3.477,2565,3.477,2566,3.477,2567,3.477,2568,3.477,2569,3.477,2570,3.477,2571,3.477,2572,3.477,2573,3.477,2574,5.069,2575,3.477,2576,3.477,2577,5.069,2578,5.069,2579,3.477,2580,3.477,2581,3.477,2582,3.477,2583,3.477,2584,3.477,2585,3.477,2586,3.477,2587,3.477,2588,3.477,2589,3.477,2590,5.981,2591,3.477,2592,3.477,2593,3.477,2594,3.477,2595,3.477,2596,5.981,2597,3.477,2598,3.477,2599,3.477,2600,3.059,2601,3.477,2602,3.477,2603,3.477,2604,3.477,2605,5.981,2606,3.477,2607,3.477,2608,3.477,2609,4.058,2610,3.477,2611,3.477,2612,4.459,2613,3.477,2614,3.477,2615,5.981,2616,3.477,2617,3.477,2618,5.981,2619,3.477,2620,3.477,2621,6.988,2622,5.981,2623,3.477,2624,5.069,2625,3.477,2626,5.981,2627,3.477,2628,6.417,2629,5.981,2630,5.981,2631,5.069,2632,5.069,2633,5.981,2634,3.477,2635,3.477,2636,3.477,2637,3.477,2638,3.477,2639,3.477]],["title/classes/ODataResponseOptions.html",[178,0.339,2552,3.441]],["body/classes/ODataResponseOptions.html",[3,0.098,4,0.086,5,0.098,6,0.112,9,2.28,10,0.062,11,0.626,12,0.221,23,0.111,24,0.01,26,3.436,27,0.606,28,0.471,30,3.436,33,0.086,34,3.823,38,3.024,44,3.646,45,1.206,46,2.207,47,2.903,51,3.033,57,0.968,72,3.684,73,3.897,75,0.175,77,4.136,78,3.743,82,0.74,83,0.763,88,4.067,89,4.255,90,4.687,106,0.943,111,2.22,118,0.119,165,0.739,172,0.177,176,0.007,177,0.007,178,0.388,180,0.238,182,1.052,187,0.332,189,1.189,223,1.876,224,0.238,227,1.604,411,5.757,710,1.358,712,3.94,713,2.216,812,4.78,865,2.209,927,4.316,998,3.113,1000,2.293,1004,2.783,1025,3.94,1029,5.162,1030,3.94,1050,3.94,1051,3.94,1052,3.94,1071,3.94,1165,3.416,1183,2.635,1225,4.329,1378,3.057,1769,4.74,1838,5.331,2552,5.757,2600,4.329,2609,6.631,2612,4.329,2640,4.921,2641,6.447,2642,6.447,2643,6.447,2644,6.447,2645,6.447,2646,4.921,2647,4.921,2648,4.921,2649,4.921,2650,4.921,2651,4.921,2652,4.921,2653,4.921,2654,6.447,2655,4.921,2656,6.447,2657,4.921,2658,6.447,2659,4.921,2660,6.447,2661,4.921,2662,4.921,2663,4.921,2664,6.447,2665,6.447,2666,4.921,2667,4.921,2668,4.921,2669,4.921,2670,4.921,2671,4.921,2672,4.921,2673,4.921,2674,4.921,2675,4.921,2676,4.329,2677,4.921,2678,4.921,2679,4.921,2680,4.921,2681,4.921,2682,4.921,2683,4.921,2684,4.921,2685,4.921,2686,4.921,2687,4.921]],["title/classes/ODataSchema.html",[178,0.339,1408,2.814]],["body/classes/ODataSchema.html",[3,0.085,4,0.075,5,0.085,6,0.111,10,0.054,11,0.572,12,0.207,22,1.858,23,0.114,24,0.01,27,0.321,28,0.541,33,0.075,45,1.428,48,1.559,59,1.066,74,1.433,75,0.177,83,0.948,94,2.334,99,1.255,111,1.714,113,1.147,114,1.873,118,0.123,127,4.087,133,2.436,134,1.222,135,2.302,136,3.917,138,3.489,140,4.276,142,3.976,144,3.642,165,1.136,172,0.189,175,1.937,176,0.007,177,0.007,178,0.339,180,0.208,182,0.961,187,0.329,189,1.255,224,0.208,227,1.465,398,0.592,464,2.004,489,2.653,504,2.432,545,3.605,642,4.368,709,2.653,710,1.187,865,2.018,912,3.941,916,2.745,950,2.004,989,2.844,998,2.844,1000,3.643,1004,2.432,1078,4.243,1156,5.796,1228,3.189,1308,3.298,1352,3.067,1404,5.786,1406,4.237,1408,3.858,1417,3.189,1418,2.817,1424,2.331,1462,4.489,1511,2.545,1512,3.486,1579,5.379,1581,4.089,1582,4.368,1583,3.332,1585,3.642,1586,3.332,1587,3.917,1588,3.332,1593,3.189,1595,2.432,1641,3.443,1766,3.189,1904,5.786,2688,4.301,2689,5.891,2690,5.891,2691,5.891,2692,5.891,2693,5.891,2694,5.891,2695,4.301,2696,4.301,2697,4.301,2698,4.301,2699,7.227,2700,4.301,2701,4.301,2702,4.301,2703,4.301,2704,4.301,2705,5.891,2706,7.57,2707,4.301,2708,5.891,2709,4.301,2710,5.891,2711,4.301,2712,5.891,2713,4.301,2714,5.891,2715,4.301,2716,4.301,2717,4.301,2718,4.301,2719,4.301,2720,4.301,2721,4.301,2722,4.301,2723,4.301,2724,4.301,2725,4.301,2726,4.301,2727,4.301,2728,4.301,2729,4.301,2730,4.301,2731,4.301,2732,4.301,2733,4.301,2734,4.301,2735,4.301,2736,4.301,2737,4.301,2738,4.301,2739,6.719,2740,4.301,2741,4.301,2742,4.301,2743,4.301,2744,6.719,2745,4.301,2746,4.301,2747,4.301,2748,4.301,2749,4.301,2750,4.301]],["title/injectables/ODataServiceFactory.html",[2033,3.186,2751,3.781]],["body/injectables/ODataServiceFactory.html",[3,0.113,4,0.099,5,0.113,6,0.102,8,0.975,10,0.072,12,0.191,23,0.111,24,0.01,28,0.528,33,0.099,52,2.793,53,4.033,74,2.684,75,0.176,83,0.838,99,1.322,118,0.133,165,1.063,172,0.185,174,4.037,176,0.008,177,0.008,178,0.608,182,1.155,187,0.29,189,1.063,224,0.276,364,2.067,398,0.975,489,3.93,504,4.686,947,3.891,1078,4.195,1079,5.015,1080,5.974,1081,7.729,1083,6.168,1210,6.451,1424,3.838,1626,6.451,1628,4.768,2033,5.251,2039,4.227,2751,6.23,2752,5.015,2753,5.701,2754,5.701,2755,5.701,2756,5.701,2757,8.058,2758,5.701,2759,5.701,2760,8.058,2761,6.451,2762,7.082]],["title/classes/ODataSingletonService.html",[178,0.339,2761,3.441]],["body/classes/ODataSingletonService.html",[3,0.094,4,0.083,5,0.094,6,0.095,8,0.868,9,2.664,10,0.06,12,0.2,15,3.395,18,1.45,23,0.11,24,0.01,28,0.493,31,3.632,32,2.215,33,0.083,45,1.45,53,3.886,74,2.778,75,0.125,83,0.891,97,3.279,106,1.208,111,1.383,118,0.121,152,1.934,164,4.363,167,3.506,172,0.19,174,4.032,176,0.007,177,0.007,178,0.375,180,0.23,182,1.028,187,0.314,189,1.232,217,1.872,225,2.539,398,1.078,461,3.303,489,3.994,709,2.837,762,4.676,865,2.158,1004,3.564,1073,4.907,1075,4.672,1076,4.672,1077,4.672,1084,3.524,1085,4.275,1086,4.672,1087,5.271,1088,5.588,1090,3.729,1095,3.524,1096,4.672,1102,3.524,1103,4.374,1105,2.952,1111,3.299,1113,2.576,1157,5.241,1168,3.564,1172,4.865,1202,5.544,1424,4.08,1596,5.807,1598,5.968,1601,6.026,1606,3.805,1607,3.805,1608,3.805,1611,3.805,1612,3.805,1614,3.805,1636,4.635,1638,4.181,1640,5.544,1645,6.444,1647,5.588,1675,4.181,1679,4.181,1689,4.181,1690,4.181,2761,5.045,2763,4.753,2764,6.301,2765,6.301,2766,7.069,2767,4.753,2768,4.753,2769,6.219,2770,4.753,2771,4.753,2772,4.753,2773,4.753,2774,4.753,2775,4.753,2776,4.753,2777,4.753,2778,6.301]],["title/classes/ODataStructuredTypeParser.html",[178,0.339,1488,2.814]],["body/classes/ODataStructuredTypeParser.html",[3,0.042,4,0.037,5,0.042,6,0.103,9,2.602,10,0.027,11,0.422,12,0.2,22,1.871,23,0.11,24,0.01,27,0.559,28,0.41,33,0.096,46,1.54,48,1.243,54,1.349,57,1.277,59,0.69,61,0.885,62,1.446,74,0.699,75,0.173,82,0.634,83,1.007,87,3.061,91,2.611,92,2.014,93,2.262,94,3.046,95,2.185,99,1.464,100,2.185,101,2.185,105,1.893,106,1.528,107,2.177,111,1.264,113,1.388,114,2.185,118,0.128,119,1.819,121,1.717,133,2.269,134,1.293,135,0.719,139,2.611,149,3.435,151,0.662,152,0.644,153,1.051,154,0.644,155,1.816,156,0.662,157,0.662,158,1.138,159,2.185,160,1.138,162,2.262,163,2.262,165,1.089,166,2.025,167,2.844,168,1.921,172,0.162,175,2.259,176,0.004,177,0.004,178,0.396,180,0.101,182,0.559,187,0.306,189,1.125,200,0.699,217,1.475,218,1.671,220,1.622,223,1.264,224,0.267,227,0.853,229,1.681,398,0.691,464,2.576,465,0.978,545,1.957,686,2.542,709,3.462,710,0.946,713,0.945,735,1.374,830,3.258,846,2.028,848,1.556,861,1.304,862,3.222,912,2.262,916,1.597,947,3.435,950,0.978,955,1.304,989,2.669,998,1.013,1000,2.338,1007,3.215,1034,2.262,1072,1.138,1165,1.457,1172,1.304,1175,3.888,1182,2.098,1183,2.424,1308,1.893,1315,1.051,1352,3.088,1378,1.304,1406,2.719,1407,2.245,1418,1.374,1420,2.719,1430,1.858,1434,2.719,1444,1.093,1451,4.587,1462,3.434,1465,1.304,1466,1.304,1467,1.304,1487,2.837,1488,5.403,1489,4.532,1491,3.016,1493,3.016,1495,4.871,1496,3.685,1497,4.055,1498,3.016,1499,2.38,1502,1.457,1503,2.38,1504,1.457,1505,1.457,1506,2.38,1507,2.38,1508,1.457,1509,2.38,1510,1.457,1511,1.242,1512,2.571,1518,2.129,1519,1.304,1520,1.242,1583,1.187,1585,1.138,1586,1.187,1587,3.215,1588,1.187,1594,1.242,1595,1.187,1628,3.271,1634,2.699,1636,2.028,1647,2.38,1688,1.457,1711,3.222,1712,6.058,1715,1.093,1716,4.016,1717,1.457,1718,1.304,1719,1.457,1720,2.542,1721,2.245,1722,2.542,1723,5.011,1724,2.542,1725,4.398,1726,2.542,1727,1.68,1728,2.744,1729,2.542,1730,1.68,1731,1.68,1732,3.479,1733,1.68,1734,2.744,1735,1.457,1736,1.68,1737,1.68,1738,1.68,1739,4.426,1740,1.68,1741,4.426,1742,1.68,1743,2.744,1744,2.744,1745,2.744,1746,2.744,1747,1.68,1748,1.68,1749,1.68,1750,1.68,1751,3.482,1752,5.227,1753,1.68,1754,1.68,1755,1.68,1756,1.68,1757,1.68,1758,1.68,1759,1.68,1760,1.68,1761,1.68,1762,2.744,1763,2.744,1764,2.744,1765,2.744,1766,2.542,1767,1.68,1768,2.744,1769,4.055,1770,1.68,1771,1.68,1772,2.744,1773,1.68,1774,1.68,1775,1.68,1776,3.479,1777,1.68,1778,2.129,1779,2.744,1780,2.744,1781,2.744,1782,2.744,1783,2.744,1784,2.744,1785,1.68,1786,4.749,1787,3.479,1788,1.68,1789,4.099,1790,4.099,1791,1.556,1792,3.222,1793,1.68,1794,1.68,1795,1.68,1796,1.68,1797,1.68,1798,1.68,1799,1.68,1800,1.68,1801,1.68,1802,1.68,1803,1.68,1804,1.68,1805,1.68,1806,1.68,1807,1.68,1808,1.68,1809,1.68,1810,1.68,1811,1.68,1812,1.68,1813,1.68,1814,1.68,1815,4.426,1816,2.744,1817,1.68,1818,1.68,1819,1.68,1820,1.68,1821,2.744,1822,1.68,1823,1.68,1824,1.457,1825,1.68,1826,1.68,1827,1.68,1828,2.744,1829,1.68,1830,4.836,1831,4.016,1832,1.68,1833,3.479,1834,1.68,1835,1.68,1836,1.68,1837,1.68,1838,2.542,1839,3.479,1840,1.68,1841,1.68,1842,4.016,1843,4.532,1844,2.744,1845,2.744,1846,1.68,1847,1.68,1848,4.016,1849,1.68,1850,1.68,1851,1.68,1852,1.68,1853,1.68,1854,1.68,1855,2.744,1856,1.68,1857,1.68,1858,1.68,1859,1.68,1860,1.68,1861,1.556,1862,1.68,1863,1.68,1864,1.68,1865,1.68,1866,1.556,1867,1.68,1868,1.68,1869,1.68,1870,4.016,1871,1.68,1872,2.744,1873,2.744,1874,1.68,1875,1.68,1876,1.556,1877,1.68,1878,1.68,1879,1.68,1880,1.68,1881,2.744,1882,4.426,1883,1.68,1884,1.68,1885,2.744,1886,1.68,1887,2.744,1888,1.68,1889,2.744,1890,1.68,1891,1.457,1892,1.457,1893,2.744,1894,1.68,1895,2.744,1896,1.68,1897,1.68,1898,1.68,1899,1.68,1900,1.68,1901,3.479,1902,1.68,1903,1.68,1966,2.744,2779,3.428,2780,3.428,2781,3.428,2782,2.099,2783,2.099,2784,2.099,2785,2.099,2786,2.099,2787,2.099,2788,2.099,2789,2.099,2790,2.099,2791,2.099,2792,2.099,2793,2.099,2794,2.099,2795,2.099,2796,2.099,2797,2.099,2798,2.099,2799,2.099,2800,2.099,2801,2.099,2802,2.099,2803,2.099,2804,2.099,2805,2.099]],["title/classes/Operator.html",[178,0.339,204,1.703]],["body/classes/Operator.html",[0,1.392,3,0.058,4,0.051,5,0.058,6,0.082,8,0.833,10,0.037,12,0.111,18,0.676,23,0.095,24,0.01,27,0.656,28,0.293,33,0.152,57,1.348,59,1.088,75,0.172,82,0.337,83,1.075,92,2.155,99,1.655,106,1.038,113,0.96,118,0.103,134,0.534,155,1.381,165,1.353,168,0.902,172,0.1,176,0.005,177,0.005,178,0.665,179,2.145,180,0.142,181,1.13,182,0.729,186,1.201,187,0.227,189,0.671,190,1.201,192,1.201,194,1.164,195,1.669,196,2.95,197,2.824,198,2.912,199,1.097,200,2.447,201,1.772,202,1.201,203,2.66,204,2.716,205,2.145,206,1.164,207,1.164,208,1.201,209,1.201,210,1.201,211,1.201,212,1.201,213,1.201,214,2.397,215,2.952,216,3.587,217,1.112,218,1.489,219,1.201,220,1.097,221,1.201,222,1.164,223,1.894,224,0.292,225,2.42,226,2.952,227,1.346,228,2.66,229,0.833,230,2.66,231,2.472,232,1.201,233,1.201,234,1.827,235,1.201,236,2.145,237,1.201,238,1.201,239,1.201,240,1.201,241,1.201,242,1.201,243,1.201,244,1.201,245,1.827,246,1.827,247,1.201,248,1.201,249,1.201,250,1.827,251,1.827,252,1.201,253,1.201,254,2.145,255,1.201,256,2.472,257,1.201,258,1.827,259,1.201,260,1.201,261,2.145,262,1.201,263,1.772,264,1.201,265,1.201,266,1.201,267,1.201,268,1.201,269,1.201,270,1.201,271,2.145,272,1.201,273,1.201,274,1.201,275,1.201,276,1.201,277,1.201,278,1.201,279,1.201,280,1.201,281,1.201,282,1.201,283,1.201,284,1.201,285,1.201,286,1.201,287,1.201,288,1.164,289,1.201,290,1.201,291,1.201,292,1.201,293,1.201,294,1.201,295,1.201,296,1.201,297,1.201,298,1.201,299,1.201,300,1.201,301,1.201,302,1.201,303,2.145,304,1.201,305,1.201,306,1.201,307,1.201,308,2.145,309,1.201,310,1.827,311,1.201,312,1.201,313,1.827,314,1.201,315,2.145,316,1.201,317,1.201,318,1.201,319,2.66,320,1.827,321,3.444,322,3.596,323,1.827,324,1.201,325,1.201,326,1.201,327,1.201,328,1.201,329,2.145,330,1.201,331,1.201,332,1.201,333,1.201,334,1.201,335,1.201,336,1.201,337,1.201,338,1.201,339,1.201,340,1.201,341,1.201,342,1.201,343,1.201,344,1.201,345,1.201,346,1.201,347,1.201,348,1.201,349,1.201,350,1.201,351,1.201,352,2.145,353,1.201,354,1.201,355,1.201,356,1.201,357,1.201,358,1.201,359,1.201,360,1.201,361,1.201,362,1.201,363,1.201,364,1.621,365,1.827,366,1.201,367,1.201,368,1.201,369,1.13,370,1.201,371,2.145,372,1.827,373,1.827,374,1.772,375,1.201,376,1.201,377,1.201,378,2.145,379,1.201,380,1.201,381,1.201,382,1.201,383,2.801,384,1.201,385,1.201,386,2.801,387,1.201,388,0.979,389,1.201,390,1.201,398,0.405,865,1.532,883,2.585,2806,2.938,2807,2.938,2808,2.938,2809,2.938]],["title/interfaces/Options.html",[0,0.989,9,1.284]],["body/interfaces/Options.html",[0,1.823,1,3.107,2,2.152,3,0.082,4,0.072,5,0.082,6,0.052,7,2.338,8,0.978,9,2.413,10,0.052,11,0.639,12,0.176,13,2.152,14,2.241,15,1.744,16,3.297,17,2.671,18,1.635,19,2.241,20,2.338,21,2.152,23,0.112,24,0.01,25,2.768,26,3.2,27,0.664,28,0.375,29,2.984,30,2.581,31,2.867,32,1.927,33,0.155,34,3.739,35,2.338,36,2.338,37,2.338,38,3.2,39,1.996,40,2.984,41,3.107,42,2.152,43,2.338,44,3.242,45,0.693,46,1.269,47,1.862,48,2.079,49,1.927,50,3.107,51,2.997,52,2.079,53,2.671,54,1.77,55,2.984,56,3.242,57,1.269,58,3.096,59,0.91,60,1.858,61,2.418,62,2.418,63,3.107,64,2.581,65,2.984,66,2.872,67,2.768,68,2.497,69,2.497,70,2.581,71,2.872,72,3.604,73,3.852,74,1.91,75,0.18,76,3.107,77,3.107,78,2.984,79,2.338,80,2.338,81,2.241,82,0.94,83,0.679,84,2.071,85,2.338,86,2.071,87,3.257,88,2.338,89,2.446,90,2.446,91,3.699,92,1.083,93,3.426,94,2.608,95,2.867,96,4.088,97,2.497,98,2.581,99,1.327,100,2.867,101,2.497,102,1.996,103,3.177,104,1.996,105,1.801,106,0.793,107,2.071,108,2.568,109,2.071,110,3.242,111,1.203,112,2.568,113,0.656,114,1.801,115,2.338,116,2.338,117,2.446,118,0.123,119,2.079,120,2.568,121,2.071,122,2.568,123,2.241,124,2.568,125,2.338,126,2.446,127,3.242,128,4.566,129,1.996,130,2.446,131,2.446,132,2.446,133,1.499,134,1.042,135,2.713,136,2.241,137,2.984,138,1.996,139,2.984,140,2.446,141,2.984,142,2.446,143,3.242,144,2.241,145,3.242,146,3.107,147,2.338,148,2.071,149,2.768,150,2.241,151,1.304,152,1.269,153,3.56,154,1.76,155,1.055,156,1.304,157,1.304,158,2.241,159,1.801,160,2.241,161,2.568,162,2.152,163,2.152,164,2.241,165,0.988,166,1.927,167,1.801,168,1.269,169,1.862,170,2.338,171,2.446,172,0.092,173,2.241,174,2.071,175,1.862,176,0.006,177,0.006]],["title/interfaces/OptionsHelper.html",[0,0.989,87,1.813]],["body/interfaces/OptionsHelper.html",[0,1.813,1,3.067,2,2.113,3,0.081,4,0.071,5,0.081,6,0.051,7,2.295,8,1.021,9,2.402,10,0.051,11,0.633,12,0.199,13,2.113,14,2.2,15,1.712,16,3.264,17,2.637,18,1.622,19,2.2,20,2.295,21,2.113,23,0.113,24,0.01,25,2.732,26,3.458,27,0.668,28,0.371,29,3.67,30,3.339,31,2.838,32,1.891,33,0.155,34,3.264,35,2.295,36,2.295,37,2.295,38,3.185,39,1.959,40,2.946,41,3.067,42,2.113,43,2.295,44,3.201,45,0.681,46,1.246,47,1.828,48,2.052,49,1.891,50,3.067,51,3.323,52,2.052,53,2.637,54,1.752,55,2.946,56,3.201,57,1.265,58,3.071,59,0.898,60,1.834,61,2.387,62,2.387,63,3.067,64,2.548,65,2.946,66,2.835,67,2.732,68,2.465,69,2.465,70,2.548,71,2.835,72,2.732,73,2.2,74,1.885,75,0.18,76,4.018,77,4.018,78,3.86,79,2.295,80,2.295,81,2.2,82,0.936,83,0.67,84,2.033,85,2.295,86,2.033,87,3.323,88,2.295,89,2.401,90,2.401,91,3.67,92,1.063,93,3.392,94,2.582,95,2.838,96,4.048,97,2.465,98,2.548,99,1.316,100,2.838,101,2.465,102,1.959,103,3.146,104,1.959,105,1.768,106,0.778,107,2.033,108,2.521,109,2.033,110,3.201,111,1.181,112,2.521,113,0.644,114,1.768,115,2.295,116,2.295,117,2.401,118,0.123,119,2.052,120,2.521,121,2.033,122,2.521,123,2.2,124,2.521,125,2.295,126,2.401,127,3.201,128,4.545,129,1.959,130,2.401,131,2.401,132,2.401,133,1.472,134,1.029,135,2.699,136,2.2,137,2.946,138,1.959,139,2.946,140,2.401,141,2.946,142,2.401,143,3.201,144,2.2,145,3.201,146,3.067,147,2.295,148,2.033,149,2.732,150,2.2,151,1.28,152,1.246,153,3.532,154,1.737,155,1.036,156,1.28,157,1.28,158,2.2,159,1.768,160,2.2,161,2.521,162,2.113,163,2.113,164,2.2,165,0.978,166,1.891,167,1.768,168,1.246,169,1.828,170,2.295,171,2.401,172,0.091,173,2.2,174,2.033,175,1.828,176,0.006,177,0.006]],["title/interfaces/Parser.html",[0,0.989,94,1.703]],["body/interfaces/Parser.html",[0,1.805,1,3.031,2,2.077,3,0.079,4,0.07,5,0.079,6,0.089,7,2.257,8,0.964,9,2.532,10,0.051,11,0.388,12,0.16,13,2.077,14,2.163,15,1.683,16,3.235,17,2.606,18,1.61,19,2.163,20,2.257,21,2.077,23,0.112,24,0.01,25,2.701,26,3.151,27,0.66,28,0.366,29,2.912,30,2.519,31,2.813,32,1.86,33,0.155,34,3.235,35,2.257,36,2.257,37,2.257,38,3.172,39,1.927,40,2.912,41,3.031,42,2.077,43,2.257,44,3.163,45,0.669,46,1.225,47,1.797,48,2.028,49,1.86,50,3.031,51,2.952,52,2.028,53,2.606,54,1.736,55,2.912,56,3.163,57,1.287,58,3.048,59,0.888,60,1.813,61,2.359,62,2.359,63,3.031,64,2.519,65,2.912,66,2.802,67,2.701,68,2.436,69,2.436,70,2.519,71,2.802,72,2.701,73,2.163,74,1.863,75,0.18,76,3.031,77,3.031,78,2.912,79,2.257,80,2.257,81,2.163,82,0.933,83,0.662,84,1.999,85,2.257,86,1.999,87,3.545,88,2.257,89,2.361,90,2.361,91,4.29,92,1.045,93,3.362,94,2.773,95,3.21,96,4.011,97,2.436,98,2.519,99,1.376,100,3.21,101,3.048,102,1.927,103,3.118,104,1.927,105,2.436,106,0.765,107,1.999,108,2.479,109,1.999,110,3.163,111,1.161,112,2.479,113,0.633,114,1.738,115,2.257,116,2.257,117,2.361,118,0.126,119,2.028,120,2.479,121,1.999,122,2.479,123,2.163,124,2.479,125,2.257,126,2.361,127,3.163,128,4.526,129,1.927,130,2.361,131,2.361,132,2.361,133,1.447,134,1.017,135,2.687,136,2.163,137,2.912,138,1.927,139,2.912,140,2.361,141,2.912,142,2.361,143,3.163,144,2.163,145,3.163,146,3.031,147,2.257,148,1.999,149,2.701,150,2.163,151,1.258,152,1.225,153,3.506,154,1.717,155,1.019,156,1.258,157,1.258,158,2.163,159,1.738,160,2.163,161,2.479,162,2.077,163,2.077,164,2.163,165,0.969,166,1.86,167,1.738,168,1.225,169,1.797,170,2.257,171,2.361,172,0.156,173,2.163,174,1.999,175,1.797,176,0.006,177,0.006,182,0.913,187,0.243,189,0.969,398,0.889,1420,2.163,1434,2.163,2810,3.991,2811,3.991,2812,3.991]],["title/interfaces/Renderable.html",[0,0.989,197,1.703]],["body/interfaces/Renderable.html",[0,1.402,2,1.55,3,0.059,4,0.052,5,0.059,6,0.077,8,0.839,10,0.038,12,0.074,18,0.685,23,0.093,24,0.01,27,0.653,28,0.296,33,0.152,57,1.349,59,1.094,75,0.171,82,0.342,83,1.076,92,2.16,99,1.657,106,1.046,113,0.717,118,0.098,134,0.541,155,1.393,165,1.354,168,0.914,172,0.066,176,0.005,177,0.005,178,0.666,179,2.162,181,1.145,182,0.737,186,1.217,187,0.205,189,0.819,190,1.217,192,1.217,194,1.18,195,1.686,196,2.961,197,2.837,198,2.926,199,2.273,200,2.457,201,1.79,202,1.217,203,2.675,204,2.594,205,2.162,206,1.18,207,1.18,208,1.217,209,1.217,210,1.217,211,1.217,212,1.217,213,1.217,214,2.413,215,2.961,216,3.584,217,1.123,218,1.505,219,1.217,220,1.112,221,1.217,222,1.18,223,1.772,224,0.264,225,2.428,226,2.819,227,1.357,228,2.675,229,0.844,230,2.675,231,2.489,232,1.217,233,1.217,234,1.846,235,1.217,236,2.162,237,1.217,238,1.217,239,1.217,240,1.217,241,1.217,242,1.217,243,1.217,244,1.217,245,1.846,246,1.846,247,1.217,248,1.217,249,1.217,250,1.846,251,1.846,252,1.217,253,1.217,254,2.162,255,1.217,256,2.489,257,1.217,258,1.846,259,1.217,260,1.217,261,2.162,262,1.217,263,1.79,264,1.217,265,1.217,266,1.217,267,1.217,268,1.217,269,1.217,270,1.217,271,2.162,272,1.217,273,1.217,274,1.217,275,1.217,276,1.217,277,1.217,278,1.217,279,1.217,280,1.217,281,1.217,282,1.217,283,1.217,284,1.217,285,1.217,286,1.217,287,1.217,288,1.18,289,1.217,290,1.217,291,1.217,292,1.217,293,1.217,294,1.217,295,1.217,296,1.217,297,1.217,298,1.217,299,1.217,300,1.217,301,1.217,302,1.217,303,2.162,304,1.217,305,1.217,306,1.217,307,1.217,308,2.162,309,1.217,310,1.846,311,1.217,312,1.217,313,1.846,314,1.217,315,2.162,316,1.217,317,1.217,318,1.217,319,2.23,320,1.846,321,3.451,322,3.6,323,1.846,324,1.217,325,1.217,326,1.217,327,1.217,328,1.217,329,2.162,330,1.217,331,1.217,332,1.217,333,1.217,334,1.217,335,1.217,336,1.217,337,1.217,338,1.217,339,1.217,340,1.217,341,1.217,342,1.217,343,1.217,344,1.217,345,1.217,346,1.217,347,1.217,348,1.217,349,1.217,350,1.217,351,1.217,352,2.162,353,1.217,354,1.217,355,1.217,356,1.217,357,1.217,358,1.217,359,1.217,360,1.217,361,1.217,362,1.217,363,1.217,364,1.638,365,1.846,366,1.217,367,1.217,368,1.217,369,1.145,370,1.217,371,2.162,372,1.846,373,1.846,374,1.79,375,1.217,376,1.217,377,1.217,378,2.162,379,1.217,380,1.217,381,1.217,382,1.217,383,2.816,384,1.217,385,1.217,386,2.816,387,1.217,388,0.992,389,1.217,390,1.217,398,0.41,2813,2.978,2814,2.978,2815,2.978]],["title/interfaces/ResponseJson.html",[0,0.989,2016,3.441]],["body/interfaces/ResponseJson.html",[0,1.322,2,2.99,3,0.114,4,0.1,5,0.114,6,0.073,8,0.791,10,0.073,11,0.691,17,3.765,22,2.244,23,0.109,24,0.01,28,0.466,33,0.1,38,2.276,47,2.587,75,0.176,82,0.927,83,0.68,98,3.638,102,3.901,106,1.549,113,1.227,118,0.125,165,0.862,176,0.008,177,0.008,178,0.453,217,2.105,224,0.278,229,2.017,717,4.42,928,4.802,1113,3.113,1125,4.372,1129,5.991,1160,4.574,1164,4.259,1168,4.024,1186,5.991,1241,4.599,1291,4.66,1294,5.609,1297,3.988,1305,5.609,1308,2.502,1312,3.762,1321,3.988,1334,3.988,1348,4.259,2002,5.697,2003,4.599,2004,4.599,2005,4.599,2006,4.599,2007,4.599,2008,5.054,2009,7.445,2016,5.697,2017,5.054,2018,5.054,2019,5.054,2020,5.054,2021,6.26,2022,5.054,2023,5.054,2024,5.054,2025,5.054,2026,5.054,2027,5.054]],["title/interfaces/ResponseOptions.html",[0,0.989,88,2.431]],["body/interfaces/ResponseOptions.html",[0,1.822,1,3.104,2,2.149,3,0.082,4,0.072,5,0.082,6,0.052,7,2.335,8,1.027,9,2.366,10,0.052,11,0.639,12,0.176,13,2.149,14,2.238,15,1.741,16,3.294,17,2.669,18,1.634,19,2.238,20,2.335,21,2.149,23,0.112,24,0.01,25,2.765,26,3.198,27,0.662,28,0.375,29,2.981,30,2.579,31,2.864,32,1.924,33,0.155,34,3.294,35,2.335,36,2.335,37,2.335,38,3.198,39,1.993,40,2.981,41,3.104,42,2.149,43,2.335,44,4.017,45,0.692,46,1.267,47,1.859,48,2.077,49,1.924,50,3.104,51,2.995,52,2.077,53,2.669,54,1.768,55,2.981,56,3.239,57,1.269,58,3.094,59,0.909,60,1.856,61,2.415,62,2.415,63,3.104,64,2.579,65,2.981,66,2.869,67,2.765,68,2.495,69,2.495,70,2.579,71,2.869,72,2.765,73,2.238,74,1.908,75,0.18,76,3.104,77,3.104,78,2.981,79,2.335,80,2.335,81,2.238,82,0.962,83,0.678,84,2.068,85,2.335,86,2.068,87,3.339,88,3.239,89,4.203,90,4.203,91,3.697,92,1.082,93,3.423,94,2.606,95,2.864,96,4.085,97,2.495,98,2.579,99,1.326,100,2.864,101,2.495,102,1.993,103,3.175,104,1.993,105,1.798,106,0.792,107,2.068,108,2.565,109,2.068,110,3.239,111,1.201,112,2.565,113,0.655,114,1.798,115,2.335,116,2.335,117,2.443,118,0.123,119,2.077,120,2.565,121,2.068,122,2.565,123,2.238,124,2.565,125,2.335,126,2.443,127,3.239,128,4.565,129,1.993,130,2.443,131,2.443,132,2.443,133,1.497,134,1.041,135,2.712,136,2.238,137,2.981,138,1.993,139,2.981,140,2.443,141,2.981,142,2.443,143,3.239,144,2.238,145,3.239,146,3.104,147,2.335,148,2.068,149,2.765,150,2.238,151,1.302,152,1.267,153,3.558,154,1.758,155,1.054,156,1.302,157,1.302,158,2.238,159,1.798,160,2.238,161,2.565,162,2.149,163,2.149,164,2.238,165,0.987,166,1.924,167,1.798,168,1.267,169,1.859,170,2.335,171,2.443,172,0.092,173,2.238,174,2.068,175,1.859,176,0.006,177,0.006]],["title/classes/SegmentHandler.html",[178,0.339,2101,3.186]],["body/classes/SegmentHandler.html",[3,0.105,4,0.092,5,0.105,6,0.111,10,0.067,12,0.201,23,0.11,24,0.01,27,0.502,28,0.513,33,0.118,49,2.455,52,1.91,53,2.455,54,1.417,55,2.742,57,1.318,59,0.836,60,1.707,75,0.164,83,1.048,99,1.571,111,1.961,113,1.285,118,0.128,152,2.068,172,0.192,176,0.008,177,0.008,178,0.532,180,0.255,182,1.099,187,0.326,189,1.279,224,0.255,364,1.91,398,1.078,578,3.652,710,1.86,865,2.308,1085,2.742,1158,4.678,1212,4.413,1271,4.678,1604,5.421,1715,2.742,2076,5.436,2082,4.996,2087,4.218,2101,4.996,2161,4.218,2162,4.635,2171,4.218,2172,4.635,2173,5.928,2174,5.928,2175,5.928,2176,5.928,2177,5.928,2178,6.536,2179,6.89,2180,4.635,2181,6.89,2182,5.928,2183,6.536,2184,6.89,2185,4.635,2186,6.89,2187,4.635,2188,4.635,2189,4.635,2190,4.635,2191,4.635,2192,4.635,2193,4.635,2233,4.635,2816,5.268,2817,5.268,2818,5.268,2819,5.268,2820,5.268,2821,5.268,2822,5.268,2823,5.268,2824,5.268,2825,5.268,2826,5.268]],["title/classes/StringAndCollectionFunctions.html",[178,0.339,236,1.703]],["body/classes/StringAndCollectionFunctions.html",[0,1.355,3,0.055,4,0.049,5,0.055,6,0.092,8,0.811,10,0.035,12,0.174,18,0.642,23,0.101,24,0.01,27,0.663,28,0.282,33,0.151,57,1.354,59,1.256,75,0.169,82,0.32,83,1.073,92,2.212,99,1.672,106,1.005,113,0.682,118,0.116,134,0.507,155,1.338,165,1.35,168,0.857,172,0.156,176,0.005,177,0.005,178,0.66,179,2.078,180,0.135,181,1.073,182,0.701,186,1.141,187,0.263,189,1.05,190,1.141,192,1.141,194,1.106,195,1.605,196,2.778,197,2.662,198,2.745,199,1.042,200,2.119,201,1.704,202,1.141,203,2.599,204,2.52,205,2.078,206,1.106,207,1.106,208,1.141,209,1.141,210,1.141,211,1.141,212,1.141,213,1.141,214,1.704,215,2.875,216,3.596,217,1.069,218,1.432,219,1.141,220,1.042,221,1.141,222,1.106,223,1.714,224,0.254,225,2.387,226,2.767,227,1.304,228,2.599,229,0.791,230,2.599,231,2.407,232,1.141,233,1.141,234,1.757,235,1.141,236,2.334,237,1.757,238,1.141,239,1.757,240,1.141,241,1.757,242,1.141,243,1.757,244,1.141,245,2.142,246,1.757,247,1.757,248,1.141,249,1.757,250,2.407,251,2.745,252,1.141,253,1.141,254,2.078,255,1.141,256,2.407,257,1.141,258,1.757,259,1.141,260,1.141,261,2.078,262,1.141,263,1.704,264,1.141,265,1.141,266,1.141,267,1.141,268,1.141,269,1.141,270,1.141,271,2.078,272,1.141,273,1.141,274,1.141,275,1.141,276,1.141,277,1.141,278,1.141,279,1.141,280,1.141,281,1.141,282,1.141,283,1.141,284,1.141,285,1.141,286,1.141,287,1.141,288,1.106,289,1.141,290,1.141,291,1.141,292,1.141,293,1.141,294,1.141,295,1.141,296,1.141,297,1.141,298,1.141,299,1.141,300,1.141,301,1.141,302,1.141,303,2.078,304,1.141,305,1.141,306,1.141,307,1.141,308,2.078,309,1.141,310,1.757,311,1.141,312,1.141,313,1.757,314,1.141,315,2.078,316,1.141,317,1.141,318,1.141,319,2.142,320,1.757,321,3.418,322,3.579,323,1.757,324,1.141,325,1.141,326,1.141,327,1.141,328,1.141,329,2.078,330,1.141,331,1.141,332,1.141,333,1.141,334,1.141,335,1.141,336,1.141,337,1.141,338,1.141,339,1.141,340,1.141,341,1.141,342,1.141,343,1.141,344,1.141,345,1.141,346,1.141,347,1.141,348,1.141,349,1.141,350,1.141,351,1.141,352,2.078,353,1.141,354,1.141,355,1.141,356,1.141,357,1.141,358,1.141,359,1.141,360,1.141,361,1.141,362,1.141,363,1.141,364,1.559,365,1.757,366,1.141,367,1.141,368,1.141,369,1.073,370,1.141,371,2.078,372,1.757,373,1.757,374,1.704,375,1.141,376,1.141,377,1.141,378,2.078,379,1.141,380,1.141,381,1.141,382,1.141,383,2.745,384,1.141,385,1.141,386,2.745,387,1.141,388,0.93,389,1.141,390,1.141,398,0.995,2827,4.299,2828,4.299,2829,4.299,2830,4.299,2831,4.299,2832,4.299,2833,2.791,2834,2.791,2835,2.791,2836,2.791,2837,2.791,2838,2.791,2839,2.791]],["title/classes/StringFunctions.html",[178,0.339,261,1.703]],["body/classes/StringFunctions.html",[0,1.387,3,0.058,4,0.051,5,0.058,6,0.082,8,0.83,10,0.037,12,0.149,18,0.672,23,0.099,24,0.01,27,0.652,28,0.291,33,0.152,57,1.351,59,1.216,75,0.172,82,0.335,83,1.075,92,2.152,99,1.669,106,1.033,113,0.706,118,0.11,134,0.531,155,1.376,165,1.353,168,0.896,172,0.135,176,0.005,177,0.005,178,0.664,179,2.136,180,0.141,181,1.122,182,0.726,186,1.193,187,0.227,189,0.905,190,1.193,192,1.193,194,1.156,195,1.66,196,2.818,197,2.709,198,2.794,199,1.089,200,2.161,201,1.763,202,1.193,203,2.651,204,2.571,205,2.136,206,1.156,207,1.156,208,1.193,209,1.193,210,1.193,211,1.193,212,1.193,213,1.193,214,1.763,215,2.907,216,3.581,217,1.106,218,1.482,219,1.193,220,1.089,221,1.193,222,1.156,223,1.754,224,0.261,225,2.415,226,2.803,227,1.34,228,2.651,229,0.827,230,2.651,231,2.463,232,1.193,233,1.193,234,1.818,235,1.193,236,2.136,237,1.193,238,1.193,239,1.193,240,1.193,241,1.193,242,1.193,243,1.193,244,1.193,245,1.818,246,1.818,247,1.193,248,1.193,249,1.193,250,1.818,251,1.818,252,1.193,253,1.193,254,2.136,255,1.193,256,2.463,257,1.193,258,1.818,259,1.193,260,1.193,261,2.388,262,1.818,263,2.388,264,1.193,265,1.818,266,1.193,267,1.818,268,1.193,269,1.818,270,1.193,271,2.136,272,1.193,273,1.193,274,1.193,275,1.193,276,1.193,277,1.193,278,1.193,279,1.193,280,1.193,281,1.193,282,1.193,283,1.193,284,1.193,285,1.193,286,1.193,287,1.193,288,1.156,289,1.193,290,1.193,291,1.193,292,1.193,293,1.193,294,1.193,295,1.193,296,1.193,297,1.193,298,1.193,299,1.193,300,1.193,301,1.193,302,1.193,303,2.136,304,1.193,305,1.193,306,1.193,307,1.193,308,2.136,309,1.193,310,1.818,311,1.193,312,1.193,313,1.818,314,1.193,315,2.136,316,1.193,317,1.193,318,1.193,319,2.202,320,1.818,321,3.441,322,3.593,323,1.818,324,1.193,325,1.193,326,1.193,327,1.193,328,1.193,329,2.136,330,1.193,331,1.193,332,1.193,333,1.193,334,1.193,335,1.193,336,1.193,337,1.193,338,1.193,339,1.193,340,1.193,341,1.193,342,1.193,343,1.193,344,1.193,345,1.193,346,1.193,347,1.193,348,1.193,349,1.193,350,1.193,351,1.193,352,2.136,353,1.193,354,1.193,355,1.193,356,1.193,357,1.193,358,1.193,359,1.193,360,1.193,361,1.193,362,1.193,363,1.193,364,1.613,365,1.818,366,1.193,367,1.193,368,1.193,369,1.122,370,1.193,371,2.136,372,1.818,373,1.818,374,1.763,375,1.193,376,1.193,377,1.193,378,2.136,379,1.193,380,1.193,381,1.193,382,1.193,383,2.794,384,1.193,385,1.193,386,2.794,387,1.193,388,0.972,389,1.193,390,1.193,2676,3.913,2840,4.448,2841,4.448,2842,4.448,2843,2.918,2844,2.918,2845,2.918,2846,2.918]],["title/interfaces/StructuredTypeFieldOptions.html",[0,0.989,91,2.237]],["body/interfaces/StructuredTypeFieldOptions.html",[0,1.826,1,3.12,2,2.166,3,0.083,4,0.073,5,0.083,6,0.053,7,2.353,8,1.03,9,2.371,10,0.053,11,0.641,13,2.166,14,2.255,15,1.755,16,3.308,17,2.683,18,1.64,19,2.255,20,2.353,21,2.166,23,0.112,24,0.01,25,2.78,26,3.209,27,0.662,28,0.377,29,2.997,30,2.593,31,2.876,32,1.939,33,0.155,34,3.308,35,2.353,36,2.353,37,2.353,38,3.204,39,2.009,40,2.997,41,3.12,42,2.166,43,2.353,44,3.256,45,0.698,46,1.277,47,1.873,48,2.088,49,1.939,50,3.12,51,3.005,52,2.088,53,2.683,54,1.775,55,2.997,56,3.256,57,1.271,58,3.104,59,0.914,60,1.866,61,2.428,62,2.428,63,3.12,64,2.593,65,2.997,66,2.884,67,2.78,68,2.508,69,2.508,70,2.593,71,2.884,72,2.78,73,2.255,74,1.918,75,0.18,76,3.12,77,3.12,78,2.997,79,2.353,80,2.353,81,2.255,82,0.942,83,0.682,84,2.084,85,2.353,86,2.084,87,3.346,88,2.353,89,2.462,90,2.462,91,3.894,92,1.867,93,3.894,94,2.616,95,2.876,96,4.101,97,2.508,98,2.593,99,1.33,100,2.876,101,2.508,102,2.009,103,3.188,104,2.009,105,1.812,106,0.798,107,2.084,108,2.584,109,2.084,110,3.256,111,1.211,112,2.584,113,0.66,114,1.812,115,2.353,116,2.353,117,2.462,118,0.123,119,2.088,120,2.584,121,2.084,122,2.584,123,2.255,124,2.584,125,2.353,126,2.462,127,3.256,128,4.573,129,2.009,130,2.462,131,2.462,132,2.462,133,1.508,134,1.047,135,2.718,136,2.255,137,2.997,138,2.009,139,2.997,140,2.462,141,2.997,142,2.462,143,3.256,144,2.255,145,3.256,146,3.12,147,2.353,148,2.084,149,2.78,150,2.255,151,1.312,152,1.277,153,3.57,154,1.767,155,1.062,156,1.312,157,1.312,158,2.255,159,1.812,160,2.255,161,2.584,162,2.166,163,2.166,164,2.255,165,0.991,166,1.939,167,1.812,168,1.277,169,1.873,170,2.353,171,2.462,172,0.093,173,2.255,174,2.084,175,1.873,176,0.006,177,0.006]],["title/classes/TypeFunctions.html",[178,0.339,303,1.703]],["body/classes/TypeFunctions.html",[0,1.395,3,0.059,4,0.052,5,0.059,6,0.069,8,0.835,10,0.037,12,0.111,18,0.68,23,0.101,24,0.01,27,0.653,28,0.294,33,0.152,57,1.35,59,1.167,75,0.174,82,0.339,83,1.075,92,2.157,99,1.663,106,1.041,113,0.712,118,0.103,134,0.537,155,1.386,165,1.354,168,0.906,172,0.1,176,0.005,177,0.005,178,0.665,179,2.151,180,0.143,181,1.135,182,0.732,186,1.207,187,0.169,189,0.674,190,1.207,192,1.207,194,1.17,195,1.675,196,2.828,197,2.722,198,2.807,199,1.102,200,2.173,201,1.778,202,1.207,203,2.665,204,2.585,205,2.151,206,1.17,207,1.17,208,1.207,209,1.207,210,1.207,211,1.207,212,1.207,213,1.207,214,1.778,215,2.915,216,3.583,217,1.116,218,1.495,219,1.207,220,1.102,221,1.207,222,1.17,223,1.765,224,0.263,225,2.423,226,2.812,227,1.35,228,2.665,229,0.837,230,2.665,231,2.478,232,1.207,233,1.207,234,1.834,235,1.207,236,2.151,237,1.207,238,1.207,239,1.207,240,1.207,241,1.207,242,1.207,243,1.207,244,1.207,245,1.834,246,1.834,247,1.207,248,1.207,249,1.207,250,1.834,251,1.834,252,1.207,253,1.207,254,2.151,255,1.207,256,2.478,257,1.207,258,1.834,259,1.207,260,1.207,261,2.151,262,1.207,263,1.778,264,1.207,265,1.207,266,1.207,267,1.207,268,1.207,269,1.207,270,1.207,271,2.151,272,1.207,273,1.207,274,1.207,275,1.207,276,1.207,277,1.207,278,1.207,279,1.207,280,1.207,281,1.207,282,1.207,283,1.207,284,1.207,285,1.207,286,1.207,287,1.207,288,1.17,289,1.207,290,1.207,291,1.207,292,1.207,293,1.207,294,1.207,295,1.207,296,1.207,297,1.207,298,1.207,299,1.207,300,1.207,301,1.207,302,1.207,303,2.403,304,1.834,305,1.207,306,1.834,307,1.207,308,2.151,309,1.207,310,1.834,311,1.207,312,1.207,313,1.834,314,1.207,315,2.151,316,1.207,317,1.207,318,1.207,319,2.218,320,1.834,321,3.446,322,3.597,323,1.834,324,1.207,325,1.207,326,1.207,327,1.207,328,1.207,329,2.151,330,1.207,331,1.207,332,1.207,333,1.207,334,1.207,335,1.207,336,1.207,337,1.207,338,1.207,339,1.207,340,1.207,341,1.207,342,1.207,343,1.207,344,1.207,345,1.207,346,1.207,347,1.207,348,1.207,349,1.207,350,1.207,351,1.207,352,2.151,353,1.207,354,1.207,355,1.207,356,1.207,357,1.207,358,1.207,359,1.207,360,1.207,361,1.207,362,1.207,363,1.207,364,1.627,365,1.834,366,1.207,367,1.207,368,1.207,369,1.135,370,1.207,371,2.151,372,1.834,373,1.834,374,1.778,375,1.207,376,1.207,377,1.207,378,2.151,379,1.207,380,1.207,381,1.207,382,1.207,383,2.807,384,1.207,385,1.207,386,2.807,387,1.207,388,0.984,389,1.207,390,1.207,398,0.618,2847,4.488,2848,4.488,2849,2.953,2850,2.953]],["title/dependencies.html",[2851,3.578,2852,4.553]],["body/dependencies.html",[24,0.01,32,3.186,176,0.009,177,0.009,2039,5.068,2852,6.014,2853,6.836,2854,8.936,2855,6.836,2856,6.836,2857,6.836,2858,7.897,2859,7.897,2860,6.836,2861,6.836,2862,6.836,2863,6.836,2864,6.836,2865,6.836,2866,6.836]],["title/miscellaneous/enumerations.html",[2867,2.343,2868,4.553]],["body/miscellaneous/enumerations.html",[6,0.106,7,3.375,10,0.076,23,0.092,24,0.01,25,3.517,49,3.395,50,3.948,51,3.072,52,2.641,53,3.395,54,1.959,55,3.792,56,4.12,57,1.379,58,3.567,59,1.156,60,2.361,61,3.072,62,3.072,63,3.948,64,3.28,65,3.792,66,3.649,67,3.517,68,3.173,69,3.173,70,3.28,71,3.649,134,1.085,176,0.008,177,0.008,704,5.251,705,6.409,714,5.251,715,5.251,1138,5.251,1718,3.707,2867,3.908,2868,5.251,2869,7.285,2870,5.968,2871,5.968,2872,7.285,2873,4.778,2874,5.832,2875,7.285,2876,5.832,2877,7.285,2878,5.968,2879,4.778,2880,5.968,2881,5.968,2882,5.968,2883,5.968,2884,4.778,2885,5.251,2886,7.285,2887,7.285,2888,7.285,2889,7.285,2890,7.285]],["title/miscellaneous/functions.html",[388,1.724,2867,2.343]],["body/miscellaneous/functions.html",[6,0.107,9,2.1,10,0.059,12,0.223,18,1.439,23,0.112,24,0.01,27,0.524,57,1.276,58,3.264,59,0.992,60,2.428,61,3.16,62,3.384,64,3.613,65,3.9,66,3.753,67,3.954,68,3.264,69,3.264,70,3.374,71,3.753,75,0.179,82,0.539,98,2.815,115,2.656,118,0.135,119,2.717,152,2.395,164,3.388,172,0.2,176,0.007,177,0.007,181,1.806,189,1.248,194,2.477,206,1.861,207,2.477,214,2.477,215,3.223,216,2.477,217,1.168,222,1.861,288,2.785,388,1.565,398,0.968,578,2.545,1645,5.998,1721,3.076,2031,4.132,2046,4.132,2052,5.5,2071,3.76,2076,4.34,2082,3.482,2098,5.005,2103,5.5,2107,6.591,2118,4.132,2867,3.076,2873,5.005,2874,5.005,2876,6.988,2879,3.76,2884,3.76,2891,6.252,2892,4.697,2893,6.252,2894,5.5,2895,6.252,2896,6.252,2897,6.252,2898,6.252,2899,6.252,2900,6.252,2901,6.252,2902,6.252,2903,6.252,2904,4.697,2905,6.252,2906,6.252,2907,4.697,2908,6.252,2909,6.252,2910,4.697,2911,6.252,2912,4.132,2913,6.252,2914,7.027,2915,4.697,2916,4.697,2917,4.697,2918,4.697,2919,4.697,2920,4.132,2921,4.697,2922,4.697,2923,4.697,2924,6.252,2925,4.697,2926,4.697,2927,6.182,2928,4.697,2929,6.252,2930,4.697,2931,4.697,2932,4.697,2933,4.697,2934,4.697,2935,4.697,2936,6.252,2937,6.252,2938,4.697,2939,4.697,2940,4.697,2941,4.697,2942,6.252,2943,4.697,2944,4.697,2945,4.697,2946,6.252,2947,4.697,2948,4.697,2949,4.697,2950,6.252,2951,4.697,2952,7.027,2953,4.697,2954,4.697]],["title/index.html",[10,0.045,2955,3.148,2956,3.148]],["body/index.html",[4,0.077,16,2.202,24,0.01,28,0.537,33,0.119,38,2.693,39,2.122,42,2.288,47,1.979,58,1.915,61,2.522,62,2.522,64,3.284,72,3.281,104,3.887,114,1.915,117,2.601,118,0.066,135,2.758,138,4.177,152,1.349,165,0.66,174,2.995,176,0.007,177,0.007,178,0.536,195,2.848,227,1.69,391,3.259,489,2.693,641,4.787,717,2.731,850,3.519,927,4.45,1000,2.049,1004,4.938,1010,6.96,1034,2.288,1078,3.113,1080,3.259,1085,4.265,1113,2.382,1182,2.122,1210,4.787,1220,3.867,1457,5.063,1630,3.867,1651,3.519,1681,5.978,1694,3.867,1778,2.731,1911,3.519,2028,4.787,2029,4.433,2033,4.433,2038,6.416,2039,5.038,2048,5.261,2171,3.519,2236,3.519,2609,4.787,2628,7.611,2957,8.307,2958,4.396,2959,4.396,2960,4.396,2961,4.396,2962,4.396,2963,4.396,2964,4.396,2965,5.98,2966,7.293,2967,4.396,2968,4.396,2969,7.293,2970,4.396,2971,4.396,2972,4.396,2973,5.98,2974,4.396,2975,6.416,2976,4.396,2977,5.98,2978,4.396,2979,4.396,2980,4.396,2981,5.98,2982,4.396,2983,5.98,2984,4.396,2985,4.396,2986,4.396,2987,4.396,2988,4.396,2989,4.396,2990,4.396,2991,4.396,2992,4.396,2993,5.98,2994,4.396,2995,4.396,2996,4.396,2997,5.98,2998,8.892,2999,4.396,3000,4.396,3001,4.396,3002,6.796,3003,8.193,3004,4.396,3005,4.396,3006,4.396,3007,6.796,3008,4.396,3009,4.396,3010,4.396,3011,4.396,3012,6.796,3013,5.98,3014,5.98,3015,4.396,3016,5.98,3017,5.98,3018,7.293,3019,5.261,3020,5.98,3021,4.396,3022,5.98,3023,4.396,3024,4.396,3025,4.396,3026,4.396,3027,4.396,3028,8.307,3029,4.396,3030,4.396,3031,4.396,3032,7.293,3033,4.396,3034,6.796,3035,4.396,3036,4.396,3037,4.396,3038,4.396,3039,4.396,3040,4.396,3041,4.396,3042,4.396,3043,5.98,3044,4.396,3045,5.98,3046,4.396,3047,4.396,3048,4.396,3049,4.396,3050,4.396,3051,4.396,3052,4.396,3053,4.396,3054,4.396,3055,3.867,3056,4.396,3057,4.396,3058,4.396,3059,4.396,3060,4.396,3061,4.396,3062,5.98,3063,5.98,3064,4.396,3065,4.396,3066,4.396,3067,4.396,3068,4.396]],["title/license.html",[2955,3.148,2956,3.148,3069,3.148]],["body/license.html",[24,0.009,60,2.08,176,0.009,177,0.009,1121,5.646,1440,6.092,1457,5.283,1634,3.986,1641,5.137,1688,5.631,2975,5.646,3069,5.646,3070,6.417,3071,8.112,3072,6.417,3073,6.417,3074,6.417,3075,6.417,3076,7.61,3077,6.417,3078,6.417,3079,6.417,3080,6.417,3081,6.417,3082,6.417,3083,7.61,3084,8.896,3085,6.417,3086,6.417,3087,6.417,3088,6.417,3089,6.417,3090,6.417,3091,6.417,3092,6.417,3093,6.417,3094,6.417,3095,6.417,3096,6.417,3097,7.61,3098,6.417,3099,6.417,3100,6.417,3101,6.417,3102,6.417,3103,6.417,3104,7.61,3105,7.61,3106,6.417,3107,6.417,3108,6.417,3109,6.417,3110,6.417,3111,6.417,3112,6.417,3113,6.417,3114,6.417,3115,6.417,3116,6.417,3117,6.417,3118,6.417,3119,6.417,3120,6.417,3121,6.417,3122,6.417,3123,6.417,3124,6.417,3125,6.417,3126,6.417,3127,6.417,3128,6.417,3129,6.417,3130,6.417,3131,6.417,3132,6.417,3133,6.417,3134,6.417,3135,6.417]],["title/modules.html",[2030,4.714]],["body/modules.html",[24,0.009,176,0.009,177,0.009,2029,5.273,2030,5.694,3136,7.113]],["title/overview.html",[3137,5.18]],["body/overview.html",[2,3.676,24,0.009,176,0.009,177,0.009,180,0.342,1183,2.886,2028,5.654,2752,6.213,3055,6.213,3137,6.213,3138,7.062,3139,7.062]],["title/miscellaneous/typealiases.html",[2867,2.343,3140,5.175]],["body/miscellaneous/typealiases.html",[6,0.11,7,2.758,10,0.062,16,3.211,22,2.86,23,0.115,24,0.01,26,2.886,27,0.364,34,3.211,35,2.758,36,2.758,37,2.758,38,3.13,39,2.355,40,3.337,41,2.643,42,2.539,43,2.758,44,3.625,45,0.818,46,1.497,47,2.196,57,0.962,59,0.774,61,2.703,62,2.703,64,2.886,66,3.211,67,3.095,75,0.164,82,0.735,92,1.679,93,3.337,97,2.124,103,3.095,116,3.625,121,2.443,127,3.625,128,3.625,137,3.337,139,3.337,141,3.337,143,3.625,145,3.625,146,3.474,176,0.007,177,0.007,181,1.875,196,2.924,201,2.837,215,1.82,391,3.616,465,3.778,931,4.197,1088,4.449,1103,4.449,1110,4.752,1111,4.449,1112,5.131,1157,4.752,1372,3.385,1598,3.616,1604,4.197,1629,4.29,1636,2.886,1651,3.904,1653,4.29,1712,3.616,1720,4.752,1721,3.194,1722,4.752,1724,4.752,1725,4.752,1726,4.752,2071,3.904,2076,4.449,2237,5.131,2330,4.29,2769,4.29,2867,3.194,2873,7.052,2874,7.12,2876,7.138,2879,3.904,2884,3.904,2885,5.639,2894,5.639,2912,4.29,2920,5.639,2927,5.639,3019,4.29,3141,4.877,3142,4.877,3143,7.159,3144,6.409,3145,7.604,3146,7.604,3147,7.899,3148,6.409,3149,6.409,3150,7.159,3151,6.409,3152,4.877,3153,6.409,3154,6.409,3155,6.409,3156,6.409,3157,6.409,3158,6.409,3159,6.409,3160,6.409,3161,6.409,3162,7.159,3163,7.604,3164,6.409,3165,7.604,3166,6.409,3167,4.877,3168,4.877,3169,6.409,3170,4.877,3171,4.877,3172,4.877,3173,4.877,3174,4.877,3175,4.877]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":830,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["0.11.4",{"_index":2866,"title":{},"body":{"dependencies.html":{}}}],["07/schema",{"_index":1880,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["1",{"_index":1183,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{},"overview.html":{}}}],["11",{"_index":3139,"title":{},"body":{"overview.html":{}}}],["110",{"_index":3138,"title":{},"body":{"overview.html":{}}}],["12.2.0",{"_index":2854,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":3055,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.0",{"_index":35,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["2.3.0",{"_index":2864,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1184,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["2019",{"_index":3072,"title":{},"body":{"license.html":{}}}],["3",{"_index":3054,"title":{},"body":{"index.html":{}}}],["3.0",{"_index":36,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["4",{"_index":3049,"title":{},"body":{"index.html":{}}}],["4.0",{"_index":37,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["404",{"_index":1697,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["6.6.0",{"_index":2862,"title":{},"body":{"dependencies.html":{}}}],["9a",{"_index":1789,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["_annotations",{"_index":2543,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_body",{"_index":2395,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_context",{"_index":2544,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_functions",{"_index":977,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_headers",{"_index":2396,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_method",{"_index":2397,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_options",{"_index":2545,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_params",{"_index":2398,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_path",{"_index":2399,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_payload",{"_index":2546,"title":{},"body":{"classes/ODataResponse.html":{}}}],["_properties",{"_index":972,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["_querybody",{"_index":2400,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_requests",{"_index":1206,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["_responsetype",{"_index":2401,"title":{},"body":{"classes/ODataRequest.html":{}}}],["_segments",{"_index":2072,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["a.term",{"_index":1757,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["above",{"_index":3103,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":1167,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["abstract",{"_index":467,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["acc",{"_index":1352,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["acc.params",{"_index":2120,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["acc.paths.push(path",{"_index":2119,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["accept",{"_index":13,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["accept.length",{"_index":2493,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push",{"_index":2487,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`odata.metadata=${this.api.options.accept?.metadata",{"_index":2484,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accept.push(`streaming=${this.api.options.accept?.streaming",{"_index":2490,"title":{},"body":{"classes/ODataRequest.html":{}}}],["accessors",{"_index":865,"title":{},"body":{"classes/Function.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"classes/SegmentHandler.html":{}}}],["action",{"_index":60,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["action.ts",{"_index":415,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["action.ts:1",{"_index":528,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:12",{"_index":421,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:14",{"_index":424,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:15",{"_index":426,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:16",{"_index":423,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:17",{"_index":422,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:18",{"_index":425,"title":{},"body":{"classes/CsdlAction.html":{}}}],["action.ts:22",{"_index":535,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:24",{"_index":539,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:25",{"_index":537,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:26",{"_index":536,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:27",{"_index":538,"title":{},"body":{"classes/CsdlFunctionImport.html":{}}}],["action.ts:3",{"_index":532,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:31",{"_index":434,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:33",{"_index":437,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:34",{"_index":435,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:35",{"_index":436,"title":{},"body":{"classes/CsdlActionImport.html":{}}}],["action.ts:39",{"_index":585,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:4",{"_index":534,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:41",{"_index":587,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:42",{"_index":592,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:43",{"_index":588,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:44",{"_index":586,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:45",{"_index":589,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:46",{"_index":590,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:47",{"_index":591,"title":{},"body":{"classes/CsdlParameter.html":{}}}],["action.ts:5",{"_index":530,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:51",{"_index":611,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:53",{"_index":617,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:54",{"_index":613,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:55",{"_index":612,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:56",{"_index":614,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:57",{"_index":615,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:58",{"_index":616,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["action.ts:6",{"_index":529,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:7",{"_index":531,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["action.ts:8",{"_index":533,"title":{},"body":{"classes/CsdlFunction.html":{}}}],["actionimport",{"_index":758,"title":{},"body":{"classes/Field.html":{}}}],["actionimports",{"_index":491,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["actions",{"_index":620,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["add",{"_index":391,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/ODataPathSegments.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["add(left",{"_index":353,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["add(name",{"_index":2078,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["addbody",{"_index":2891,"title":{},"body":{"miscellaneous/functions.html":{}}}],["addbody(options",{"_index":2916,"title":{},"body":{"miscellaneous/functions.html":{}}}],["added",{"_index":2880,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["additionalitems",{"_index":1809,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["addressinfo",{"_index":3033,"title":{},"body":{"index.html":{}}}],["again",{"_index":3007,"title":{},"body":{"index.html":{}}}],["aggregate",{"_index":2920,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["airport",{"_index":3006,"title":{},"body":{"index.html":{}}}],["airports",{"_index":2998,"title":{},"body":{"index.html":{}}}],["airports.entity(\"cyyz\").fetch",{"_index":3010,"title":{},"body":{"index.html":{}}}],["airports.fetch",{"_index":3041,"title":{},"body":{"index.html":{}}}],["airports.fetch().subscribe",{"_index":3001,"title":{},"body":{"index.html":{}}}],["airports.query((q",{"_index":3020,"title":{},"body":{"index.html":{}}}],["airports.tojson",{"_index":3023,"title":{},"body":{"index.html":{}}}],["airportsservice",{"_index":2996,"title":{},"body":{"index.html":{}}}],["airportsservice.entities",{"_index":3000,"title":{},"body":{"index.html":{}}}],["alias",{"_index":134,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{}}}],["alias(value",{"_index":2273,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["aliases",{"_index":215,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["all(field",{"_index":381,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["allows",{"_index":1234,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["and(left",{"_index":342,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["and/or",{"_index":3095,"title":{},"body":{"license.html":{}}}],["angular",{"_index":2957,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":2853,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":2855,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":1154,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"modules/ODataModule.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["angular/compiler",{"_index":2856,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":2039,"title":{},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"dependencies.html":{},"index.html":{}}}],["angular/forms",{"_index":2857,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":2858,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":2861,"title":{},"body":{"dependencies.html":{}}}],["angularodataentity",{"_index":2970,"title":{},"body":{"index.html":{}}}],["annot",{"_index":916,"title":{},"body":{"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["annot.term",{"_index":923,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["annotation",{"_index":545,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["annotation.string",{"_index":1940,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["annotation.ts",{"_index":439,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{}}}],["annotation.ts:1",{"_index":443,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:15",{"_index":455,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:16",{"_index":456,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["annotation.ts:19",{"_index":657,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:2",{"_index":444,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["annotation.ts:21",{"_index":662,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:22",{"_index":667,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:23",{"_index":659,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:24",{"_index":660,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:25",{"_index":658,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:26",{"_index":663,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:27",{"_index":661,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:28",{"_index":664,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:29",{"_index":665,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:30",{"_index":666,"title":{},"body":{"classes/CsdlTerm.html":{}}}],["annotation.ts:5",{"_index":458,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:7",{"_index":460,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotation.ts:9",{"_index":459,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["annotationconfig",{"_index":128,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["annotationlist",{"_index":440,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["annotations",{"_index":135,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["annotations=${this.api.options.prefer?.includeannotations",{"_index":2505,"title":{},"body":{"classes/ODataRequest.html":{}}}],["annotationslist",{"_index":621,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["annots",{"_index":2628,"title":{},"body":{"classes/ODataResponse.html":{},"index.html":{}}}],["annots.data(payload",{"_index":2630,"title":{},"body":{"classes/ODataResponse.html":{}}}],["any(field",{"_index":379,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["any)[f.name",{"_index":1848,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["any[]).map((v",{"_index":1771,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["api",{"_index":1078,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["apiconfig",{"_index":116,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"modules/ODataModule.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["apinameorentitytype",{"_index":1081,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["apioptions",{"_index":1,"title":{"interfaces/ApiOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["app",{"_index":2986,"title":{},"body":{"index.html":{}}}],["app.component.css",{"_index":2991,"title":{},"body":{"index.html":{}}}],["app.component.html",{"_index":2989,"title":{},"body":{"index.html":{}}}],["appcomponent",{"_index":2992,"title":{},"body":{"index.html":{}}}],["application/json;${accept.join",{"_index":2495,"title":{},"body":{"classes/ODataRequest.html":{}}}],["application_http",{"_index":1135,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["application_json",{"_index":1136,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["appliesto",{"_index":453,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["apply(query",{"_index":2316,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["applymixins",{"_index":2893,"title":{},"body":{"miscellaneous/functions.html":{}}}],["applymixins(derivedctor",{"_index":206,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["applymixins(odatafunctions",{"_index":387,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odataoperators",{"_index":384,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["applymixins(odatasyntax",{"_index":389,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["appmodule",{"_index":2981,"title":{},"body":{"index.html":{}}}],["arising",{"_index":3132,"title":{},"body":{"license.html":{}}}],["arithmeticfunctions",{"_index":179,"title":{"classes/ArithmeticFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arithmeticoperators",{"_index":352,"title":{"classes/ArithmeticOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["arr",{"_index":2253,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.find((v",{"_index":2256,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["arr.push(obj",{"_index":2257,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["array",{"_index":1721,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["array.isarray(config.keys",{"_index":1820,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["array.isarray(right",{"_index":324,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["array.isarray(this.keys",{"_index":1857,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["array.isarray(value",{"_index":1498,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["arraybuffer",{"_index":2417,"title":{},"body":{"classes/ODataRequest.html":{}}}],["assertarray",{"_index":2198,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject",{"_index":2199,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assertobject(create",{"_index":2209,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign",{"_index":2200,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["assign(values",{"_index":2211,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["associated",{"_index":3085,"title":{},"body":{"license.html":{}}}],["at(index",{"_index":2213,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["attach",{"_index":1598,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["attach(model",{"_index":1638,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach(value",{"_index":1600,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>(model",{"_index":1675,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["attach>(value",{"_index":1613,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["attach>>(model",{"_index":1676,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["attr",{"_index":854,"title":{},"body":{"classes/Field.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["attr?.nodevalue",{"_index":856,"title":{},"body":{"classes/Field.html":{}}}],["attribute",{"_index":714,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["attribute_abstract",{"_index":798,"title":{},"body":{"classes/Field.html":{}}}],["attribute_action",{"_index":795,"title":{},"body":{"classes/Field.html":{}}}],["attribute_alias",{"_index":765,"title":{},"body":{"classes/Field.html":{}}}],["attribute_applies_to",{"_index":803,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_term",{"_index":802,"title":{},"body":{"classes/Field.html":{}}}],["attribute_base_type",{"_index":773,"title":{},"body":{"classes/Field.html":{}}}],["attribute_contains_target",{"_index":787,"title":{},"body":{"classes/Field.html":{}}}],["attribute_default_value",{"_index":782,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set",{"_index":796,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_set_path",{"_index":789,"title":{},"body":{"classes/Field.html":{}}}],["attribute_entity_type",{"_index":791,"title":{},"body":{"classes/Field.html":{}}}],["attribute_extends",{"_index":801,"title":{},"body":{"classes/Field.html":{}}}],["attribute_function",{"_index":794,"title":{},"body":{"classes/Field.html":{}}}],["attribute_has_stream",{"_index":786,"title":{},"body":{"classes/Field.html":{}}}],["attribute_include_in_service_document",{"_index":797,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_bound",{"_index":788,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_composable",{"_index":790,"title":{},"body":{"classes/Field.html":{}}}],["attribute_is_flags",{"_index":800,"title":{},"body":{"classes/Field.html":{}}}],["attribute_max_length",{"_index":777,"title":{},"body":{"classes/Field.html":{}}}],["attribute_name",{"_index":771,"title":{},"body":{"classes/Field.html":{}}}],["attribute_namespace",{"_index":766,"title":{},"body":{"classes/Field.html":{}}}],["attribute_nullable",{"_index":776,"title":{},"body":{"classes/Field.html":{}}}],["attribute_open_type",{"_index":774,"title":{},"body":{"classes/Field.html":{}}}],["attribute_partner",{"_index":783,"title":{},"body":{"classes/Field.html":{}}}],["attribute_path",{"_index":792,"title":{},"body":{"classes/Field.html":{}}}],["attribute_precision",{"_index":778,"title":{},"body":{"classes/Field.html":{}}}],["attribute_property",{"_index":784,"title":{},"body":{"classes/Field.html":{}}}],["attribute_qualifier",{"_index":768,"title":{},"body":{"classes/Field.html":{}}}],["attribute_referenced_property",{"_index":785,"title":{},"body":{"classes/Field.html":{}}}],["attribute_scale",{"_index":779,"title":{},"body":{"classes/Field.html":{}}}],["attribute_srid",{"_index":781,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target",{"_index":793,"title":{},"body":{"classes/Field.html":{}}}],["attribute_target_namespace",{"_index":769,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term",{"_index":770,"title":{},"body":{"classes/Field.html":{}}}],["attribute_term_namespace",{"_index":767,"title":{},"body":{"classes/Field.html":{}}}],["attribute_type",{"_index":775,"title":{},"body":{"classes/Field.html":{}}}],["attribute_underlying_type",{"_index":799,"title":{},"body":{"classes/Field.html":{}}}],["attribute_unicode",{"_index":780,"title":{},"body":{"classes/Field.html":{}}}],["attribute_uri",{"_index":764,"title":{},"body":{"classes/Field.html":{}}}],["attribute_value",{"_index":772,"title":{},"body":{"classes/Field.html":{}}}],["attribute_version",{"_index":763,"title":{},"body":{"classes/Field.html":{}}}],["attributes",{"_index":762,"title":{},"body":{"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{}}}],["attributes(data",{"_index":934,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["attributes.getnameditem('version",{"_index":855,"title":{},"body":{"classes/Field.html":{}}}],["attrs",{"_index":1647,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["attrs[field.name",{"_index":1900,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["authors",{"_index":3122,"title":{},"body":{"license.html":{}}}],["average",{"_index":2889,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["backward",{"_index":2146,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["base",{"_index":162,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["base64",{"_index":1795,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["baseterm",{"_index":451,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["basetype",{"_index":468,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["basic",{"_index":3051,"title":{},"body":{"index.html":{}}}],["batch",{"_index":50,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["batch(\"trippin",{"_index":3039,"title":{},"body":{"index.html":{}}}],["batch.request.method",{"_index":1260,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batch_prefix",{"_index":1137,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["batchboundary",{"_index":1254,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["binary",{"_index":1138,"title":{},"body":{"classes/ODataBatchRequest.html":{},"miscellaneous/enumerations.html":{}}}],["binding",{"_index":513,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["binding.ts",{"_index":577,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:1",{"_index":580,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["binding.ts:2",{"_index":581,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["bindingtype",{"_index":2706,"title":{},"body":{"classes/ODataSchema.html":{}}}],["blob",{"_index":2418,"title":{},"body":{"classes/ODataRequest.html":{}}}],["body",{"_index":98,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/functions.html":{}}}],["bodyparams",{"_index":2531,"title":{},"body":{"classes/ODataRequest.html":{}}}],["bodyparams.tostring",{"_index":2534,"title":{},"body":{"classes/ODataRequest.html":{}}}],["bodyqueryoptions",{"_index":14,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["bool",{"_index":130,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["bound",{"_index":170,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["boundary",{"_index":1258,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix",{"_index":1139,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${batchboundary}${boundary_prefix_suffix",{"_index":1274,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["boundary_prefix_suffix}${changesetboundary}${boundary_prefix_suffix",{"_index":1262,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["break",{"_index":1838,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["browse",{"_index":3136,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2859,"title":{},"body":{"dependencies.html":{}}}],["buildaggregate",{"_index":2895,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildaggregate(aggregate",{"_index":2919,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildbody",{"_index":1253,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["buildentry",{"_index":1295,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildentry(payload",{"_index":1310,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["builder",{"_index":195,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["builders",{"_index":3058,"title":{},"body":{"index.html":{}}}],["buildexpand",{"_index":2896,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildexpand(expands",{"_index":2921,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildfilter",{"_index":2897,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildfilter(filters",{"_index":2923,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildgroupby",{"_index":2898,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildgroupby(groupby",{"_index":2926,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildkey",{"_index":1296,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildkey(names",{"_index":1313,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["buildorderby",{"_index":2899,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildorderby(orderby",{"_index":2928,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildpathandquery",{"_index":2098,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/functions.html":{}}}],["buildpathandquery(__namedparameters",{"_index":2930,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildtransforms",{"_index":2900,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildtransforms(transforms",{"_index":2931,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildurl",{"_index":2901,"title":{},"body":{"miscellaneous/functions.html":{}}}],["buildurl(path",{"_index":2933,"title":{},"body":{"miscellaneous/functions.html":{}}}],["builtfilters",{"_index":2940,"title":{},"body":{"miscellaneous/functions.html":{}}}],["c",{"_index":1641,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSchema.html":{},"license.html":{}}}],["c.binding()?.type",{"_index":2742,"title":{},"body":{"classes/ODataSchema.html":{}}}],["c.istypeof(type",{"_index":1766,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["cache",{"_index":38,"title":{"interfaces/Cache.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["cache_control",{"_index":2575,"title":{},"body":{"classes/ODataResponse.html":{}}}],["cache_key_separator",{"_index":1340,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["cacheability",{"_index":89,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["cachecacheability",{"_index":44,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["cachecontrol",{"_index":2612,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["cachecontrol.split(',').foreach((directive",{"_index":2680,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["cached",{"_index":1390,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["california",{"_index":3022,"title":{},"body":{"index.html":{}}}],["callable",{"_index":1417,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["callable.configure",{"_index":2750,"title":{},"body":{"classes/ODataSchema.html":{}}}],["callable_binding_parameter",{"_index":1486,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["callableconfig",{"_index":141,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["callables",{"_index":140,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["callaction",{"_index":1075,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callaction(params",{"_index":1084,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction",{"_index":1076,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["callfunction(params",{"_index":1095,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["case",{"_index":411,"title":{},"body":{"classes/ConditionalFunctions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["case(condition",{"_index":316,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["cast",{"_index":2847,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["cast(value",{"_index":304,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["catch",{"_index":845,"title":{},"body":{"classes/Field.html":{}}}],["catcherror",{"_index":1672,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["catcherror((error",{"_index":1695,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["caught",{"_index":124,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ceiling",{"_index":183,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["ceiling(value",{"_index":186,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["ch",{"_index":1835,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["ch.findchildparser(predicate",{"_index":1837,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["change",{"_index":3019,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["changed",{"_index":2882,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["changeset",{"_index":1257,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changeset_prefix",{"_index":1140,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetboundary",{"_index":1255,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetendline",{"_index":1286,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetid",{"_index":1256,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["changesetresponses",{"_index":1284,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["channel",{"_index":1193,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["charge",{"_index":3080,"title":{},"body":{"license.html":{}}}],["check",{"_index":850,"title":{},"body":{"classes/Field.html":{},"classes/ODataPathSegments.html":{},"index.html":{}}}],["checkversion(document",{"_index":849,"title":{},"body":{"classes/Field.html":{}}}],["childparser",{"_index":1839,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["childparser((c",{"_index":1765,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["childparser(predicate",{"_index":2791,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["children",{"_index":862,"title":{},"body":{"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["chunks",{"_index":1276,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["cid",{"_index":2952,"title":{},"body":{"miscellaneous/functions.html":{}}}],["city",{"_index":3014,"title":{},"body":{"index.html":{}}}],["claim",{"_index":3125,"title":{},"body":{"license.html":{}}}],["class",{"_index":178,"title":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["classes",{"_index":180,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"overview.html":{}}}],["clear",{"_index":2201,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["clearkey",{"_index":2181,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["clearpaging",{"_index":2312,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["clearparameters",{"_index":2186,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["client",{"_index":1083,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{}}}],["clone",{"_index":927,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"index.html":{}}}],["clonereg",{"_index":2902,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clonereg(targe",{"_index":2945,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clonesymbol",{"_index":2903,"title":{},"body":{"miscellaneous/functions.html":{}}}],["clonesymbol(targe",{"_index":2947,"title":{},"body":{"miscellaneous/functions.html":{}}}],["close",{"_index":1259,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["code",{"_index":1180,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["collection",{"_index":153,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["collectionfunctions",{"_index":254,"title":{"classes/CollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["collectionoperator",{"_index":2936,"title":{},"body":{"miscellaneous/functions.html":{}}}],["complete.html#_toc406398229",{"_index":1044,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398230",{"_index":1045,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398236",{"_index":1048,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398237",{"_index":1049,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398238",{"_index":1046,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complete.html#_toc406398240",{"_index":1047,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["complextype",{"_index":738,"title":{},"body":{"classes/Field.html":{}}}],["complextypes",{"_index":622,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["compodoc",{"_index":3061,"title":{},"body":{"index.html":{}}}],["component",{"_index":2983,"title":{},"body":{"index.html":{}}}],["composable",{"_index":171,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["composite",{"_index":1702,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["compute",{"_index":63,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["compute(opts",{"_index":2280,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["computed",{"_index":1716,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["computed?.bool",{"_index":1758,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["concat",{"_index":2827,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["concat(field",{"_index":237,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["condition",{"_index":318,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["conditionalfunctions",{"_index":315,"title":{"classes/ConditionalFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["conditions",{"_index":3102,"title":{},"body":{"license.html":{}}}],["config",{"_index":1000,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"index.html":{}}}],["config.accept",{"_index":1066,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.alias",{"_index":2720,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.annotations",{"_index":1593,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["config.base",{"_index":1817,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["config.bodyqueryoptions",{"_index":1064,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.bound",{"_index":1448,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.composable",{"_index":1450,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.configure",{"_index":2748,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.containers",{"_index":2731,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.entities",{"_index":2725,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.entitysetpath",{"_index":1446,"title":{},"body":{"classes/ODataCallable.html":{}}}],["config.entitysets",{"_index":1591,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["config.entitytype",{"_index":1622,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.enums",{"_index":2722,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.etag",{"_index":1068,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.fetchpolicy",{"_index":1062,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.fields",{"_index":1826,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["config.flags",{"_index":1951,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.headers",{"_index":1056,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.keys.map((key",{"_index":1822,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["config.members",{"_index":1933,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["config.name",{"_index":1444,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["config.namespace",{"_index":2719,"title":{},"body":{"classes/ODataSchema.html":{}}}],["config.open",{"_index":1819,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["config.params",{"_index":1054,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.prefer",{"_index":1070,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.return",{"_index":1514,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["config.service",{"_index":1624,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["config.stringasenum",{"_index":1052,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["config.stripmetadata",{"_index":1060,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["config.version",{"_index":1050,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["config.withcredentials",{"_index":1058,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["configs",{"_index":115,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"modules/ODataModule.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/functions.html":{}}}],["configure",{"_index":1406,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["configure(undefined",{"_index":1418,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["connection",{"_index":3134,"title":{},"body":{"license.html":{}}}],["connector",{"_index":2869,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["console.log",{"_index":3018,"title":{},"body":{"index.html":{}}}],["console.log(\"airport",{"_index":3011,"title":{},"body":{"index.html":{}}}],["console.log(\"airports",{"_index":3002,"title":{},"body":{"index.html":{}}}],["console.log(\"all",{"_index":3005,"title":{},"body":{"index.html":{}}}],["const",{"_index":106,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["constants",{"_index":713,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["constructor",{"_index":224,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(action",{"_index":582,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["constructor(annot",{"_index":914,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["constructor(annotationlist",{"_index":441,"title":{},"body":{"classes/CsdlAnnotable.html":{}}}],["constructor(client",{"_index":1079,"title":{},"body":{"classes/ODataBaseService.html":{},"injectables/ODataServiceFactory.html":{}}}],["constructor(config",{"_index":998,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["constructor(field",{"_index":907,"title":{},"body":{"classes/Navigation.html":{}}}],["constructor(group",{"_index":875,"title":{},"body":{"classes/Grouping.html":{}}}],["constructor(helper",{"_index":929,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["constructor(init",{"_index":2408,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["constructor(name",{"_index":418,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{}}}],["constructor(namespace",{"_index":542,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlSchema.html":{}}}],["constructor(o",{"_index":2205,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["constructor(op",{"_index":883,"title":{},"body":{"classes/Lambda.html":{},"classes/Operator.html":{}}}],["constructor(options",{"_index":2334,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["constructor(path",{"_index":579,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{}}}],["constructor(private",{"_index":2171,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["constructor(property",{"_index":607,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["constructor(propertyrefs",{"_index":557,"title":{},"body":{"classes/CsdlKey.html":{}}}],["constructor(protected",{"_index":364,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["constructor(public",{"_index":445,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"classes/ODataBatchRequest.html":{}}}],["constructor(request",{"_index":1124,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["constructor(segment",{"_index":2816,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["constructor(segments",{"_index":2075,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{}}}],["constructor(target",{"_index":457,"title":{},"body":{"classes/CsdlAnnotations.html":{}}}],["constructor(term",{"_index":454,"title":{},"body":{"classes/CsdlAnnotation.html":{}}}],["constructor(termnamespace",{"_index":552,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["constructor(type",{"_index":610,"title":{},"body":{"classes/CsdlReturnType.html":{}}}],["constructor(undefined",{"_index":1306,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataReferential.html":{}}}],["constructor(uri",{"_index":602,"title":{},"body":{"classes/CsdlReference.html":{}}}],["constructor(xml",{"_index":805,"title":{},"body":{"classes/Field.html":{}}}],["constructors",{"_index":207,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["constructors.foreach((basector",{"_index":208,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["container",{"_index":642,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{}}}],["container.entitysets",{"_index":2737,"title":{},"body":{"classes/ODataSchema.html":{}}}],["container.ts",{"_index":490,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:10",{"_index":503,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:11",{"_index":501,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:12",{"_index":498,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:23",{"_index":1589,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["container.ts:32",{"_index":1584,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["container.ts:5",{"_index":497,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["container.ts:7",{"_index":502,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:8",{"_index":500,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["container.ts:9",{"_index":499,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{}}}],["containers",{"_index":142,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contains",{"_index":2828,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["contains(field",{"_index":239,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["containstarget",{"_index":562,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["content",{"_index":1131,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content.join(newline",{"_index":1197,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_id",{"_index":1141,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_transfer_encoding",{"_index":1142,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["content_type",{"_index":1143,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["contentid",{"_index":1285,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["contents",{"_index":2972,"title":{},"body":{"index.html":{}}}],["contenttype",{"_index":1277,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["contenttype.indexof(application_json",{"_index":2599,"title":{},"body":{"classes/ODataResponse.html":{}}}],["context",{"_index":930,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["context.entityset",{"_index":1357,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.entityset}(${context.key",{"_index":1360,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.key",{"_index":1359,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["context.type",{"_index":1361,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["continueonerror",{"_index":85,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["contract",{"_index":3129,"title":{},"body":{"license.html":{}}}],["conventions.html#sec_parameteraliases",{"_index":2272,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptioncompute",{"_index":2278,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["conventions.html#sec_systemqueryoptionformat",{"_index":2289,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["copies",{"_index":3097,"title":{},"body":{"license.html":{}}}],["copy",{"_index":3083,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":3071,"title":{},"body":{"license.html":{}}}],["count",{"_index":58,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["countdistinct",{"_index":2890,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["countryregion",{"_index":3015,"title":{},"body":{"index.html":{}}}],["create",{"_index":1628,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["create(attrs",{"_index":1644,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["create/update/patch",{"_index":1705,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["createsettings",{"_index":2052,"title":{},"body":{"modules/ODataModule.html":{},"miscellaneous/functions.html":{}}}],["createsettings(configs",{"_index":2046,"title":{},"body":{"modules/ODataModule.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":2960,"title":{},"body":{"index.html":{}}}],["creation",{"_index":120,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["credentials",{"_index":1024,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["csdl",{"_index":480,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdl/csdl",{"_index":708,"title":{},"body":{"classes/Field.html":{}}}],["csdlaction",{"_index":413,"title":{"classes/CsdlAction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlactionimport",{"_index":432,"title":{"classes/CsdlActionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlannotable",{"_index":438,"title":{"classes/CsdlAnnotable.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotable:2",{"_index":462,"title":{},"body":{"classes/CsdlAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{}}}],["csdlannotation",{"_index":442,"title":{"classes/CsdlAnnotation.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["csdlannotations",{"_index":446,"title":{"classes/CsdlAnnotations.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdlcomplextype",{"_index":463,"title":{"classes/CsdlComplexType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlentitycontainer",{"_index":488,"title":{"classes/CsdlEntityContainer.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlentityset",{"_index":495,"title":{"classes/CsdlEntitySet.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["csdlentitytype",{"_index":483,"title":{"classes/CsdlEntityType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlenummember",{"_index":517,"title":{"classes/CsdlEnumMember.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["csdlenumtype",{"_index":520,"title":{"classes/CsdlEnumType.html":{}},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunction",{"_index":427,"title":{"classes/CsdlFunction.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlfunctionimport",{"_index":429,"title":{"classes/CsdlFunctionImport.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlinclude",{"_index":540,"title":{"classes/CsdlInclude.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlincludeannotations",{"_index":549,"title":{"classes/CsdlIncludeAnnotations.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlkey",{"_index":484,"title":{"classes/CsdlKey.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationproperty",{"_index":472,"title":{"classes/CsdlNavigationProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlnavigationpropertybinding",{"_index":507,"title":{"classes/CsdlNavigationPropertyBinding.html":{}},"body":{"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlondelete",{"_index":567,"title":{"classes/CsdlOnDelete.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlparameter",{"_index":420,"title":{"classes/CsdlParameter.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlproperty",{"_index":471,"title":{"classes/CsdlProperty.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlpropertyref",{"_index":487,"title":{"classes/CsdlPropertyRef.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["csdlreference",{"_index":546,"title":{"classes/CsdlReference.html":{}},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["csdlreferentialconstraint",{"_index":566,"title":{"classes/CsdlReferentialConstraint.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["csdlreturntype",{"_index":419,"title":{"classes/CsdlReturnType.html":{}},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["csdlschema",{"_index":618,"title":{"classes/CsdlSchema.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["csdlsingleton",{"_index":496,"title":{"classes/CsdlSingleton.html":{}},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlSingleton.html":{},"classes/Field.html":{}}}],["csdlstructuralproperty",{"_index":561,"title":{"classes/CsdlStructuralProperty.html":{}},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["csdlstructuralproperty:3",{"_index":573,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:4",{"_index":575,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuralproperty:5",{"_index":574,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{}}}],["csdlstructuredtype",{"_index":466,"title":{"classes/CsdlStructuredType.html":{}},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["csdlstructuredtype:10",{"_index":477,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:11",{"_index":475,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:12",{"_index":478,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:13",{"_index":474,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:8",{"_index":476,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlstructuredtype:9",{"_index":479,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{}}}],["csdlterm",{"_index":450,"title":{"classes/CsdlTerm.html":{}},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["csdltypedefinition",{"_index":628,"title":{"classes/CsdlTypeDefinition.html":{}},"body":{"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["ctx",{"_index":1218,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["ctx(this",{"_index":1240,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["current",{"_index":1223,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["custom",{"_index":1727,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["customheaders",{"_index":2475,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[accept",{"_index":2494,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_match_header",{"_index":2479,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[if_none_match_header",{"_index":2482,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customheaders[prefer",{"_index":2510,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customizations",{"_index":3057,"title":{},"body":{"index.html":{}}}],["customize",{"_index":1002,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["customparams",{"_index":2514,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$expand",{"_index":2517,"title":{},"body":{"classes/ODataRequest.html":{}}}],["customparams['$select",{"_index":2515,"title":{},"body":{"classes/ODataRequest.html":{}}}],["damages",{"_index":3126,"title":{},"body":{"license.html":{}}}],["data",{"_index":928,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["data(data",{"_index":937,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["dataservices",{"_index":826,"title":{},"body":{"classes/Field.html":{}}}],["date",{"_index":121,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/DateAndTimeFunctions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["date(value",{"_index":272,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["date.now",{"_index":1363,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["dateandtimefunctions",{"_index":271,"title":{"classes/DateAndTimeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["dates",{"_index":2099,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["day",{"_index":678,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["day(value",{"_index":274,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["deal",{"_index":3087,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":3135,"title":{},"body":{"license.html":{}}}],["deep",{"_index":3056,"title":{},"body":{"index.html":{}}}],["def",{"_index":2218,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["default",{"_index":119,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/functions.html":{}}}],["default_fetch_policy",{"_index":1027,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["default_strip_metadata",{"_index":1028,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["default_timeout",{"_index":1341,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["default_version",{"_index":1029,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["defaults",{"_index":1870,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["defaultvalue",{"_index":452,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["defined",{"_index":187,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["definition",{"_index":641,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{},"index.html":{}}}],["definition.ts",{"_index":668,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:10",{"_index":677,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:11",{"_index":675,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:3",{"_index":670,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:5",{"_index":672,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:6",{"_index":676,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:7",{"_index":671,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:8",{"_index":673,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["definition.ts:9",{"_index":674,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["delete",{"_index":1271,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/SegmentHandler.html":{}}}],["delete'].indexof(this._method",{"_index":2478,"title":{},"body":{"classes/ODataRequest.html":{}}}],["deleting",{"_index":2962,"title":{},"body":{"index.html":{}}}],["delivered",{"_index":1192,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["deltalink",{"_index":987,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["demo",{"_index":2967,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":2852,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["deps",{"_index":2053,"title":{},"body":{"modules/ODataModule.html":{}}}],["derivedctor",{"_index":2917,"title":{},"body":{"miscellaneous/functions.html":{}}}],["derivedctor.prototype",{"_index":211,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["description",{"_index":1424,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{}}}],["deseialize",{"_index":1422,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialization",{"_index":1425,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["deserialize",{"_index":95,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["deserialize(value",{"_index":1420,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Parser.html":{}}}],["deserialized",{"_index":1426,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["destroy",{"_index":1629,"title":{},"body":{"classes/ODataEntitySetService.html":{},"miscellaneous/typealiases.html":{}}}],["destroy(key",{"_index":1648,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["diego",{"_index":3073,"title":{},"body":{"license.html":{}}}],["directive",{"_index":2687,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["directive.startswith(max_age",{"_index":2681,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["distance",{"_index":870,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["distance(value",{"_index":309,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["distribute",{"_index":3093,"title":{},"body":{"license.html":{}}}],["div",{"_index":392,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["div(left",{"_index":359,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["document",{"_index":808,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement",{"_index":819,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.attributes",{"_index":816,"title":{},"body":{"classes/Field.html":{}}}],["document.documentelement.getelementsbytagname",{"_index":828,"title":{},"body":{"classes/Field.html":{}}}],["documentation",{"_index":2975,"title":{},"body":{"index.html":{},"license.html":{}}}],["domparser",{"_index":807,"title":{},"body":{"classes/Field.html":{}}}],["down",{"_index":2247,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["duration",{"_index":2885,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["dynamic",{"_index":2860,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":1911,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataQueryOptionHandler.html":{},"index.html":{}}}],["e().eq(\"emails",{"_index":3035,"title":{},"body":{"index.html":{}}}],["e.istypeof(type",{"_index":2739,"title":{},"body":{"classes/ODataSchema.html":{}}}],["editlink",{"_index":964,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["edm.binary",{"_index":1784,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.boolean'].indexof(this.type",{"_index":1806,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.byte",{"_index":1800,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.date",{"_index":1780,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.datetimeoffset",{"_index":1782,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.decimal",{"_index":1804,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.double'].indexof(this.type",{"_index":1805,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.guid",{"_index":1783,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.int16",{"_index":1799,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.int32",{"_index":1798,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.int64",{"_index":1797,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.sbyte'].indexof",{"_index":1801,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.string",{"_index":1779,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edm.timeofday",{"_index":1781,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["edmx:dataservices",{"_index":723,"title":{},"body":{"classes/Field.html":{}}}],["edmx:edmx",{"_index":721,"title":{},"body":{"classes/Field.html":{}}}],["edmx:include",{"_index":727,"title":{},"body":{"classes/Field.html":{}}}],["edmx:includeannotations",{"_index":729,"title":{},"body":{"classes/Field.html":{}}}],["edmx:reference",{"_index":725,"title":{},"body":{"classes/Field.html":{}}}],["element",{"_index":827,"title":{},"body":{"classes/Field.html":{}}}],["empty",{"_index":2202,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["encode",{"_index":101,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encode(params",{"_index":1481,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["encode(value",{"_index":105,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["encoded",{"_index":1429,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["encoding",{"_index":1428,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["endline",{"_index":1280,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["endregion",{"_index":175,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["endswith",{"_index":2829,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["endswith(field",{"_index":241,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["entities",{"_index":138,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["entities'].indexof(this._responsetype",{"_index":2529,"title":{},"body":{"classes/ODataRequest.html":{}}}],["entity",{"_index":489,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["entity(\"cyyz",{"_index":3008,"title":{},"body":{"index.html":{}}}],["entity(key",{"_index":1603,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{}}}],["entitycontainer",{"_index":623,"title":{},"body":{"classes/CsdlSchema.html":{},"classes/Field.html":{}}}],["entitycontainerconfig",{"_index":143,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityContainer.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entityid",{"_index":2626,"title":{},"body":{"classes/ODataResponse.html":{}}}],["entitykey",{"_index":1604,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/typealiases.html":{}}}],["entityset",{"_index":52,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"injectables/ODataServiceFactory.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["entityset(entitysetname",{"_index":2755,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetconfig",{"_index":145,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySet.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["entitysetname",{"_index":2757,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["entitysetpath",{"_index":169,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysets",{"_index":144,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitysetschema",{"_index":1637,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["entitytype",{"_index":173,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntitySet.html":{},"classes/Field.html":{},"classes/ODataEntitySet.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["entitytypes",{"_index":624,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["entries",{"_index":1293,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry",{"_index":1331,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["entry.lastread",{"_index":1384,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.payload",{"_index":1371,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["entry.tags.indexof(t",{"_index":1382,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["enu.configure",{"_index":2746,"title":{},"body":{"classes/ODataSchema.html":{}}}],["enum",{"_index":48,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enumerations",{"_index":2868,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":136,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["enums.toname(this.members",{"_index":1961,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tonames(this.members",{"_index":1957,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalue(this.members",{"_index":1956,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enums.tovalues(this.members",{"_index":1954,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["enumtype",{"_index":735,"title":{},"body":{"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["enumtypeconfig",{"_index":137,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypefieldconfig",{"_index":146,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["enumtypes",{"_index":625,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["eq",{"_index":890,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["eq(left",{"_index":330,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["errata02",{"_index":1040,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["error",{"_index":123,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["error(\"batch",{"_index":1233,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('batch",{"_index":1229,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["error('field",{"_index":1507,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["error('odata",{"_index":852,"title":{},"body":{"classes/Field.html":{}}}],["error('unable",{"_index":847,"title":{},"body":{"classes/Field.html":{}}}],["error(`no",{"_index":2159,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["error.status",{"_index":1696,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["errorhandler",{"_index":122,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["errors",{"_index":1752,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["errors.push(`maxlength",{"_index":1761,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["errors.push(`required",{"_index":1759,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["errors[field.name",{"_index":1903,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["errs",{"_index":1901,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["escapeillegalchars",{"_index":2905,"title":{},"body":{"miscellaneous/functions.html":{}}}],["escapeillegalchars(string",{"_index":2934,"title":{},"body":{"miscellaneous/functions.html":{}}}],["etag",{"_index":15,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["etag_headers",{"_index":2577,"title":{},"body":{"classes/ODataResponse.html":{}}}],["event",{"_index":3121,"title":{},"body":{"license.html":{}}}],["events",{"_index":1232,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["examples",{"_index":2968,"title":{},"body":{"index.html":{}}}],["exec",{"_index":1220,"title":{},"body":{"classes/ODataBatchRequest.html":{},"index.html":{}}}],["execute",{"_index":1217,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["existing",{"_index":1640,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["exp",{"_index":2339,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expand",{"_index":62,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expand(opts",{"_index":2276,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expandobject",{"_index":3143,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expandoptions",{"_index":3144,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expands",{"_index":2922,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expandtype",{"_index":3145,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expired",{"_index":1373,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["exponentialdecimals",{"_index":76,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["exponentialdecimals=${this.api.options.accept?.exponentialdecimals",{"_index":2492,"title":{},"body":{"classes/ODataRequest.html":{}}}],["export",{"_index":33,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["express",{"_index":3112,"title":{},"body":{"license.html":{}}}],["expression",{"_index":2235,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["expression(name",{"_index":2338,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["expression.and",{"_index":2285,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expression.e",{"_index":2284,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expression.not",{"_index":2279,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expression.not(e",{"_index":2287,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expression.or",{"_index":2286,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["expressions",{"_index":2236,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"index.html":{}}}],["extend",{"_index":492,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["extends",{"_index":8,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["extra",{"_index":1013,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["f",{"_index":1843,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.configure",{"_index":1854,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.default",{"_index":1872,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.deserialize(value[f.name",{"_index":1846,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.isstructuredtype",{"_index":1873,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.name",{"_index":1830,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.navigation",{"_index":1881,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.nullable",{"_index":1897,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.serialize((value",{"_index":1849,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.structured().defaults",{"_index":1875,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.tojsonschema(expand",{"_index":1888,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f.value",{"_index":1936,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["f]{12",{"_index":1793,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f]{12}$/.test",{"_index":2114,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["f]{4",{"_index":1792,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["f]{8",{"_index":1791,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["fa",{"_index":1790,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["factory",{"_index":1210,"title":{},"body":{"classes/ODataBatchRequest.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["factory(api",{"_index":1211,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["false",{"_index":1007,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["features",{"_index":2600,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["features.split(';').foreach((o",{"_index":2667,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["fetch",{"_index":1010,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"index.html":{}}}],["fetchall",{"_index":1630,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["fetchall(options",{"_index":1654,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchmany",{"_index":1631,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchmany(options",{"_index":1656,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchnavigationproperty",{"_index":1077,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchnavigationproperty(resource",{"_index":1102,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["fetchone",{"_index":1632,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchone(key",{"_index":1658,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate",{"_index":1633,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchorcreate(key",{"_index":1660,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["fetchpolicy",{"_index":16,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["field",{"_index":92,"title":{"classes/Field.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["field(odatametadata.attribute_alias",{"_index":835,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_namespace",{"_index":834,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_uri",{"_index":821,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.attribute_version",{"_index":814,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_action",{"_index":840,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotation",{"_index":825,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_annotations",{"_index":844,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_complex_type",{"_index":837,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_container",{"_index":841,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_entity_type",{"_index":838,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_enum_type",{"_index":836,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_function",{"_index":839,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include",{"_index":822,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_include_annotations",{"_index":824,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_term",{"_index":843,"title":{},"body":{"classes/Field.html":{}}}],["field(odatametadata.tag_type_definition",{"_index":842,"title":{},"body":{"classes/Field.html":{}}}],["field.annotations",{"_index":1735,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.collection",{"_index":1743,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.default",{"_index":1740,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.encode(v",{"_index":1867,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.findannotation((a",{"_index":1938,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["field.isstructuredtype",{"_index":1863,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.maxlength",{"_index":1742,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.name",{"_index":1866,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.navigation",{"_index":1746,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.nullable",{"_index":1744,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.precision",{"_index":1748,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.referentials",{"_index":1737,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.scale",{"_index":1750,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.structured",{"_index":1864,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.type",{"_index":1734,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.validate(value",{"_index":1902,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["field.value",{"_index":1949,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["fieldnames",{"_index":860,"title":{},"body":{"classes/Field.html":{}}}],["fields",{"_index":149,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["fields.reduce",{"_index":1845,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["fields.reduce((acc",{"_index":1874,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["fieldtitle",{"_index":1906,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["fieldtitle(value",{"_index":1915,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["fieldtype",{"_index":705,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["fieldtype.attribute",{"_index":815,"title":{},"body":{"classes/Field.html":{}}}],["fieldtype.tag",{"_index":823,"title":{},"body":{"classes/Field.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["filed",{"_index":1918,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["files",{"_index":3086,"title":{},"body":{"license.html":{}}}],["filter",{"_index":64,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["filter((f",{"_index":1894,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["filter((k",{"_index":2390,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["filter((key",{"_index":2362,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["filter((p",{"_index":1521,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["filter((r",{"_index":1401,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["filter((t",{"_index":2128,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["filter(opts",{"_index":2296,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["filters",{"_index":2925,"title":{},"body":{"miscellaneous/functions.html":{}}}],["filtertype",{"_index":3146,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["find",{"_index":1585,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["find((p",{"_index":2602,"title":{},"body":{"classes/ODataResponse.html":{}}}],["find(predicate",{"_index":2081,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["findannotation",{"_index":1581,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataSchema.html":{}}}],["findannotation(predicate",{"_index":1583,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["findcallablefortype",{"_index":2689,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findcallablefortype(type",{"_index":2705,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findchildparser",{"_index":1833,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["findchildparser(predicate",{"_index":2797,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["findentitysetfortype",{"_index":2690,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findentitysetfortype(type",{"_index":2708,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype",{"_index":2691,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findenumtypefortype(type",{"_index":2710,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findfieldbyname",{"_index":1907,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldbyname(name",{"_index":1920,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldbyvalue",{"_index":1908,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findfieldbyvalue(value",{"_index":1922,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["findoptionsfortype",{"_index":2744,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findstructuredtypefortype",{"_index":2692,"title":{},"body":{"classes/ODataSchema.html":{}}}],["findstructuredtypefortype(type",{"_index":2712,"title":{},"body":{"classes/ODataSchema.html":{}}}],["first",{"_index":39,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["first(undefined",{"_index":2084,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["fitness",{"_index":3117,"title":{},"body":{"license.html":{}}}],["flags",{"_index":147,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["floor",{"_index":184,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["floor(value",{"_index":190,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["fluent",{"_index":2958,"title":{},"body":{"index.html":{}}}],["flush",{"_index":1297,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["following",{"_index":3101,"title":{},"body":{"license.html":{}}}],["foreach",{"_index":2906,"title":{},"body":{"miscellaneous/functions.html":{}}}],["foreach(array",{"_index":2949,"title":{},"body":{"miscellaneous/functions.html":{}}}],["forget",{"_index":1298,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forget(undefined",{"_index":1317,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["forkjoin",{"_index":3040,"title":{},"body":{"index.html":{}}}],["format",{"_index":71,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["format(opts",{"_index":2290,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["format/v4.01/odata",{"_index":1035,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["forroot",{"_index":2034,"title":{},"body":{"modules/ODataModule.html":{}}}],["forroot(configs",{"_index":2035,"title":{},"body":{"modules/ODataModule.html":{}}}],["found",{"_index":2160,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["fractionalseconds",{"_index":679,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["fractionalseconds(value",{"_index":276,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["free",{"_index":3079,"title":{},"body":{"license.html":{}}}],["friends",{"_index":3032,"title":{},"body":{"index.html":{}}}],["fromhttpresponse",{"_index":2547,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromhttpresponse(req",{"_index":2559,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson",{"_index":2548,"title":{},"body":{"classes/ODataResponse.html":{}}}],["fromjson(req",{"_index":2561,"title":{},"body":{"classes/ODataResponse.html":{}}}],["full",{"_index":42,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["func",{"_index":2107,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/functions.html":{}}}],["funcs",{"_index":201,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["function",{"_index":59,"title":{"classes/Function.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["function('case",{"_index":317,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('cast",{"_index":305,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('ceiling",{"_index":300,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('concat",{"_index":238,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('contains",{"_index":240,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('date",{"_index":273,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('day",{"_index":275,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('distance",{"_index":311,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('endswith",{"_index":242,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('floor",{"_index":301,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('fractionalseconds",{"_index":277,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubsequence",{"_index":260,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hassubset",{"_index":257,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('hour",{"_index":279,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('indexof",{"_index":244,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('intersects",{"_index":314,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('isof",{"_index":307,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('length",{"_index":246,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('matchespattern",{"_index":264,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('maxdatetime",{"_index":281,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('mindatetime",{"_index":283,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('minute",{"_index":285,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('month",{"_index":287,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('now",{"_index":289,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('round",{"_index":302,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('second",{"_index":291,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('startswith",{"_index":248,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('substring",{"_index":253,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('time",{"_index":293,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('tolower",{"_index":266,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totaloffsetminutes",{"_index":295,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('totalseconds",{"_index":297,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('toupper",{"_index":268,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('trim",{"_index":270,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function('year",{"_index":299,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["function(__namedparameters",{"_index":2943,"title":{},"body":{"miscellaneous/functions.html":{}}}],["function(name",{"_index":980,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["functionimport",{"_index":756,"title":{},"body":{"classes/Field.html":{}}}],["functionimports",{"_index":493,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["functionname",{"_index":430,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{}}}],["functions",{"_index":388,"title":{"miscellaneous/functions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlSchema.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":3100,"title":{},"body":{"license.html":{}}}],["ge",{"_index":891,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ge(left",{"_index":336,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["generated",{"_index":3043,"title":{},"body":{"index.html":{}}}],["generator",{"_index":2966,"title":{},"body":{"index.html":{}}}],["geofunctions",{"_index":308,"title":{"classes/GeoFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["get'].indexof(this._method",{"_index":2481,"title":{},"body":{"classes/ODataRequest.html":{}}}],["get(key",{"_index":112,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["get(name",{"_index":1319,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPathSegments.html":{}}}],["get(path",{"_index":2217,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["getannotations",{"_index":2572,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getapi",{"_index":1108,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["getbody",{"_index":2436,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getcontext",{"_index":2570,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getcount",{"_index":1539,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getdeltalink",{"_index":1543,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["geteditlink",{"_index":1568,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getentityset",{"_index":939,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["getentitysets",{"_index":2716,"title":{},"body":{"classes/ODataSchema.html":{}}}],["getentitysetschema",{"_index":1668,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["getetag",{"_index":1561,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getfunctions",{"_index":1551,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getheaders",{"_index":2440,"title":{},"body":{"classes/ODataRequest.html":{}}}],["gethelper",{"_index":1025,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["getid",{"_index":1559,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediacontenttype",{"_index":1574,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaeditlink",{"_index":1572,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediaetag",{"_index":1563,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmediareadlink",{"_index":1570,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmetadataetag",{"_index":1565,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getmethod",{"_index":2434,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getname",{"_index":2233,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/SegmentHandler.html":{}}}],["getnextlink",{"_index":1541,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getobjects",{"_index":858,"title":{},"body":{"classes/Field.html":{}}}],["getoptions",{"_index":2566,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getparams",{"_index":2438,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpath",{"_index":2432,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpathwithparams",{"_index":2442,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getpayload",{"_index":2568,"title":{},"body":{"classes/ODataResponse.html":{}}}],["getproperties",{"_index":1576,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["getreadlink",{"_index":1537,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{}}}],["getresponse",{"_index":1299,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["getresponse(req",{"_index":1321,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["getresponsetype",{"_index":2430,"title":{},"body":{"classes/ODataRequest.html":{}}}],["getsingletonschema",{"_index":2774,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["getskip",{"_index":1547,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getskiptoken",{"_index":1549,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["getstringcollectionclause",{"_index":2908,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getstringcollectionclause(lambdaparameter",{"_index":2935,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getstructuredtypeschema",{"_index":1609,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["getting",{"_index":2955,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettop",{"_index":1545,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["gettype",{"_index":941,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["geturl",{"_index":2444,"title":{},"body":{"classes/ODataRequest.html":{}}}],["geturlwithparams",{"_index":2446,"title":{},"body":{"classes/ODataRequest.html":{}}}],["given",{"_index":1423,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["granted",{"_index":3078,"title":{},"body":{"license.html":{}}}],["group",{"_index":365,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["groupby",{"_index":2927,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["grouping",{"_index":205,"title":{"classes/Grouping.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["grouping(value",{"_index":372,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["groupingandnavigationoperators",{"_index":371,"title":{"classes/GroupingAndNavigationOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["gt",{"_index":892,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["gt(left",{"_index":334,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["guid",{"_index":2113,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["haaster",{"_index":3075,"title":{},"body":{"license.html":{}}}],["hack",{"_index":2112,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["handle",{"_index":2557,"title":{},"body":{"classes/ODataResponse.html":{}}}],["handlefetch",{"_index":1300,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlefetch(req",{"_index":1323,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate",{"_index":1301,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlemutate(req",{"_index":1325,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handler",{"_index":2382,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["handlerequest",{"_index":1302,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handlerequest(req",{"_index":1327,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["handleresponse",{"_index":1275,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["handlers",{"_index":2102,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["has(left",{"_index":348,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["has(name",{"_index":2341,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["has(path",{"_index":2220,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["hashmap",{"_index":2251,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["haskey",{"_index":2179,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasparameters",{"_index":2184,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["hasreferentials",{"_index":1813,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["hasstream",{"_index":485,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["hassubsequence",{"_index":407,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubsequence(s1",{"_index":259,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["hassubset",{"_index":408,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["hassubset(s1",{"_index":255,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["header",{"_index":1003,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["headers",{"_index":17,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["headers.getall(key",{"_index":1177,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["helper",{"_index":30,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["here",{"_index":3063,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":3077,"title":{},"body":{"license.html":{}}}],["holders",{"_index":3123,"title":{},"body":{"license.html":{}}}],["hour",{"_index":680,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["hour(value",{"_index":278,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["htmlcollection",{"_index":863,"title":{},"body":{"classes/Field.html":{}}}],["http",{"_index":1023,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["http.boundarydelimiter(contenttype",{"_index":1279,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.boundaryend(batchboundary",{"_index":1281,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.mergehttpheaders",{"_index":1245,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["http.mergehttpheaders(this._headers",{"_index":2536,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.mergehttpparams",{"_index":2520,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.parseresponsestatus(chunk[0",{"_index":1289,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http.resolveheaderkey(this.headers",{"_index":2605,"title":{},"body":{"classes/ODataResponse.html":{}}}],["http.splithttpparams",{"_index":2532,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http.withouthttpparams(params",{"_index":2524,"title":{},"body":{"classes/ODataRequest.html":{}}}],["http11",{"_index":1144,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["http://docs.oasis",{"_index":1032,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["http://json",{"_index":1878,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["httpclientmodule",{"_index":2040,"title":{},"body":{"modules/ODataModule.html":{}}}],["httperrorresponse",{"_index":1151,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{}}}],["httpheaders",{"_index":1152,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["httpheaders(json.headers",{"_index":2586,"title":{},"body":{"classes/ODataResponse.html":{}}}],["httpparams",{"_index":2414,"title":{},"body":{"classes/ODataRequest.html":{}}}],["httpresponse",{"_index":1153,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["https://diegomvh.github.io/angular",{"_index":3064,"title":{},"body":{"index.html":{}}}],["https://docs.oasis",{"_index":2268,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["https://github.com/diegomvh/angular",{"_index":3067,"title":{},"body":{"index.html":{}}}],["https://json",{"_index":1774,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["https://services.odata.org/v4/(s(4m0tuxtnhcfctl4gzem3gr10))/trippinservicerw",{"_index":2980,"title":{},"body":{"index.html":{}}}],["https://www.odata.org/getting",{"_index":1201,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["id",{"_index":955,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["ieee754",{"_index":2485,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ieee754compatible",{"_index":77,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ieee754compatible=${this.api.options.accept?.ieee754compatible",{"_index":2488,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_match_header",{"_index":2448,"title":{},"body":{"classes/ODataRequest.html":{}}}],["if_none_match_header",{"_index":2449,"title":{},"body":{"classes/ODataRequest.html":{}}}],["ifmatch",{"_index":79,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["ifnonematch",{"_index":80,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["implements",{"_index":223,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["implied",{"_index":3113,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["imports",{"_index":2048,"title":{},"body":{"modules/ODataModule.html":{},"index.html":{}}}],["in(left",{"_index":350,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["includeannotations",{"_index":86,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["included",{"_index":3106,"title":{},"body":{"license.html":{}}}],["includeinservicedocument",{"_index":431,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["includes",{"_index":548,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["including",{"_index":1440,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"license.html":{}}}],["incorporates",{"_index":3050,"title":{},"body":{"index.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indexof",{"_index":2830,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["indexof(field",{"_index":243,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["indexof(s.name",{"_index":2151,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["indexof(this.type",{"_index":1785,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["indicating",{"_index":1432,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["inherited",{"_index":461,"title":{},"body":{"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Lambda.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{}}}],["init",{"_index":2410,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.api",{"_index":2455,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.body",{"_index":2463,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.bodyqueryoptions",{"_index":2469,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.etag",{"_index":2476,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.fetchpolicy",{"_index":2467,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.headers",{"_index":2513,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.method",{"_index":2452,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.observe",{"_index":2459,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.params",{"_index":2522,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.reportprogress",{"_index":2457,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.resource",{"_index":2454,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["init.responsetype",{"_index":2461,"title":{},"body":{"classes/ODataRequest.html":{}}}],["init.withcredentials",{"_index":2465,"title":{},"body":{"classes/ODataRequest.html":{}}}],["inject",{"_index":2982,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":2751,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"injectables/ODataServiceFactory.html":{}}}],["injectables",{"_index":2752,"title":{},"body":{"injectables/ODataServiceFactory.html":{},"overview.html":{}}}],["inside",{"_index":1586,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["install",{"_index":2976,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2973,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1175,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["instead",{"_index":1458,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["int",{"_index":131,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["integer",{"_index":1803,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/ODataCacheEntry.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"overview.html":{}}}],["intersects",{"_index":871,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["intersects(value",{"_index":312,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["invalid",{"_index":3171,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["isbatch",{"_index":2403,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isbound",{"_index":416,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["iscomposable",{"_index":428,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["isedmtype",{"_index":1503,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["isenumtype",{"_index":1505,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["isexpired",{"_index":1303,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isexpired(entry",{"_index":1329,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["isfetch",{"_index":2404,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isflags",{"_index":522,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["iskey",{"_index":1810,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["ismutate",{"_index":2405,"title":{},"body":{"classes/ODataRequest.html":{}}}],["isnamespaceof",{"_index":2693,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isnamespaceof(type",{"_index":2714,"title":{},"body":{"classes/ODataSchema.html":{}}}],["isof",{"_index":2848,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["isof(value",{"_index":306,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["isstructuredtype",{"_index":1508,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["istypeof",{"_index":1407,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["istypeof(type",{"_index":1430,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["items",{"_index":1808,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["iteratee",{"_index":2950,"title":{},"body":{"miscellaneous/functions.html":{}}}],["john",{"_index":3037,"title":{},"body":{"index.html":{}}}],["john@example.com\").or(e().eq(\"username",{"_index":3036,"title":{},"body":{"index.html":{}}}],["join",{"_index":1178,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["json",{"_index":1034,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataStructuredTypeParser.html":{},"index.html":{}}}],["json.body",{"_index":2585,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.key",{"_index":2141,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parameters",{"_index":2143,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.parse(this.storage.getitem(this.name",{"_index":2024,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.status",{"_index":2587,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.statustext",{"_index":2588,"title":{},"body":{"classes/ODataResponse.html":{}}}],["json.stringify(array.from(this.entries.entries",{"_index":2023,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["json.type",{"_index":2140,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["json.url",{"_index":2589,"title":{},"body":{"classes/ODataResponse.html":{}}}],["jsonschemacustom",{"_index":1722,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaexpand",{"_index":1724,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaoptions",{"_index":1725,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemarequired",{"_index":1726,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["jsonschemaselect",{"_index":1720,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["k",{"_index":1378,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["k.name",{"_index":1812,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["k.name.split",{"_index":1859,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["k.startswith(key",{"_index":1379,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["k.trim",{"_index":2669,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["keep",{"_index":2331,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(...names",{"_index":2388,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["keep(names",{"_index":2343,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["key",{"_index":152,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["key(value",{"_index":2177,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["key[k.alias",{"_index":1865,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["keyof",{"_index":168,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["keys",{"_index":166,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["keys(values",{"_index":2087,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["key}=${value",{"_index":2138,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["kind",{"_index":3111,"title":{},"body":{"license.html":{}}}],["lambda",{"_index":374,"title":{"classes/Lambda.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('all",{"_index":382,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambda('any",{"_index":380,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambdaoperators",{"_index":378,"title":{"classes/LambdaOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lambdaparameter",{"_index":2938,"title":{},"body":{"miscellaneous/functions.html":{}}}],["last",{"_index":2073,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["last(undefined",{"_index":2089,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["lastread",{"_index":1346,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["le",{"_index":893,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["le(left",{"_index":340,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left",{"_index":321,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left.split('/').pop().tolowercase",{"_index":376,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["left}/${this.op}(${alias}:${alias}/${render(right",{"_index":377,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length",{"_index":251,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["length(value",{"_index":245,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["liability",{"_index":3127,"title":{},"body":{"license.html":{}}}],["liable",{"_index":3124,"title":{},"body":{"license.html":{}}}],["library",{"_index":2969,"title":{},"body":{"index.html":{}}}],["license",{"_index":3069,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":3089,"title":{},"body":{"license.html":{}}}],["limited",{"_index":3114,"title":{},"body":{"license.html":{}}}],["lines",{"_index":1282,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["link",{"_index":1031,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["literal",{"_index":22,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/ResponseJson.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":3024,"title":{},"body":{"index.html":{}}}],["location",{"_index":2609,"title":{},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"index.html":{}}}],["location_header",{"_index":2576,"title":{},"body":{"classes/ODataResponse.html":{}}}],["logicaloperators",{"_index":329,"title":{"classes/LogicalOperators.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["lt",{"_index":894,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["lt(left",{"_index":338,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["m",{"_index":1601,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["mainly",{"_index":3048,"title":{},"body":{"index.html":{}}}],["map",{"_index":1308,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/ResponseJson.html":{}}}],["map(([key",{"_index":2137,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["map((f",{"_index":1887,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["map((key",{"_index":1176,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["map((name",{"_index":2591,"title":{},"body":{"classes/ODataResponse.html":{}}}],["map((s",{"_index":2126,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["mapfields",{"_index":1909,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["mapfields(mapper",{"_index":1925,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["mapped",{"_index":1929,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["mapper",{"_index":1927,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["maps",{"_index":1928,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["match",{"_index":989,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["match(/[&?]{1}\\$skip=(\\d",{"_index":993,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match(/[&?]{1}\\$skiptoken=([\\d\\w\\s",{"_index":994,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match(/[&?]{1}\\$top=(\\d",{"_index":991,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["match[1",{"_index":995,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["matches",{"_index":1588,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["matchespattern",{"_index":2840,"title":{},"body":{"classes/StringFunctions.html":{}}}],["matchespattern(value",{"_index":262,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["matching",{"_index":177,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["max",{"_index":2888,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["max_age",{"_index":2663,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["maxage",{"_index":90,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxdatetime",{"_index":681,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["maxdatetime(value",{"_index":280,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["maxlength",{"_index":151,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["maxpagesize",{"_index":81,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["mediacontenttype",{"_index":970,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaeditlink",{"_index":968,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediaetag",{"_index":958,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["mediareadlink",{"_index":966,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["member",{"_index":150,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members",{"_index":148,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["members.some((member",{"_index":1969,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["merchantability",{"_index":3116,"title":{},"body":{"license.html":{}}}],["merge",{"_index":3091,"title":{},"body":{"license.html":{}}}],["message",{"_index":1181,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["metadata",{"_index":51,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["metadataetag",{"_index":960,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["method",{"_index":947,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["methods",{"_index":182,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["microsoft.odata.sampleservice.models.trippin.airport",{"_index":2999,"title":{},"body":{"index.html":{}}}],["microsoft.odata.sampleservice.models.trippin.person",{"_index":3029,"title":{},"body":{"index.html":{}}}],["min",{"_index":2887,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mindatetime",{"_index":682,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["mindatetime(value",{"_index":282,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["minimal",{"_index":41,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["minute",{"_index":683,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["minute(value",{"_index":284,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["miscellaneous",{"_index":2867,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mismatch",{"_index":1970,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["mit",{"_index":3070,"title":{},"body":{"license.html":{}}}],["mod",{"_index":393,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mod(left",{"_index":361,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["model",{"_index":164,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/functions.html":{}}}],["model(__namedparameters",{"_index":2951,"title":{},"body":{"miscellaneous/functions.html":{}}}],["model.attach(this.entities",{"_index":1678,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entities().entity",{"_index":1677,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["model.attach(this.entity",{"_index":2777,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["modelfield",{"_index":2909,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modelfield(__namedparameters",{"_index":2953,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modelfieldoptions",{"_index":3148,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modeloptions",{"_index":3149,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["models/collection",{"_index":1671,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["models/model",{"_index":1612,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["modify",{"_index":1634,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"license.html":{}}}],["modify(key",{"_index":1662,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["module",{"_index":2028,"title":{"modules/ODataModule.html":{}},"body":{"index.html":{},"overview.html":{}}}],["modules",{"_index":2030,"title":{"modules.html":{}},"body":{"modules/ODataModule.html":{},"modules.html":{}}}],["modulewithproviders",{"_index":2037,"title":{},"body":{"modules/ODataModule.html":{}}}],["month",{"_index":684,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["month(value",{"_index":286,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["mul",{"_index":394,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["mul(left",{"_index":357,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["multipart_mixed",{"_index":1145,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary",{"_index":1146,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["multipart_mixed_boundary}${changesetboundary",{"_index":1265,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["n",{"_index":882,"title":{},"body":{"classes/GroupingAndNavigationOperators.html":{},"classes/ODataQueryOptionHandler.html":{}}}],["name",{"_index":118,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["namednodemap",{"_index":851,"title":{},"body":{"classes/Field.html":{}}}],["names",{"_index":1315,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["names.foreach((name",{"_index":2386,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["names.indexof(k",{"_index":2391,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["names.indexof(type",{"_index":1520,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["names.join",{"_index":1960,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["names.join(cache_key_separator",{"_index":1364,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["names.push(`${this.alias}.${this.name",{"_index":1519,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["names.push(`${this.schema.alias}.${this.name",{"_index":1625,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["namespace",{"_index":133,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["namespace/alias",{"_index":1441,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["navigation",{"_index":155,"title":{"classes/Navigation.html":{}},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlSingleton.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["navigation(field",{"_index":373,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["navigationproperties",{"_index":469,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["navigationproperty",{"_index":55,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["navigationpropertybinding",{"_index":506,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/Field.html":{}}}],["navigationpropertybindings",{"_index":644,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["ne",{"_index":895,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["ne(left",{"_index":332,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["neg",{"_index":395,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["neg(value",{"_index":363,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["nestedexpandoptions",{"_index":3150,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["network",{"_index":40,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":165,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["newline",{"_index":1147,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["newline_regexp",{"_index":1148,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["nextlink",{"_index":985,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["ngmodule",{"_index":2038,"title":{},"body":{"modules/ODataModule.html":{},"index.html":{}}}],["none",{"_index":43,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["none_parser",{"_index":107,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["noninfringement",{"_index":3120,"title":{},"body":{"license.html":{}}}],["normalize",{"_index":216,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["normalizevalue",{"_index":194,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["normalizevalue(value",{"_index":222,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["not(value",{"_index":346,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["notice",{"_index":3104,"title":{},"body":{"license.html":{}}}],["now",{"_index":288,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["npm",{"_index":2977,"title":{},"body":{"index.html":{}}}],["null",{"_index":217,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["nullable",{"_index":154,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["number",{"_index":82,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["number(directive.split('=')[1",{"_index":2682,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["number(match[1",{"_index":992,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["number.isnan(maxage",{"_index":2683,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["o",{"_index":2207,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["o.split",{"_index":2668,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["obj",{"_index":2255,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["object",{"_index":220,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.assign",{"_index":1886,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["object.assign(acc",{"_index":1892,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["object.assign(acc.params",{"_index":2121,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["object.assign(customparams",{"_index":2519,"title":{},"body":{"classes/ODataRequest.html":{}}}],["object.assign(this",{"_index":924,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["object.assign(this.etag",{"_index":1067,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["object.create(null",{"_index":213,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.defineproperty",{"_index":210,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.entries",{"_index":1825,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["object.entries(config.fields).map",{"_index":1952,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["object.entries(config.parameters",{"_index":1516,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["object.entries(params",{"_index":2136,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["object.getownpropertydescriptor(basector.prototype",{"_index":212,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.getownpropertynames(basector.prototype).foreach((name",{"_index":209,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["object.keys(this.options",{"_index":2389,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["object.keys(this.options).reduce((acc",{"_index":2367,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["objects",{"_index":861,"title":{},"body":{"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["objects.clone(this._segments",{"_index":2144,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["objects.clone(value",{"_index":2379,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["objects.get(obj",{"_index":2261,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.has(obj",{"_index":2265,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.merge(obj",{"_index":2266,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.resolvekey(key",{"_index":1869,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["objects.set(obj",{"_index":2259,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["objects.unset(obj",{"_index":2262,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["obs",{"_index":1239,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["observable",{"_index":31,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["observe",{"_index":1235,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["obtaining",{"_index":3082,"title":{},"body":{"license.html":{}}}],["odata",{"_index":1004,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"index.html":{}}}],["odata.include",{"_index":2504,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata.mergecallableparameters(config.callables",{"_index":2728,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata.metadata",{"_index":2670,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata.streaming",{"_index":2672,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/docs",{"_index":3065,"title":{},"body":{"index.html":{}}}],["odata/src/lib/cache/cache.ts",{"_index":1292,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odata/src/lib/cache/cache.ts:108",{"_index":1316,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:113",{"_index":1330,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:117",{"_index":1328,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:128",{"_index":1324,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:15",{"_index":1309,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:16",{"_index":1307,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:163",{"_index":1326,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:23",{"_index":1322,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:24",{"_index":1335,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:26",{"_index":1337,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:38",{"_index":1339,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:50",{"_index":1311,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:62",{"_index":1314,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:66",{"_index":1333,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:81",{"_index":1320,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/cache.ts:89",{"_index":1318,"title":{},"body":{"classes/ODataCache.html":{}}}],["odata/src/lib/cache/memory.ts",{"_index":1984,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/memory.ts:5",{"_index":1985,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odata/src/lib/cache/storage.ts",{"_index":2008,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odata/src/lib/cache/storage.ts:13",{"_index":2011,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:14",{"_index":2010,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:32",{"_index":2015,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/cache/storage.ts:39",{"_index":2014,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odata/src/lib/client.ts",{"_index":2915,"title":{},"body":{"miscellaneous/functions.html":{}}}],["odata/src/lib/helper.ts",{"_index":3173,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/models/options.ts",{"_index":2879,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/module.ts",{"_index":2031,"title":{},"body":{"modules/ODataModule.html":{},"miscellaneous/functions.html":{}}}],["odata/src/lib/module.ts:19",{"_index":2036,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata/src/lib/options.ts",{"_index":997,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:104",{"_index":1026,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:110",{"_index":2069,"title":{},"body":{"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:111",{"_index":2068,"title":{},"body":{"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:118",{"_index":2070,"title":{},"body":{"classes/ODataParserOptions.html":{}}}],["odata/src/lib/options.ts:22",{"_index":1021,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:26",{"_index":1017,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:30",{"_index":1018,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:34",{"_index":1009,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:38",{"_index":1015,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:42",{"_index":1012,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:46",{"_index":1022,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:50",{"_index":1005,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:55",{"_index":1001,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:61",{"_index":1008,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:71",{"_index":1016,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/options.ts:88",{"_index":999,"title":{},"body":{"classes/ODataApiOptions.html":{}}}],["odata/src/lib/parsers/callable.ts",{"_index":1469,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:107",{"_index":1483,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:114",{"_index":1480,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:123",{"_index":1485,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:141",{"_index":1482,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:158",{"_index":1479,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:16",{"_index":2056,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:17",{"_index":2059,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:171",{"_index":1478,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:18",{"_index":2058,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:19",{"_index":2055,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:20",{"_index":2057,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:21",{"_index":2054,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:31",{"_index":2066,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:42",{"_index":2061,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:52",{"_index":2060,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:63",{"_index":2063,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:67",{"_index":2064,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:71",{"_index":2062,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:76",{"_index":2065,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:80",{"_index":2067,"title":{},"body":{"classes/ODataParameterParser.html":{}}}],["odata/src/lib/parsers/callable.ts:88",{"_index":1472,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:89",{"_index":1473,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:90",{"_index":1471,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:91",{"_index":1477,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:92",{"_index":1476,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:93",{"_index":1475,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/callable.ts:94",{"_index":1470,"title":{},"body":{"classes/ODataCallableParser.html":{}}}],["odata/src/lib/parsers/enum",{"_index":1944,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odata/src/lib/parsers/structured",{"_index":1712,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/path/handlers.ts",{"_index":2162,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:12",{"_index":2825,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:16",{"_index":2824,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:20",{"_index":2822,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:24",{"_index":2820,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:27",{"_index":2818,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:30",{"_index":2823,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:34",{"_index":2821,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:37",{"_index":2819,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:42",{"_index":2163,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:44",{"_index":2165,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:47",{"_index":2170,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:50",{"_index":2164,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:53",{"_index":2166,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:56",{"_index":2167,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:59",{"_index":2169,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:62",{"_index":2168,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:7",{"_index":2817,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/handlers.ts:9",{"_index":2826,"title":{},"body":{"classes/SegmentHandler.html":{}}}],["odata/src/lib/resources/path/segments.ts",{"_index":2071,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/path/segments.ts:110",{"_index":2080,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:115",{"_index":2083,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:120",{"_index":2093,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:134",{"_index":2085,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:139",{"_index":2090,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:144",{"_index":2079,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:150",{"_index":2086,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:46",{"_index":2077,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:52",{"_index":2091,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:65",{"_index":2097,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:71",{"_index":2088,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:86",{"_index":2095,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/path/segments.ts:97",{"_index":2094,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odata/src/lib/resources/query/builder.ts",{"_index":2884,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/expressions.ts",{"_index":2878,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odata/src/lib/resources/query/handlers.ts",{"_index":2197,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:14",{"_index":2234,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:18",{"_index":2228,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:22",{"_index":2216,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:27",{"_index":2232,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:33",{"_index":2208,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:39",{"_index":2223,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:43",{"_index":2225,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:49",{"_index":2214,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:55",{"_index":2210,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:68",{"_index":2227,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:73",{"_index":2219,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:78",{"_index":2230,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:8",{"_index":2206,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:88",{"_index":2221,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:93",{"_index":2212,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/handlers.ts:99",{"_index":2215,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odata/src/lib/resources/query/options.ts",{"_index":2330,"title":{},"body":{"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/options.ts:102",{"_index":2337,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:114",{"_index":2340,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:119",{"_index":2346,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:125",{"_index":2342,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:129",{"_index":2349,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:133",{"_index":2344,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:140",{"_index":2336,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:32",{"_index":2335,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:39",{"_index":2347,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:66",{"_index":2352,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:77",{"_index":2350,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/options.ts:87",{"_index":2351,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odata/src/lib/resources/query/syntax.ts",{"_index":181,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/query/syntax.ts:102",{"_index":410,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:105",{"_index":409,"title":{},"body":{"classes/CollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:111",{"_index":2843,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:114",{"_index":2844,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:117",{"_index":2845,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:120",{"_index":2846,"title":{},"body":{"classes/StringFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:126",{"_index":690,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:129",{"_index":691,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:132",{"_index":692,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:135",{"_index":693,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:138",{"_index":694,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:141",{"_index":695,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:144",{"_index":696,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:147",{"_index":697,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:150",{"_index":698,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:153",{"_index":699,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:156",{"_index":700,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:159",{"_index":701,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:162",{"_index":702,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:165",{"_index":703,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:171",{"_index":188,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:174",{"_index":191,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:177",{"_index":193,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:183",{"_index":2849,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:187",{"_index":2850,"title":{},"body":{"classes/TypeFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:193",{"_index":872,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:196",{"_index":873,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:199",{"_index":874,"title":{},"body":{"classes/GeoFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:205",{"_index":412,"title":{},"body":{"classes/ConditionalFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:210",{"_index":2806,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/syntax.ts:217",{"_index":2809,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/syntax.ts:221",{"_index":2808,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/syntax.ts:229",{"_index":2807,"title":{},"body":{"classes/Operator.html":{}}}],["odata/src/lib/resources/query/syntax.ts:244",{"_index":897,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:247",{"_index":904,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:250",{"_index":899,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:253",{"_index":898,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:256",{"_index":903,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:259",{"_index":902,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:262",{"_index":896,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:265",{"_index":906,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:268",{"_index":905,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:271",{"_index":900,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:274",{"_index":901,"title":{},"body":{"classes/LogicalOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:280",{"_index":397,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:283",{"_index":403,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:286",{"_index":401,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:289",{"_index":399,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:292",{"_index":400,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:295",{"_index":402,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:300",{"_index":876,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/syntax.ts:303",{"_index":879,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/syntax.ts:307",{"_index":878,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/syntax.ts:313",{"_index":877,"title":{},"body":{"classes/Grouping.html":{}}}],["odata/src/lib/resources/query/syntax.ts:318",{"_index":908,"title":{},"body":{"classes/Navigation.html":{}}}],["odata/src/lib/resources/query/syntax.ts:321",{"_index":911,"title":{},"body":{"classes/Navigation.html":{}}}],["odata/src/lib/resources/query/syntax.ts:325",{"_index":910,"title":{},"body":{"classes/Navigation.html":{}}}],["odata/src/lib/resources/query/syntax.ts:332",{"_index":909,"title":{},"body":{"classes/Navigation.html":{}}}],["odata/src/lib/resources/query/syntax.ts:338",{"_index":880,"title":{},"body":{"classes/GroupingAndNavigationOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:342",{"_index":881,"title":{},"body":{"classes/GroupingAndNavigationOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:347",{"_index":884,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/syntax.ts:356",{"_index":887,"title":{},"body":{"classes/Lambda.html":{}}}],["odata/src/lib/resources/query/syntax.ts:370",{"_index":889,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:374",{"_index":888,"title":{},"body":{"classes/LambdaOperators.html":{}}}],["odata/src/lib/resources/query/syntax.ts:42",{"_index":866,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/syntax.ts:49",{"_index":869,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/syntax.ts:5",{"_index":2813,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/syntax.ts:53",{"_index":868,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/syntax.ts:6",{"_index":2815,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/syntax.ts:61",{"_index":867,"title":{},"body":{"classes/Function.html":{}}}],["odata/src/lib/resources/query/syntax.ts:7",{"_index":2814,"title":{},"body":{"interfaces/Renderable.html":{}}}],["odata/src/lib/resources/query/syntax.ts:74",{"_index":2833,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:77",{"_index":2834,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:80",{"_index":2835,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:83",{"_index":2836,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:86",{"_index":2837,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:89",{"_index":2838,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/query/syntax.ts:92",{"_index":2839,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["odata/src/lib/resources/request.ts",{"_index":2394,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:18",{"_index":2420,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:19",{"_index":2423,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:20",{"_index":2424,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:21",{"_index":2426,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:212",{"_index":2431,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:22",{"_index":2421,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:221",{"_index":2433,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:225",{"_index":2435,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:229",{"_index":2437,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:23",{"_index":2422,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:241",{"_index":2439,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:253",{"_index":2441,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:261",{"_index":2443,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:269",{"_index":2445,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:273",{"_index":2447,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:277",{"_index":2427,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:281",{"_index":2428,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:285",{"_index":2429,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:29",{"_index":2425,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:30",{"_index":2419,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:39",{"_index":2413,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:40",{"_index":2411,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:41",{"_index":2412,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:42",{"_index":2415,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:43",{"_index":2416,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/request.ts:44",{"_index":2409,"title":{},"body":{"classes/ODataRequest.html":{}}}],["odata/src/lib/resources/resource.ts",{"_index":3168,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/responses/annotations.ts",{"_index":926,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:100",{"_index":1558,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:104",{"_index":1553,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:105",{"_index":1578,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:112",{"_index":1557,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:12",{"_index":935,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:130",{"_index":1538,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:134",{"_index":1540,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:138",{"_index":1542,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:142",{"_index":1544,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:146",{"_index":1546,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:151",{"_index":1548,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:156",{"_index":1550,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:16",{"_index":940,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:161",{"_index":1531,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:162",{"_index":1552,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:168",{"_index":1535,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:20",{"_index":942,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:25",{"_index":936,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:26",{"_index":938,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:5",{"_index":932,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:56",{"_index":1560,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:60",{"_index":1562,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:64",{"_index":1564,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:68",{"_index":1566,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:7",{"_index":933,"title":{},"body":{"classes/ODataAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:72",{"_index":1567,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:76",{"_index":1569,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:80",{"_index":1571,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:84",{"_index":1573,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:88",{"_index":1575,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:92",{"_index":1554,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/annotations.ts:93",{"_index":1577,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odata/src/lib/resources/responses/csdl/csdl",{"_index":414,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["odata/src/lib/resources/responses/metadata.ts",{"_index":704,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:47",{"_index":706,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/metadata.ts:48",{"_index":707,"title":{},"body":{"classes/Field.html":{}}}],["odata/src/lib/resources/responses/options.ts",{"_index":2640,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:19",{"_index":2652,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:20",{"_index":2650,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:22",{"_index":2649,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:23",{"_index":2651,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:24",{"_index":2647,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:26",{"_index":2648,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:28",{"_index":2646,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:29",{"_index":2645,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:36",{"_index":2662,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:40",{"_index":2653,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:44",{"_index":2657,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:61",{"_index":2661,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:67",{"_index":2659,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/options.ts:72",{"_index":2655,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odata/src/lib/resources/responses/response.ts",{"_index":2542,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:125",{"_index":2554,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:126",{"_index":2569,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:136",{"_index":2551,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:137",{"_index":2571,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:146",{"_index":2550,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:147",{"_index":2573,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:169",{"_index":2558,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:193",{"_index":2556,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:212",{"_index":2563,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:236",{"_index":2565,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:29",{"_index":2555,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:30",{"_index":2549,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:46",{"_index":2560,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:58",{"_index":2562,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:79",{"_index":2564,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:92",{"_index":2553,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/response.ts:93",{"_index":2567,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata/src/lib/resources/responses/types.ts",{"_index":3174,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/resources/types/batch.ts",{"_index":1120,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:137",{"_index":1130,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:39",{"_index":1126,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:40",{"_index":1127,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:44",{"_index":1134,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/batch.ts:70",{"_index":1133,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata/src/lib/resources/types/options.ts",{"_index":3175,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/schema/annotation.ts",{"_index":913,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:4",{"_index":921,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:5",{"_index":920,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:6",{"_index":917,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:7",{"_index":918,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:8",{"_index":919,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/annotation.ts:9",{"_index":915,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["odata/src/lib/schema/callable.ts",{"_index":1405,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:10",{"_index":1410,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:103",{"_index":1416,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:11",{"_index":1411,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:12",{"_index":1409,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:27",{"_index":1433,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:44",{"_index":1439,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:53",{"_index":1431,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:57",{"_index":1442,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:61",{"_index":1419,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:7",{"_index":1415,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:75",{"_index":1421,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:8",{"_index":1413,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:85",{"_index":1435,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:9",{"_index":1412,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/callable.ts:95",{"_index":1427,"title":{},"body":{"classes/ODataCallable.html":{}}}],["odata/src/lib/schema/entity",{"_index":1580,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{}}}],["odata/src/lib/schema/enum",{"_index":1905,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["odata/src/lib/schema/schema.ts",{"_index":2688,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:13",{"_index":2696,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:14",{"_index":2702,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:15",{"_index":2695,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:16",{"_index":2701,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:17",{"_index":2700,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:18",{"_index":2697,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:19",{"_index":2698,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:20",{"_index":2694,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:43",{"_index":2715,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:50",{"_index":2717,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:62",{"_index":2704,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:67",{"_index":2711,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:73",{"_index":2713,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:79",{"_index":2707,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:87",{"_index":2709,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/schema/schema.ts:92",{"_index":2703,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odata/src/lib/services/base.ts",{"_index":1074,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:104",{"_index":1106,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:109",{"_index":1107,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:14",{"_index":1082,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:21",{"_index":1109,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:25",{"_index":1097,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:31",{"_index":1098,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:37",{"_index":1099,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:43",{"_index":1100,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:49",{"_index":1101,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:62",{"_index":1089,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:68",{"_index":1091,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:74",{"_index":1092,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:80",{"_index":1093,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:86",{"_index":1094,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/base.ts:99",{"_index":1104,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["odata/src/lib/services/entity",{"_index":1627,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odata/src/lib/services/entity.ts",{"_index":1597,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:13",{"_index":1610,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:7",{"_index":1605,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/entity.ts:8",{"_index":1602,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["odata/src/lib/services/factory.ts",{"_index":2753,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:15",{"_index":2756,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:30",{"_index":2759,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/factory.ts:7",{"_index":2754,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["odata/src/lib/services/singleton.ts",{"_index":2763,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:35",{"_index":2775,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:45",{"_index":2773,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/services/singleton.ts:59",{"_index":2771,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odata/src/lib/types.ts",{"_index":7,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["odata/src/lib/types.ts:104",{"_index":2811,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:114",{"_index":406,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/types.ts:115",{"_index":405,"title":{},"body":{"interfaces/Cache.html":{}}}],["odata/src/lib/types.ts:94",{"_index":2810,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/types.ts:99",{"_index":2812,"title":{},"body":{"interfaces/Parser.html":{}}}],["odata/src/lib/utils/durations.ts",{"_index":3167,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odata/src/lib/utils/objects.ts",{"_index":2948,"title":{},"body":{"miscellaneous/functions.html":{}}}],["odata/src/lib/utils/strings.ts",{"_index":2954,"title":{},"body":{"miscellaneous/functions.html":{}}}],["odata/src/lib/utils/types.ts",{"_index":2944,"title":{},"body":{"miscellaneous/functions.html":{}}}],["odata/wiki",{"_index":3068,"title":{},"body":{"index.html":{}}}],["odata_configurations",{"_index":2041,"title":{},"body":{"modules/ODataModule.html":{}}}],["odata_entityid_headers",{"_index":2578,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odata_etag",{"_index":2984,"title":{},"body":{"index.html":{}}}],["odata_version",{"_index":1149,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odata_version_headers",{"_index":2574,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataactionresource",{"_index":1086,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataannotation",{"_index":912,"title":{"classes/ODataAnnotation.html":{}},"body":{"classes/ODataAnnotation.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odataannotation(annot",{"_index":1594,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odataannotation(config",{"_index":2733,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataannotations",{"_index":925,"title":{"classes/ODataAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:118",{"_index":1533,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:12",{"_index":1536,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:126",{"_index":1534,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{}}}],["odataannotations:30",{"_index":2194,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:38",{"_index":2195,"title":{},"body":{"classes/ODataPropertyAnnotations.html":{}}}],["odataannotations:44",{"_index":1555,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:52",{"_index":1556,"title":{},"body":{"classes/ODataEntityAnnotations.html":{}}}],["odataannotations:7",{"_index":1532,"title":{},"body":{"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["odataapi",{"_index":1156,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["odataapioptions",{"_index":996,"title":{"classes/ODataApiOptions.html":{}},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["odatabaseservice",{"_index":1073,"title":{"classes/ODataBaseService.html":{}},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:25",{"_index":1607,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:62",{"_index":1606,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabaseservice:99",{"_index":1608,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatabatchrequest",{"_index":1119,"title":{"classes/ODataBatchRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchrequest(req",{"_index":1237,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource",{"_index":1204,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["odatabatchresource(api",{"_index":1214,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource(this.api",{"_index":1215,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildbody",{"_index":1252,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.buildbody(bound",{"_index":1247,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatabatchresource.handleresponse(requests",{"_index":1251,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["odatacache",{"_index":1291,"title":{"classes/ODataCache.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacache:10",{"_index":1989,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:108",{"_index":1992,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:113",{"_index":1998,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:117",{"_index":1997,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:128",{"_index":1995,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:15",{"_index":1987,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:16",{"_index":1986,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:163",{"_index":1996,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:20",{"_index":1988,"title":{},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatacache:26",{"_index":2000,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:38",{"_index":2001,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:45",{"_index":2012,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:50",{"_index":1990,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:60",{"_index":2013,"title":{},"body":{"classes/ODataInStorageCache.html":{}}}],["odatacache:62",{"_index":1991,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:66",{"_index":1999,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:81",{"_index":1994,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacache:89",{"_index":1993,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["odatacacheentry",{"_index":1312,"title":{"interfaces/ODataCacheEntry.html":{}},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatacallable",{"_index":1404,"title":{"classes/ODataCallable.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataSchema.html":{}}}],["odatacallable(config",{"_index":2729,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatacallableparser",{"_index":1414,"title":{"classes/ODataCallableParser.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataclient",{"_index":1080,"title":{},"body":{"classes/ODataBaseService.html":{},"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["odatacollection",{"_index":1670,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odatacollectionresource",{"_index":3151,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatacontext",{"_index":931,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentities",{"_index":1110,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odataentitiesannotations",{"_index":982,"title":{"classes/ODataEntitiesAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentitiesoptions",{"_index":3153,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentity",{"_index":1111,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataentityannotations",{"_index":953,"title":{"classes/ODataEntityAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odataentitycontainer",{"_index":1579,"title":{"classes/ODataEntityContainer.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataSchema.html":{}}}],["odataentitycontainer(config",{"_index":2732,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataentityoptions",{"_index":3154,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataentityresource",{"_index":1653,"title":{},"body":{"classes/ODataEntitySetService.html":{},"miscellaneous/typealiases.html":{}}}],["odataentityservice",{"_index":1596,"title":{"classes/ODataEntityService.html":{}},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odataentityservice:20",{"_index":2768,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityservice:28",{"_index":2767,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["odataentityservice:29",{"_index":1652,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityservice:37",{"_index":1639,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["odataentityset",{"_index":1582,"title":{"classes/ODataEntitySet.html":{}},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataSchema.html":{}}}],["odataentityset(config",{"_index":1592,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["odataentitysetresource",{"_index":1651,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["odataentitysetservice",{"_index":1626,"title":{"classes/ODataEntitySetService.html":{}},"body":{"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{}}}],["odataentitytypekey",{"_index":1711,"title":{"classes/ODataEntityTypeKey.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odataentitytypekey(key",{"_index":1823,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odataenumtype",{"_index":1904,"title":{"classes/ODataEnumType.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["odataenumtype(config",{"_index":2723,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odataenumtypefieldparser",{"_index":1914,"title":{"classes/ODataEnumTypeFieldParser.html":{}},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypefieldparser(name",{"_index":1953,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["odataenumtypeparser",{"_index":1487,"title":{"classes/ODataEnumTypeParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatafunctionresource",{"_index":1096,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatafunctions",{"_index":386,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odatahelper",{"_index":1030,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["odatahelper[this.version",{"_index":1071,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["odatainmemorycache",{"_index":1983,"title":{"classes/ODataInMemoryCache.html":{}},"body":{"classes/ODataInMemoryCache.html":{}}}],["odatainstoragecache",{"_index":2007,"title":{"classes/ODataInStorageCache.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odatametadata",{"_index":716,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_data_services",{"_index":829,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_reference",{"_index":820,"title":{},"body":{"classes/Field.html":{}}}],["odatametadata.tag_schema",{"_index":833,"title":{},"body":{"classes/Field.html":{}}}],["odatametadatatype",{"_index":26,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odatamodel",{"_index":1611,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["odatamodelentry",{"_index":3155,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodeleventtype",{"_index":3156,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelfieldoptions",{"_index":3157,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelrelation",{"_index":3158,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelresource",{"_index":3159,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatamodelstate",{"_index":2872,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["odatamodule",{"_index":2029,"title":{"modules/ODataModule.html":{}},"body":{"modules/ODataModule.html":{},"index.html":{},"modules.html":{}}}],["odatamodule.forroot",{"_index":2979,"title":{},"body":{"index.html":{}}}],["odatamodule.forroot(trippinconfig",{"_index":3046,"title":{},"body":{"index.html":{}}}],["odatanavigationpropertyresource",{"_index":1103,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odatanoneoptions",{"_index":3160,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataoperators",{"_index":383,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odataoptions",{"_index":1157,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataparameterparser",{"_index":1474,"title":{"classes/ODataParameterParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataparameterparser(name",{"_index":1517,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["odataparseroptions",{"_index":1072,"title":{"classes/ODataParserOptions.html":{}},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odataparseroptions(options",{"_index":1496,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatapathsegments",{"_index":1158,"title":{"classes/ODataPathSegments.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odatapathsegments(segments",{"_index":2145,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["odatapathsegmentshandler",{"_index":2161,"title":{"classes/ODataPathSegmentsHandler.html":{}},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["odataproperty",{"_index":1112,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataResponse.html":{},"miscellaneous/typealiases.html":{}}}],["odatapropertyannotations",{"_index":948,"title":{"classes/ODataPropertyAnnotations.html":{}},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["odatapropertyoptions",{"_index":3161,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odatapropertyresource",{"_index":3169,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["odataqueryarguments",{"_index":2237,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryargumentsoptions",{"_index":1088,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odataqueryoptionhandler",{"_index":2196,"title":{"classes/ODataQueryOptionHandler.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionhandler(this.options",{"_index":2383,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions",{"_index":2238,"title":{"classes/ODataQueryOptions.html":{}},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["odataqueryoptions(options",{"_index":2380,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["odataqueryoptionshandler",{"_index":2267,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["odatareferential",{"_index":1729,"title":{"classes/ODataReferential.html":{}},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatareferential(referential",{"_index":1738,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatarequest",{"_index":1125,"title":{"classes/ODataRequest.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresource",{"_index":1159,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["odataresponse",{"_index":1160,"title":{"classes/ODataResponse.html":{}},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponse.fromjson(req",{"_index":2027,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["odataresponseoptions",{"_index":2552,"title":{"classes/ODataResponseOptions.html":{}},"body":{"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this",{"_index":2666,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["odataresponseoptions(this.api.options",{"_index":2597,"title":{},"body":{"classes/ODataResponse.html":{}}}],["odataschema",{"_index":1408,"title":{"classes/ODataSchema.html":{}},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataSchema.html":{}}}],["odatasegment",{"_index":2076,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["odataservicefactory",{"_index":2033,"title":{"injectables/ODataServiceFactory.html":{}},"body":{"modules/ODataModule.html":{},"injectables/ODataServiceFactory.html":{},"index.html":{}}}],["odatasettings",{"_index":2044,"title":{},"body":{"modules/ODataModule.html":{}}}],["odatasettings(...configs",{"_index":2047,"title":{},"body":{"modules/ODataModule.html":{}}}],["odatasingletonresource",{"_index":2769,"title":{},"body":{"classes/ODataSingletonService.html":{},"miscellaneous/typealiases.html":{}}}],["odatasingletonservice",{"_index":2761,"title":{"classes/ODataSingletonService.html":{}},"body":{"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{}}}],["odatastructuredtype",{"_index":2699,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtype(config",{"_index":2726,"title":{},"body":{"classes/ODataSchema.html":{}}}],["odatastructuredtypefieldparser",{"_index":1723,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatastructuredtypefieldparser(name",{"_index":1827,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatastructuredtypeparser",{"_index":1488,"title":{"classes/ODataStructuredTypeParser.html":{}},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["odatasyntax",{"_index":203,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["odatausage",{"_index":2978,"title":{},"body":{"index.html":{}}}],["odataversion",{"_index":34,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["odataversionhelper",{"_index":29,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["of(cached",{"_index":1392,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["ondelete",{"_index":563,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["one",{"_index":2246,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["onerror",{"_index":1122,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onerror(content",{"_index":1128,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload",{"_index":1123,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["onload(content",{"_index":1132,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["op",{"_index":319,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["open",{"_index":163,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["open.org/odata/odata",{"_index":1033,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["open.org/odata/odata/v4.0/errata02/os/complete/part1",{"_index":1037,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["open.org/odata/odata/v4.01/odata",{"_index":2269,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["opentype",{"_index":470,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["operator",{"_index":204,"title":{"classes/Operator.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('add",{"_index":354,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('and",{"_index":343,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('div",{"_index":360,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('eq",{"_index":331,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ge",{"_index":337,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('gt",{"_index":335,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('has",{"_index":349,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('in",{"_index":351,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('le",{"_index":341,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('lt",{"_index":339,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mod",{"_index":362,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('mul",{"_index":358,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('ne",{"_index":333,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('not",{"_index":347,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('or",{"_index":345,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator('sub",{"_index":356,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["operator:221",{"_index":886,"title":{},"body":{"classes/Lambda.html":{}}}],["operator:360",{"_index":885,"title":{},"body":{"classes/Lambda.html":{}}}],["operators",{"_index":385,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["option",{"_index":2332,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["option(name",{"_index":2345,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["optional",{"_index":12,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":9,"title":{"interfaces/Options.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/functions.html":{}}}],["options.custom",{"_index":1889,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.custom[f.name",{"_index":1890,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.expand",{"_index":1882,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.headers",{"_index":1246,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["options.helper",{"_index":2629,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.annotations(this.payload",{"_index":2623,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(data",{"_index":2632,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.attributes(payload",{"_index":2638,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.etag(this._annotations",{"_index":2625,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.helper.id(this._annotations",{"_index":2627,"title":{},"body":{"classes/ODataResponse.html":{}}}],["options.params",{"_index":1248,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["options.required",{"_index":1895,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.required[f.name",{"_index":1896,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.select",{"_index":1883,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.select).indexof(f.name",{"_index":1884,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["options.withcredentials",{"_index":1249,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["options?.helper.type(value",{"_index":1764,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["optionshelper",{"_index":87,"title":{"interfaces/OptionsHelper.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["opts",{"_index":110,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["or(left",{"_index":344,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["orderby",{"_index":67,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["orderby(opts",{"_index":2299,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["orderbyobject",{"_index":3162,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["orderbytype",{"_index":3163,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["original",{"_index":1221,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["os",{"_index":1041,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["otherwise",{"_index":3131,"title":{},"body":{"license.html":{}}}],["out",{"_index":3133,"title":{},"body":{"license.html":{}}}],["overview",{"_index":3137,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":167,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["p.configure",{"_index":1529,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.encode(params[p.name",{"_index":1526,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.name",{"_index":1522,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.serialize(params[p.name",{"_index":1525,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["p.startswith(application_json",{"_index":2603,"title":{},"body":{"classes/ODataResponse.html":{}}}],["package",{"_index":2851,"title":{"dependencies.html":{}},"body":{}}],["paging",{"_index":2308,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["param",{"_index":74,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parameter",{"_index":103,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataQueryOptionHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["parameter.collection",{"_index":1494,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.nullable",{"_index":1492,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameter.type",{"_index":1490,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parameters",{"_index":172,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["parameters(value",{"_index":2182,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["parameters.reduce",{"_index":1524,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["params",{"_index":18,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["params[p.name",{"_index":1523,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parent",{"_index":1815,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parent.children.push(this",{"_index":1852,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parentelement",{"_index":859,"title":{},"body":{"classes/Field.html":{}}}],["parentelement.children",{"_index":864,"title":{},"body":{"classes/Field.html":{}}}],["parse",{"_index":848,"title":{},"body":{"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parsenot",{"_index":2911,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parsenot(builtfilters",{"_index":2939,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parser",{"_index":94,"title":{"interfaces/Parser.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["parser.deserialize(value",{"_index":1767,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parser.parsefromstring(xml",{"_index":809,"title":{},"body":{"classes/Field.html":{}}}],["parser.serialize(value",{"_index":1770,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parserfortype",{"_index":1462,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parserfortype(this.base",{"_index":1851,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parserfortype(this.return.type",{"_index":1527,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["parserfortype(this.type",{"_index":1502,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parseroptions",{"_index":1495,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["parseroptions?.stringasenum",{"_index":1958,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["parsers",{"_index":125,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["part1",{"_index":1042,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["part2",{"_index":2271,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["partial",{"_index":1645,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":3118,"title":{},"body":{"license.html":{}}}],["partner",{"_index":564,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{}}}],["patch",{"_index":1172,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["patch'].indexof(this._method",{"_index":2498,"title":{},"body":{"classes/ODataRequest.html":{}}}],["patch(attrs",{"_index":2770,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["path",{"_index":578,"title":{},"body":{"classes/CsdlNavigationPropertyBinding.html":{},"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"classes/SegmentHandler.html":{},"miscellaneous/functions.html":{}}}],["path(value",{"_index":2175,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["path.slice(1",{"_index":2110,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path.startswith(path_separator",{"_index":2109,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["path_separator",{"_index":2100,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathandparams",{"_index":2074,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["paths",{"_index":2122,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames",{"_index":49,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["pathsegmentnames.entityset",{"_index":1354,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.function",{"_index":2105,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.navigationproperty",{"_index":2149,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentnames.property",{"_index":2150,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["pathsegmentsbuilder",{"_index":2103,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/functions.html":{}}}],["pathsegmentsbuilder(segment",{"_index":2118,"title":{},"body":{"classes/ODataPathSegments.html":{},"miscellaneous/functions.html":{}}}],["pathwithparams",{"_index":2406,"title":{},"body":{"classes/ODataRequest.html":{}}}],["path}?${this._params",{"_index":2538,"title":{},"body":{"classes/ODataRequest.html":{}}}],["pattern",{"_index":263,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEnumType.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["pattern.test(a.term",{"_index":1939,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["payload",{"_index":109,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["people",{"_index":3028,"title":{},"body":{"index.html":{}}}],["people.fetch",{"_index":3042,"title":{},"body":{"index.html":{}}}],["peopleservice",{"_index":3027,"title":{},"body":{"index.html":{}}}],["peopleservice.entities",{"_index":3030,"title":{},"body":{"index.html":{}}}],["permission",{"_index":3076,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":132,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["permit",{"_index":3098,"title":{},"body":{"license.html":{}}}],["person",{"_index":3081,"title":{},"body":{"license.html":{}}}],["persons",{"_index":3099,"title":{},"body":{"license.html":{}}}],["pipe",{"_index":1694,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["please",{"_index":2963,"title":{},"body":{"index.html":{}}}],["point",{"_index":310,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["policy",{"_index":1011,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataParserOptions.html":{}}}],["polygon",{"_index":313,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["portions",{"_index":3108,"title":{},"body":{"license.html":{}}}],["post",{"_index":1171,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["post'].indexof(this._method",{"_index":2507,"title":{},"body":{"classes/ODataRequest.html":{}}}],["precision",{"_index":156,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["predicate",{"_index":1587,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["predicate(this",{"_index":1834,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["prefer",{"_index":19,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["prefer.length",{"_index":2509,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push",{"_index":2503,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.continue",{"_index":2508,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxpagesize",{"_index":2501,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefer.push(`return=${this.api.options.prefer?.return",{"_index":2499,"title":{},"body":{"classes/ODataRequest.html":{}}}],["prefix",{"_index":2929,"title":{},"body":{"miscellaneous/functions.html":{}}}],["primitive",{"_index":2242,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["private",{"_index":46,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["project",{"_index":2965,"title":{},"body":{"index.html":{}}}],["projects/.../builder.ts",{"_index":2876,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../client.ts",{"_index":2892,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../durations.ts",{"_index":3141,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../expressions.ts",{"_index":2870,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../helper.ts",{"_index":3152,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../metadata.ts",{"_index":2871,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../module.ts",{"_index":2904,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../objects.ts",{"_index":2907,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../options.ts",{"_index":2873,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../resource.ts",{"_index":3142,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../segments.ts",{"_index":2912,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../strings.ts",{"_index":2910,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../structured",{"_index":3147,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["projects/.../syntax.ts",{"_index":2894,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/.../types.ts",{"_index":2874,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["projects/angular",{"_index":6,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["properties",{"_index":11,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["property",{"_index":54,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["property(name",{"_index":975,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["property.enum",{"_index":1967,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["property.ts",{"_index":560,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["property.ts:1",{"_index":649,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:14",{"_index":595,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:15",{"_index":596,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:16",{"_index":597,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:17",{"_index":599,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:18",{"_index":598,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:19",{"_index":594,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["property.ts:25",{"_index":568,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:3",{"_index":650,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:30",{"_index":571,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:31",{"_index":569,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:32",{"_index":572,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:33",{"_index":570,"title":{},"body":{"classes/CsdlNavigationProperty.html":{}}}],["property.ts:39",{"_index":608,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:4",{"_index":652,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:40",{"_index":609,"title":{},"body":{"classes/CsdlReferentialConstraint.html":{}}}],["property.ts:43",{"_index":583,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:44",{"_index":584,"title":{},"body":{"classes/CsdlOnDelete.html":{}}}],["property.ts:5",{"_index":651,"title":{},"body":{"classes/CsdlStructuralProperty.html":{}}}],["property.ts:9",{"_index":593,"title":{},"body":{"classes/CsdlProperty.html":{}}}],["propertyref",{"_index":743,"title":{},"body":{"classes/Field.html":{}}}],["propertyrefs",{"_index":486,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{}}}],["propname",{"_index":2937,"title":{},"body":{"miscellaneous/functions.html":{}}}],["propprefix",{"_index":2924,"title":{},"body":{"miscellaneous/functions.html":{}}}],["protected",{"_index":225,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataSingletonService.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["protocol",{"_index":1043,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["protocol/odata",{"_index":1038,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["provide",{"_index":2049,"title":{},"body":{"modules/ODataModule.html":{}}}],["provided",{"_index":3109,"title":{},"body":{"license.html":{}}}],["providers",{"_index":2032,"title":{},"body":{"modules/ODataModule.html":{}}}],["public",{"_index":45,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"modules/ODataModule.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["publish",{"_index":3092,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":3119,"title":{},"body":{"license.html":{}}}],["push",{"_index":2203,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["push(value",{"_index":2222,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["put",{"_index":404,"title":{},"body":{"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataRequest.html":{}}}],["put(key",{"_index":108,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["put(name",{"_index":1332,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse",{"_index":1304,"title":{},"body":{"classes/ODataCache.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["putresponse(req",{"_index":1334,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["q.apply(options",{"_index":1116,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["q.expand",{"_index":3031,"title":{},"body":{"index.html":{}}}],["q.filter",{"_index":3013,"title":{},"body":{"index.html":{}}}],["q.filter().clear",{"_index":3026,"title":{},"body":{"index.html":{}}}],["q.filter().push",{"_index":3021,"title":{},"body":{"index.html":{}}}],["qualifier",{"_index":448,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["queries",{"_index":2995,"title":{},"body":{"index.html":{}}}],["query",{"_index":104,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["query((q",{"_index":3012,"title":{},"body":{"index.html":{}}}],["query.expand",{"_index":2319,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.filter",{"_index":2325,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.orderby",{"_index":2327,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.search",{"_index":2323,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.select",{"_index":2317,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["query.transform",{"_index":2321,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["querycustomtype",{"_index":196,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/typealiases.html":{}}}],["querycustomtypes",{"_index":2875,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["querying",{"_index":2959,"title":{},"body":{"index.html":{}}}],["queryoptionnames",{"_index":25,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["queryoptionnames.compute",{"_index":2283,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.expand",{"_index":2359,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.filter",{"_index":2297,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.format",{"_index":2360,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.orderby",{"_index":2300,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.search",{"_index":2354,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.select",{"_index":2353,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.skip",{"_index":2357,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.skiptoken",{"_index":2358,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.top",{"_index":2356,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptionnames.transform",{"_index":2355,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["queryoptions",{"_index":3164,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["queryparams",{"_index":2535,"title":{},"body":{"classes/ODataRequest.html":{}}}],["r",{"_index":1090,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParameterParser.html":{},"classes/ODataSingletonService.html":{}}}],["r.ismutate",{"_index":1402,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["r.request",{"_index":1209,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["range",{"_index":1802,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["raw",{"_index":1718,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/enumerations.html":{}}}],["raw(`'${serialized",{"_index":1964,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["raw(json.stringify(this.serialize(value",{"_index":1850,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["raw(key",{"_index":2115,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["raw(serialized",{"_index":1965,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["readlink",{"_index":962,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["readonly",{"_index":719,"title":{},"body":{"classes/Field.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["reduce",{"_index":1351,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["reduce((acc",{"_index":1891,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["reference",{"_index":56,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["reference.ts",{"_index":541,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{}}}],["reference.ts:14",{"_index":543,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:15",{"_index":544,"title":{},"body":{"classes/CsdlInclude.html":{}}}],["reference.ts:18",{"_index":553,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:20",{"_index":556,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:21",{"_index":554,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:22",{"_index":555,"title":{},"body":{"classes/CsdlIncludeAnnotations.html":{}}}],["reference.ts:3",{"_index":603,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:5",{"_index":606,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:6",{"_index":605,"title":{},"body":{"classes/CsdlReference.html":{}}}],["reference.ts:7",{"_index":604,"title":{},"body":{"classes/CsdlReference.html":{}}}],["referenced",{"_index":161,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referencedproperty",{"_index":159,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["references",{"_index":804,"title":{},"body":{"classes/Field.html":{}}}],["referential",{"_index":160,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["referentialconstraint",{"_index":746,"title":{},"body":{"classes/Field.html":{}}}],["referentialconstraints",{"_index":565,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{}}}],["referentials",{"_index":158,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["regexp",{"_index":1916,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["region",{"_index":114,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["related",{"_index":2964,"title":{},"body":{"index.html":{}}}],["relative",{"_index":1166,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["remove",{"_index":1372,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"miscellaneous/typealiases.html":{}}}],["remove(...names",{"_index":2385,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(names",{"_index":2348,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["remove(value",{"_index":2224,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["removed",{"_index":2881,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["render",{"_index":214,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["render(aliases",{"_index":198,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(field",{"_index":232,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(left",{"_index":323,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(right",{"_index":327,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(this.group",{"_index":367,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(v",{"_index":234,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value",{"_index":2918,"title":{},"body":{"miscellaneous/functions.html":{}}}],["render(value(syntax",{"_index":219,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["render(value.render(aliases",{"_index":221,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["renderable",{"_index":197,"title":{"interfaces/Renderable.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["renderprimitivevalue",{"_index":2913,"title":{},"body":{"miscellaneous/functions.html":{}}}],["renderprimitivevalue(key",{"_index":2941,"title":{},"body":{"miscellaneous/functions.html":{}}}],["replace(/\\;/g",{"_index":2607,"title":{},"body":{"classes/ODataResponse.html":{}}}],["reportprogress",{"_index":2402,"title":{},"body":{"classes/ODataRequest.html":{}}}],["representation",{"_index":84,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCallable.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["req",{"_index":1226,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{}}}],["req.api",{"_index":1227,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["req.fetchpolicy",{"_index":1389,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isbatch",{"_index":1399,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.isfetch",{"_index":1385,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.ismutate",{"_index":1387,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["req.observe",{"_index":1231,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["req.onload(chunk.slice(1",{"_index":1290,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["req.resource",{"_index":1400,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataResponse.html":{}}}],["req.resource.clonesegments",{"_index":1349,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["request",{"_index":97,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["requester",{"_index":1222,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["requests",{"_index":1207,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["requests[index",{"_index":1288,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["require",{"_index":1703,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["required",{"_index":1728,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["res",{"_index":1168,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{}}}],["res$.pipe",{"_index":1394,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res$.pipe(startwith(cached",{"_index":1398,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.body",{"_index":2580,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.context",{"_index":1356,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.destroy(options",{"_index":1691,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.haskey",{"_index":1686,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["res.headers",{"_index":2581,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.join(newline",{"_index":1179,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.length",{"_index":1273,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.modify(attrs",{"_index":1690,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.options.cacheability",{"_index":1396,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["res.options.maxage",{"_index":2005,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.push",{"_index":1261,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${batch",{"_index":1270,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${batchboundary",{"_index":1263,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${boundary_prefix_suffix}${changesetboundary",{"_index":1267,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_id",{"_index":1269,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_transfer_encoding",{"_index":1268,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${content_type",{"_index":1173,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(`${newline}${json.stringify(batch.request.body",{"_index":1272,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.push(newline",{"_index":1266,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["res.status",{"_index":2582,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.statustext",{"_index":2583,"title":{},"body":{"classes/ODataResponse.html":{}}}],["res.tojson",{"_index":2026,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["res.update(attrs",{"_index":1689,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["res.url",{"_index":2584,"title":{},"body":{"classes/ODataResponse.html":{}}}],["reset",{"_index":3170,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resolve",{"_index":2678,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["resolvekey",{"_index":2779,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["resolvekey(value",{"_index":1855,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["resolvetitle",{"_index":1937,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["resolvetitle(this.findfieldbyname(value",{"_index":1942,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["resolvetitle(this.findfieldbyvalue(value",{"_index":1941,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["resource",{"_index":1085,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSingletonService.html":{},"classes/SegmentHandler.html":{},"index.html":{}}}],["resource.call(params",{"_index":1117,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.fetch",{"_index":1118,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resource.query((q",{"_index":1115,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["resourceparams",{"_index":2472,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$expand",{"_index":2518,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourceparams['$select",{"_index":2516,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resourcepath",{"_index":2471,"title":{},"body":{"classes/ODataRequest.html":{}}}],["resources",{"_index":1113,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataSingletonService.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["resources/query",{"_index":1719,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["response",{"_index":1020,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["response.body.split(newline_regexp",{"_index":1283,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["response.headers.get(content_type",{"_index":1278,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsejson",{"_index":2016,"title":{"interfaces/ResponseJson.html":{}},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["responseoptions",{"_index":88,"title":{"interfaces/ResponseOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["responses",{"_index":1161,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["responsetype",{"_index":1087,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataRequest.html":{},"classes/ODataSingletonService.html":{}}}],["restore",{"_index":1241,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["restriction",{"_index":3088,"title":{},"body":{"license.html":{}}}],["result",{"_index":1219,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{}}}],["result.params",{"_index":2124,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["result.paths.join(path_separator",{"_index":2123,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["results",{"_index":176,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":83,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["returns",{"_index":189,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":417,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlParameter.html":{},"classes/CsdlReturnType.html":{},"classes/Field.html":{}}}],["right",{"_index":322,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["right.map((v",{"_index":325,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["rights",{"_index":3090,"title":{},"body":{"license.html":{}}}],["root",{"_index":2987,"title":{},"body":{"index.html":{}}}],["round",{"_index":185,"title":{},"body":{"classes/ArithmeticFunctions.html":{}}}],["round(value",{"_index":192,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["rxjs",{"_index":32,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1345,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{}}}],["s",{"_index":1105,"title":{},"body":{"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataPathSegments.html":{},"classes/ODataSingletonService.html":{}}}],["s.key",{"_index":2134,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.name",{"_index":1353,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.parameters",{"_index":2142,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s.path",{"_index":1355,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{}}}],["s.type",{"_index":2127,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["s1",{"_index":258,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["s2",{"_index":256,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["same",{"_index":1230,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["save",{"_index":1635,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["save(attrs",{"_index":1664,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["scale",{"_index":157,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["schema",{"_index":709,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.alias",{"_index":1453,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.contentencoding",{"_index":1794,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.default",{"_index":1807,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.format",{"_index":1787,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.iscompoundkey",{"_index":1701,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.maxlength",{"_index":1796,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.namespace",{"_index":1452,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["schema.org",{"_index":1775,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.org/draft",{"_index":1879,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.pattern",{"_index":1788,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.properties",{"_index":1885,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.required",{"_index":1893,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema.resolvekey(attrs",{"_index":1706,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["schema.ts",{"_index":619,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:13",{"_index":629,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:15",{"_index":638,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:16",{"_index":631,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:17",{"_index":636,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:18",{"_index":633,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:19",{"_index":635,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:20",{"_index":637,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:21",{"_index":630,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:22",{"_index":634,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:23",{"_index":640,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:24",{"_index":639,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.ts:25",{"_index":632,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["schema.type",{"_index":1786,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schema/annotation",{"_index":1717,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["schemaconfig",{"_index":127,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataSchema.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["schemas",{"_index":126,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["scope",{"_index":1305,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["scope(req",{"_index":1336,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["scope.length",{"_index":1375,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["scope.push(name",{"_index":1374,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["search",{"_index":65,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["search(opts",{"_index":2294,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["second",{"_index":685,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["second(value",{"_index":290,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["segment",{"_index":2082,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{},"miscellaneous/functions.html":{}}}],["segment.clearkey",{"_index":2131,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key",{"_index":2111,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.key(key",{"_index":2132,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.name",{"_index":2104,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.parameters",{"_index":2106,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segment.path",{"_index":2108,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler",{"_index":2101,"title":{"classes/SegmentHandler.html":{}},"body":{"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segmenthandler(s",{"_index":2152,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segmenthandler(segment",{"_index":2157,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments",{"_index":1212,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["segments(undefined",{"_index":2092,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.add(pathsegmentnames.batch",{"_index":1213,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["segments.filter",{"_index":2148,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.foreach((segment",{"_index":2129,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.length",{"_index":2153,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.map((s",{"_index":2133,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments.segments",{"_index":1350,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["segments[0",{"_index":2154,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["segments[segments.length",{"_index":2155,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["select",{"_index":61,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["select(opts",{"_index":2274,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["selector",{"_index":2985,"title":{},"body":{"index.html":{}}}],["selecttype",{"_index":3165,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["sell",{"_index":3096,"title":{},"body":{"license.html":{}}}],["send",{"_index":1006,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["sent",{"_index":1014,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["serialization",{"_index":1436,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["serialize",{"_index":100,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["serialize(params",{"_index":1484,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["serialize(value",{"_index":1434,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Parser.html":{}}}],["serialized",{"_index":1437,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["server",{"_index":1195,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["service",{"_index":174,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["servicerooturl",{"_index":117,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["services/index",{"_index":2043,"title":{},"body":{"modules/ODataModule.html":{}}}],["sessionstorage",{"_index":2017,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["set",{"_index":504,"title":{},"body":{"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{}}}],["set(path",{"_index":2226,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["set.ts",{"_index":505,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{}}}],["set.ts:10",{"_index":1616,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["set.ts:105",{"_index":1667,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:122",{"_index":1663,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:138",{"_index":1649,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:155",{"_index":1661,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:175",{"_index":1665,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:21",{"_index":1650,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:26",{"_index":1619,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["set.ts:3",{"_index":508,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:32",{"_index":1620,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["set.ts:38",{"_index":1642,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:39",{"_index":1643,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:41",{"_index":1618,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["set.ts:5",{"_index":511,"title":{},"body":{"classes/CsdlEntitySet.html":{}}}],["set.ts:50",{"_index":1669,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:58",{"_index":1655,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:6",{"_index":509,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:67",{"_index":1657,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:7",{"_index":512,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:79",{"_index":1659,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["set.ts:8",{"_index":510,"title":{},"body":{"classes/CsdlEntitySet.html":{},"classes/ODataEntitySet.html":{}}}],["set.ts:9",{"_index":1617,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["set.ts:91",{"_index":1646,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["setcache",{"_index":2641,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setcache(cachecontrol",{"_index":2654,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures",{"_index":2642,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setfeatures(features",{"_index":2656,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation",{"_index":2643,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setlocation(location",{"_index":2658,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["settings",{"_index":2045,"title":{},"body":{"modules/ODataModule.html":{}}}],["setversion",{"_index":2644,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["setversion(version",{"_index":2660,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["shall",{"_index":3105,"title":{},"body":{"license.html":{}}}],["shortcuts",{"_index":1692,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["singleton",{"_index":53,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlEntityContainer.html":{},"classes/Field.html":{},"classes/ODataPathSegmentsHandler.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{}}}],["singleton(singletonname",{"_index":2758,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singleton.ts",{"_index":643,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:3",{"_index":645,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:5",{"_index":646,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:6",{"_index":648,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singleton.ts:7",{"_index":647,"title":{},"body":{"classes/CsdlSingleton.html":{}}}],["singletonname",{"_index":2760,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["singletons",{"_index":494,"title":{},"body":{"classes/CsdlEntityContainer.html":{}}}],["singletonschema",{"_index":2766,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["skip",{"_index":69,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["skip(opts",{"_index":2304,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["skiptoken",{"_index":70,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["skiptoken(opts",{"_index":2306,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["software",{"_index":3084,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["specific",{"_index":1704,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["specified",{"_index":853,"title":{},"body":{"classes/Field.html":{}}}],["split",{"_index":2601,"title":{},"body":{"classes/ODataResponse.html":{}}}],["srid",{"_index":433,"title":{},"body":{"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["standardaggregatemethods",{"_index":2877,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["start",{"_index":250,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["started",{"_index":2956,"title":{"index.html":{},"license.html":{}},"body":{}}],["started/advanced",{"_index":1202,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataSingletonService.html":{}}}],["startindex",{"_index":1287,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["startswith",{"_index":2831,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["startswith(field",{"_index":247,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["startwith",{"_index":1343,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["states",{"_index":3017,"title":{},"body":{"index.html":{}}}],["static",{"_index":718,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"modules/ODataModule.html":{},"classes/ODataResponse.html":{}}}],["status",{"_index":1129,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["status.code",{"_index":1185,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["status.message",{"_index":1187,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["status.text",{"_index":1198,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["statustext",{"_index":1186,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponse.html":{},"interfaces/ResponseJson.html":{}}}],["storage",{"_index":2009,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["store",{"_index":47,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["store'].indexof(directive",{"_index":2685,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["streaming",{"_index":78,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["string",{"_index":75,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["stringandcollectionfunctions",{"_index":236,"title":{"classes/StringAndCollectionFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["stringasenum",{"_index":73,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["stringfunctions",{"_index":261,"title":{"classes/StringFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["strings",{"_index":1162,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strings.uniqueid(batch_prefix",{"_index":1243,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strings.uniqueid(changeset_prefix",{"_index":1264,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["strip",{"_index":1019,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["stripmetadata",{"_index":20,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structural",{"_index":481,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{}}}],["structured",{"_index":464,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlSchema.html":{},"classes/CsdlStructuredType.html":{},"classes/Field.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["structured.fields.find((f",{"_index":1860,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["structuredtype",{"_index":1732,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["structuredtypeconfig",{"_index":139,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldconfig",{"_index":93,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/typealiases.html":{}}}],["structuredtypefieldoptions",{"_index":91,"title":{"interfaces/StructuredTypeFieldOptions.html":{}},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["structuredtypeschema",{"_index":1599,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["strucuturedtype",{"_index":1510,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["styleurls",{"_index":2990,"title":{},"body":{"index.html":{}}}],["sub",{"_index":396,"title":{},"body":{"classes/ArithmeticOperators.html":{}}}],["sub(left",{"_index":355,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["subject",{"_index":1121,"title":{},"body":{"classes/ODataBatchRequest.html":{},"license.html":{}}}],["sublicense",{"_index":3094,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":3003,"title":{},"body":{"index.html":{}}}],["subscribe((airports",{"_index":3004,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":3107,"title":{},"body":{"license.html":{}}}],["substring",{"_index":2832,"title":{},"body":{"classes/StringAndCollectionFunctions.html":{}}}],["substring(field",{"_index":249,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["sum",{"_index":2886,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["super",{"_index":1164,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["super(annotationlist",{"_index":449,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/CsdlSchema.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{}}}],["super(init",{"_index":2579,"title":{},"body":{"classes/ODataResponse.html":{}}}],["super(name",{"_index":482,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{}}}],["super(op",{"_index":375,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["super.flush",{"_index":2025,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["support",{"_index":3052,"title":{},"body":{"index.html":{}}}],["supported",{"_index":857,"title":{},"body":{"classes/Field.html":{}}}],["switch",{"_index":1225,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["switchmap",{"_index":3009,"title":{},"body":{"index.html":{}}}],["symbol.tostringtag",{"_index":228,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["sync",{"_index":3172,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["syntax",{"_index":390,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["t",{"_index":99,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["table",{"_index":2971,"title":{},"body":{"index.html":{}}}],["tag",{"_index":715,"title":{},"body":{"classes/Field.html":{},"miscellaneous/enumerations.html":{}}}],["tag_action",{"_index":751,"title":{},"body":{"classes/Field.html":{}}}],["tag_action_import",{"_index":757,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotation",{"_index":732,"title":{},"body":{"classes/Field.html":{}}}],["tag_annotations",{"_index":731,"title":{},"body":{"classes/Field.html":{}}}],["tag_complex_type",{"_index":737,"title":{},"body":{"classes/Field.html":{}}}],["tag_data_services",{"_index":722,"title":{},"body":{"classes/Field.html":{}}}],["tag_edmx",{"_index":720,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_container",{"_index":752,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_set",{"_index":753,"title":{},"body":{"classes/Field.html":{}}}],["tag_entity_type",{"_index":739,"title":{},"body":{"classes/Field.html":{}}}],["tag_enum_type",{"_index":734,"title":{},"body":{"classes/Field.html":{}}}],["tag_function",{"_index":748,"title":{},"body":{"classes/Field.html":{}}}],["tag_function_import",{"_index":755,"title":{},"body":{"classes/Field.html":{}}}],["tag_include",{"_index":726,"title":{},"body":{"classes/Field.html":{}}}],["tag_include_annotations",{"_index":728,"title":{},"body":{"classes/Field.html":{}}}],["tag_key",{"_index":741,"title":{},"body":{"classes/Field.html":{}}}],["tag_member",{"_index":736,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property",{"_index":744,"title":{},"body":{"classes/Field.html":{}}}],["tag_navigation_property_binding",{"_index":759,"title":{},"body":{"classes/Field.html":{}}}],["tag_on_delete",{"_index":747,"title":{},"body":{"classes/Field.html":{}}}],["tag_parameter",{"_index":750,"title":{},"body":{"classes/Field.html":{}}}],["tag_property",{"_index":740,"title":{},"body":{"classes/Field.html":{}}}],["tag_property_ref",{"_index":742,"title":{},"body":{"classes/Field.html":{}}}],["tag_reference",{"_index":724,"title":{},"body":{"classes/Field.html":{}}}],["tag_referential_constraint",{"_index":745,"title":{},"body":{"classes/Field.html":{}}}],["tag_return_type",{"_index":749,"title":{},"body":{"classes/Field.html":{}}}],["tag_schema",{"_index":733,"title":{},"body":{"classes/Field.html":{}}}],["tag_singleton",{"_index":754,"title":{},"body":{"classes/Field.html":{}}}],["tag_term",{"_index":730,"title":{},"body":{"classes/Field.html":{}}}],["tag_type_definition",{"_index":760,"title":{},"body":{"classes/Field.html":{}}}],["tags",{"_index":717,"title":{},"body":{"classes/Field.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{},"index.html":{}}}],["tags(req",{"_index":1338,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{}}}],["tags.length",{"_index":1380,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push",{"_index":1358,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.push(context.type",{"_index":1362,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tags.some((t",{"_index":1381,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap",{"_index":1344,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["tap((res",{"_index":1395,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["targe",{"_index":2946,"title":{},"body":{"miscellaneous/functions.html":{}}}],["target",{"_index":447,"title":{},"body":{"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{}}}],["targetnamespace",{"_index":551,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["templateurl",{"_index":2988,"title":{},"body":{"index.html":{}}}],["term",{"_index":129,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlTerm.html":{},"classes/Field.html":{},"classes/ODataAnnotation.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["termnamespace",{"_index":550,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["terms",{"_index":626,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["text",{"_index":1196,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{}}}],["text/plain",{"_index":2496,"title":{},"body":{"classes/ODataRequest.html":{}}}],["text/xml",{"_index":810,"title":{},"body":{"classes/Field.html":{}}}],["text_plain",{"_index":2450,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._annotations",{"_index":2622,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._body",{"_index":2462,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._context",{"_index":2618,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._functions",{"_index":978,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._headers",{"_index":2511,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._method",{"_index":2451,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._options",{"_index":2596,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setcache(cachecontrol",{"_index":2614,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setfeatures(features",{"_index":2604,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setlocation(location",{"_index":2611,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._options.setversion(version",{"_index":2608,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._params",{"_index":2523,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.has(`$${name",{"_index":2528,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._params.keys().length",{"_index":2537,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path",{"_index":2474,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path.endswith($batch",{"_index":2541,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._path}/${$query",{"_index":2530,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._payload",{"_index":2615,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this._properties",{"_index":973,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this._querybody",{"_index":2525,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._requests",{"_index":1244,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.length",{"_index":1242,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.map((r",{"_index":1208,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests.push(new",{"_index":1236,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._requests[this._requests.length",{"_index":1238,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this._responsetype",{"_index":2460,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this._segments",{"_index":2116,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.map((s",{"_index":2139,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.push(segment",{"_index":2156,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments.reduce",{"_index":2117,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this._segments].reverse().find(predicate",{"_index":2147,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.accept",{"_index":1065,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.alias",{"_index":1512,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.annotations",{"_index":950,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.annotations.find(predicate",{"_index":1595,"title":{},"body":{"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.api",{"_index":1228,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{}}}],["this.api.findentitysetbyname(this.name",{"_index":1679,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.api.findentitysetfortype(this.parser.return.type)?.name",{"_index":1456,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.api.findstructuredtypefortype(this.apinameorentitytype",{"_index":1615,"title":{},"body":{"classes/ODataEntityService.html":{}}}],["this.api.options",{"_index":1464,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.api.options.accept?.exponentialdecimals",{"_index":2491,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.ieee754compatible",{"_index":2486,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.metadata",{"_index":2483,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.accept?.streaming",{"_index":2489,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.bodyqueryoptions",{"_index":2470,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifmatch",{"_index":2477,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.etag.ifnonematch",{"_index":2480,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.fetchpolicy",{"_index":2468,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.headers",{"_index":2512,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.params",{"_index":2521,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.continueonerror",{"_index":2506,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.includeannotations",{"_index":2502,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.maxpagesize",{"_index":2500,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.prefer?.return",{"_index":2497,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.options.stripmetadata",{"_index":2633,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.api.options.withcredentials",{"_index":2466,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.request",{"_index":1224,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.request(request).subscribe((response",{"_index":1250,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.api.servicerooturl}${this._path",{"_index":2539,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.api.servicerooturl}${this.pathwithparams",{"_index":2540,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.apinameorentitytype",{"_index":1614,"title":{},"body":{"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataSingletonService.html":{}}}],["this.assertarray",{"_index":2254,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().filter((v",{"_index":2245,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray().push(value",{"_index":2244,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertarray()[index",{"_index":2250,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(false",{"_index":2260,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.assertobject(true",{"_index":2258,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.base",{"_index":1816,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.body",{"_index":2590,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.body)['d",{"_index":2617,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.bodyqueryoptions",{"_index":1063,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.length",{"_index":2526,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.map((name",{"_index":2533,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bodyqueryoptions.some((name",{"_index":2527,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.bound",{"_index":1447,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.buildentry(payload",{"_index":1365,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey([...(scope",{"_index":1366,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.buildkey(scope",{"_index":1376,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.cacheability",{"_index":2686,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.callables",{"_index":2727,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.find",{"_index":2741,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.callables.foreach((callable",{"_index":2749,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.checkversion(document",{"_index":811,"title":{},"body":{"classes/Field.html":{}}}],["this.children",{"_index":1836,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.client",{"_index":2762,"title":{},"body":{"injectables/ODataServiceFactory.html":{}}}],["this.client.apifor(this.apinameorentitytype",{"_index":1114,"title":{},"body":{"classes/ODataBaseService.html":{}}}],["this.client.entityset(this.name",{"_index":1673,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.client.singleton(this.name",{"_index":2776,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.clonesegments",{"_index":1216,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.collection",{"_index":1493,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.complete",{"_index":1190,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.composable",{"_index":1449,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.containers",{"_index":2730,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.containers.reduce",{"_index":2736,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.context",{"_index":951,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataResponse.html":{}}}],["this.context?.entityset",{"_index":944,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.context?.type",{"_index":946,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.create(attrs",{"_index":1698,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.default",{"_index":1739,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.deserialize(this.default",{"_index":1773,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.entities",{"_index":2724,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities().create(attrs",{"_index":1684,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().entity(key",{"_index":1674,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetch(options",{"_index":1682,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities().fetchall(options",{"_index":1680,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entities.find((e",{"_index":2740,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entities.foreach((config",{"_index":2747,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entity",{"_index":2778,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["this.entity(key",{"_index":1685,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entity(key).fetch(options",{"_index":1683,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.entitysetpath",{"_index":1445,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.entitysets",{"_index":1590,"title":{},"body":{"classes/ODataEntityContainer.html":{}}}],["this.entitysets.find((e",{"_index":2743,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.entitytype",{"_index":1621,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.entries",{"_index":1348,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.entries.delete(k",{"_index":1383,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.foreach((entry",{"_index":1377,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.get(key",{"_index":1369,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.entries.set(key",{"_index":1367,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.enum().validate(value",{"_index":1755,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.enums",{"_index":2721,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.find((e",{"_index":2738,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.enums.foreach((enu",{"_index":2745,"title":{},"body":{"classes/ODataSchema.html":{}}}],["this.error",{"_index":1194,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.error(res",{"_index":1200,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.expand(query.expand",{"_index":2320,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.factory.entityset",{"_index":2997,"title":{},"body":{"index.html":{}}}],["this.fetchone(key",{"_index":1693,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.fetchpolicy",{"_index":1061,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{}}}],["this.field",{"_index":368,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.fields",{"_index":1824,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.fields().find((f",{"_index":1935,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.fields().map(mapper",{"_index":1943,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.fields.filter",{"_index":1842,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.fields.filter((f",{"_index":1899,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.fields.find((f",{"_index":1829,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.fields.foreach((f",{"_index":1853,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.fields.map((f",{"_index":1968,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.field}/${render(this.value",{"_index":370,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.filter(query.filter",{"_index":2326,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.find((s",{"_index":2158,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.findannotation((a",{"_index":1756,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.findchildparser(predicate",{"_index":1840,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.flags",{"_index":1950,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.forget",{"_index":1368,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.functions[name",{"_index":981,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.get(req.pathwithparams",{"_index":2006,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.getfieldvaluebyattribute",{"_index":813,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects",{"_index":818,"title":{},"body":{"classes/Field.html":{}}}],["this.getobjects(dataservices",{"_index":832,"title":{},"body":{"classes/Field.html":{}}}],["this.getresponse(req",{"_index":1391,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.group.tojson",{"_index":366,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.handlefetch(req",{"_index":1386,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.handlemutate(req",{"_index":1388,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.headers",{"_index":1055,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponse.html":{}}}],["this.headers.get(cache_control",{"_index":2613,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(content_type",{"_index":2598,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(header",{"_index":2606,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(key",{"_index":2624,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.get(location_header",{"_index":2610,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.headers.getall(name",{"_index":2592,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.helper",{"_index":949,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.attributes(data",{"_index":943,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.count(this.annotations",{"_index":984,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.deltalink(this.annotations",{"_index":988,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.editlink(this.annotations",{"_index":965,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entities(data",{"_index":983,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.entity(data",{"_index":954,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.etag(this.annotations",{"_index":957,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.functions(this.annotations",{"_index":979,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.id(this.annotations",{"_index":956,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediacontenttype(this.annotations",{"_index":971,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaeditlink(this.annotations",{"_index":969,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediaetag(this.annotations",{"_index":959,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.mediareadlink(this.annotations",{"_index":967,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.metadataetag(this.annotations",{"_index":961,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.nextlink(this.annotations",{"_index":986,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.properties(this.annotations",{"_index":974,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.property(data",{"_index":952,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.readlink(this.annotations",{"_index":963,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.helper.type(this.annotations",{"_index":945,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.ieee754compatible",{"_index":2674,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.isenumtype",{"_index":1506,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.isexpired(entry",{"_index":1370,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.isstructuredtype",{"_index":1509,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.keys",{"_index":1821,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.keys.length",{"_index":1858,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.location",{"_index":2679,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxage",{"_index":2684,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.maxlength",{"_index":1741,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.members",{"_index":1932,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.metadata",{"_index":2671,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.modify(key",{"_index":1709,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.n",{"_index":2239,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.name",{"_index":229,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.namespace",{"_index":1511,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.namespace}.${this.name",{"_index":1518,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.namespace}.${this.name}'${name",{"_index":1962,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.namespace}.${this.name}'${names.join",{"_index":1959,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.name}(${params.join",{"_index":235,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.navigation",{"_index":1745,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.next(odataresponse.fromhttpresponse(this.request",{"_index":1189,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.nextlink",{"_index":990,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.normalize",{"_index":231,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.normalize)).join",{"_index":326,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.nullable",{"_index":1491,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.o[this.n",{"_index":2240,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o[this.n].filter((v",{"_index":2263,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o[this.n].length",{"_index":2248,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.o[this.n][0",{"_index":2249,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.observe",{"_index":2458,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.odata",{"_index":3038,"title":{},"body":{"index.html":{}}}],["this.odata.fromjson(json",{"_index":3025,"title":{},"body":{"index.html":{}}}],["this.op",{"_index":320,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.open",{"_index":1818,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.option(name).clear",{"_index":2387,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options",{"_index":2361,"title":{},"body":{"classes/ODataQueryOptions.html":{},"classes/ODataResponse.html":{}}}],["this.options.expression",{"_index":2282,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.helper.context",{"_index":2619,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options.option(queryoptionnames.compute",{"_index":2288,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.format",{"_index":2291,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.search",{"_index":2295,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.skip",{"_index":2305,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.skiptoken",{"_index":2307,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option(queryoptionnames.top",{"_index":2303,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.expand",{"_index":2277,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.filter",{"_index":2298,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.orderby",{"_index":2301,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.select",{"_index":2275,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.option>(queryoptionnames.transform",{"_index":2293,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.options.version",{"_index":2616,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.options[k",{"_index":2392,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[key",{"_index":2364,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[name",{"_index":2381,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.compute",{"_index":2372,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.expand",{"_index":2370,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.filter",{"_index":2374,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.orderby",{"_index":2375,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.search",{"_index":2373,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.select",{"_index":2369,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.skip",{"_index":2377,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.skiptoken",{"_index":2378,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.top",{"_index":2376,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.options[queryoptionnames.transform",{"_index":2371,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["this.optionshelper",{"_index":1497,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.op}(${left",{"_index":328,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.orderby(query.orderby",{"_index":2328,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.paging(query",{"_index":2329,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.parameters",{"_index":1515,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.find((p",{"_index":1530,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parameters.foreach((p",{"_index":1528,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.params",{"_index":1053,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.parent",{"_index":1831,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent.deserialize(value",{"_index":1841,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent.serialize(value",{"_index":1847,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent.typefor(name",{"_index":1832,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent?.defaults",{"_index":1871,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent?.resolvekey(value",{"_index":1856,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent?.tojsonschema(options",{"_index":1877,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parent?.validate(attrs",{"_index":1898,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parse(parser",{"_index":1768,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parser",{"_index":1451,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parser.binding",{"_index":1468,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.configure",{"_index":1463,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.parser.deserialize(value",{"_index":1465,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parser.encode(v",{"_index":1501,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.encode(value",{"_index":1467,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parser.fields",{"_index":1934,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["this.parser.istypeof(type",{"_index":1460,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["this.parser.return",{"_index":1455,"title":{},"body":{"classes/ODataCallable.html":{}}}],["this.parser.serialize(v",{"_index":1500,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.parser.serialize(value",{"_index":1466,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.parser.tojsonschema(options",{"_index":1777,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.pathandparams",{"_index":2135,"title":{},"body":{"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{}}}],["this.payload",{"_index":2621,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.precision",{"_index":1747,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.prefer",{"_index":1069,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.properties[name",{"_index":976,"title":{},"body":{"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{}}}],["this.property",{"_index":1730,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.put(req.pathwithparams",{"_index":2004,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.putresponse(req",{"_index":1397,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.queries",{"_index":2994,"title":{},"body":{"index.html":{}}}],["this.referencedproperty",{"_index":1731,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.references",{"_index":817,"title":{},"body":{"classes/Field.html":{}}}],["this.referentials",{"_index":1736,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.referentials.length",{"_index":1814,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.reportprogress",{"_index":2456,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.request.headers",{"_index":1174,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.method",{"_index":1169,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.pathwithparams",{"_index":1170,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.request.urlwithparams",{"_index":1188,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["this.resource",{"_index":2453,"title":{},"body":{"classes/ODataRequest.html":{},"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entities",{"_index":2635,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(entity",{"_index":2634,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(property",{"_index":2636,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.deserialize(value",{"_index":2639,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.resource.pathandparams",{"_index":2473,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.resource.serialize(this._body",{"_index":2464,"title":{},"body":{"classes/ODataRequest.html":{}}}],["this.restore",{"_index":2019,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.return",{"_index":1513,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataParameterParser.html":{}}}],["this.scale",{"_index":1749,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.schema",{"_index":1443,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["this.schema.alias",{"_index":1459,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["this.schema.api",{"_index":1461,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["this.schema.namespace}.${this.name",{"_index":1454,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEnumType.html":{}}}],["this.schemas",{"_index":831,"title":{},"body":{"classes/Field.html":{}}}],["this.scope(r",{"_index":1403,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.scope(req",{"_index":2002,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.search(query.search",{"_index":2324,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.segment.key",{"_index":2178,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.name",{"_index":2172,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.parameters",{"_index":2183,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.path",{"_index":2176,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segment.type",{"_index":2174,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments",{"_index":2125,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["this.segments.get(pathsegmentnames.action",{"_index":2189,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.entityset",{"_index":2187,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.function",{"_index":2190,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.navigationproperty",{"_index":2193,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.property",{"_index":2192,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.get(pathsegmentnames.singleton",{"_index":2188,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.segments.keys(values",{"_index":2191,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["this.select(query.select",{"_index":2318,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.serialize(value",{"_index":1963,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["this.service",{"_index":1623,"title":{},"body":{"classes/ODataEntitySet.html":{}}}],["this.skip().clear",{"_index":2313,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skip(skip",{"_index":2310,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skiptoken().clear",{"_index":2315,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.skiptoken(skiptoken",{"_index":2309,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.status",{"_index":2593,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.statustext",{"_index":2594,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.storage",{"_index":2018,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.storage.setitem",{"_index":2022,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.store",{"_index":2021,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.streaming",{"_index":2673,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["this.stringasenum",{"_index":1051,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["this.stripmetadata",{"_index":1059,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["this.structured().validate(value",{"_index":1754,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.structuredtype",{"_index":1733,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.structuredtype.keys?.find((k",{"_index":1811,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.structuredtypeschema",{"_index":1700,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.tags(req",{"_index":2003,"title":{},"body":{"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["this.term",{"_index":922,"title":{},"body":{"classes/ODataAnnotation.html":{}}}],["this.timeout",{"_index":1347,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["this.tojson(parser",{"_index":1772,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.top().clear",{"_index":2314,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.top(top",{"_index":2311,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.transform(query.transform",{"_index":2322,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["this.type",{"_index":1489,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.type.startswith('edm",{"_index":1504,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.update(key",{"_index":1710,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["this.url",{"_index":2595,"title":{},"body":{"classes/ODataResponse.html":{}}}],["this.validate(v",{"_index":1753,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["this.value",{"_index":369,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.values",{"_index":230,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["this.version",{"_index":812,"title":{},"body":{"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponseOptions.html":{}}}],["this.withcredentials",{"_index":1057,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{}}}],["throw",{"_index":846,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["throwerror",{"_index":1342,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataEntitySetService.html":{}}}],["throwerror(\"can't",{"_index":1707,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["throwerror('no",{"_index":1393,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{}}}],["throwerror('resource",{"_index":1687,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["throwerror(error",{"_index":1699,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["time",{"_index":686,"title":{},"body":{"classes/DateAndTimeFunctions.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["time(value",{"_index":292,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["timeout",{"_index":1294,"title":{},"body":{"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["title",{"_index":1778,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"index.html":{}}}],["todo",{"_index":1165,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["tojson",{"_index":200,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataResponse.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tojsonschema",{"_index":1966,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["tojsonschema(options",{"_index":1776,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["tokens",{"_index":2042,"title":{},"body":{"modules/ODataModule.html":{}}}],["tolower",{"_index":2841,"title":{},"body":{"classes/StringFunctions.html":{}}}],["tolower(value",{"_index":265,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["tools",{"_index":2384,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["top",{"_index":68,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataAnnotations.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["top(opts",{"_index":2302,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["toqueryarguments",{"_index":2333,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["tort",{"_index":3130,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":199,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptions.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["totaloffsetminutes",{"_index":687,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totaloffsetminutes(value",{"_index":294,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["totalseconds",{"_index":688,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["totalseconds(value",{"_index":296,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["toupper",{"_index":2842,"title":{},"body":{"classes/StringFunctions.html":{}}}],["toupper(value",{"_index":267,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["transform",{"_index":66,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["transform(opts",{"_index":2292,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["transforms",{"_index":2932,"title":{},"body":{"miscellaneous/functions.html":{}}}],["trim",{"_index":2676,"title":{},"body":{"classes/ODataResponseOptions.html":{},"classes/StringFunctions.html":{}}}],["trim(value",{"_index":269,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["trippin",{"_index":2993,"title":{},"body":{"index.html":{}}}],["trippinconfig",{"_index":3044,"title":{},"body":{"index.html":{}}}],["trippinmodule",{"_index":3045,"title":{},"body":{"index.html":{}}}],["trips",{"_index":3034,"title":{},"body":{"index.html":{}}}],["true",{"_index":227,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{},"index.html":{}}}],["try",{"_index":806,"title":{},"body":{"classes/Field.html":{}}}],["tslib",{"_index":2863,"title":{},"body":{"dependencies.html":{}}}],["tutorial/#batch",{"_index":1203,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["tutorial/#singleton",{"_index":2765,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["type",{"_index":23,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlKey.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlNavigationPropertyBinding.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["type(undefined",{"_index":1438,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEnumType.html":{}}}],["type(value",{"_index":2173,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["type.startswith(this.alias",{"_index":2735,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.startswith(this.namespace",{"_index":2734,"title":{},"body":{"classes/ODataSchema.html":{}}}],["type.ts",{"_index":465,"title":{},"body":{"classes/CsdlComplexType.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlKey.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["type.ts:1",{"_index":523,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:10",{"_index":518,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:105",{"_index":1978,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:11",{"_index":519,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:117",{"_index":1980,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:119",{"_index":1926,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:12",{"_index":655,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:126",{"_index":1982,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:129",{"_index":1910,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:13",{"_index":653,"title":{},"body":{"classes/CsdlStructuredType.html":{}}}],["type.ts:139",{"_index":1930,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:14",{"_index":1946,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:149",{"_index":1912,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:15",{"_index":1947,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:16",{"_index":1945,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:17",{"_index":473,"title":{},"body":{"classes/CsdlComplexType.html":{}}}],["type.ts:3",{"_index":526,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:30",{"_index":514,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:31",{"_index":1948,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{}}}],["type.ts:32",{"_index":1931,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:33",{"_index":516,"title":{},"body":{"classes/CsdlEntityType.html":{}}}],["type.ts:347",{"_index":2787,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:348",{"_index":2788,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:349",{"_index":2789,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:35",{"_index":1714,"title":{},"body":{"classes/ODataEntityTypeKey.html":{}}}],["type.ts:350",{"_index":2784,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:351",{"_index":2782,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:352",{"_index":2783,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:353",{"_index":2790,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:354",{"_index":2786,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:355",{"_index":2785,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:356",{"_index":2781,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:36",{"_index":1713,"title":{},"body":{"classes/ODataEntityTypeKey.html":{}}}],["type.ts:37",{"_index":1974,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:377",{"_index":2799,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:38",{"_index":1975,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:383",{"_index":2803,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:39",{"_index":515,"title":{},"body":{"classes/CsdlEntityType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:390",{"_index":2798,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:4",{"_index":525,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:40",{"_index":1973,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:402",{"_index":2792,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:409",{"_index":2795,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:41",{"_index":1924,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:42",{"_index":1972,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:43",{"_index":1971,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:433",{"_index":2801,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:44",{"_index":2393,"title":{},"body":{"classes/ODataReferential.html":{}}}],["type.ts:45",{"_index":558,"title":{},"body":{"classes/CsdlKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataReferential.html":{}}}],["type.ts:459",{"_index":2796,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:46",{"_index":559,"title":{},"body":{"classes/CsdlKey.html":{}}}],["type.ts:467",{"_index":2793,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:483",{"_index":2800,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:49",{"_index":600,"title":{},"body":{"classes/CsdlPropertyRef.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:5",{"_index":527,"title":{},"body":{"classes/CsdlEnumType.html":{}}}],["type.ts:50",{"_index":601,"title":{},"body":{"classes/CsdlPropertyRef.html":{}}}],["type.ts:509",{"_index":2794,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:526",{"_index":2802,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:56",{"_index":1976,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:574",{"_index":2805,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["type.ts:58",{"_index":1919,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:6",{"_index":524,"title":{},"body":{"classes/CsdlEnumType.html":{},"classes/CsdlStructuredType.html":{}}}],["type.ts:60",{"_index":1979,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:66",{"_index":1913,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:67",{"_index":1977,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["type.ts:75",{"_index":1921,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["type.ts:8",{"_index":654,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:84",{"_index":1923,"title":{},"body":{"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{}}}],["type.ts:9",{"_index":656,"title":{},"body":{"classes/CsdlStructuredType.html":{},"classes/ODataEnumType.html":{}}}],["type.ts:94",{"_index":1917,"title":{},"body":{"classes/ODataEnumType.html":{}}}],["typealiases",{"_index":3140,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typedefinition",{"_index":761,"title":{},"body":{"classes/Field.html":{}}}],["typedefinitions",{"_index":627,"title":{},"body":{"classes/CsdlSchema.html":{}}}],["typefor",{"_index":2780,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["typefor(name",{"_index":1828,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["typefunctions",{"_index":303,"title":{"classes/TypeFunctions.html":{}},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["typeof",{"_index":218,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["types",{"_index":710,"title":{},"body":{"classes/Field.html":{},"classes/ODataAnnotation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"modules/ODataModule.html":{},"classes/ODataParameterParser.html":{},"classes/ODataParserOptions.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/SegmentHandler.html":{}}}],["types(undefined",{"_index":2096,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["types.isarray(this.o[this.n",{"_index":2243,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(errors",{"_index":1762,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["types.isempty(key",{"_index":1868,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["types.isempty(this.o[this.n",{"_index":2241,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(this.options[key",{"_index":2363,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["types.isempty(this.segment.key",{"_index":2180,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(this.segment.parameters",{"_index":2185,"title":{},"body":{"classes/ODataPathSegmentsHandler.html":{},"classes/SegmentHandler.html":{}}}],["types.isempty(v",{"_index":2264,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isempty(value",{"_index":1876,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["types.isfunction(opts",{"_index":2281,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isplainobject(data",{"_index":2631,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(payload",{"_index":2637,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(this.o[this.n",{"_index":2252,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["types.isplainobject(this.payload",{"_index":2620,"title":{},"body":{"classes/ODataResponse.html":{}}}],["types.isplainobject(v",{"_index":1861,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["types.isplainobject(value",{"_index":1763,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["types.rawtype(value",{"_index":2365,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["unchanged",{"_index":2883,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["undefined",{"_index":113,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitiesAnnotations.html":{},"classes/ODataEntityAnnotations.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataPropertyAnnotations.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataSchema.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{}}}],["underlayingtype",{"_index":669,"title":{},"body":{"classes/CsdlTypeDefinition.html":{}}}],["underlyingtype",{"_index":521,"title":{},"body":{"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/Field.html":{}}}],["unicode",{"_index":576,"title":{},"body":{"classes/CsdlNavigationProperty.html":{},"classes/CsdlOnDelete.html":{},"classes/CsdlProperty.html":{},"classes/CsdlReferentialConstraint.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Field.html":{}}}],["united",{"_index":3016,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":1199,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["unnamed",{"_index":2914,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unpacked",{"_index":3166,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unset",{"_index":2204,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unset(path",{"_index":2229,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["unsuccessful",{"_index":1191,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["update",{"_index":1636,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"miscellaneous/typealiases.html":{}}}],["update(attrs",{"_index":2772,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["update(key",{"_index":1666,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["update/patch",{"_index":1708,"title":{},"body":{"classes/ODataEntitySetService.html":{}}}],["updating",{"_index":2961,"title":{},"body":{"index.html":{}}}],["uri",{"_index":547,"title":{},"body":{"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlReference.html":{},"classes/Field.html":{}}}],["url",{"_index":102,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseJson.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["urlwithparams",{"_index":2407,"title":{},"body":{"classes/ODataRequest.html":{}}}],["usage",{"_index":2974,"title":{},"body":{"index.html":{}}}],["use",{"_index":1457,"title":{},"body":{"classes/ODataCallable.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"index.html":{},"license.html":{}}}],["usefactory",{"_index":2051,"title":{},"body":{"modules/ODataModule.html":{}}}],["usevalue",{"_index":2050,"title":{},"body":{"modules/ODataModule.html":{}}}],["using",{"_index":3060,"title":{},"body":{"index.html":{}}}],["utils",{"_index":1715,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/SegmentHandler.html":{}}}],["utils/http",{"_index":1155,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataResponse.html":{}}}],["utils/odata",{"_index":2718,"title":{},"body":{"classes/ODataSchema.html":{}}}],["utils/strings",{"_index":1163,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["utils/types",{"_index":711,"title":{},"body":{"classes/Field.html":{},"classes/ODataResponse.html":{}}}],["v",{"_index":1769,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataReferential.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["v4",{"_index":3059,"title":{},"body":{"index.html":{}}}],["v4.0",{"_index":1039,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["v4.01",{"_index":2270,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["v4.01.html#sec_requestingthejsonformat",{"_index":1036,"title":{},"body":{"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{}}}],["v[field.name",{"_index":1862,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["val",{"_index":2942,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validate",{"_index":1751,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["validate(attrs",{"_index":2804,"title":{},"body":{"classes/ODataStructuredTypeParser.html":{}}}],["validate(member",{"_index":1981,"title":{},"body":{"classes/ODataEnumTypeParser.html":{}}}],["value",{"_index":57,"title":{},"body":{"interfaces/ApiOptions.html":{},"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"interfaces/Cache.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Field.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBaseService.html":{},"classes/ODataCache.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataReferential.html":{},"classes/ODataRequest.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["value(v",{"_index":2231,"title":{},"body":{"classes/ODataQueryOptionHandler.html":{}}}],["value).reduce",{"_index":1955,"title":{},"body":{"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{}}}],["value.length",{"_index":1760,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["value.map((v",{"_index":1499,"title":{},"body":{"classes/ODataCallableParser.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["value.render(aliases",{"_index":2366,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value.tojson",{"_index":2368,"title":{},"body":{"classes/ODataQueryOptions.html":{}}}],["value/s",{"_index":96,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["value[f.name",{"_index":1844,"title":{},"body":{"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{}}}],["values",{"_index":226,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values.map((v",{"_index":233,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values.push(length",{"_index":252,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["values[index",{"_index":2130,"title":{},"body":{"classes/ODataPathSegments.html":{}}}],["van",{"_index":3074,"title":{},"body":{"license.html":{}}}],["var",{"_index":1182,"title":{},"body":{"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"index.html":{}}}],["variables",{"_index":1205,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["version",{"_index":72,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/Field.html":{},"classes/ODataApiOptions.html":{},"classes/ODataParserOptions.html":{},"classes/ODataResponse.html":{},"classes/ODataResponseOptions.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{},"index.html":{}}}],["version.replace(/\\;/g",{"_index":2675,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_2_0",{"_index":2664,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_3_0",{"_index":2665,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["version_4_0",{"_index":712,"title":{},"body":{"classes/Field.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataResponseOptions.html":{}}}],["version_4_0].indexof(value",{"_index":2677,"title":{},"body":{"classes/ODataResponseOptions.html":{}}}],["versions",{"_index":3053,"title":{},"body":{"index.html":{}}}],["viewed",{"_index":3062,"title":{},"body":{"index.html":{}}}],["void",{"_index":111,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataCache.html":{},"interfaces/ODataCacheEntry.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityContainer.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySet.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeFieldParser.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataInMemoryCache.html":{},"classes/ODataInStorageCache.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataResponseOptions.html":{},"classes/ODataSchema.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"classes/SegmentHandler.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["warranties",{"_index":3115,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":3110,"title":{},"body":{"license.html":{}}}],["whether",{"_index":3128,"title":{},"body":{"license.html":{}}}],["wiki",{"_index":3066,"title":{},"body":{"index.html":{}}}],["window.addeventlistener('beforeunload",{"_index":2020,"title":{},"body":{"classes/ODataInStorageCache.html":{},"interfaces/ResponseJson.html":{}}}],["withcount",{"_index":1681,"title":{},"body":{"classes/ODataEntitySetService.html":{},"index.html":{}}}],["withcredentials",{"_index":21,"title":{},"body":{"interfaces/ApiOptions.html":{},"interfaces/Cache.html":{},"classes/ODataApiOptions.html":{},"classes/ODataBatchRequest.html":{},"classes/ODataParserOptions.html":{},"classes/ODataRequest.html":{},"interfaces/Options.html":{},"interfaces/OptionsHelper.html":{},"interfaces/Parser.html":{},"interfaces/ResponseOptions.html":{},"interfaces/StructuredTypeFieldOptions.html":{}}}],["without",{"_index":1688,"title":{},"body":{"classes/ODataEntitySetService.html":{},"classes/ODataEntityTypeKey.html":{},"classes/ODataReferential.html":{},"classes/ODataStructuredTypeParser.html":{},"license.html":{}}}],["works",{"_index":3047,"title":{},"body":{"index.html":{}}}],["www.odata.org/getting",{"_index":2764,"title":{},"body":{"classes/ODataSingletonService.html":{}}}],["x",{"_index":202,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["xssi_prefix",{"_index":1150,"title":{},"body":{"classes/ODataBatchRequest.html":{}}}],["year",{"_index":689,"title":{},"body":{"classes/DateAndTimeFunctions.html":{}}}],["year(value",{"_index":298,"title":{},"body":{"classes/ArithmeticFunctions.html":{},"classes/ArithmeticOperators.html":{},"classes/CollectionFunctions.html":{},"classes/ConditionalFunctions.html":{},"classes/DateAndTimeFunctions.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/GroupingAndNavigationOperators.html":{},"classes/Lambda.html":{},"classes/LambdaOperators.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/Operator.html":{},"interfaces/Renderable.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/StringFunctions.html":{},"classes/TypeFunctions.html":{}}}],["yes",{"_index":398,"title":{},"body":{"classes/ArithmeticOperators.html":{},"classes/CsdlAction.html":{},"classes/CsdlActionImport.html":{},"classes/CsdlAnnotable.html":{},"classes/CsdlAnnotation.html":{},"classes/CsdlAnnotations.html":{},"classes/CsdlComplexType.html":{},"classes/CsdlEntityContainer.html":{},"classes/CsdlEntitySet.html":{},"classes/CsdlEntityType.html":{},"classes/CsdlEnumMember.html":{},"classes/CsdlEnumType.html":{},"classes/CsdlFunction.html":{},"classes/CsdlFunctionImport.html":{},"classes/CsdlInclude.html":{},"classes/CsdlIncludeAnnotations.html":{},"classes/CsdlNavigationProperty.html":{},"classes/CsdlParameter.html":{},"classes/CsdlProperty.html":{},"classes/CsdlPropertyRef.html":{},"classes/CsdlReference.html":{},"classes/CsdlReturnType.html":{},"classes/CsdlSchema.html":{},"classes/CsdlSingleton.html":{},"classes/CsdlStructuralProperty.html":{},"classes/CsdlStructuredType.html":{},"classes/CsdlTerm.html":{},"classes/CsdlTypeDefinition.html":{},"classes/Function.html":{},"classes/GeoFunctions.html":{},"classes/Grouping.html":{},"classes/Lambda.html":{},"classes/LogicalOperators.html":{},"classes/Navigation.html":{},"classes/ODataAnnotations.html":{},"classes/ODataBaseService.html":{},"classes/ODataCallable.html":{},"classes/ODataCallableParser.html":{},"classes/ODataEntityService.html":{},"classes/ODataEntitySetService.html":{},"classes/ODataEnumType.html":{},"classes/ODataEnumTypeParser.html":{},"classes/ODataParameterParser.html":{},"classes/ODataPathSegments.html":{},"classes/ODataPathSegmentsHandler.html":{},"classes/ODataQueryOptionHandler.html":{},"classes/ODataQueryOptions.html":{},"classes/ODataSchema.html":{},"injectables/ODataServiceFactory.html":{},"classes/ODataSingletonService.html":{},"classes/ODataStructuredTypeParser.html":{},"classes/Operator.html":{},"interfaces/Parser.html":{},"interfaces/Renderable.html":{},"classes/SegmentHandler.html":{},"classes/StringAndCollectionFunctions.html":{},"classes/TypeFunctions.html":{},"miscellaneous/functions.html":{}}}],["zone.js",{"_index":2865,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ApiOptions.html":{"url":"interfaces/ApiOptions.html","title":"interface - ApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Options\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accept\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            bodyQueryOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            etag\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fetchPolicy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            params\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prefer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stripMetadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            withCredentials\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accept\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accept:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        bodyQueryOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bodyQueryOptions:         QueryOptionNames[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QueryOptionNames[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        etag\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        etag:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fetchPolicy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fetchPolicy:         FetchPolicy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FetchPolicy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        params\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        params:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefer:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stripMetadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stripMetadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withCredentials\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withCredentials:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticFunctions.html":{"url":"classes/ArithmeticFunctions.html","title":"class - ArithmeticFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ceiling\n                            \n                            \n                                floor\n                            \n                            \n                                round\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ceiling\n                        \n                    \n                \n            \n            \n                \nceiling(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        floor\n                        \n                    \n                \n            \n            \n                \nfloor(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        round\n                        \n                    \n                \n            \n            \n                \nround(value: T | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArithmeticOperators.html":{"url":"classes/ArithmeticOperators.html","title":"class - ArithmeticOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArithmeticOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                div\n                            \n                            \n                                mod\n                            \n                            \n                                mul\n                            \n                            \n                                neg\n                            \n                            \n                                sub\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:280\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        div\n                        \n                    \n                \n            \n            \n                \ndiv(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:289\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mod\n                        \n                    \n                \n            \n            \n                \nmod(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:292\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mul\n                        \n                    \n                \n            \n            \n                \nmul(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:286\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neg\n                        \n                    \n                \n            \n            \n                \nneg(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:295\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sub\n                        \n                    \n                \n            \n            \n                \nsub(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:283\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Cache.html":{"url":"interfaces/Cache.html","title":"interface - Cache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Cache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        get\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(key: string, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:115\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, payload: T, ...opts: any[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:114\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CollectionFunctions.html":{"url":"classes/CollectionFunctions.html","title":"class - CollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hasSubsequence\n                            \n                            \n                                hasSubset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubsequence\n                        \n                    \n                \n            \n            \n                \nhasSubsequence(s1: T, s2: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s1\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    s2\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasSubset\n                        \n                    \n                \n            \n            \n                \nhasSubset(s1: T, s2: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    s1\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    s2\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConditionalFunctions.html":{"url":"classes/ConditionalFunctions.html","title":"class - ConditionalFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConditionalFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                case\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        case\n                        \n                    \n                \n            \n            \n                \ncase(condition: T | string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:205\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    condition\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAction.html":{"url":"classes/CsdlAction.html","title":"class - CsdlAction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                    Optional\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType?: CsdlReturnType, isBound?: boolean, entitySetPath?: string, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlActionImport.html":{"url":"classes/CsdlActionImport.html","title":"class - CsdlActionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlActionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, action: string, entitySet?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotable.html":{"url":"classes/CsdlAnnotable.html","title":"class - CsdlAnnotable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotation.html":{"url":"classes/CsdlAnnotation.html","title":"class - CsdlAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(term: string, qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        term\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlAnnotations.html":{"url":"classes/CsdlAnnotations.html","title":"class - CsdlAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                target\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(target: string, annotationList: CsdlAnnotation[], qualifier?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlComplexType.html":{"url":"classes/CsdlComplexType.html","title":"class - CsdlComplexType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlComplexType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                    CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityContainer.html":{"url":"classes/CsdlEntityContainer.html","title":"class - CsdlEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actionImports\n                            \n                            \n                                    Public\n                                    Optional\n                                entitySets\n                            \n                            \n                                    Public\n                                    Optional\n                                extend\n                            \n                            \n                                    Public\n                                    Optional\n                                functionImports\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                singletons\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, extend?: string, entitySets?: CsdlEntitySet[], singletons?: CsdlSingleton[], functionImports?: CsdlFunctionImport[], actionImports?: CsdlActionImport[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        extend\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySets\n                                                  \n                                                        \n                                                                        CsdlEntitySet[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        singletons\n                                                  \n                                                        \n                                                                        CsdlSingleton[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionImports\n                                                  \n                                                        \n                                                                    CsdlFunctionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actionImports\n                                                  \n                                                        \n                                                                    CsdlActionImport[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlActionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        extend\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functionImports\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunctionImport[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        singletons\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlSingleton[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-container.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlEntitySet } from './csdl-entity-set';\nimport { CsdlSingleton } from './csdl-singleton';\nimport { CsdlFunctionImport, CsdlActionImport } from './csdl-function-action';\n\nexport class CsdlEntityContainer {\n  constructor(\n    public name: string,\n    public extend?: string,\n    public entitySets?: CsdlEntitySet[],\n    public singletons?: CsdlSingleton[],\n    public functionImports?: CsdlFunctionImport[],\n    public actionImports?: CsdlActionImport[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntitySet.html":{"url":"classes/CsdlEntitySet.html","title":"class - CsdlEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                entityType\n                            \n                            \n                                    Public\n                                    Optional\n                                includeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBinding\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, entityType: string, navigationPropertyBinding?: CsdlNavigationPropertyBinding[], includeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBinding\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-entity-set.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlEntitySet {\n  constructor(\n    public name: string,\n    public entityType: string,\n    public navigationPropertyBinding?: CsdlNavigationPropertyBinding[],\n    public includeInServiceDocument?: boolean\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEntityType.html":{"url":"classes/CsdlEntityType.html","title":"class - CsdlEntityType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEntityType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuredType\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                hasStream\n                            \n                            \n                                    Public\n                                    Optional\n                                key\n                            \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, key?: CsdlKey, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean, hasStream?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        CsdlKey\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                    CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        hasStream\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        hasStream\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlKey\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:11\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:8\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuredType\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuredType:9\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumMember.html":{"url":"classes/CsdlEnumMember.html","title":"class - CsdlEnumMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value?: number)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(public name: string, public value?: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlEnumType.html":{"url":"classes/CsdlEnumType.html","title":"class - CsdlEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                isFlags\n                            \n                            \n                                    Public\n                                members\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                underlyingType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, members: CsdlEnumMember[], underlyingType?: string, isFlags?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        members\n                                                  \n                                                        \n                                                                        CsdlEnumMember[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlyingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isFlags\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isFlags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumMember[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        underlyingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-enum-type.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlEnumType {\n  constructor(\n    public name: string,\n    public members: CsdlEnumMember[],\n    public underlyingType?: string,\n    public isFlags?: boolean\n  ) {}\n}\n\nexport class CsdlEnumMember {\n  constructor(public name: string, public value?: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunction.html":{"url":"classes/CsdlFunction.html","title":"class - CsdlFunction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySetPath\n                            \n                            \n                                    Public\n                                    Optional\n                                isBound\n                            \n                            \n                                    Public\n                                    Optional\n                                isComposable\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                parameters\n                            \n                            \n                                    Public\n                                returnType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, returnType: CsdlReturnType, isBound?: boolean, entitySetPath?: string, isComposable?: boolean, parameters?: CsdlParameter[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        returnType\n                                                  \n                                                        \n                                                                        CsdlReturnType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isBound\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySetPath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        isComposable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameters\n                                                  \n                                                        \n                                                                        CsdlParameter[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isBound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        isComposable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlParameter[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        returnType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReturnType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlFunctionImport.html":{"url":"classes/CsdlFunctionImport.html","title":"class - CsdlFunctionImport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlFunctionImport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                entitySet\n                            \n                            \n                                    Public\n                                functionName\n                            \n                            \n                                    Public\n                                    Optional\n                                IncludeInServiceDocument\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, functionName: string, entitySet?: string, IncludeInServiceDocument?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        functionName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entitySet\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        IncludeInServiceDocument\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entitySet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        functionName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        IncludeInServiceDocument\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlInclude.html":{"url":"classes/CsdlInclude.html","title":"class - CsdlInclude","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlInclude\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                namespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlIncludeAnnotations.html":{"url":"classes/CsdlIncludeAnnotations.html","title":"class - CsdlIncludeAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlIncludeAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                qualifier\n                            \n                            \n                                    Public\n                                    Optional\n                                targetNamespace\n                            \n                            \n                                    Public\n                                termNamespace\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(termNamespace: string, qualifier?: string, targetNamespace?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        termNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        qualifier\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        targetNamespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        qualifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        targetNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        termNamespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlKey.html":{"url":"classes/CsdlKey.html","title":"class - CsdlKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                propertyRefs\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(propertyRefs: CsdlPropertyRef[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        propertyRefs\n                                                  \n                                                        \n                                                                    CsdlPropertyRef[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        propertyRefs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlPropertyRef[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationProperty.html":{"url":"classes/CsdlNavigationProperty.html","title":"class - CsdlNavigationProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                containsTarget\n                            \n                            \n                                    Public\n                                    Optional\n                                onDelete\n                            \n                            \n                                    Public\n                                    Optional\n                                partner\n                            \n                            \n                                    Public\n                                    Optional\n                                referentialConstraints\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, partner?: string, containsTarget?: boolean, referentialConstraints?: CsdlReferentialConstraint[], onDelete?: CsdlOnDelete)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        partner\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        containsTarget\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        referentialConstraints\n                                                  \n                                                        \n                                                                        CsdlReferentialConstraint[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        onDelete\n                                                  \n                                                        \n                                                                        CsdlOnDelete\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        containsTarget\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onDelete\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlOnDelete\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        partner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        referentialConstraints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlReferentialConstraint[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlNavigationPropertyBinding.html":{"url":"classes/CsdlNavigationPropertyBinding.html","title":"class - CsdlNavigationPropertyBinding","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlNavigationPropertyBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                path\n                            \n                            \n                                    Public\n                                target\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(path: string, target: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        target\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-navigation-property-binding.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlNavigationPropertyBinding {\n  constructor(public path: string, public target: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlOnDelete.html":{"url":"classes/CsdlOnDelete.html","title":"class - CsdlOnDelete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlOnDelete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(action: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlParameter.html":{"url":"classes/CsdlParameter.html","title":"class - CsdlParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlProperty.html":{"url":"classes/CsdlProperty.html","title":"class - CsdlProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlStructuralProperty\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, defaultValue?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:3\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlStructuralProperty\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlStructuralProperty:4\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlPropertyRef.html":{"url":"classes/CsdlPropertyRef.html","title":"class - CsdlPropertyRef","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlPropertyRef\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReference.html":{"url":"classes/CsdlReference.html","title":"class - CsdlReference","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReference\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                includeAnnotations\n                            \n                            \n                                    Public\n                                    Optional\n                                includes\n                            \n                            \n                                    Public\n                                uri\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uri: string, includes?: CsdlInclude[], includeAnnotations?: CsdlIncludeAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uri\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        includes\n                                                  \n                                                        \n                                                                        CsdlInclude[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        includeAnnotations\n                                                  \n                                                        \n                                                                    CsdlIncludeAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includeAnnotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlIncludeAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        includes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlInclude[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-reference.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlReference extends CsdlAnnotable {\n  constructor(\n    public uri: string,\n    public includes?: CsdlInclude[],\n    public includeAnnotations?: CsdlIncludeAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlInclude {\n  constructor(public namespace: string, public alias?: string) {}\n}\n\nexport class CsdlIncludeAnnotations {\n  constructor(\n    public termNamespace: string,\n    public qualifier?: string,\n    public targetNamespace?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReferentialConstraint.html":{"url":"classes/CsdlReferentialConstraint.html","title":"class - CsdlReferentialConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReferentialConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                property\n                            \n                            \n                                    Public\n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(property: string, referencedProperty: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        property\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        referencedProperty\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlReturnType.html":{"url":"classes/CsdlReturnType.html","title":"class - CsdlReturnType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlReturnType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:51\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-function-action.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlFunction {\n  constructor(\n    public name: string,\n    public returnType: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public isComposable?: boolean,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlAction {\n  constructor(\n    public name: string,\n    public returnType?: CsdlReturnType,\n    public isBound?: boolean,\n    public entitySetPath?: string,\n    public parameters?: CsdlParameter[]\n  ) {}\n}\n\nexport class CsdlFunctionImport {\n  constructor(\n    public name: string,\n    public functionName: string,\n    public entitySet?: string,\n    public IncludeInServiceDocument?: boolean\n  ) {}\n}\n\nexport class CsdlActionImport {\n  constructor(\n    public name: string,\n    public action: string,\n    public entitySet?: string\n  ) {}\n}\n\nexport class CsdlParameter {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\nexport class CsdlReturnType {\n  constructor(\n    public type: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSchema.html":{"url":"classes/CsdlSchema.html","title":"class - CsdlSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                actions\n                            \n                            \n                                    Public\n                                    Optional\n                                alias\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationsList\n                            \n                            \n                                    Public\n                                    Optional\n                                complexTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                entityContainer\n                            \n                            \n                                    Public\n                                    Optional\n                                entityTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                enumTypes\n                            \n                            \n                                    Public\n                                    Optional\n                                functions\n                            \n                            \n                                    Public\n                                namespace\n                            \n                            \n                                    Public\n                                    Optional\n                                terms\n                            \n                            \n                                    Public\n                                    Optional\n                                typeDefinitions\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(namespace: string, alias?: string, enumTypes?: CsdlEnumType[], complexTypes?: CsdlComplexType[], entityTypes?: CsdlEntityType[], functions?: CsdlFunction[], actions?: CsdlAction[], entityContainer?: CsdlEntityContainer, typeDefinitions?: CsdlTypeDefinition[], terms?: CsdlTerm[], annotationsList?: CsdlAnnotations[], annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        enumTypes\n                                                  \n                                                        \n                                                                        CsdlEnumType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        complexTypes\n                                                  \n                                                        \n                                                                        CsdlComplexType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityTypes\n                                                  \n                                                        \n                                                                        CsdlEntityType[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        functions\n                                                  \n                                                        \n                                                                    CsdlFunction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        actions\n                                                  \n                                                        \n                                                                        CsdlAction[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        entityContainer\n                                                  \n                                                        \n                                                                        CsdlEntityContainer\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        typeDefinitions\n                                                  \n                                                        \n                                                                        CsdlTypeDefinition[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        terms\n                                                  \n                                                        \n                                                                        CsdlTerm[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationsList\n                                                  \n                                                        \n                                                                    CsdlAnnotations[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        actions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationsList\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlAnnotations[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        complexTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlComplexType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityContainer\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        entityTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEntityType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        enumTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlFunction[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        terms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTerm[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        typeDefinitions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlTypeDefinition[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-schema.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAnnotation,\n  CsdlAnnotable,\n  CsdlTerm,\n  CsdlAnnotations,\n} from './csdl-annotation';\nimport { CsdlTypeDefinition } from './csdl-type-definition';\nimport { CsdlEnumType } from './csdl-enum-type';\nimport { CsdlEntityType, CsdlComplexType } from './csdl-structured-type';\nimport { CsdlFunction, CsdlAction } from './csdl-function-action';\nimport { CsdlEntityContainer } from './csdl-entity-container';\n\nexport class CsdlSchema extends CsdlAnnotable {\n  constructor(\n    public namespace: string,\n    public alias?: string,\n    public enumTypes?: CsdlEnumType[],\n    public complexTypes?: CsdlComplexType[],\n    public entityTypes?: CsdlEntityType[],\n    public functions?: CsdlFunction[],\n    public actions?: CsdlAction[],\n    public entityContainer?: CsdlEntityContainer,\n    public typeDefinitions?: CsdlTypeDefinition[],\n    public terms?: CsdlTerm[],\n    public annotationsList?: CsdlAnnotations[],\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlSingleton.html":{"url":"classes/CsdlSingleton.html","title":"class - CsdlSingleton","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlSingleton\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationPropertyBindings\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, navigationPropertyBindings?: CsdlNavigationPropertyBinding[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationPropertyBindings\n                                                  \n                                                        \n                                                                    CsdlNavigationPropertyBinding[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationPropertyBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationPropertyBinding[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-singleton.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlNavigationPropertyBinding } from './csdl-navigation-property-binding';\n\nexport class CsdlSingleton {\n  constructor(\n    public name: string,\n    public type: string,\n    public navigationPropertyBindings?: CsdlNavigationPropertyBinding[]\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuralProperty.html":{"url":"classes/CsdlStructuralProperty.html","title":"class - CsdlStructuralProperty","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuralProperty\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, nullable?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structural-property.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export abstract class CsdlStructuralProperty {\n  constructor(\n    public name: string,\n    public type: string,\n    public nullable?: boolean\n  ) {}\n}\n\nexport class CsdlProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    public defaultValue?: string\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlNavigationProperty extends CsdlStructuralProperty {\n  constructor(\n    name: string,\n    type: string,\n    nullable?: boolean,\n    public partner?: string,\n    public containsTarget?: boolean,\n    public referentialConstraints?: CsdlReferentialConstraint[],\n    public onDelete?: CsdlOnDelete\n  ) {\n    super(name, type, nullable);\n  }\n}\n\nexport class CsdlReferentialConstraint {\n  constructor(public property: string, public referencedProperty: string) {}\n}\n\nexport class CsdlOnDelete {\n  constructor(public action: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlStructuredType.html":{"url":"classes/CsdlStructuredType.html","title":"class - CsdlStructuredType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlStructuredType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                abstract\n                            \n                            \n                                    Public\n                                    Optional\n                                baseType\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                navigationProperties\n                            \n                            \n                                    Public\n                                    Optional\n                                openType\n                            \n                            \n                                    Public\n                                    Optional\n                                properties\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, properties?: CsdlProperty[], navigationProperties?: CsdlNavigationProperty[], baseType?: string, openType?: boolean, abstract?: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        properties\n                                                  \n                                                        \n                                                                        CsdlProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        navigationProperties\n                                                  \n                                                        \n                                                                    CsdlNavigationProperty[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        openType\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        abstract\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        abstract\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        navigationProperties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CsdlNavigationProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        openType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlProperty[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-structured-type.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlProperty,\n  CsdlNavigationProperty,\n} from './csdl-structural-property';\n\nexport class CsdlStructuredType {\n  constructor(\n    public name: string,\n    public properties?: CsdlProperty[],\n    public navigationProperties?: CsdlNavigationProperty[],\n    public baseType?: string,\n    public openType?: boolean,\n    public abstract?: boolean\n  ) {}\n}\n\nexport class CsdlComplexType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlEntityType extends CsdlStructuredType {\n  constructor(\n    name: string,\n    public key?: CsdlKey,\n    properties?: CsdlProperty[],\n    navigationProperties?: CsdlNavigationProperty[],\n    baseType?: string,\n    openType?: boolean,\n    abstract?: boolean,\n    public hasStream?: boolean\n  ) {\n    super(name, properties, navigationProperties, baseType, openType, abstract);\n  }\n}\n\nexport class CsdlKey {\n  constructor(public propertyRefs: CsdlPropertyRef[]) {}\n}\n\nexport class CsdlPropertyRef {\n  constructor(public name: string, public alias?: string) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTerm.html":{"url":"classes/CsdlTerm.html","title":"class - CsdlTerm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTerm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appliesTo\n                            \n                            \n                                    Public\n                                    Optional\n                                baseTerm\n                            \n                            \n                                    Public\n                                    Optional\n                                defaultValue\n                            \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                nullable\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, type: string, baseTerm?: string, defaultValue?: string, appliesTo?: string, nullable?: boolean, maxLength?: number, precision?: number, scale?: number, srid?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        baseTerm\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        defaultValue\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        appliesTo\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        nullable\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appliesTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        baseTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        defaultValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-annotation.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CsdlAnnotable {\n  constructor(public annotationList?: CsdlAnnotation[]) {}\n}\n\nexport class CsdlAnnotations extends CsdlAnnotable {\n  constructor(\n    public target: string,\n    annotationList: CsdlAnnotation[],\n    public qualifier?: string\n  ) {\n    super(annotationList);\n  }\n}\n\nexport class CsdlAnnotation {\n  constructor(public term: string, public qualifier?: string) {}\n}\n\nexport class CsdlTerm {\n  constructor(\n    public name: string,\n    public type: string,\n    public baseTerm?: string,\n    public defaultValue?: string,\n    public appliesTo?: string,\n    public nullable?: boolean,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public srid?: string\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CsdlTypeDefinition.html":{"url":"classes/CsdlTypeDefinition.html","title":"class - CsdlTypeDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CsdlTypeDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CsdlAnnotable\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                maxLength\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Optional\n                                precision\n                            \n                            \n                                    Public\n                                    Optional\n                                scale\n                            \n                            \n                                    Public\n                                    Optional\n                                srid\n                            \n                            \n                                    Public\n                                underlayingType\n                            \n                            \n                                    Public\n                                    Optional\n                                unicode\n                            \n                            \n                                    Public\n                                    Optional\n                                annotationList\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, underlayingType: string, maxLength?: number, precision?: number, scale?: number, unicode?: boolean, srid?: string, annotationList?: CsdlAnnotation[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        underlayingType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxLength\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        precision\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        scale\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        unicode\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        srid\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotationList\n                                                  \n                                                        \n                                                                        CsdlAnnotation[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        precision\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        scale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        srid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        underlayingType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        unicode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/csdl/csdl-type-definition.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        annotationList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CsdlAnnotation[]\n\n                    \n                \n                        \n                            \n                                Inherited from         CsdlAnnotable\n\n                            \n                        \n                    \n                        \n                                Defined in         CsdlAnnotable:2\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CsdlAnnotable, CsdlAnnotation } from './csdl-annotation';\n\nexport class CsdlTypeDefinition extends CsdlAnnotable {\n  constructor(\n    public name: string,\n    public underlayingType: string,\n    public maxLength?: number,\n    public precision?: number,\n    public scale?: number,\n    public unicode?: boolean,\n    public srid?: string,\n    annotationList?: CsdlAnnotation[]\n  ) {\n    super(annotationList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DateAndTimeFunctions.html":{"url":"classes/DateAndTimeFunctions.html","title":"class - DateAndTimeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateAndTimeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                day\n                            \n                            \n                                fractionalseconds\n                            \n                            \n                                hour\n                            \n                            \n                                maxdatetime\n                            \n                            \n                                mindatetime\n                            \n                            \n                                minute\n                            \n                            \n                                month\n                            \n                            \n                                now\n                            \n                            \n                                second\n                            \n                            \n                                time\n                            \n                            \n                                totaloffsetminutes\n                            \n                            \n                                totalseconds\n                            \n                            \n                                year\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n            \n                \ndate(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        day\n                        \n                    \n                \n            \n            \n                \nday(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fractionalseconds\n                        \n                    \n                \n            \n            \n                \nfractionalseconds(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hour\n                        \n                    \n                \n            \n            \n                \nhour(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxdatetime\n                        \n                    \n                \n            \n            \n                \nmaxdatetime(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mindatetime\n                        \n                    \n                \n            \n            \n                \nmindatetime(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        minute\n                        \n                    \n                \n            \n            \n                \nminute(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        month\n                        \n                    \n                \n            \n            \n                \nmonth(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        now\n                        \n                    \n                \n            \n            \n                \nnow()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        second\n                        \n                    \n                \n            \n            \n                \nsecond(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        time\n                        \n                    \n                \n            \n            \n                \ntime(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totaloffsetminutes\n                        \n                    \n                \n            \n            \n                \ntotaloffsetminutes(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        totalseconds\n                        \n                    \n                \n            \n            \n                \ntotalseconds(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        year\n                        \n                    \n                \n            \n            \n                \nyear(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Field.html":{"url":"classes/Field.html","title":"class - Field","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Field\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/metadata.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fieldType\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, fieldType: FieldType)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fieldType\n                                                  \n                                                        \n                                                                        FieldType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fieldType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FieldType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/metadata.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CsdlAction,\n  CsdlActionImport,\n  CsdlFunction,\n  CsdlFunctionImport,\n  CsdlParameter,\n  CsdlReturnType,\n} from './csdl/csdl-function-action';\nimport {\n  CsdlAnnotation,\n  CsdlAnnotations,\n  CsdlTerm,\n} from './csdl/csdl-annotation';\nimport {\n  CsdlComplexType,\n  CsdlEntityType,\n  CsdlKey,\n  CsdlPropertyRef,\n} from './csdl/csdl-structured-type';\nimport { CsdlEnumMember, CsdlEnumType } from './csdl/csdl-enum-type';\nimport {\n  CsdlInclude,\n  CsdlIncludeAnnotations,\n  CsdlReference,\n} from './csdl/csdl-reference';\nimport {\n  CsdlNavigationProperty,\n  CsdlOnDelete,\n  CsdlProperty,\n  CsdlReferentialConstraint,\n} from './csdl/csdl-structural-property';\n\nimport { CsdlEntityContainer } from './csdl/csdl-entity-container';\nimport { CsdlEntitySet } from './csdl/csdl-entity-set';\nimport { CsdlNavigationPropertyBinding } from './csdl/csdl-navigation-property-binding';\nimport { CsdlSchema } from './csdl/csdl-schema';\nimport { CsdlSingleton } from './csdl/csdl-singleton';\nimport { CsdlTypeDefinition } from './csdl/csdl-type-definition';\nimport { Types } from '../../utils/types';\nimport { VERSION_4_0 } from '../../constants';\n\nenum FieldType {\n  ATTRIBUTE,\n  TAG,\n}\n\nclass Field {\n  constructor(public name: string, public fieldType: FieldType) {}\n}\n\nexport class ODataMetadata {\n  // TAGS\n  private static readonly TAG_EDMX = 'edmx:Edmx';\n  private static readonly TAG_DATA_SERVICES = 'edmx:DataServices';\n  private static readonly TAG_REFERENCE = 'edmx:Reference';\n  private static readonly TAG_INCLUDE = 'edmx:Include';\n  private static readonly TAG_INCLUDE_ANNOTATIONS = 'edmx:IncludeAnnotations';\n  private static readonly TAG_TERM = 'Term';\n  private static readonly TAG_ANNOTATIONS = 'Annotations';\n  private static readonly TAG_ANNOTATION = 'Annotation';\n  private static readonly TAG_SCHEMA = 'Schema';\n  private static readonly TAG_ENUM_TYPE = 'EnumType';\n  private static readonly TAG_MEMBER = 'Member';\n  private static readonly TAG_COMPLEX_TYPE = 'ComplexType';\n  private static readonly TAG_ENTITY_TYPE = 'EntityType';\n  private static readonly TAG_PROPERTY = 'Property';\n  private static readonly TAG_KEY = 'Key';\n  private static readonly TAG_PROPERTY_REF = 'PropertyRef';\n  private static readonly TAG_NAVIGATION_PROPERTY = 'NavigationProperty';\n  private static readonly TAG_REFERENTIAL_CONSTRAINT = 'ReferentialConstraint';\n  private static readonly TAG_ON_DELETE = 'OnDelete';\n  private static readonly TAG_FUNCTION = 'Function';\n  private static readonly TAG_RETURN_TYPE = 'ReturnType';\n  private static readonly TAG_PARAMETER = 'Parameter';\n  private static readonly TAG_ACTION = 'Action';\n  private static readonly TAG_ENTITY_CONTAINER = 'EntityContainer';\n  private static readonly TAG_ENTITY_SET = 'EntitySet';\n  private static readonly TAG_SINGLETON = 'Singleton';\n  private static readonly TAG_FUNCTION_IMPORT = 'FunctionImport';\n  private static readonly TAG_ACTION_IMPORT = 'ActionImport';\n  private static readonly TAG_NAVIGATION_PROPERTY_BINDING =\n    'NavigationPropertyBinding';\n  private static readonly TAG_TYPE_DEFINITION = 'TypeDefinition';\n\n  // ATTRIBUTES\n  private static readonly ATTRIBUTE_VERSION = 'Version';\n  private static readonly ATTRIBUTE_URI = 'Uri';\n  private static readonly ATTRIBUTE_ALIAS = 'Alias';\n  private static readonly ATTRIBUTE_NAMESPACE = 'Namespace';\n  private static readonly ATTRIBUTE_TERM_NAMESPACE = 'TermNamespace';\n  private static readonly ATTRIBUTE_QUALIFIER = 'Qualifier';\n  private static readonly ATTRIBUTE_TARGET_NAMESPACE = 'TargetNamespace';\n  private static readonly ATTRIBUTE_TERM = 'Term';\n  private static readonly ATTRIBUTE_NAME = 'Name';\n  private static readonly ATTRIBUTE_VALUE = 'Value';\n  private static readonly ATTRIBUTE_BASE_TYPE = 'BaseType';\n  private static readonly ATTRIBUTE_OPEN_TYPE = 'OpenType';\n  private static readonly ATTRIBUTE_TYPE = 'Type';\n  private static readonly ATTRIBUTE_NULLABLE = 'Nullable';\n  private static readonly ATTRIBUTE_MAX_LENGTH = 'MaxLength';\n  private static readonly ATTRIBUTE_PRECISION = 'Precision';\n  private static readonly ATTRIBUTE_SCALE = 'Scale';\n  private static readonly ATTRIBUTE_UNICODE = 'Unicode';\n  private static readonly ATTRIBUTE_SRID = 'SRID';\n  private static readonly ATTRIBUTE_DEFAULT_VALUE = 'DefaultValue';\n  private static readonly ATTRIBUTE_PARTNER = 'Partner';\n  private static readonly ATTRIBUTE_PROPERTY = 'Property';\n  private static readonly ATTRIBUTE_REFERENCED_PROPERTY = 'ReferencedProperty';\n  private static readonly ATTRIBUTE_HAS_STREAM = 'HasStream';\n  private static readonly ATTRIBUTE_CONTAINS_TARGET = 'ContainsTarget';\n  private static readonly ATTRIBUTE_IS_BOUND = 'IsBound';\n  private static readonly ATTRIBUTE_ENTITY_SET_PATH = 'EntitySetPath';\n  private static readonly ATTRIBUTE_IS_COMPOSABLE = 'IsComposable';\n  private static readonly ATTRIBUTE_ENTITY_TYPE = 'EntityType';\n  private static readonly ATTRIBUTE_PATH = 'Path';\n  private static readonly ATTRIBUTE_TARGET = 'Target';\n  private static readonly ATTRIBUTE_FUNCTION = 'Function';\n  private static readonly ATTRIBUTE_ACTION = 'Action';\n  private static readonly ATTRIBUTE_ENTITY_SET = 'EntitySet';\n  private static readonly ATTRIBUTE_INCLUDE_IN_SERVICE_DOCUMENT =\n    'IncludeInServiceDocument';\n  private static readonly ATTRIBUTE_ABSTRACT = 'Abstract';\n  private static readonly ATTRIBUTE_UNDERLYING_TYPE = 'UnderlyingType';\n  private static readonly ATTRIBUTE_IS_FLAGS = 'IsFlags';\n  private static readonly ATTRIBUTE_EXTENDS = 'Extends';\n  private static readonly ATTRIBUTE_BASE_TERM = 'BaseTerm';\n  private static readonly ATTRIBUTE_APPLIES_TO = 'AppliesTo';\n\n  public readonly version: string;\n  public readonly references: CsdlReference[];\n  public readonly schemas: CsdlSchema[];\n\n  constructor(xml: string) {\n    try {\n      const parser: DOMParser = new DOMParser();\n      const document: Document = parser.parseFromString(xml, 'text/xml');\n\n      this.checkVersion(document);\n\n      this.version = this.getFieldValueByAttribute(\n        new Field(ODataMetadata.ATTRIBUTE_VERSION, FieldType.ATTRIBUTE),\n        document.documentElement.attributes\n      );\n\n      this.references = this.getObjects(\n        document.documentElement,\n        ODataMetadata.TAG_REFERENCE,\n        [\n          new Field(ODataMetadata.ATTRIBUTE_URI, FieldType.ATTRIBUTE),\n          new Field(ODataMetadata.TAG_INCLUDE, FieldType.TAG),\n          new Field(ODataMetadata.TAG_INCLUDE_ANNOTATIONS, FieldType.TAG),\n          new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n        ]\n      );\n\n      const dataServices: Element =\n        document.documentElement.getElementsByTagName(\n          ODataMetadata.TAG_DATA_SERVICES\n        )[0];\n      this.schemas = this.getObjects(dataServices, ODataMetadata.TAG_SCHEMA, [\n        new Field(ODataMetadata.ATTRIBUTE_NAMESPACE, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.ATTRIBUTE_ALIAS, FieldType.ATTRIBUTE),\n        new Field(ODataMetadata.TAG_ENUM_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_COMPLEX_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_TYPE, FieldType.TAG),\n        new Field(ODataMetadata.TAG_FUNCTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ACTION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ENTITY_CONTAINER, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TYPE_DEFINITION, FieldType.TAG),\n        new Field(ODataMetadata.TAG_TERM, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATIONS, FieldType.TAG),\n        new Field(ODataMetadata.TAG_ANNOTATION, FieldType.TAG),\n      ]);\n    } catch (error) {\n      throw new Error('Unable to parse metadata, ' + error);\n    }\n  }\n\n  protected checkVersion(document: Document) {\n    // check version\n    const attributes: NamedNodeMap = document.documentElement.attributes;\n    if (!attributes) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const attr: Attr | null = attributes.getNamedItem('Version');\n    if (attr === null) {\n      throw new Error('OData version is not specified in the metadata');\n    }\n    const odataVersion = attr?.nodeValue;\n    if (odataVersion !== VERSION_4_0) {\n      throw new Error('OData version \"' + odataVersion + '\" is not supported');\n    }\n  }\n\n  protected getObjects(\n    parentElement: Element,\n    tag: string,\n    fieldNames: Field[]\n  ): any[] {\n    let objects: any[] = [];\n\n    const children: HTMLCollection = parentElement.children;\n    for (let index = 0; index \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Function.html":{"url":"classes/Function.html","title":"class - Function","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Function\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, values: any[], normalize: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(aliases?: QueryCustomType[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aliases\n                                    \n                                                QueryCustomType[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { name: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:49\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeoFunctions.html":{"url":"classes/GeoFunctions.html","title":"class - GeoFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeoFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                distance\n                            \n                            \n                                intersects\n                            \n                            \n                                length\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        distance\n                        \n                    \n                \n            \n            \n                \ndistance(value: T, point: string, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:193\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    point\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        intersects\n                        \n                    \n                \n            \n            \n                \nintersects(value: T, polygon: string, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    polygon\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength(value: T, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:199\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Grouping.html":{"url":"classes/Grouping.html","title":"class - Grouping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Grouping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(group: Renderable)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:300\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        group\n                                                  \n                                                        \n                                                                        Renderable\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(aliases?: QueryCustomType[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:313\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aliases\n                                    \n                                                QueryCustomType[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:307\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { group: any; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:303\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupingAndNavigationOperators.html":{"url":"classes/GroupingAndNavigationOperators.html","title":"class - GroupingAndNavigationOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupingAndNavigationOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                grouping\n                            \n                            \n                                navigation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        grouping\n                        \n                    \n                \n            \n            \n                \ngrouping(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:338\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Grouping\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigation\n                        \n                    \n                \n            \n            \n                \nnavigation(field: T, value: Field)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:342\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        N\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                Field\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Navigation\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Lambda.html":{"url":"classes/Lambda.html","title":"class - Lambda","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Lambda\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Operator\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], normalize: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:347\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(aliases?: QueryCustomType[])\n                \n            \n\n\n            \n                \n                    Inherited from         Operator\n\n                \n            \n            \n                \n                        Defined in         Operator:360\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aliases\n                                    \n                                                QueryCustomType[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Inherited from         Operator\n\n                \n            \n            \n                \n                        Defined in         Operator:221\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { op: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:356\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LambdaOperators.html":{"url":"classes/LambdaOperators.html","title":"class - LambdaOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LambdaOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                all\n                            \n                            \n                                any\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        all\n                        \n                    \n                \n            \n            \n                \nall(field: T, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:374\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        any\n                        \n                    \n                \n            \n            \n                \nany(field: T, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:370\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Lambda\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogicalOperators.html":{"url":"classes/LogicalOperators.html","title":"class - LogicalOperators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogicalOperators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                and\n                            \n                            \n                                eq\n                            \n                            \n                                ge\n                            \n                            \n                                gt\n                            \n                            \n                                has\n                            \n                            \n                                in\n                            \n                            \n                                le\n                            \n                            \n                                lt\n                            \n                            \n                                ne\n                            \n                            \n                                not\n                            \n                            \n                                or\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        and\n                        \n                    \n                \n            \n            \n                \nand(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:262\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        eq\n                        \n                    \n                \n            \n            \n                \neq(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:244\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ge\n                        \n                    \n                \n            \n            \n                \nge(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:253\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gt\n                        \n                    \n                \n            \n            \n                \ngt(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:250\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:271\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        in\n                        \n                    \n                \n            \n            \n                \nin(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:274\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        le\n                        \n                    \n                \n            \n            \n                \nle(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:259\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lt\n                        \n                    \n                \n            \n            \n                \nlt(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:256\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ne\n                        \n                    \n                \n            \n            \n                \nne(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:247\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        not\n                        \n                    \n                \n            \n            \n                \nnot(value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:268\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        or\n                        \n                    \n                \n            \n            \n                \nor(left: any, right: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:265\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    left\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    right\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Operator\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Navigation.html":{"url":"classes/Navigation.html","title":"class - Navigation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Navigation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: T, value: Field)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:318\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                    T\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        Field\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(aliases?: QueryCustomType[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:332\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aliases\n                                    \n                                                QueryCustomType[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:325\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         { field: T; value: Field; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:321\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotation.html":{"url":"classes/ODataAnnotation.html","title":"class - ODataAnnotation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/annotation.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bool\n                            \n                            \n                                    Optional\n                                int\n                            \n                            \n                                    Optional\n                                permissions\n                            \n                            \n                                    Optional\n                                properties\n                            \n                            \n                                    Optional\n                                string\n                            \n                            \n                                term\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(annot: AnnotationConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        annot\n                                                  \n                                                        \n                                                                        AnnotationConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bool\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        int\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        string\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/annotation.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AnnotationConfig } from '../types';\n\nexport class ODataAnnotation {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n\n  constructor(annot: AnnotationConfig) {\n    this.term = annot.term;\n    Object.assign(this, annot);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataAnnotations.html":{"url":"classes/ODataAnnotations.html","title":"class - ODataAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                attributes\n                            \n                            \n                                    Abstract\n                                clone\n                            \n                            \n                                    Abstract\n                                data\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySet\n                                \n                                \n                                    type\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(helper: ODataVersionHelper, annotations: literal type, context?: ODataContext)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        helper\n                                                  \n                                                        \n                                                                        ODataVersionHelper\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        annotations\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        ODataContext\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:12\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        clone\n                        \n                    \n                \n            \n            \n                \n                    \n                    clone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        data\n                        \n                    \n                \n            \n            \n                \n                    \n                    data(data: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySet\n                    \n                \n\n                \n                    \n                        getentitySet()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:16\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n\n                \n                    \n                        gettype()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:20\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataApiOptions.html":{"url":"classes/ODataApiOptions.html","title":"class - ODataApiOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataApiOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ApiOptions\n                            OptionsHelper\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                accept\n                            \n                            \n                                bodyQueryOptions\n                            \n                            \n                                etag\n                            \n                            \n                                fetchPolicy\n                            \n                            \n                                headers\n                            \n                            \n                                params\n                            \n                            \n                                    Optional\n                                prefer\n                            \n                            \n                                    Optional\n                                stringAsEnum\n                            \n                            \n                                stripMetadata\n                            \n                            \n                                version\n                            \n                            \n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ApiOptions)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/options.ts:88\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        ApiOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        accept\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:55\n                        \n                    \n\n            \n                \n                    Customize accept header with OData options\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOptionNames[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:50\n                        \n                    \n\n            \n                \n                    Send query options in the request body\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        etag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : { ifMatch: true, ifNoneMatch: false }\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FetchPolicy\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:34\n                        \n                    \n\n            \n                \n                    Cache fetch policy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:42\n                        \n                    \n\n            \n                \n                    Extra headers to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:38\n                        \n                    \n\n            \n                \n                    Extra params to be sent in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        prefer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:26\n                        \n                    \n\n            \n                \n                    Send enum as string in the request\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stripMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:30\n                        \n                    \n\n            \n                \n                    Strip metadata from the response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:22\n                        \n                    \n\n            \n                \n                    Default OData version\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:46\n                        \n                    \n\n            \n                \n                    Http request with credentials\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:104\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ApiOptions,\n  FetchPolicy,\n  ODataMetadataType,\n  ODataVersion,\n  Options,\n  OptionsHelper,\n  QueryOptionNames,\n} from './types';\nimport {\n  DEFAULT_FETCH_POLICY,\n  DEFAULT_STRIP_METADATA,\n  DEFAULT_VERSION,\n} from './constants';\n\nimport { ODataHelper } from './helper';\n\nexport class ODataApiOptions implements ApiOptions, OptionsHelper {\n  /**\n   * Default OData version\n   */\n  version: ODataVersion;\n  /**\n   * Send enum as string in the request\n   */\n  stringAsEnum?: boolean;\n  /**\n   * Strip metadata from the response\n   */\n  stripMetadata: ODataMetadataType;\n  /**\n   * Cache fetch policy\n   */\n  fetchPolicy: FetchPolicy;\n  /**\n   * Extra params to be sent in the request\n   */\n  params: { [param: string]: string | string[] };\n  /**\n   * Extra headers to be sent in the request\n   */\n  headers: { [param: string]: string | string[] };\n  /**\n   * Http request with credentials\n   */\n  withCredentials?: boolean;\n  /**\n   * Send query options in the request body\n   */\n  bodyQueryOptions: QueryOptionNames[];\n  /**\n   * Customize accept header with OData options\n   * @link http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_RequestingtheJSONFormat\n   */\n  accept?: {\n    exponentialDecimals?: boolean;\n    ieee754Compatible?: boolean;\n    metadata?: ODataMetadataType;\n    streaming?: boolean;\n  };\n  etag: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398229\n     */\n    ifMatch: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398230\n     */\n    ifNoneMatch: boolean;\n  } = { ifMatch: true, ifNoneMatch: false };\n  prefer?: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398238\n     */\n    maxPageSize?: number;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398240\n     */\n    return?: 'representation' | 'minimal';\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398236\n     */\n    continueOnError?: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398237\n     */\n    includeAnnotations?: string;\n  };\n\n  constructor(config: ApiOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n    this.params = config.params || {};\n    this.headers = config.headers || {};\n    this.withCredentials = config.withCredentials;\n    this.stripMetadata = config.stripMetadata || DEFAULT_STRIP_METADATA;\n    this.fetchPolicy = config.fetchPolicy || DEFAULT_FETCH_POLICY;\n    this.bodyQueryOptions = config.bodyQueryOptions || [];\n    this.accept = config.accept;\n    Object.assign(this.etag, config.etag || {});\n    this.prefer = config.prefer;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\nexport class ODataParserOptions implements OptionsHelper {\n  version: ODataVersion;\n  stringAsEnum?: boolean;\n\n  constructor(config: Options) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBaseService.html":{"url":"classes/ODataBaseService.html","title":"class - ODataBaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/base.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient, name: string, apiNameOrEntityType?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/base.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        apiNameOrEntityType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:62\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:68\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:74\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:80\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:86\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:25\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:31\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:37\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:43\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType: \"property\" | \"entity\" | \"entities\" | \"none\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:49\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"property\" | \"entity\" | \"entities\" | \"none\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:99\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:104\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType: \"entity\" | \"entities\", options: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/base.ts:109\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    responseType\n                                    \n                                            \"entity\" | \"entities\"\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/base.ts:21\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ODataActionResource,\n  ODataEntities,\n  ODataEntity,\n  ODataFunctionResource,\n  ODataNavigationPropertyResource,\n  ODataProperty,\n  ODataQueryArgumentsOptions,\n} from '../resources';\n\nimport { ODataClient } from '../client';\nimport { Observable } from 'rxjs';\n\nexport abstract class ODataBaseService {\n  constructor(\n    protected client: ODataClient,\n    protected name: string,\n    protected apiNameOrEntityType?: string\n  ) {}\n\n  get api() {\n    return this.client.apiFor(this.apiNameOrEntityType);\n  }\n\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'none',\n    options?: ODataQueryArgumentsOptions\n  ): Observable;\n  protected callFunction(\n    params: P | null,\n    resource: ODataFunctionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'none',\n    options?: ODataQueryArgumentsOptions\n  ): Observable;\n  protected callAction(\n    params: P | null,\n    resource: ODataActionResource,\n    responseType: 'property' | 'entity' | 'entities' | 'none',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.call(params, {\n      responseType: responseType as any,\n      ...options,\n    });\n  }\n\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entities',\n    options?: ODataQueryArgumentsOptions\n  ): Observable>;\n  protected fetchNavigationProperty(\n    resource: ODataNavigationPropertyResource,\n    responseType: 'entity' | 'entities',\n    options: ODataQueryArgumentsOptions = {}\n  ): Observable {\n    resource.query((q) => q.apply(options));\n    return resource.fetch({ responseType: responseType as any, ...options });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataBatchRequest.html":{"url":"classes/ODataBatchRequest.html","title":"class - ODataBatchRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataBatchRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/types/batch.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Subject\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                request\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onError\n                            \n                            \n                                onLoad\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: ODataRequest)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        ODataRequest\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        request\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataRequest\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/types/batch.ts:40\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onError\n                        \n                    \n                \n            \n            \n                \nonError(content: string[], status: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onLoad\n                        \n                    \n                \n            \n            \n                \nonLoad(content: string[], status: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/types/batch.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  $BATCH,\n  ACCEPT,\n  APPLICATION_HTTP,\n  APPLICATION_JSON,\n  BATCH_PREFIX,\n  BINARY,\n  BOUNDARY_PREFIX_SUFFIX,\n  CHANGESET_PREFIX,\n  CONTENT_ID,\n  CONTENT_TRANSFER_ENCODING,\n  CONTENT_TYPE,\n  HTTP11,\n  MULTIPART_MIXED,\n  MULTIPART_MIXED_BOUNDARY,\n  NEWLINE,\n  NEWLINE_REGEXP,\n  ODATA_VERSION,\n  VERSION_4_0,\n  XSSI_PREFIX,\n} from '../../constants';\nimport {\n  HttpErrorResponse,\n  HttpHeaders,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\n\nimport { Http } from '../../utils/http';\nimport { ODataApi } from '../../api';\nimport { ODataOptions } from './options';\nimport { ODataPathSegments } from '../path';\nimport { ODataRequest } from '../request';\nimport { ODataResource } from '../resource';\nimport { ODataResponse } from '../responses';\nimport { PathSegmentNames } from '../../types';\nimport { Strings } from '../../utils/strings';\n\nexport class ODataBatchRequest extends Subject> {\n  constructor(public request: ODataRequest) {\n    super();\n  }\n\n  toString() {\n    //TODO: Relative or Absolute url ?\n    let res = [\n      `${this.request.method} ${this.request.pathWithParams} ${HTTP11}`,\n    ];\n    if (\n      this.request.method === 'POST' ||\n      this.request.method === 'PATCH' ||\n      this.request.method === 'PUT'\n    ) {\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_JSON}`);\n    }\n\n    if (this.request.headers instanceof HttpHeaders) {\n      let headers = this.request.headers;\n      res = [\n        ...res,\n        ...headers\n          .keys()\n          .map((key) => `${key}: ${(headers.getAll(key) || []).join(',')}`),\n      ];\n    }\n\n    return res.join(NEWLINE);\n  }\n\n  onLoad(content: string[], status: { code: number; message: string }) {\n    let headers: HttpHeaders = new HttpHeaders();\n    var index = 1;\n    for (; index = 200 && status.code ({\n        body,\n        headers,\n        status: status.code,\n        statusText: status.message,\n        url: this.request.urlWithParams,\n      });\n      this.next(ODataResponse.fromHttpResponse(this.request, res));\n      this.complete();\n    } else {\n      // An unsuccessful request is delivered on the error channel.\n      this.error(\n        new HttpErrorResponse({\n          // The error in this case is the response body (error from the server).\n          error: body,\n          headers,\n          status: status.code,\n          statusText: status.message,\n          url: this.request.urlWithParams,\n        })\n      );\n    }\n  }\n\n  onError(content: string[], status: { code: number; text: string }) {\n    const res = new HttpErrorResponse({\n      error: content.join(NEWLINE),\n      status: status.code || 0,\n      statusText: status.text || 'Unknown Error',\n      url: this.request.urlWithParams || undefined,\n    });\n    this.error(res);\n  }\n}\n\n/**\n * OData Batch Resource\n * https://www.odata.org/getting-started/advanced-tutorial/#batch\n */\nexport class ODataBatchResource extends ODataResource {\n  // VARIABLES\n  private _requests: ODataBatchRequest[] = [];\n  requests() {\n    return this._requests.map((r) => r.request);\n  }\n\n  //#region Factory\n  static factory(api: ODataApi) {\n    let segments = new ODataPathSegments();\n    segments.add(PathSegmentNames.batch, $BATCH);\n    return new ODataBatchResource(api, segments);\n  }\n\n  clone() {\n    return new ODataBatchResource(this.api, this.cloneSegments());\n  }\n  //#endregion\n\n  schema() {\n    return undefined;\n  }\n\n  /**\n   * Execute the batch request\n   * @param ctx The context for the request\n   * @param options The options of the batch request\n   * @returns The result of execute the context\n   */\n  exec(\n    ctx: (batch: this) => Observable,\n    options?: ODataOptions\n  ): Observable {\n    // Store original requester\n    const current = this.api.request;\n    // Switch to the batch requester\n    this.api.request = (req: ODataRequest): Observable => {\n      if (req.api !== this.api)\n        throw new Error('Batch Request are for the same api.');\n      if (req.observe === 'events')\n        throw new Error(\"Batch Request does not allows observe == 'events'.\");\n      this._requests.push(new ODataBatchRequest(req));\n      return this._requests[this._requests.length - 1];\n    };\n    // Execute the context\n    const obs$ = ctx(this);\n    // Restore original requester\n    this.api.request = current;\n\n    if (this._requests.length >= 0) {\n      const bound = Strings.uniqueId(BATCH_PREFIX);\n      const requests = this._requests;\n      const headers = Http.mergeHttpHeaders(\n        (options && options.headers) || {},\n        {\n          [ODATA_VERSION]: VERSION_4_0,\n          [CONTENT_TYPE]: MULTIPART_MIXED_BOUNDARY + bound,\n          [ACCEPT]: MULTIPART_MIXED,\n        }\n      );\n      const request = new ODataRequest({\n        method: 'POST',\n        body: ODataBatchResource.buildBody(bound, requests),\n        api: this.api,\n        resource: this,\n        observe: 'response',\n        responseType: 'text',\n        headers: headers,\n        params: options ? options.params : undefined,\n        withCredentials: options ? options.withCredentials : undefined,\n      });\n      this.api.request(request).subscribe((response) => {\n        ODataBatchResource.handleResponse(requests, response);\n      });\n    }\n\n    return obs$;\n  }\n\n  body() {\n    return ODataBatchResource.buildBody(\n      Strings.uniqueId(BATCH_PREFIX),\n      this._requests\n    );\n  }\n\n  static buildBody(\n    batchBoundary: string,\n    requests: ODataBatchRequest[]\n  ): string {\n    let res = [];\n    let changesetBoundary: string | null = null;\n    let changesetId = 1;\n\n    for (const batch of requests) {\n      // if method is GET and there is a changeset boundary open then close it\n      if (batch.request.method === 'GET' && changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n\n      // if there is no changeset boundary open then open a batch boundary\n      if (changesetBoundary === null) {\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}`);\n      }\n\n      // if method is not GET and there is no changeset boundary open then open a changeset boundary\n      if (batch.request.method !== 'GET') {\n        if (changesetBoundary === null) {\n          changesetBoundary = Strings.uniqueId(CHANGESET_PREFIX);\n          res.push(\n            `${CONTENT_TYPE}: ${MULTIPART_MIXED_BOUNDARY}${changesetBoundary}`\n          );\n          res.push(NEWLINE);\n        }\n        res.push(`${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}`);\n      }\n\n      res.push(`${CONTENT_TYPE}: ${APPLICATION_HTTP}`);\n      res.push(`${CONTENT_TRANSFER_ENCODING}: ${BINARY}`);\n\n      if (batch.request.method !== 'GET') {\n        res.push(`${CONTENT_ID}: ${changesetId++}`);\n      }\n\n      res.push(NEWLINE);\n      res.push(`${batch}`);\n\n      if (batch.request.method === 'GET' || batch.request.method === 'DELETE') {\n        res.push(NEWLINE);\n      } else {\n        res.push(`${NEWLINE}${JSON.stringify(batch.request.body)}`);\n      }\n    }\n\n    if (res.length) {\n      if (changesetBoundary !== null) {\n        res.push(\n          `${BOUNDARY_PREFIX_SUFFIX}${changesetBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n        );\n        changesetBoundary = null;\n      }\n      res.push(\n        `${BOUNDARY_PREFIX_SUFFIX}${batchBoundary}${BOUNDARY_PREFIX_SUFFIX}`\n      );\n    }\n    return res.join(NEWLINE);\n  }\n\n  static handleResponse(\n    requests: ODataBatchRequest[],\n    response: ODataResponse\n  ) {\n    let chunks: string[][] = [];\n    const contentType: string = response.headers.get(CONTENT_TYPE) || '';\n    const batchBoundary: string = Http.boundaryDelimiter(contentType);\n    const endLine: string = Http.boundaryEnd(batchBoundary);\n\n    const lines: string[] = response.body.split(NEWLINE_REGEXP);\n\n    let changesetResponses: string[][] | null = null;\n    let contentId: number | null = null;\n    let changesetBoundary: string | null = null;\n    let changesetEndLine: string | null = null;\n    let startIndex: number | null = null;\n    for (let index = 0; index  {\n      const req = requests[index];\n      const { code, message } = Http.parseResponseStatus(chunk[0]);\n      req.onLoad(chunk.slice(1), { code, message });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCache.html":{"url":"classes/ODataCache.html","title":"class - ODataCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Cache\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Abstract\n                                getResponse\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                    Abstract\n                                putResponse\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/cache.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:50\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:81\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    getResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:66\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        putResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    putResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/cache.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { Cache, PathSegmentNames } from '../types';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\n\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegmentNames.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request']\n    );\n  }\n\n  tags(req: ODataRequest, res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key ? `${context.entitySet}(${context.key})` : context.entitySet\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] }\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {}\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    // Remove expired cache entries\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  flush() {\n    // Remove all cache entries\n    this.entries = new Map>();\n  }\n\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError('No Cached');\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        })\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ODataCacheEntry.html":{"url":"interfaces/ODataCacheEntry.html","title":"interface - ODataCacheEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ODataCacheEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/cache.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lastRead\n                                        \n                                \n                                \n                                        \n                                            payload\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastRead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastRead:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        payload:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CACHE_KEY_SEPARATOR, DEFAULT_TIMEOUT } from '../constants';\nimport { Cache, PathSegmentNames } from '../types';\nimport { ODataBatchResource, ODataRequest, ODataResponse } from '../resources';\nimport { Observable, of, throwError } from 'rxjs';\nimport { startWith, tap } from 'rxjs/operators';\n\nexport interface ODataCacheEntry {\n  payload: T;\n  lastRead: number;\n  timeout: number;\n  tags: string[];\n}\n\nexport abstract class ODataCache implements Cache {\n  timeout: number;\n  entries: Map>;\n\n  constructor({ timeout = DEFAULT_TIMEOUT }: { timeout?: number }) {\n    this.timeout = timeout;\n    this.entries = new Map>();\n  }\n\n  abstract getResponse(req: ODataRequest): ODataResponse | undefined;\n  abstract putResponse(req: ODataRequest, res: ODataResponse): void;\n\n  scope(req: ODataRequest): string[] {\n    const segments = req.resource.cloneSegments();\n    return segments.segments({ key: true }).reduce(\n      (acc, s) => {\n        if (s.name === PathSegmentNames.entitySet)\n          acc = [...acc, s.path() as string];\n        return acc;\n      },\n      ['request']\n    );\n  }\n\n  tags(req: ODataRequest, res: ODataResponse): string[] {\n    const tags = [];\n    const context = res.context;\n    if (context.entitySet) {\n      tags.push(\n        context.key ? `${context.entitySet}(${context.key})` : context.entitySet\n      );\n    }\n    if (context.type) tags.push(context.type);\n    return tags;\n  }\n\n  buildEntry(\n    payload: T,\n    { timeout, tags }: { timeout?: number; tags?: string[] }\n  ): ODataCacheEntry {\n    return {\n      payload,\n      lastRead: Date.now(),\n      timeout: timeout || this.timeout,\n      tags: tags || [],\n    };\n  }\n\n  buildKey(names: string[]): string {\n    return names.join(CACHE_KEY_SEPARATOR);\n  }\n\n  put(\n    name: string,\n    payload: T,\n    {\n      timeout,\n      scope,\n      tags,\n    }: { timeout?: number; scope?: string[]; tags?: string[] } = {}\n  ) {\n    const entry = this.buildEntry(payload, { timeout, tags });\n    const key = this.buildKey([...(scope || []), name]);\n    this.entries.set(key, entry);\n    this.forget();\n  }\n\n  get(name: string, { scope }: { scope?: string[] } = {}): T {\n    const key = this.buildKey([...(scope || []), name]);\n    const entry = this.entries.get(key);\n    return entry !== undefined && !this.isExpired(entry)\n      ? entry.payload\n      : undefined;\n  }\n\n  forget({\n    name,\n    scope = [],\n    tags = [],\n  }: { name?: string; scope?: string[]; tags?: string[] } = {}) {\n    // Remove expired cache entries\n    if (name !== undefined) scope.push(name);\n    const key = scope.length > 0 ? this.buildKey(scope) : undefined;\n    this.entries.forEach((entry, k) => {\n      if (\n        this.isExpired(entry) || // Expired\n        (key !== undefined && k.startsWith(key)) || // Key\n        (tags.length > 0 && tags.some((t) => entry.tags.indexOf(t) !== -1)) // Tags\n      ) {\n        this.entries.delete(k);\n      }\n    });\n  }\n\n  flush() {\n    // Remove all cache entries\n    this.entries = new Map>();\n  }\n\n  isExpired(entry: ODataCacheEntry) {\n    return entry.lastRead ,\n    res$: Observable>\n  ): Observable> {\n    return req.isFetch()\n      ? this.handleFetch(req, res$)\n      : req.isMutate()\n      ? this.handleMutate(req, res$)\n      : res$;\n  }\n\n  private handleFetch(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const policy = req.fetchPolicy;\n    const cached = this.getResponse(req);\n    if (policy === 'no-cache') {\n      return res$;\n    }\n    if (policy === 'cache-only') {\n      if (cached) {\n        return of(cached);\n      } else {\n        return throwError('No Cached');\n      }\n    }\n    if (\n      policy === 'cache-first' ||\n      policy === 'cache-and-network' ||\n      policy === 'network-only'\n    ) {\n      res$ = res$.pipe(\n        tap((res: ODataResponse) => {\n          if (res.options.cacheability !== 'no-store')\n            this.putResponse(req, res);\n        })\n      );\n    }\n    return cached !== undefined && policy !== 'network-only'\n      ? policy === 'cache-and-network'\n        ? res$.pipe(startWith(cached))\n        : of(cached)\n      : res$;\n  }\n\n  private handleMutate(\n    req: ODataRequest,\n    res$: Observable>\n  ): Observable> {\n    const requests = req.isBatch()\n      ? (req.resource as ODataBatchResource)\n          .requests()\n          .filter((r) => r.isMutate())\n      : [req];\n    for (var r of requests) {\n      const scope = this.scope(r);\n      this.forget({ scope });\n    }\n    return res$;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallable.html":{"url":"classes/ODataCallable.html","title":"class - ODataCallable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/callable.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bound\n                            \n                            \n                                    Optional\n                                composable\n                            \n                            \n                                    Optional\n                                entitySetPath\n                            \n                            \n                                name\n                            \n                            \n                                parser\n                            \n                            \n                                schema\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                path\n                            \n                            \n                                serialize\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bound\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        composable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        entitySetPath\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallableParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/callable.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:103\n                \n            \n\n\n            \n                \n                    Returns the binding parameter of the callable.\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The binding parameter of the callable.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:75\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:95\n                \n            \n\n\n            \n                \n                    Encode the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:53\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the callable is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:85\n                \n            \n\n\n            \n                \n                    Serialize the given value for the callable.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/callable.ts:44\n                \n            \n\n\n            \n                \n                    Returns a full type of the callable including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/callable.ts:57\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { CallableConfig, Options, Parser } from '../types';\n\nimport { ODataCallableParser } from '../parsers';\nimport { ODataSchema } from './schema';\n\nexport class ODataCallable {\n  schema: ODataSchema;\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parser: ODataCallableParser;\n\n  constructor(config: CallableConfig, schema: ODataSchema) {\n    this.schema = schema;\n    this.name = config.name;\n    this.entitySetPath = config.entitySetPath;\n    this.bound = config.bound;\n    this.composable = config.composable;\n    this.parser = new ODataCallableParser(\n      config,\n      schema.namespace,\n      schema.alias\n    );\n  }\n\n  path() {\n    let path: string;\n    if (this.entitySetPath) path = this.entitySetPath;\n    else if (this.bound) path = `${this.schema.namespace}.${this.name}`;\n    else\n      path = this.parser.return\n        ? this.api.findEntitySetForType(this.parser.return.type)?.name ||\n          this.name\n        : this.name;\n    return path;\n  }\n\n  /**\n   * Returns a full type of the callable including the namespace/alias.\n   * @param alias Use the alias of the namespace instead of the namespace.\n   * @returns The string representation of the type.\n   */\n  type({ alias = false }: { alias?: boolean } = {}) {\n    return `${alias ? this.schema.alias : this.schema.namespace}.${this.name}`;\n  }\n\n  /**\n   * Returns a boolean indicating if the callable is of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isTypeOf(type: string) {\n    return this.parser.isTypeOf(type);\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  configure({\n    parserForType,\n  }: {\n    parserForType: (type: string) => Parser;\n  }) {\n    this.parser.configure({ options: this.api.options, parserForType });\n  }\n\n  /**\n   * Deseialize the given value from the callable.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: Options): any {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the callable.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: any, options?: Options): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the callable.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: any, options?: Options): any {\n    return this.parser.encode(value, options);\n  }\n\n  /**\n   * Returns the binding parameter of the callable.\n   * @returns The binding parameter of the callable.\n   */\n  binding() {\n    return this.parser.binding();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataCallableParser.html":{"url":"classes/ODataCallableParser.html","title":"class - ODataCallableParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataCallableParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/callable.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                            \n                                parameters\n                            \n                            \n                                parser\n                            \n                            \n                                    Optional\n                                return\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                binding\n                            \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: CallableConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:94\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        CallableConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataParameterParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        return\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:91\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        binding\n                        \n                    \n                \n            \n            \n                \nbinding()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:158\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(params: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:141\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(params: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CallableConfig,\n  NONE_PARSER,\n  Options,\n  OptionsHelper,\n  Parameter,\n  Parser,\n} from '../types';\n\nimport { CALLABLE_BINDING_PARAMETER } from '../constants';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataParserOptions } from '../options';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  optionsHelper?: OptionsHelper;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): R {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) => p.configure({ parserForType, options }));\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitiesAnnotations.html":{"url":"classes/ODataEntitiesAnnotations.html","title":"class - ODataEntitiesAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitiesAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                attributes\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    readLink\n                                \n                                \n                                    count\n                                \n                                \n                                    nextLink\n                                \n                                \n                                    deltaLink\n                                \n                                \n                                    top\n                                \n                                \n                                    skip\n                                \n                                \n                                    skiptoken\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:161\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:118\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntitiesAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:126\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:130\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        count\n                    \n                \n\n                \n                    \n                        getcount()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:134\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        nextLink\n                    \n                \n\n                \n                    \n                        getnextLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:138\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        deltaLink\n                    \n                \n\n                \n                    \n                        getdeltaLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:142\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n\n                \n                    \n                        gettop()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:146\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:151\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        skiptoken\n                    \n                \n\n                \n                    \n                        getskiptoken()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:156\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:162\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityAnnotations.html":{"url":"classes/ODataEntityAnnotations.html","title":"class - ODataEntityAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _functions\n                            \n                            \n                                    Private\n                                    Optional\n                                _properties\n                            \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                function\n                            \n                            \n                                property\n                            \n                            \n                                attributes\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    id\n                                \n                                \n                                    etag\n                                \n                                \n                                    mediaEtag\n                                \n                                \n                                    metadataEtag\n                                \n                                \n                                    readLink\n                                \n                                \n                                    editLink\n                                \n                                \n                                    mediaReadLink\n                                \n                                \n                                    mediaEditLink\n                                \n                                \n                                    mediaContentType\n                                \n                                \n                                    properties\n                                \n                                \n                                    functions\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:44\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataEntityAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:52\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n\n                \n                    \n                        getid()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:56\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        etag\n                    \n                \n\n                \n                    \n                        getetag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:60\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEtag\n                    \n                \n\n                \n                    \n                        getmediaEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:64\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadataEtag\n                    \n                \n\n                \n                    \n                        getmetadataEtag()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:68\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        readLink\n                    \n                \n\n                \n                    \n                        getreadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:72\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        editLink\n                    \n                \n\n                \n                    \n                        geteditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:76\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaReadLink\n                    \n                \n\n                \n                    \n                        getmediaReadLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:80\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaEditLink\n                    \n                \n\n                \n                    \n                        getmediaEditLink()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:84\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mediaContentType\n                    \n                \n\n                \n                    \n                        getmediaContentType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:88\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        properties\n                    \n                \n\n                \n                    \n                        getproperties()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:93\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        functions\n                    \n                \n\n                \n                    \n                        getfunctions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/annotations.ts:105\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityContainer.html":{"url":"classes/ODataEntityContainer.html","title":"class - ODataEntityContainer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-container.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                            \n                                entitySets\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntityContainerConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntityContainerConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entitySets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntitySet[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-container.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/entity-container.ts:32\n                \n            \n\n\n            \n                \n                    Find an annotation inside the entity container.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/entity-container.ts:23\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { EntityContainerConfig } from '../types';\nimport { ODataAnnotation } from './annotation';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntityContainer {\n  schema: ODataSchema;\n  name: string;\n  annotations: ODataAnnotation[];\n  entitySets: ODataEntitySet[];\n\n  constructor(config: EntityContainerConfig, schema: ODataSchema) {\n    this.schema = schema;\n    this.name = config.name;\n    this.entitySets = (config.entitySets || []).map(\n      (config) => new ODataEntitySet(config, schema)\n    );\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  /**\n   * Find an annotation inside the entity container.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityService.html":{"url":"classes/ODataEntityService.html","title":"class - ODataEntityService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataBaseService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                attach\n                            \n                            \n                                    Public\n                                    Abstract\n                                entity\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    structuredTypeSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(value: M)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:8\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Abstract\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:62\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:25\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:99\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        structuredTypeSchema\n                    \n                \n\n                \n                    \n                        getstructuredTypeSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity.ts:13\n                                \n                            \n                    \n                        \n                                The schema for the structured type.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { EntityKey, ODataResource } from '../resources';\n\nimport { ODataBaseService } from './base';\nimport { ODataModel } from '../models/model';\n\nexport abstract class ODataEntityService extends ODataBaseService {\n  public abstract entity(key?: EntityKey): ODataResource;\n  public abstract attach>(value: M): void;\n\n  /**\n   * The schema for the structured type.\n   */\n  get structuredTypeSchema() {\n    return this.apiNameOrEntityType !== undefined\n      ? this.api.findStructuredTypeForType(this.apiNameOrEntityType)\n      : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySet.html":{"url":"classes/ODataEntitySet.html","title":"class - ODataEntitySet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/entity-set.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                            \n                                entityType\n                            \n                            \n                                name\n                            \n                            \n                                schema\n                            \n                            \n                                service\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAnnotation\n                            \n                            \n                                isTypeOf\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EntitySetConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EntitySetConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entityType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        service\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/entity-set.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/entity-set.ts:41\n                \n            \n\n\n            \n                \n                    Find an annotation inside the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/entity-set.ts:26\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the entity set is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/entity-set.ts:32\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { EntitySetConfig } from '../types';\nimport { ODataAnnotation } from './annotation';\nimport { ODataSchema } from './schema';\n\nexport class ODataEntitySet {\n  schema: ODataSchema;\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations: ODataAnnotation[];\n  constructor(config: EntitySetConfig, schema: ODataSchema) {\n    this.schema = schema;\n    this.name = config.name;\n    this.entityType = config.entityType;\n    this.service = config.service;\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Returns a boolean indicating if the entity set is of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isTypeOf(type: string) {\n    var names = [`${this.schema.namespace}.${this.name}`];\n    if (this.schema.alias) names.push(`${this.schema.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  /**\n   * Find an annotation inside the entity set.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntitySetService.html":{"url":"classes/ODataEntitySetService.html","title":"class - ODataEntitySetService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntitySetService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/entity-set.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                create\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                entities\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                fetchAll\n                            \n                            \n                                    Public\n                                fetchMany\n                            \n                            \n                                    Public\n                                fetchOne\n                            \n                            \n                                    Public\n                                fetchOrCreate\n                            \n                            \n                                    Public\n                                modify\n                            \n                            \n                                    Public\n                                save\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySetSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:37\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: C)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:38\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        C\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            C\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(attrs: Partial, options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:91\n                \n            \n\n\n            \n                \n                    Create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        destroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy(key: EntityKey, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:138\n                \n            \n\n\n            \n                \n                    Delete an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entities\n                        \n                    \n                \n            \n            \n                \n                    \n                    entities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:21\n                \n            \n\n\n            \n                \n                    Get the entity set resource for this service.\n\n\n                    \n                        Returns :         ODataEntitySetResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity(key?: EntityKey)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:29\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntityResource\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchAll(options?: ODataOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:58\n                \n            \n\n\n            \n                \n                    Get all entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                ODataOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchMany\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchMany(options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:67\n                \n            \n\n\n            \n                \n                    Get entities from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOne(key: EntityKey, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:79\n                \n            \n\n\n            \n                \n                    Get an entity from the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        fetchOrCreate\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchOrCreate(key: EntityKey, attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:155\n                \n            \n\n\n            \n                \n                    Get or create an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        modify\n                        \n                    \n                \n            \n            \n                \n                    \n                    modify(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:122\n                \n            \n\n\n            \n                \n                    Patch an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        save\n                        \n                    \n                \n            \n            \n                \n                    \n                    save(attrs: Partial, undefined)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:175\n                \n            \n\n\n            \n                \n                    Save an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(key: EntityKey, attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:105\n                \n            \n\n\n            \n                \n                    Update an entity in the entity set.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The entity key.\n\n                                    \n                                \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:62\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:25\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:99\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySetSchema\n                    \n                \n\n                \n                    \n                        getentitySetSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/entity-set.ts:50\n                                \n                            \n                    \n                        \n                                The schema for the entity set.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import {\n  EntityKey,\n  ODataEntities,\n  ODataEntity,\n  ODataEntityResource,\n  ODataEntitySetResource,\n  ODataOptions,\n} from '../resources';\nimport { Observable, throwError } from 'rxjs';\n\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ODataCollection } from '../models/collection';\nimport { ODataEntityService } from './entity';\nimport { ODataModel } from '../models/model';\nimport { catchError } from 'rxjs/operators';\n\nexport class ODataEntitySetService extends ODataEntityService {\n  /**\n   * Get the entity set resource for this service.\n   */\n  public entities(): ODataEntitySetResource {\n    return this.client.entitySet(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(key?: EntityKey): ODataEntityResource {\n    return this.entities().entity(key);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M): void;\n  public attach>>(model: C): void;\n  public attach(model: any): void {\n    if (model instanceof ODataModel) {\n      model.attach(this.entities().entity());\n    } else if (model instanceof ODataCollection) {\n      model.attach(this.entities());\n    }\n  }\n\n  /**\n   * The schema for the entity set.\n   */\n  get entitySetSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Get all entities from the entity set.\n   * @param options The options for the request.\n   */\n  public fetchAll(options?: ODataOptions): Observable {\n    return this.entities().fetchAll(options);\n  }\n\n  /**\n   * Get entities from the entity set.\n   * @param withCount Get the count of the entities.\n   * @param options The options for the request.\n   */\n  public fetchMany(\n    options?: ODataOptions & { withCount?: boolean }\n  ): Observable> {\n    return this.entities().fetch(options);\n  }\n\n  /**\n   * Get an entity from the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOne(\n    key: EntityKey,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    return this.entity(key).fetch(options);\n  }\n\n  /**\n   * Create an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param options The options for the request.\n   */\n  public create(\n    attrs: Partial,\n    options?: ODataOptions\n  ): Observable> {\n    return this.entities().create(attrs, options);\n  }\n\n  /**\n   * Update an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey()) return throwError('Resource without key');\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public modify(\n    key: EntityKey,\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity(key);\n    if (!res.hasKey()) return throwError('Resource without key');\n    return res.modify(attrs, options);\n  }\n\n  /**\n   * Delete an entity in the entity set.\n   * @param key The entity key.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public destroy(\n    key: EntityKey,\n    options?: ODataOptions & { etag?: string }\n  ) {\n    const res = this.entity(key);\n    if (!res.hasKey()) return throwError('Resource without key');\n    return res.destroy(options);\n  }\n\n  //#region Shortcuts\n  /**\n   * Get or create an entity in the entity set.\n   * @param key The entity key.\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public fetchOrCreate(\n    key: EntityKey,\n    attrs: Partial,\n    { etag, ...options }: { etag?: string } & ODataOptions = {}\n  ): Observable> {\n    return this.fetchOne(key, { etag, ...options }).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 404) return this.create(attrs, options);\n        else return throwError(error);\n      })\n    );\n  }\n\n  /**\n   * Save an entity in the entity set.\n   * @param attrs The attributes for the entity.\n   * @param method The method to use.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public save(\n    attrs: Partial,\n    {\n      etag,\n      method,\n      ...options\n    }: {\n      etag?: string;\n      method?: 'create' | 'update' | 'modify';\n    } & ODataOptions = {}\n  ) {\n    let schema = this.structuredTypeSchema;\n    if (method === undefined && schema !== undefined && schema.isCompoundKey())\n      return throwError(\n        'Composite key require a specific method, use create/update/patch'\n      );\n    let key = schema && schema.resolveKey(attrs);\n    if (method === undefined) method = key !== undefined ? 'update' : 'create';\n    if ((method === 'update' || method === 'modify') && key === undefined)\n      return throwError(\"Can't update/patch entity without key\");\n    return method === 'create'\n      ? this.create(attrs, options)\n      : method === 'modify'\n      ? this.modify(key, attrs, { etag, ...options })\n      : this.update(key, attrs, { etag, ...options });\n  }\n  //#endregion\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEntityTypeKey.html":{"url":"classes/ODataEntityTypeKey.html","title":"class - ODataEntityTypeKey","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEntityTypeKey\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../utils';\nimport {\n  Parser,\n  StructuredTypeFieldConfig,\n  StructuredTypeConfig,\n  OptionsHelper,\n  NONE_PARSER,\n  StructuredTypeFieldOptions,\n  Options,\n} from '../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { COMPUTED } from '../constants';\nimport { ODataAnnotation } from '../schema/annotation';\nimport { raw } from '../resources/query';\nimport { ODataParserOptions } from '../options';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser implements Parser {\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string;\n  private parser: Parser;\n  default?: any;\n  maxLength?: number;\n  collection: boolean;\n  nullable: boolean;\n  navigation: boolean;\n  precision?: number;\n  scale?: number;\n  referentials: ODataReferential[];\n  annotations: ODataAnnotation[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.annotations = (field.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.collection = field.collection !== undefined ? field.collection : false;\n    this.nullable = field.nullable !== undefined ? field.nullable : true;\n    this.navigation = field.navigation !== undefined ? field.navigation : false;\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  /**\n   * Find an annotation inside the structured field type.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.findAnnotation((a) => a.term === COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed?.bool && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined)\n      this.default = this.deserialize(this.default, options);\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        'Edm.String',\n        'Edm.Date',\n        'Edm.TimeOfDay',\n        'Edm.DateTimeOffset',\n        'Edm.Guid',\n        'Edm.Binary',\n      ].indexOf(this.type) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === 'Edm.Date') schema.format = 'date';\n      else if (this.type === 'Edm.TimeOfDay') schema.format = 'time';\n      else if (this.type === 'Edm.DateTimeOffset') schema.format = 'date-time';\n      else if (this.type === 'Edm.Guid')\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === 'Edm.Binary') schema.contentEncoding = 'base64';\n      else if (this.type === 'Edm.String' && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      ['Edm.Int64', 'Edm.Int32', 'Edm.Int16', 'Edm.Byte', 'Edm.SByte'].indexOf(\n        this.type\n      ) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (['Edm.Decimal', 'Edm.Double'].indexOf(this.type) !== -1) {\n      schema.type = 'number';\n    } else if (['Edm.Boolean'].indexOf(this.type) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType.keys?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataStructuredTypeParser implements Parser {\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  keys?: ODataEntityTypeKey[];\n  fields: ODataStructuredTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this.keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    this.fields = Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).map(\n      ([name, config]) => new ODataStructuredTypeFieldParser(name, this, config)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  typeFor(name: string): string | undefined {\n    const field = this.fields.find((f) => f.name === name);\n    if (field === undefined && this.parent !== undefined)\n      return this.parent.typeFor(name);\n    return field !== undefined ? field.type : undefined;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.deserialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.serialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this.fields.forEach((f) => f.configure({ parserForType, options }));\n  }\n\n  resolveKey(value: any): any {\n    let key = this.parent?.resolveKey(value) || {};\n    if (Array.isArray(this.keys) && this.keys.length > 0) {\n      for (var k of this.keys) {\n        let v = value as any;\n        let structured = this as ODataStructuredTypeParser | undefined;\n        let field: ODataStructuredTypeFieldParser | undefined;\n        for (let name of k.name.split('/')) {\n          if (structured === undefined) break;\n          field = structured.fields.find((f) => f.name === name);\n          if (field !== undefined) {\n            v = Types.isPlainObject(v) ? v[field.name] : v;\n            structured = field.isStructuredType()\n              ? field.structured()\n              : undefined;\n          }\n        }\n        if (field !== undefined && v !== undefined) {\n          key[k.alias || field.name] = field.encode(v);\n        }\n      }\n    }\n    if (Types.isEmpty(key)) return undefined;\n    return Objects.resolveKey(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let value = this.parent?.defaults() || {};\n    let fields = this.fields.filter(\n      (f) => f.default !== undefined || f.isStructuredType()\n    );\n    return {\n      ...value,\n      ...fields.reduce((acc, f) => {\n        let value = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = this.parent?.toJsonSchema(options) || {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.name,\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields.filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = (this.parent?.validate(attrs, { method, navigation }) ||\n      {}) as { [name: string]: any };\n    const fields = this.fields.filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumType.html":{"url":"classes/ODataEnumType.html","title":"class - ODataEnumType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                parser\n                            \n                            \n                                schema\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                fields\n                            \n                            \n                                fieldTitle\n                            \n                            \n                                findAnnotation\n                            \n                            \n                                findFieldByName\n                            \n                            \n                                findFieldByValue\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                mapFields\n                            \n                            \n                                serialize\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    api\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, schema: ODataSchema)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schema\n                                                  \n                                                        \n                                                                        ODataSchema\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSchema\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/enum-type.ts:8\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:129\n                \n            \n\n\n            \n                \n                    Deseialize the given value from the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to deserialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for deserialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     E\n\n                    \n                    \n                        Deserialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: E, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:149\n                \n            \n\n\n            \n                \n                    Encode the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to encode\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for encoding\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Encoded value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n            \n                \nfields()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:66\n                \n            \n\n\n            \n                \n                    Returns the fields of the enum type.\n\n\n                    \n                    \n                    \n                        Returns :         ODataEnumTypeFieldParser[]\n\n                    \n                    \n                        The fields of the enum type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fieldTitle\n                        \n                    \n                \n            \n            \n                \nfieldTitle(value: number | string, pattern?: RegExp)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:94\n                \n            \n\n\n            \n                \n                    Find a title for a given value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            number | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value of the field\n\n                                    \n                                \n                                \n                                    pattern\n                                    \n                                            RegExp\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Pattern to use for find in annotations\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The name or annotation of the filed that matches with the value.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:58\n                \n            \n\n\n            \n                \n                    Find an annotation inside the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findFieldByName\n                        \n                    \n                \n            \n            \n                \nfindFieldByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:75\n                \n            \n\n\n            \n                \n                    Find a field by name.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The name of the field\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The field with the given name\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findFieldByValue\n                        \n                    \n                \n            \n            \n                \nfindFieldByValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:84\n                \n            \n\n\n            \n                \n                    Find a field by value.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value of the field\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The field with the given value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:41\n                \n            \n\n\n            \n                \n                    Returns a boolean indicating if the enum type is of the given type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        String representation of the type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        True if the callable is type of the given type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapFields\n                        \n                    \n                \n            \n            \n                \nmapFields(mapper: (field: ODataEnumTypeFieldParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:119\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Map the fields of the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    mapper\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that maps the value to the new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The fields mapped by the mapper\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: E, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:139\n                \n            \n\n\n            \n                \n                    Serialize the given value for the enum type.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            E\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to serialize\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options for serialization\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Serialized value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:32\n                \n            \n\n\n            \n                \n                    Returns a full type of the enum type including the namespace/alias.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The string representation of the type.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        api\n                    \n                \n\n                \n                    \n                        getapi()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/enum-type.ts:45\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { EnumTypeConfig, Options } from '../types';\nimport { ODataEnumTypeFieldParser, ODataEnumTypeParser } from '../parsers';\n\nimport { ODataAnnotation } from './annotation';\nimport { ODataSchema } from './schema';\n\nexport class ODataEnumType {\n  schema: ODataSchema;\n  name: string;\n  parser: ODataEnumTypeParser;\n  members: { [name: string]: number } | { [value: number]: string };\n  annotations: ODataAnnotation[];\n  constructor(config: EnumTypeConfig, schema: ODataSchema) {\n    this.schema = schema;\n    this.name = config.name;\n    this.members = config.members;\n    this.parser = new ODataEnumTypeParser(\n      config,\n      schema.namespace,\n      schema.alias\n    );\n    this.annotations = (config.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Returns a full type of the enum type including the namespace/alias.\n   * @param alias Use the alias of the namespace instead of the namespace.\n   * @returns The string representation of the type.\n   */\n  type({ alias = false }: { alias?: boolean } = {}) {\n    return `${alias ? this.schema.alias : this.schema.namespace}.${this.name}`;\n  }\n\n  /**\n   * Returns a boolean indicating if the enum type is of the given type.\n   * @param type String representation of the type\n   * @returns True if the callable is type of the given type\n   */\n  isTypeOf(type: string) {\n    return this.parser.isTypeOf(type);\n  }\n\n  get api() {\n    return this.schema.api;\n  }\n\n  configure() {\n    this.parser.configure({ options: this.api.options });\n  }\n\n  /**\n   * Find an annotation inside the enum type.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  /**\n   * Returns the fields of the enum type.\n   * @returns The fields of the enum type.\n   */\n  fields(): ODataEnumTypeFieldParser[] {\n    return this.parser.fields;\n  }\n\n  /**\n   * Find a field by name.\n   * @param name The name of the field\n   * @returns The field with the given name\n   */\n  findFieldByName(name: string) {\n    return this.fields().find((f) => f.name === name);\n  }\n\n  /**\n   * Find a field by value.\n   * @param value The value of the field\n   * @returns The field with the given value\n   */\n  findFieldByValue(value: number) {\n    return this.fields().find((f) => f.value === value);\n  }\n\n  /**\n   * Find a title for a given value.\n   * @param value Value of the field\n   * @param pattern Pattern to use for find in annotations\n   * @returns The name or annotation of the filed that matches with the value.\n   */\n  fieldTitle(value: number | string, pattern?: RegExp) {\n    const resolveTitle = (field?: ODataEnumTypeFieldParser) => {\n      if (field !== undefined) {\n        if (pattern !== undefined) {\n          const annotation = field.findAnnotation((a) => pattern.test(a.term));\n          if (annotation !== undefined && annotation.string !== undefined) {\n            return annotation.string;\n          }\n        }\n        return field.name;\n      }\n      return '';\n    };\n    if (typeof value === 'number') {\n      return resolveTitle(this.findFieldByValue(value));\n    } else {\n      return resolveTitle(this.findFieldByName(value));\n    }\n  }\n\n  /**\n   * Map the fields of the enum type.\n   * @param mapper Function that maps the value to the new value\n   * @returns The fields mapped by the mapper\n   */\n  mapFields(mapper: (field: ODataEnumTypeFieldParser) => T) {\n    return this.fields().map(mapper);\n  }\n\n  /**\n   * Deseialize the given value from the enum type.\n   * @param value Value to deserialize\n   * @param options Options for deserialization\n   * @returns Deserialized value\n   */\n  deserialize(value: any, options?: Options): E {\n    return this.parser.deserialize(value, options);\n  }\n\n  /**\n   * Serialize the given value for the enum type.\n   * @param value Value to serialize\n   * @param options Options for serialization\n   * @returns Serialized value\n   */\n  serialize(value: E, options?: Options): any {\n    return this.parser.serialize(value, options);\n  }\n\n  /**\n   * Encode the given value for the enum type.\n   * @param value Value to encode\n   * @param options Options for encoding\n   * @returns Encoded value\n   */\n  encode(value: E, options?: Options): any {\n    return this.parser.encode(value, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeFieldParser.html":{"url":"classes/ODataEnumTypeFieldParser.html","title":"class - ODataEnumTypeFieldParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeFieldParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/enum-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                annotations\n                            \n                            \n                                name\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAnnotation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, field: EnumTypeFieldConfig)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        EnumTypeFieldConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:31\n                \n            \n\n\n            \n                \n                    Find an annotation inside the enum field.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Enums } from '../utils';\nimport { raw } from '../resources/query';\nimport { ODataAnnotation } from '../schema/annotation';\nimport {\n  EnumTypeConfig,\n  Parser,\n  OptionsHelper,\n  EnumTypeFieldConfig,\n  Options,\n} from '../types';\nimport { ODataParserOptions } from '../options';\n\nexport class ODataEnumTypeFieldParser {\n  name: string;\n  value: number;\n  annotations: ODataAnnotation[];\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    this.name = name;\n    this.value = field.value;\n    this.annotations = (field.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Find an annotation inside the enum field.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n}\n\nexport class ODataEnumTypeParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: ODataEnumTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this.fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f)\n    );\n  }\n\n  configure({ options }: { options: OptionsHelper }) {\n    this.optionsHelper = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: Options): T {\n    // string -> number\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): string {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      const names = Enums.toNames(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      const name = Enums.toName(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const serialized = this.serialize(value, parserOptions);\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this.fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataEnumTypeParser.html":{"url":"classes/ODataEnumTypeParser.html","title":"class - ODataEnumTypeParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataEnumTypeParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/enum-type.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                fields\n                            \n                            \n                                    Optional\n                                flags\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                serialize\n                            \n                            \n                                toJsonSchema\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: EnumTypeConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:43\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        EnumTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumTypeFieldParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        flags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type | literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:43\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: string, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJsonSchema\n                        \n                    \n                \n            \n            \n                \ntoJsonSchema()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(member: string | number, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/enum-type.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    member\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     [] | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Enums } from '../utils';\nimport { raw } from '../resources/query';\nimport { ODataAnnotation } from '../schema/annotation';\nimport {\n  EnumTypeConfig,\n  Parser,\n  OptionsHelper,\n  EnumTypeFieldConfig,\n  Options,\n} from '../types';\nimport { ODataParserOptions } from '../options';\n\nexport class ODataEnumTypeFieldParser {\n  name: string;\n  value: number;\n  annotations: ODataAnnotation[];\n\n  constructor(name: string, field: EnumTypeFieldConfig) {\n    this.name = name;\n    this.value = field.value;\n    this.annotations = (field.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n  }\n\n  /**\n   * Find an annotation inside the enum field.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n}\n\nexport class ODataEnumTypeParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  flags?: boolean;\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: ODataEnumTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: EnumTypeConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.flags = config.flags;\n    this.members = config.members;\n    this.fields = Object.entries(config.fields).map(\n      ([name, f]) => new ODataEnumTypeFieldParser(name, f)\n    );\n  }\n\n  configure({ options }: { options: OptionsHelper }) {\n    this.optionsHelper = options;\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: string, options?: Options): T {\n    // string -> number\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      return Enums.toValues(this.members, value).reduce(\n        (acc, v) => acc | v,\n        0\n      ) as any;\n    } else {\n      return Enums.toValue(this.members, value) as any;\n    }\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): string {\n    // Enum are string | number\n    // string | number -> string\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.flags) {\n      const names = Enums.toNames(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${names.join(', ')}'`\n        : names.join(', ');\n    } else {\n      const name = Enums.toName(this.members, value);\n      return !parserOptions?.stringAsEnum\n        ? `${this.namespace}.${this.name}'${name}'`\n        : name;\n    }\n  }\n\n  //Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const serialized = this.serialize(value, parserOptions);\n    return parserOptions?.stringAsEnum\n      ? raw(`'${serialized}'`)\n      : raw(serialized);\n  }\n\n  // Json Schema\n  toJsonSchema() {\n    let property = {\n      title: this.name,\n      type: 'string',\n    };\n    property.enum = this.fields.map((f) => f.name);\n    return property;\n  }\n\n  validate(\n    member: string | number,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): string[] | undefined {\n    if (this.flags) {\n      let members = Enums.toValues(this.members, member);\n      return members.some((member) => !(member in this.members))\n        ? ['mismatch']\n        : undefined;\n    } else {\n      return !(member in this.members) ? ['mismatch'] : undefined;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInMemoryCache.html":{"url":"classes/ODataInMemoryCache.html","title":"class - ODataInMemoryCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInMemoryCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/memory.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                flush\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/memory.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:15\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:20\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:10\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:50\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:108\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:81\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:128\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:66\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { ODataRequest, ODataResponse } from '../resources';\n\nimport { ODataCache } from './cache';\n\nexport class ODataInMemoryCache extends ODataCache {\n  constructor({ timeout }: { timeout?: number } = {}) {\n    super({ timeout });\n  }\n\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    var scope = this.scope(req);\n    var tags = this.tags(req, res);\n    this.put(req.pathWithParams, res, {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    var scope = this.scope(req);\n    return this.get(req.pathWithParams, { scope });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataInStorageCache.html":{"url":"classes/ODataInStorageCache.html","title":"class - ODataInStorageCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataInStorageCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataCache\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                storage\n                            \n                            \n                                entries\n                            \n                            \n                                timeout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                flush\n                            \n                            \n                                getResponse\n                            \n                            \n                                putResponse\n                            \n                            \n                                restore\n                            \n                            \n                                store\n                            \n                            \n                                buildEntry\n                            \n                            \n                                buildKey\n                            \n                            \n                                forget\n                            \n                            \n                                get\n                            \n                            \n                                    Private\n                                handleFetch\n                            \n                            \n                                    Private\n                                handleMutate\n                            \n                            \n                                handleRequest\n                            \n                            \n                                isExpired\n                            \n                            \n                                put\n                            \n                            \n                                scope\n                            \n                            \n                                tags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Storage\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/cache/storage.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Map>\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataCache\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataCache:15\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        flush\n                        \n                    \n                \n            \n            \n                \nflush()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getResponse\n                        \n                    \n                \n            \n            \n                \ngetResponse(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:60\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        putResponse\n                        \n                    \n                \n            \n            \n                \nputResponse(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:50\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restore\n                        \n                    \n                \n            \n            \n                \nrestore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/cache/storage.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildEntry\n                        \n                    \n                \n            \n            \n                \nbuildEntry(payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:50\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataCacheEntry\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildKey\n                        \n                    \n                \n            \n            \n                \nbuildKey(names: string[])\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:62\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forget\n                        \n                    \n                \n            \n            \n                \nforget(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:89\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:81\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleFetch\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleFetch(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:128\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMutate\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMutate(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(req: ODataRequest, res$: Observable>)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:117\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res$\n                                    \n                                                Observable>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired(entry: ODataCacheEntry)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:113\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                ODataCacheEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(name: string, payload: T, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:66\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    payload\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scope\n                        \n                    \n                \n            \n            \n                \nscope(req: ODataRequest)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:26\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tags\n                        \n                    \n                \n            \n            \n                \ntags(req: ODataRequest, res: ODataResponse)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataCache\n\n                \n            \n            \n                \n                        Defined in         ODataCache:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                ODataResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataCache, ODataCacheEntry } from './cache';\nimport { ODataRequest, ODataResponse } from '../resources';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries()))\n    );\n  }\n\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]')\n    );\n  }\n\n  flush() {\n    super.flush();\n    this.store();\n  }\n\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(req, res);\n    this.put(req.pathWithParams, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.pathWithParams, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ODataModule.html":{"url":"modules/ODataModule.html","title":"module - ODataModule","body":"\n                   \n\n\n\n\n    Modules\n    ODataModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/angular-odata/src/lib/module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ODataClient\n                        \n                        \n                            ODataServiceFactory\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(configs: ApiConfig[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/module.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configs\n                                    \n                                                ApiConfig[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { ApiConfig } from './types';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ODATA_CONFIGURATIONS } from './tokens';\nimport { ODataClient } from './client';\nimport { ODataServiceFactory } from './services/index';\nimport { ODataSettings } from './settings';\n\nexport function createSettings(configs: ApiConfig[]) {\n  return new ODataSettings(...configs);\n}\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [ODataClient, ODataServiceFactory],\n})\nexport class ODataModule {\n  public static forRoot(\n    ...configs: ApiConfig[]\n  ): ModuleWithProviders {\n    return {\n      ngModule: ODataModule,\n      providers: [\n        { provide: ODATA_CONFIGURATIONS, useValue: configs },\n        {\n          provide: ODataSettings,\n          useFactory: createSettings,\n          deps: [ODATA_CONFIGURATIONS],\n        },\n        ODataClient,\n        ODataServiceFactory,\n      ],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataParameterParser.html":{"url":"classes/ODataParameterParser.html","title":"class - ODataParameterParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataParameterParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/callable.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                collection\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                nullable\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                            \n                                    Private\n                                parser\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                encode\n                            \n                            \n                                enum\n                            \n                            \n                                isEdmType\n                            \n                            \n                                isEnumType\n                            \n                            \n                                isStructuredType\n                            \n                            \n                                serialize\n                            \n                            \n                                structured\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, parameter: Parameter)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parameter\n                                                  \n                                                        \n                                                                        Parameter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        collection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        nullable\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Parser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/callable.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enum\n                        \n                    \n                \n            \n            \n                \nenum()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEdmType\n                        \n                    \n                \n            \n            \n                \nisEdmType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnumType\n                        \n                    \n                \n            \n            \n                \nisEnumType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isStructuredType\n                        \n                    \n                \n            \n            \n                \nisStructuredType()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        structured\n                        \n                    \n                \n            \n            \n                \nstructured()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/callable.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CallableConfig,\n  NONE_PARSER,\n  Options,\n  OptionsHelper,\n  Parameter,\n  Parser,\n} from '../types';\n\nimport { CALLABLE_BINDING_PARAMETER } from '../constants';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { ODataParserOptions } from '../options';\nimport { ODataStructuredTypeParser } from './structured-type';\n\nexport class ODataParameterParser {\n  name: string;\n  type: string;\n  private parser: Parser;\n  collection?: boolean;\n  nullable?: boolean;\n  optionsHelper?: OptionsHelper;\n\n  constructor(name: string, parameter: Parameter) {\n    this.name = name;\n    this.type = parameter.type;\n    this.parser = NONE_PARSER;\n    this.nullable = parameter.nullable;\n    this.collection = parameter.collection;\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.serialize(v, parserOptions))\n      : this.parser.serialize(value, parserOptions);\n  }\n\n  //Encode\n  encode(value: any, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return Array.isArray(value)\n      ? value.map((v) => this.parser.encode(v, parserOptions))\n      : this.parser.encode(value, parserOptions);\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataCallableParser implements Parser {\n  name: string;\n  namespace: string;\n  alias?: string;\n  return?: { type: string; collection?: boolean };\n  parser: Parser;\n  parameters: ODataParameterParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(config: CallableConfig, namespace: string, alias?: string) {\n    this.name = config.name;\n    this.namespace = namespace;\n    this.alias = alias;\n    this.return = config.return;\n    this.parser = NONE_PARSER;\n    this.parameters = Object.entries(config.parameters || []).map(\n      ([name, p]) => new ODataParameterParser(name, p as Parameter)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): R {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.deserialize(value, parserOptions);\n  }\n\n  // Serialize\n  serialize(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.serialize(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  //Encode\n  encode(params: any, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    const parameters = this.parameters\n      .filter((p) => p.name !== CALLABLE_BINDING_PARAMETER)\n      .filter((p) => p.name in params && params[p.name] !== undefined);\n    return parameters.reduce(\n      (acc, p) => ({\n        ...acc,\n        [p.name]: p.encode(params[p.name], parserOptions),\n      }),\n      {}\n    );\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.return)\n      this.parser = parserForType(this.return.type) || NONE_PARSER;\n    this.parameters.forEach((p) => p.configure({ parserForType, options }));\n  }\n\n  binding() {\n    return this.parameters.find((p) => p.name === CALLABLE_BINDING_PARAMETER);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataParserOptions.html":{"url":"classes/ODataParserOptions.html","title":"class - ODataParserOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataParserOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            OptionsHelper\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                stringAsEnum\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: Options)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/options.ts:111\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        Options\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/options.ts:110\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/options.ts:118\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  ApiOptions,\n  FetchPolicy,\n  ODataMetadataType,\n  ODataVersion,\n  Options,\n  OptionsHelper,\n  QueryOptionNames,\n} from './types';\nimport {\n  DEFAULT_FETCH_POLICY,\n  DEFAULT_STRIP_METADATA,\n  DEFAULT_VERSION,\n} from './constants';\n\nimport { ODataHelper } from './helper';\n\nexport class ODataApiOptions implements ApiOptions, OptionsHelper {\n  /**\n   * Default OData version\n   */\n  version: ODataVersion;\n  /**\n   * Send enum as string in the request\n   */\n  stringAsEnum?: boolean;\n  /**\n   * Strip metadata from the response\n   */\n  stripMetadata: ODataMetadataType;\n  /**\n   * Cache fetch policy\n   */\n  fetchPolicy: FetchPolicy;\n  /**\n   * Extra params to be sent in the request\n   */\n  params: { [param: string]: string | string[] };\n  /**\n   * Extra headers to be sent in the request\n   */\n  headers: { [param: string]: string | string[] };\n  /**\n   * Http request with credentials\n   */\n  withCredentials?: boolean;\n  /**\n   * Send query options in the request body\n   */\n  bodyQueryOptions: QueryOptionNames[];\n  /**\n   * Customize accept header with OData options\n   * @link http://docs.oasis-open.org/odata/odata-json-format/v4.01/odata-json-format-v4.01.html#sec_RequestingtheJSONFormat\n   */\n  accept?: {\n    exponentialDecimals?: boolean;\n    ieee754Compatible?: boolean;\n    metadata?: ODataMetadataType;\n    streaming?: boolean;\n  };\n  etag: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398229\n     */\n    ifMatch: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398230\n     */\n    ifNoneMatch: boolean;\n  } = { ifMatch: true, ifNoneMatch: false };\n  prefer?: {\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398238\n     */\n    maxPageSize?: number;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398240\n     */\n    return?: 'representation' | 'minimal';\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398236\n     */\n    continueOnError?: boolean;\n    /**\n     * @link http://docs.oasis-open.org/odata/odata/v4.0/errata02/os/complete/part1-protocol/odata-v4.0-errata02-os-part1-protocol-complete.html#_Toc406398237\n     */\n    includeAnnotations?: string;\n  };\n\n  constructor(config: ApiOptions) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n    this.params = config.params || {};\n    this.headers = config.headers || {};\n    this.withCredentials = config.withCredentials;\n    this.stripMetadata = config.stripMetadata || DEFAULT_STRIP_METADATA;\n    this.fetchPolicy = config.fetchPolicy || DEFAULT_FETCH_POLICY;\n    this.bodyQueryOptions = config.bodyQueryOptions || [];\n    this.accept = config.accept;\n    Object.assign(this.etag, config.etag || {});\n    this.prefer = config.prefer;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\nexport class ODataParserOptions implements OptionsHelper {\n  version: ODataVersion;\n  stringAsEnum?: boolean;\n\n  constructor(config: Options) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegments.html":{"url":"classes/ODataPathSegments.html","title":"class - ODataPathSegments","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegments\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/segments.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _segments\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                clone\n                            \n                            \n                                find\n                            \n                            \n                                first\n                            \n                            \n                                get\n                            \n                            \n                                keys\n                            \n                            \n                                last\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                segments\n                            \n                            \n                                toJSON\n                            \n                            \n                                toString\n                            \n                            \n                                types\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments?: ODataSegment[])\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataSegment[]\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        _segments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataSegment[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/path/segments.ts:46\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(name: string, path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPathSegments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        find\n                        \n                    \n                \n            \n            \n                \nfind(predicate: (segment: ODataSegment) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        first\n                        \n                    \n                \n            \n            \n                \nfirst(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        last\n                        \n                    \n                \n            \n            \n                \nlast(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:52\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        segments\n                        \n                    \n                \n            \n            \n                \nsegments(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        types\n                        \n                    \n                \n            \n            \n                \ntypes(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/segments.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { raw, buildPathAndQuery } from '../query';\n\nimport { Types, Dates, Objects } from '../../utils';\n\nimport { PATH_SEPARATOR } from '../../constants';\nimport { EntityKey } from '../resource';\nimport { PathSegmentNames } from '../../types';\nimport { SegmentHandler } from './handlers';\n\nexport type ODataSegment = {\n  name: PathSegmentNames;\n  path: string;\n  type?: string;\n  key?: any;\n  parameters?: any;\n};\n\nfunction pathSegmentsBuilder(\n  segment: ODataSegment\n): [string, { [name: string]: any }] {\n  if (segment.name === PathSegmentNames.function) {\n    let [path, params] = segment.parameters\n      ? buildPathAndQuery({ func: { [segment.path]: segment.parameters } })\n      : buildPathAndQuery({ func: segment.path });\n    if (path.startsWith(PATH_SEPARATOR)) {\n      path = path.slice(1);\n    }\n    return [path, params];\n  } else {\n    let key = segment.key;\n    // HACK: Check guid string\n    if (\n      typeof key === 'string' &&\n      /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(\n        key\n      )\n    ) {\n      key = raw(key);\n    }\n    let [path, params] = key ? buildPathAndQuery({ key }) : ['', {}];\n    return [segment.path + path, params];\n  }\n}\n\nexport class ODataPathSegments {\n  private _segments: ODataSegment[];\n\n  constructor(segments?: ODataSegment[]) {\n    this._segments = segments || [];\n  }\n\n  pathAndParams(): [string, { [name: string]: any }] {\n    const result = this._segments.reduce(\n      (acc, segment) => {\n        const [path, params] = pathSegmentsBuilder(segment);\n        acc.paths.push(path);\n        acc.params = Object.assign(acc.params, params);\n        return acc;\n      },\n      { paths: [] as string[], params: {} as { [name: string]: any } }\n    );\n    return [result.paths.join(PATH_SEPARATOR), result.params];\n  }\n\n  types({ key = false }: { key?: boolean } = {}): string[] {\n    return this.segments({ key })\n      .map((s) => s.type())\n      .filter((t) => t !== undefined) as string[];\n  }\n\n  keys(values?: (EntityKey | undefined)[]) {\n    const segments = this.segments({ key: true });\n    if (values !== undefined) {\n      segments.forEach((segment, index) => {\n        const key = values[index];\n        if (key === undefined) {\n          segment.clearKey();\n        } else {\n          segment.key(key);\n        }\n      });\n    }\n    return segments.map((s) => s.key() as EntityKey | undefined);\n  }\n\n  toString(): string {\n    const [path, params] = this.pathAndParams();\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => value)\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return this._segments.map((s) => {\n      let json = {\n        name: s.name as string,\n        path: s.path,\n      } as any;\n      if (s.type !== undefined) json.type = s.type;\n      if (s.key !== undefined) json.key = s.key;\n      if (s.parameters !== undefined) json.parameters = s.parameters;\n      return json;\n    });\n  }\n\n  clone() {\n    const segments = Objects.clone(this._segments);\n    return new ODataPathSegments(segments);\n  }\n\n  find(predicate: (segment: ODataSegment) => boolean) {\n    //Backward Find\n    return [...this._segments].reverse().find(predicate);\n  }\n\n  segments({ key = false }: { key?: boolean } = {}) {\n    let segments = [...this._segments];\n    if (key)\n      segments = segments.filter(\n        (s) =>\n          [\n            PathSegmentNames.entitySet,\n            PathSegmentNames.navigationProperty,\n            PathSegmentNames.property,\n          ].indexOf(s.name) !== -1\n      );\n    return segments.map((s) => new SegmentHandler(s));\n  }\n\n  first({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[0] : undefined;\n  }\n\n  last({ key = false }: { key?: boolean } = {}) {\n    const segments = this.segments({ key });\n    return segments.length > 0 ? segments[segments.length - 1] : undefined;\n  }\n\n  add(name: string, path: string) {\n    const segment = { name, path } as ODataSegment;\n    this._segments.push(segment);\n    return new SegmentHandler(segment);\n  }\n\n  get(name: string) {\n    let segment = this.find((s) => s.name === name);\n    if (segment === undefined)\n      throw Error(`No Segment for name ${name} was found`);\n    return new SegmentHandler(segment);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPathSegmentsHandler.html":{"url":"classes/ODataPathSegmentsHandler.html","title":"class - ODataPathSegmentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPathSegmentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                action\n                            \n                            \n                                entitySet\n                            \n                            \n                                function\n                            \n                            \n                                keys\n                            \n                            \n                                navigationProperty\n                            \n                            \n                                property\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segments: ODataPathSegments)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segments\n                                                  \n                                                        \n                                                                        ODataPathSegments\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        action\n                        \n                    \n                \n            \n            \n                \naction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        function\n                        \n                    \n                \n            \n            \n                \nfunction()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n            \n                \nkeys(values?: (EntityKey | undefined)[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                                (EntityKey | undefined)[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigationProperty\n                        \n                    \n                \n            \n            \n                \nnavigationProperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PathSegmentNames } from '../../types';\nimport { Types } from '../../utils';\n\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegmentNames.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegmentNames.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegmentNames.action);\n  }\n  function() {\n    return this.segments.get(PathSegmentNames.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegmentNames.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegmentNames.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataPropertyAnnotations.html":{"url":"classes/ODataPropertyAnnotations.html","title":"class - ODataPropertyAnnotations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataPropertyAnnotations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/annotations.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ODataAnnotations\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                helper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                data\n                            \n                            \n                                attributes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        helper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersionHelper\n\n                    \n                \n                        \n                            \n                                Inherited from         ODataAnnotations\n\n                            \n                        \n                    \n                        \n                                Defined in         ODataAnnotations:7\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataPropertyAnnotations\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n            \n                \ndata(data: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attributes\n                        \n                    \n                \n            \n            \n                \nattributes(data: literal type, metadata: ODataMetadataType)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataAnnotations\n\n                \n            \n            \n                \n                        Defined in         ODataAnnotations:12\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                                ODataMetadataType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ODataContext, ODataVersionHelper } from '../../helper';\n\nimport { ODataMetadataType } from '../../types';\n\nexport abstract class ODataAnnotations {\n  constructor(\n    public helper: ODataVersionHelper,\n    protected annotations: { [annot: string]: any } = {},\n    protected context?: ODataContext\n  ) {}\n\n  attributes(data: { [name: string]: any }, metadata: ODataMetadataType): T {\n    return this.helper.attributes(data, metadata) as T;\n  }\n\n  get entitySet() {\n    return this.context?.entitySet;\n  }\n\n  get type() {\n    return this.helper.type(this.annotations) || this.context?.type;\n  }\n\n  // Method\n  abstract clone(): ODataAnnotations;\n  abstract data(data: { [name: string]: any }): { [name: string]: any };\n}\n\nexport class ODataPropertyAnnotations extends ODataAnnotations {\n  clone(): ODataPropertyAnnotations {\n    return new ODataPropertyAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.property(data);\n  }\n}\n\nexport class ODataEntityAnnotations extends ODataAnnotations {\n  clone(): ODataEntityAnnotations {\n    return new ODataEntityAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entity(data);\n  }\n\n  get id() {\n    return this.helper.id(this.annotations);\n  }\n\n  get etag() {\n    return this.helper.etag(this.annotations);\n  }\n\n  get mediaEtag() {\n    return this.helper.mediaEtag(this.annotations);\n  }\n\n  get metadataEtag() {\n    return this.helper.metadataEtag(this.annotations);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get editLink() {\n    return this.helper.editLink(this.annotations);\n  }\n\n  get mediaReadLink() {\n    return this.helper.mediaReadLink(this.annotations);\n  }\n\n  get mediaEditLink() {\n    return this.helper.mediaEditLink(this.annotations);\n  }\n\n  get mediaContentType() {\n    return this.helper.mediaContentType(this.annotations);\n  }\n\n  private _properties?: { [name: string]: any };\n  get properties() {\n    if (this._properties === undefined) {\n      this._properties = this.helper.properties(this.annotations);\n    }\n    return this._properties;\n  }\n\n  property(name: string) {\n    return this.properties[name];\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\nexport class ODataEntitiesAnnotations extends ODataAnnotations {\n  clone(): ODataEntitiesAnnotations {\n    return new ODataEntitiesAnnotations(\n      this.helper,\n      { ...this.annotations },\n      this.context\n    );\n  }\n\n  data(data: { [name: string]: any }) {\n    return this.helper.entities(data);\n  }\n\n  get readLink() {\n    return this.helper.readLink(this.annotations);\n  }\n\n  get count() {\n    return this.helper.count(this.annotations);\n  }\n\n  get nextLink() {\n    return this.helper.nextLink(this.annotations);\n  }\n\n  get deltaLink() {\n    return this.helper.deltaLink(this.annotations);\n  }\n\n  get top() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$top=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skip() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skip=(\\d+)/);\n    return match !== null ? Number(match[1]) : undefined;\n  }\n\n  get skiptoken() {\n    let match = (this.nextLink || '').match(/[&?]{1}\\$skiptoken=([\\d\\w\\s']+)/);\n    return match !== null ? match[1] : undefined;\n  }\n\n  private _functions?: { [name: string]: any };\n  get functions() {\n    if (this._functions === undefined) {\n      this._functions = this.helper.functions(this.annotations);\n    }\n    return this._functions;\n  }\n  function(name: string) {\n    return this.functions[name];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptionHandler.html":{"url":"classes/ODataQueryOptionHandler.html","title":"class - ODataQueryOptionHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptionHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                assertArray\n                            \n                            \n                                    Private\n                                assertObject\n                            \n                            \n                                assign\n                            \n                            \n                                at\n                            \n                            \n                                clear\n                            \n                            \n                                empty\n                            \n                            \n                                get\n                            \n                            \n                                has\n                            \n                            \n                                push\n                            \n                            \n                                remove\n                            \n                            \n                                set\n                            \n                            \n                                toJSON\n                            \n                            \n                                unset\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(o: literal type, n: QueryOptionNames)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        o\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        n\n                                                  \n                                                        \n                                                                        QueryOptionNames\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertArray()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     any[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        assertObject\n                        \n                    \n                \n            \n            \n                \n                    \n                    assertObject(create: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    create\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        assign\n                        \n                    \n                \n            \n            \n                \nassign(values: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    values\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        at\n                        \n                    \n                \n            \n            \n                \nat(index: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        empty\n                        \n                    \n                \n            \n            \n                \nempty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(path: string, def?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    def\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        push\n                        \n                    \n                \n            \n            \n                \npush(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(path: string, value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unset\n                        \n                    \n                \n            \n            \n                \nunset(path: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue(v?: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/handlers.ts:14\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Objects, Types } from '../../utils';\nimport { alias, Expand, Filter, OrderBy, Select, Transform } from './builder';\n\nimport { QueryOptionNames } from '../../types';\nimport { Expression } from './expressions';\nimport type { ODataQueryArguments, ODataQueryOptions } from './options';\n\nexport class ODataQueryOptionHandler {\n  constructor(\n    private o: { [name: string]: any },\n    private n: QueryOptionNames\n  ) {}\n\n  get name() {\n    return this.n;\n  }\n\n  toJSON() {\n    return this.o[this.n];\n  }\n\n  empty() {\n    return Types.isEmpty(this.o[this.n]);\n  }\n\n  //#region Primitive Value\n  value(v?: any) {\n    return (v !== undefined && (this.o[this.n] = v)) || this.o[this.n];\n  }\n  //#endregion\n\n  //#region Array Value\n  private assertArray(): any[] {\n    if (!Types.isArray(this.o[this.n]))\n      this.o[this.n] = this.o[this.n] !== undefined ? [this.o[this.n]] : [];\n    return this.o[this.n];\n  }\n\n  push(value: any) {\n    this.assertArray().push(value);\n  }\n\n  remove(value: any) {\n    this.o[this.n] = this.assertArray().filter((v) => v !== value);\n    // If only one... down to value\n    if (this.o[this.n].length === 1) this.o[this.n] = this.o[this.n][0];\n  }\n\n  at(index: number) {\n    return this.assertArray()[index];\n  }\n  //#endregion\n\n  //#region HashMap Value\n  private assertObject(create: boolean): { [name: string]: any } {\n    if (!Types.isArray(this.o[this.n]) && Types.isPlainObject(this.o[this.n])) {\n      return this.o[this.n];\n    }\n    let arr = this.assertArray();\n    let obj = arr.find((v) => Types.isPlainObject(v));\n    if (!obj && create) {\n      obj = {};\n      arr.push(obj);\n    }\n    return obj;\n  }\n\n  set(path: string, value: any) {\n    let obj = this.assertObject(true);\n    Objects.set(obj, path, value);\n  }\n\n  get(path: string, def?: any): any {\n    let obj = this.assertObject(false) || {};\n    return Objects.get(obj, path, def);\n  }\n\n  unset(path: string) {\n    let obj = this.assertObject(true);\n    Objects.unset(obj, path);\n\n    if (Types.isArray(this.o[this.n])) {\n      this.o[this.n] = this.o[this.n].filter((v: any) => !Types.isEmpty(v));\n      if (this.o[this.n].length === 1) this.o[this.n] = this.o[this.n][0];\n    }\n  }\n\n  has(path: string) {\n    let obj = this.assertObject(false) || {};\n    return Objects.has(obj, path);\n  }\n\n  assign(values: { [attr: string]: any }) {\n    let obj = this.assertObject(true);\n    return Objects.merge(obj, values);\n  }\n  //#endregion\n\n  clear() {\n    delete this.o[this.n];\n  }\n}\n\nexport class ODataQueryOptionsHandler {\n  constructor(protected options: ODataQueryOptions) {}\n\n  /**\n   * Create a new odata alias parameter\n   * @link https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_ParameterAliases\n   * @param value The value of the alias\n   * @param name The name of the alias\n   * @returns The alias\n   */\n  alias(value: any, name?: string) {\n    return alias(value, name);\n  }\n\n  select(opts: Select): ODataQueryOptionHandler;\n  select(): ODataQueryOptionHandler;\n  select(opts?: Select): any {\n    return this.options.option>(QueryOptionNames.select, opts);\n  }\n\n  expand(opts: Expand): ODataQueryOptionHandler;\n  expand(): ODataQueryOptionHandler;\n  expand(opts?: Expand): any {\n    return this.options.option>(QueryOptionNames.expand, opts);\n  }\n\n  /**\n   * Url: https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptioncompute\n   */\n  compute(\n    opts: (e: {\n      e: Expression;\n      and: Expression;\n      or: Expression;\n      not: typeof Expression.not;\n    }) => Expression\n  ): Expression;\n  compute(opts: string): ODataQueryOptionHandler;\n  compute(): ODataQueryOptionHandler;\n  compute(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.compute,\n        opts({\n          e: () => Expression.e(),\n          and: () => Expression.and(),\n          or: () => Expression.or(),\n          not: (e: Expression) => Expression.not(e),\n        }) as Expression\n      );\n    }\n    return this.options.option(QueryOptionNames.compute, opts);\n  }\n\n  /**\n   * Url: https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part2-url-conventions.html#sec_SystemQueryOptionformat\n   */\n  format(opts: string): ODataQueryOptionHandler;\n  format(): ODataQueryOptionHandler;\n  format(opts?: string): any {\n    return this.options.option(QueryOptionNames.format, opts);\n  }\n\n  transform(opts: Transform): ODataQueryOptionHandler;\n  transform(): ODataQueryOptionHandler;\n  transform(opts?: Transform): any {\n    return this.options.option>(QueryOptionNames.transform, opts);\n  }\n\n  search(opts: string): ODataQueryOptionHandler;\n  search(): ODataQueryOptionHandler;\n  search(opts?: string): any {\n    return this.options.option(QueryOptionNames.search, opts);\n  }\n\n  filter(\n    opts: (e: {\n      e: () => Expression;\n      and: () => Expression;\n      or: () => Expression;\n      not: (e: Expression) => Expression;\n    }) => Expression\n  ): Expression;\n  filter(opts: Filter): ODataQueryOptionHandler;\n  filter(): ODataQueryOptionHandler;\n  filter(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.filter,\n        opts({\n          e: () => Expression.e(),\n          and: () => Expression.and(),\n          or: () => Expression.or(),\n          not: (e: Expression) => Expression.not(e),\n        }) as Expression\n      );\n    }\n    return this.options.option>(QueryOptionNames.filter, opts);\n  }\n\n  orderBy(\n    opts: (e: {\n      e: () => Expression;\n      and: () => Expression;\n      or: () => Expression;\n      not: (e: Expression) => Expression;\n    }) => Expression\n  ): Expression;\n  orderBy(opts: OrderBy): ODataQueryOptionHandler;\n  orderBy(): ODataQueryOptionHandler;\n  orderBy(opts?: any): any {\n    if (Types.isFunction(opts)) {\n      return this.options.expression(\n        QueryOptionNames.orderBy,\n        opts({\n          e: () => Expression.e(),\n          and: () => Expression.and(),\n          or: () => Expression.or(),\n          not: (e: Expression) => Expression.not(e),\n        }) as Expression\n      );\n    }\n    return this.options.option>(QueryOptionNames.orderBy, opts);\n  }\n\n  top(opts: number): ODataQueryOptionHandler;\n  top(): ODataQueryOptionHandler;\n  top(opts?: number): any {\n    return this.options.option(QueryOptionNames.top, opts);\n  }\n\n  skip(opts: number): ODataQueryOptionHandler;\n  skip(): ODataQueryOptionHandler;\n  skip(opts?: number): any {\n    return this.options.option(QueryOptionNames.skip, opts);\n  }\n\n  skiptoken(opts: string): ODataQueryOptionHandler;\n  skiptoken(): ODataQueryOptionHandler;\n  skiptoken(opts?: string): any {\n    return this.options.option(QueryOptionNames.skiptoken, opts);\n  }\n\n  paging({\n    skip,\n    skiptoken,\n    top,\n  }: { skip?: number; skiptoken?: string; top?: number } = {}) {\n    if (skiptoken !== undefined) this.skiptoken(skiptoken);\n    else if (skip !== undefined) this.skip(skip);\n    if (top !== undefined) this.top(top);\n  }\n\n  clearPaging() {\n    this.skip().clear();\n    this.top().clear();\n    this.skiptoken().clear();\n  }\n\n  apply(query: ODataQueryArguments) {\n    if (query.select !== undefined) {\n      this.select(query.select);\n    }\n    if (query.expand !== undefined) {\n      this.expand(query.expand);\n    }\n    if (query.transform !== undefined) {\n      this.transform(query.transform);\n    }\n    if (query.search !== undefined) {\n      this.search(query.search);\n    }\n    if (query.filter !== undefined) {\n      this.filter(query.filter);\n    }\n    if (query.orderBy !== undefined) {\n      this.orderBy(query.orderBy);\n    }\n    this.paging(query);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataQueryOptions.html":{"url":"classes/ODataQueryOptions.html","title":"class - ODataQueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataQueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/options.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                clone\n                            \n                            \n                                expression\n                            \n                            \n                                has\n                            \n                            \n                                keep\n                            \n                            \n                                option\n                            \n                            \n                                pathAndParams\n                            \n                            \n                                remove\n                            \n                            \n                                toJSON\n                            \n                            \n                                toQueryArguments\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options?: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/query/options.ts:32\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:102\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Returns :         ODataQueryOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expression\n                        \n                    \n                \n            \n            \n                \nexpression(name: QueryOptionNames, exp: Expression)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exp\n                                    \n                                                Expression\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        has\n                        \n                    \n                \n            \n            \n                \nhas(name: QueryOptionNames)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keep\n                        \n                    \n                \n            \n            \n                \nkeep(names: QueryOptionNames[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                                QueryOptionNames[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        option\n                        \n                    \n                \n            \n            \n                \noption(name: QueryOptionNames, opts?: O)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:119\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        O\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                QueryOptionNames\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    opts\n                                    \n                                            O\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pathAndParams\n                        \n                    \n                \n            \n            \n                \npathAndParams()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:39\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(names: QueryOptionNames[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    names\n                                    \n                                                QueryOptionNames[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toQueryArguments\n                        \n                    \n                \n            \n            \n                \ntoQueryArguments()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataQueryArguments\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/options.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../../utils';\nimport {\n  Expand,\n  Filter,\n  OrderBy,\n  Select,\n  Transform,\n  buildPathAndQuery,\n  QueryCustomType,\n  alias,\n} from './builder';\n\nimport { QueryOptionNames } from '../../types';\nimport { ODataQueryOptionHandler } from './handlers';\nimport { Expression } from './expressions';\n\nexport type ODataQueryArguments = {\n  [QueryOptionNames.select]?: Select;\n  [QueryOptionNames.filter]?: Filter;\n  [QueryOptionNames.search]?: string;\n  [QueryOptionNames.compute]?: string;\n  [QueryOptionNames.transform]?: Transform;\n  [QueryOptionNames.orderBy]?: OrderBy;\n  [QueryOptionNames.top]?: number;\n  [QueryOptionNames.skip]?: number;\n  [QueryOptionNames.skiptoken]?: string;\n  [QueryOptionNames.expand]?: Expand;\n  [QueryOptionNames.format]?: string;\n};\n\nexport class ODataQueryOptions {\n  options: { [name: string]: any };\n\n  constructor(options?: { [name: string]: any }) {\n    this.options = options || {};\n  }\n\n  // Params\n  pathAndParams(): [string, { [name: string]: any }] {\n    let aliases: QueryCustomType[] = [];\n    let options = [\n      QueryOptionNames.select,\n      QueryOptionNames.filter,\n      QueryOptionNames.search,\n      QueryOptionNames.compute,\n      QueryOptionNames.transform,\n      QueryOptionNames.orderBy,\n      QueryOptionNames.top,\n      QueryOptionNames.skip,\n      QueryOptionNames.skiptoken,\n      QueryOptionNames.expand,\n      QueryOptionNames.format,\n    ]\n      .filter((key) => !Types.isEmpty(this.options[key]))\n      .reduce((acc, key) => {\n        let value = this.options[key];\n        if (Types.rawType(value) === 'Expression') {\n          value = value.render(aliases);\n        }\n        return Object.assign(acc, { [key]: value });\n      }, {});\n\n    return buildPathAndQuery({ ...options, aliases });\n  }\n\n  toString(): string {\n    const [path, params] = this.pathAndParams();\n    return (\n      path +\n      Object.entries(params)\n        .filter(([, value]) => !Types.isEmpty(value))\n        .map(([key, value]) => `${key}=${value}`)\n        .join('&')\n    );\n  }\n\n  toJSON() {\n    return Object.keys(this.options).reduce((acc, key) => {\n      let value = this.options[key];\n      if (Types.rawType(value) === 'Expression') {\n        value = value.toJSON();\n      }\n      return Object.assign(acc, { [key]: value });\n    }, {});\n  }\n\n  toQueryArguments(): ODataQueryArguments {\n    return {\n      select: this.options[QueryOptionNames.select],\n      expand: this.options[QueryOptionNames.expand],\n      transform: this.options[QueryOptionNames.transform],\n      compute: this.options[QueryOptionNames.compute],\n      search: this.options[QueryOptionNames.search],\n      filter: this.options[QueryOptionNames.filter],\n      orderBy: this.options[QueryOptionNames.orderBy],\n      top: this.options[QueryOptionNames.top],\n      skip: this.options[QueryOptionNames.skip],\n      skiptoken: this.options[QueryOptionNames.skiptoken],\n    } as ODataQueryArguments;\n  }\n\n  clone() {\n    const options = Object.keys(this.options).reduce((acc, key) => {\n      let value = this.options[key];\n      if (Types.rawType(value) !== 'Expression') {\n        value = Objects.clone(value);\n      }\n      return Object.assign(acc, { [key]: value });\n    }, {});\n    return new ODataQueryOptions(options);\n  }\n\n  // Set Expression\n  expression(name: QueryOptionNames, exp: Expression) {\n    return (this.options[name] = exp);\n  }\n\n  // Option Handler\n  option(name: QueryOptionNames, opts?: O) {\n    if (opts !== undefined) this.options[name] = opts;\n    return new ODataQueryOptionHandler(this.options, name);\n  }\n\n  // Query Options tools\n  has(name: QueryOptionNames) {\n    return this.options[name] !== undefined;\n  }\n\n  remove(...names: QueryOptionNames[]) {\n    names.forEach((name) => this.option(name).clear());\n  }\n\n  keep(...names: QueryOptionNames[]) {\n    this.options = Object.keys(this.options)\n      .filter((k) => names.indexOf(k as QueryOptionNames) !== -1)\n      .reduce((acc, k) => Object.assign(acc, { [k]: this.options[k] }), {});\n  }\n\n  // Clear\n  clear() {\n    this.options = {};\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataReferential.html":{"url":"classes/ODataReferential.html","title":"class - ODataReferential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataReferential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/structured-type.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                property\n                            \n                            \n                                referencedProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        referencedProperty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:45\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../utils';\nimport {\n  Parser,\n  StructuredTypeFieldConfig,\n  StructuredTypeConfig,\n  OptionsHelper,\n  NONE_PARSER,\n  StructuredTypeFieldOptions,\n  Options,\n} from '../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { COMPUTED } from '../constants';\nimport { ODataAnnotation } from '../schema/annotation';\nimport { raw } from '../resources/query';\nimport { ODataParserOptions } from '../options';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser implements Parser {\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string;\n  private parser: Parser;\n  default?: any;\n  maxLength?: number;\n  collection: boolean;\n  nullable: boolean;\n  navigation: boolean;\n  precision?: number;\n  scale?: number;\n  referentials: ODataReferential[];\n  annotations: ODataAnnotation[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.annotations = (field.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.collection = field.collection !== undefined ? field.collection : false;\n    this.nullable = field.nullable !== undefined ? field.nullable : true;\n    this.navigation = field.navigation !== undefined ? field.navigation : false;\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  /**\n   * Find an annotation inside the structured field type.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.findAnnotation((a) => a.term === COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed?.bool && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined)\n      this.default = this.deserialize(this.default, options);\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        'Edm.String',\n        'Edm.Date',\n        'Edm.TimeOfDay',\n        'Edm.DateTimeOffset',\n        'Edm.Guid',\n        'Edm.Binary',\n      ].indexOf(this.type) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === 'Edm.Date') schema.format = 'date';\n      else if (this.type === 'Edm.TimeOfDay') schema.format = 'time';\n      else if (this.type === 'Edm.DateTimeOffset') schema.format = 'date-time';\n      else if (this.type === 'Edm.Guid')\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === 'Edm.Binary') schema.contentEncoding = 'base64';\n      else if (this.type === 'Edm.String' && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      ['Edm.Int64', 'Edm.Int32', 'Edm.Int16', 'Edm.Byte', 'Edm.SByte'].indexOf(\n        this.type\n      ) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (['Edm.Decimal', 'Edm.Double'].indexOf(this.type) !== -1) {\n      schema.type = 'number';\n    } else if (['Edm.Boolean'].indexOf(this.type) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType.keys?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataStructuredTypeParser implements Parser {\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  keys?: ODataEntityTypeKey[];\n  fields: ODataStructuredTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this.keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    this.fields = Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).map(\n      ([name, config]) => new ODataStructuredTypeFieldParser(name, this, config)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  typeFor(name: string): string | undefined {\n    const field = this.fields.find((f) => f.name === name);\n    if (field === undefined && this.parent !== undefined)\n      return this.parent.typeFor(name);\n    return field !== undefined ? field.type : undefined;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.deserialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.serialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this.fields.forEach((f) => f.configure({ parserForType, options }));\n  }\n\n  resolveKey(value: any): any {\n    let key = this.parent?.resolveKey(value) || {};\n    if (Array.isArray(this.keys) && this.keys.length > 0) {\n      for (var k of this.keys) {\n        let v = value as any;\n        let structured = this as ODataStructuredTypeParser | undefined;\n        let field: ODataStructuredTypeFieldParser | undefined;\n        for (let name of k.name.split('/')) {\n          if (structured === undefined) break;\n          field = structured.fields.find((f) => f.name === name);\n          if (field !== undefined) {\n            v = Types.isPlainObject(v) ? v[field.name] : v;\n            structured = field.isStructuredType()\n              ? field.structured()\n              : undefined;\n          }\n        }\n        if (field !== undefined && v !== undefined) {\n          key[k.alias || field.name] = field.encode(v);\n        }\n      }\n    }\n    if (Types.isEmpty(key)) return undefined;\n    return Objects.resolveKey(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let value = this.parent?.defaults() || {};\n    let fields = this.fields.filter(\n      (f) => f.default !== undefined || f.isStructuredType()\n    );\n    return {\n      ...value,\n      ...fields.reduce((acc, f) => {\n        let value = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = this.parent?.toJsonSchema(options) || {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.name,\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields.filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = (this.parent?.validate(attrs, { method, navigation }) ||\n      {}) as { [name: string]: any };\n    const fields = this.fields.filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataRequest.html":{"url":"classes/ODataRequest.html","title":"class - ODataRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/request.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                _body\n                            \n                            \n                                    Private\n                                    Readonly\n                                _headers\n                            \n                            \n                                    Private\n                                    Readonly\n                                _method\n                            \n                            \n                                    Private\n                                    Readonly\n                                _params\n                            \n                            \n                                    Private\n                                    Readonly\n                                _path\n                            \n                            \n                                    Private\n                                    Readonly\n                                _queryBody\n                            \n                            \n                                    Private\n                                    Readonly\n                                    Optional\n                                _responseType\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                bodyQueryOptions\n                            \n                            \n                                    Readonly\n                                fetchPolicy\n                            \n                            \n                                    Readonly\n                                observe\n                            \n                            \n                                    Readonly\n                                    Optional\n                                reportProgress\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                            \n                                    Readonly\n                                    Optional\n                                withCredentials\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isBatch\n                            \n                            \n                                isFetch\n                            \n                            \n                                isMutate\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    responseType\n                                \n                                \n                                    path\n                                \n                                \n                                    method\n                                \n                                \n                                    body\n                                \n                                \n                                    params\n                                \n                                \n                                    headers\n                                \n                                \n                                    pathWithParams\n                                \n                                \n                                    url\n                                \n                                \n                                    urlWithParams\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any | null\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _headers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpHeaders\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HttpParams\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        _queryBody\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                            Optional\n                        _responseType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"arraybuffer\" | \"blob\" | \"json\" | \"text\" | \"value\" | \"property\" | \"entity\" | \"entities\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        bodyQueryOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueryOptionNames[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        fetchPolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        observe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"events\" | \"response\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        reportProgress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        withCredentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/request.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isBatch\n                        \n                    \n                \n            \n            \n                \nisBatch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:277\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFetch\n                        \n                    \n                \n            \n            \n                \nisFetch()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:281\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMutate\n                        \n                    \n                \n            \n            \n                \nisMutate()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/request.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        responseType\n                    \n                \n\n                \n                    \n                        getresponseType()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:212\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        path\n                    \n                \n\n                \n                    \n                        getpath()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:221\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        method\n                    \n                \n\n                \n                    \n                        getmethod()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:225\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        body\n                    \n                \n\n                \n                    \n                        getbody()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:229\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        params\n                    \n                \n\n                \n                    \n                        getparams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:241\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        headers\n                    \n                \n\n                \n                    \n                        getheaders()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:253\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        pathWithParams\n                    \n                \n\n                \n                    \n                        getpathWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:261\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        url\n                    \n                \n\n                \n                    \n                        geturl()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:269\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        urlWithParams\n                    \n                \n\n                \n                    \n                        geturlWithParams()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/request.ts:273\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  $BATCH,\n  $QUERY,\n  ACCEPT,\n  IF_MATCH_HEADER,\n  IF_NONE_MATCH_HEADER,\n  PREFER,\n  TEXT_PLAIN,\n} from '../constants';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\n\nimport { Http } from '../utils';\nimport { ODataApi } from '../api';\nimport { ODataResource } from './resource';\nimport { QueryOptionNames } from '../types';\n\nexport class ODataRequest {\n  readonly api: ODataApi;\n  readonly observe: 'events' | 'response';\n  readonly reportProgress?: boolean;\n  readonly withCredentials?: boolean;\n  readonly bodyQueryOptions: QueryOptionNames[];\n  readonly fetchPolicy:\n    | 'cache-first'\n    | 'cache-and-network'\n    | 'network-only'\n    | 'no-cache'\n    | 'cache-only';\n  readonly resource: ODataResource;\n  private readonly _responseType?:\n    | 'arraybuffer'\n    | 'blob'\n    | 'json'\n    | 'text'\n    | 'value'\n    | 'property'\n    | 'entity'\n    | 'entities';\n  private readonly _method: string;\n  private readonly _body: any | null;\n  private readonly _headers: HttpHeaders;\n  private readonly _params: HttpParams;\n  private readonly _path: string;\n  private readonly _queryBody: boolean;\n\n  constructor(init: {\n    method: string;\n    api: ODataApi;\n    resource: ODataResource;\n    body: any;\n    observe: 'events' | 'response';\n    etag?: string;\n    headers?: HttpHeaders | { [header: string]: string | string[] };\n    reportProgress?: boolean;\n    params?: HttpParams | { [param: string]: string | string[] };\n    responseType?:\n      | 'arraybuffer'\n      | 'blob'\n      | 'json'\n      | 'text'\n      | 'value'\n      | 'property'\n      | 'entity'\n      | 'entities';\n    fetchPolicy?:\n      | 'cache-first'\n      | 'cache-and-network'\n      | 'network-only'\n      | 'no-cache'\n      | 'cache-only';\n    withCredentials?: boolean;\n    bodyQueryOptions?: QueryOptionNames[];\n  }) {\n    this._method = init.method;\n    this.resource = init.resource;\n\n    this.api = init.api;\n    this.reportProgress = init.reportProgress;\n    this.observe = init.observe;\n\n    // Response Type\n    this._responseType = init.responseType;\n\n    // The Body\n    this._body = init.body !== undefined ? init.body : null;\n    if (this._body !== null) this._body = this.resource.serialize(this._body);\n\n    this.withCredentials =\n      init.withCredentials === undefined\n        ? this.api.options.withCredentials\n        : init.withCredentials;\n    this.fetchPolicy = init.fetchPolicy || this.api.options.fetchPolicy;\n    this.bodyQueryOptions =\n      init.bodyQueryOptions || this.api.options.bodyQueryOptions;\n\n    // The Path and Params from resource\n    const [resourcePath, resourceParams] = this.resource.pathAndParams();\n    this._path = resourcePath;\n\n    //#region Headers\n    const customHeaders: { [name: string]: string | string[] } = {};\n    if (typeof init.etag === 'string') {\n      if (\n        this.api.options.etag.ifMatch &&\n        ['PUT', 'PATCH', 'DELETE'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_MATCH_HEADER] = init.etag;\n      else if (\n        this.api.options.etag.ifNoneMatch &&\n        ['GET'].indexOf(this._method) !== -1\n      )\n        customHeaders[IF_NONE_MATCH_HEADER] = init.etag;\n    }\n\n    const accept = [];\n    // Metadata\n    if (this.api.options.accept?.metadata !== undefined)\n      accept.push(`odata.metadata=${this.api.options.accept?.metadata}`);\n    // IEEE754\n    if (this.api.options.accept?.ieee754Compatible !== undefined)\n      accept.push(\n        `IEEE754Compatible=${this.api.options.accept?.ieee754Compatible}`\n      );\n    // streaming\n    if (this.api.options.accept?.streaming !== undefined)\n      accept.push(`streaming=${this.api.options.accept?.streaming}`);\n    // ExponentialDecimals\n    if (this.api.options.accept?.exponentialDecimals !== undefined)\n      accept.push(\n        `ExponentialDecimals=${this.api.options.accept?.exponentialDecimals}`\n      );\n    if (accept.length > 0)\n      customHeaders[ACCEPT] = [\n        `application/json;${accept.join(';')}`,\n        'text/plain',\n        '*/*',\n      ];\n\n    const prefer = [];\n    // Return\n    if (\n      this.api.options.prefer?.return !== undefined &&\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1\n    )\n      prefer.push(`return=${this.api.options.prefer?.return}`);\n    // MaxPageSize\n    if (\n      this.api.options.prefer?.maxPageSize !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.maxpagesize=${this.api.options.prefer?.maxPageSize}`);\n    // Annotations\n    if (\n      this.api.options.prefer?.includeAnnotations !== undefined &&\n      ['GET'].indexOf(this._method) !== -1\n    )\n      prefer.push(\n        `odata.include-annotations=${this.api.options.prefer?.includeAnnotations}`\n      );\n    if (\n      this.api.options.prefer?.continueOnError === true &&\n      ['POST'].indexOf(this._method) !== -1\n    )\n      prefer.push(`odata.continue-on-error`);\n    if (prefer.length > 0) customHeaders[PREFER] = prefer;\n    this._headers = Http.mergeHttpHeaders(\n      this.api.options.headers,\n      customHeaders,\n      init.headers || {}\n    );\n    //#endregion\n\n    //#region Params\n    const customParams: { [name: string]: string | string[] } = {};\n    if (\n      ['POST', 'PUT', 'PATCH'].indexOf(this._method) !== -1 &&\n      '$select' in resourceParams\n    ) {\n      customParams['$select'] = resourceParams['$select'];\n    }\n    if (['POST'].indexOf(this._method) !== -1 && '$expand' in resourceParams) {\n      customParams['$expand'] = resourceParams['$expand'];\n    }\n    if (['GET'].indexOf(this._method) !== -1) {\n      Object.assign(customParams, resourceParams);\n    }\n\n    const params = Http.mergeHttpParams(\n      this.api.options.params,\n      customParams,\n      init.params || {}\n    );\n\n    this._params =\n      this._responseType === 'entity'\n        ? Http.withoutHttpParams(params, [\n            '$filter',\n            '$orderby',\n            '$count',\n            '$skip',\n            '$top',\n          ])\n        : params;\n    //#endregion\n\n    this._queryBody =\n      this._method === 'GET' &&\n      this.bodyQueryOptions.length > 0 &&\n      this.bodyQueryOptions.some((name) => this._params.has(`$${name}`));\n  }\n\n  get responseType(): 'arraybuffer' | 'blob' | 'json' | 'text' {\n    return this._responseType &&\n      ['property', 'entity', 'entities'].indexOf(this._responseType) !== -1\n      ? 'json'\n      : this._responseType === 'value'\n      ? 'text'\n      : this._responseType;\n  }\n\n  get path() {\n    return this._queryBody ? `${this._path}/${$QUERY}` : this._path;\n  }\n\n  get method() {\n    return this._queryBody ? 'POST' : this._method;\n  }\n\n  get body() {\n    if (this._queryBody) {\n      let [, bodyParams] = Http.splitHttpParams(\n        this._params,\n        this.bodyQueryOptions.map((name) => `$${name}`)\n      );\n      return bodyParams.toString();\n    } else {\n      return this._body;\n    }\n  }\n\n  get params() {\n    if (this._queryBody) {\n      let [queryParams] = Http.splitHttpParams(\n        this._params,\n        this.bodyQueryOptions.map((name) => `$${name}`)\n      );\n      return queryParams;\n    } else {\n      return this._params;\n    }\n  }\n\n  get headers() {\n    if (this._queryBody) {\n      return Http.mergeHttpHeaders(this._headers, { CONTENT_TYPE: TEXT_PLAIN });\n    } else {\n      return this._headers;\n    }\n  }\n\n  get pathWithParams() {\n    let path = this._path;\n    if (this._params.keys().length > 0) {\n      path = `${path}?${this._params}`;\n    }\n    return path;\n  }\n\n  get url() {\n    return `${this.api.serviceRootUrl}${this._path}`;\n  }\n\n  get urlWithParams() {\n    return `${this.api.serviceRootUrl}${this.pathWithParams}`;\n  }\n\n  isBatch() {\n    return this._path.endsWith($BATCH);\n  }\n\n  isFetch() {\n    return ['GET'].indexOf(this._method) !== -1;\n  }\n\n  isMutate() {\n    return ['PUT', 'PATCH', 'POST', 'DELETE'].indexOf(this._method) !== -1;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponse.html":{"url":"classes/ODataResponse.html","title":"class - ODataResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/response.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Response\n\n            \n\n            \n                Extends\n            \n            \n                        HttpResponse\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                _annotations\n                            \n                            \n                                    Private\n                                    Optional\n                                _context\n                            \n                            \n                                    Private\n                                    Optional\n                                _options\n                            \n                            \n                                    Private\n                                    Optional\n                                _payload\n                            \n                            \n                                    Readonly\n                                api\n                            \n                            \n                                    Readonly\n                                resource\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entities\n                            \n                            \n                                entity\n                            \n                            \n                                    Static\n                                fromHttpResponse\n                            \n                            \n                                    Static\n                                fromJSON\n                            \n                            \n                                property\n                            \n                            \n                                toJSON\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                                \n                                    payload\n                                \n                                \n                                    context\n                                \n                                \n                                    annotations\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(init: literal type)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        init\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResponseOptions\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        _payload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataResource\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/response.ts:30\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n            \n                \nentities()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:193\n                \n            \n\n\n            \n                \n                    Handle the response body as entities\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntities\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entity\n                        \n                    \n                \n            \n            \n                \nentity()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:169\n                \n            \n\n\n            \n                \n                    Handle the response body as an entity\n\n\n                    \n                    \n                    \n                        Returns :         ODataEntity\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromHttpResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromHttpResponse(req: ODataRequest, res: HttpResponse)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:46\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                HttpResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        fromJSON\n                        \n                    \n                \n            \n            \n                \n                    \n                    fromJSON(req: ODataRequest, json: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:58\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                ODataRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    json\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataResponse\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        property\n                        \n                    \n                \n            \n            \n                \nproperty()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:212\n                \n            \n\n\n            \n                \n                    Handle the response body as a property\n\n\n                    \n                    \n                    \n                        Returns :         ODataProperty\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { body: any; headers: any; status: any; statusText: any; url: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        value\n                        \n                    \n                \n            \n            \n                \nvalue()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:236\n                \n            \n\n\n            \n                \n                    Handle the response body as a value\n\n\n                    \n                    \n                    \n                        Returns :     T | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:93\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        payload\n                    \n                \n\n                \n                    \n                        getpayload()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:126\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        context\n                    \n                \n\n                \n                    \n                        getcontext()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:137\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        annotations\n                    \n                \n\n                \n                    \n                        getannotations()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/response.ts:147\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport {\n  ODataEntityAnnotations,\n  ODataEntitiesAnnotations,\n  ODataPropertyAnnotations,\n} from './annotations';\nimport { Types } from '../../utils/types';\nimport { ODataResource } from '../resource';\nimport { ODataEntities, ODataEntity, ODataProperty } from './types';\nimport {\n  APPLICATION_JSON,\n  ODATA_VERSION_HEADERS,\n  CONTENT_TYPE,\n  CACHE_CONTROL,\n  LOCATION_HEADER,\n  ETAG_HEADERS,\n  ODATA_ENTITYID_HEADERS,\n} from '../../constants';\nimport { ODataApi } from '../../api';\nimport { ODataRequest } from '../request';\nimport { ODataResponseOptions } from './options';\nimport { Http } from '../../utils/http';\nimport { ODataContext } from '../../helper';\n\n/**\n * OData Response\n */\nexport class ODataResponse extends HttpResponse {\n  readonly api: ODataApi;\n  readonly resource: ODataResource;\n\n  constructor(init: {\n    api: ODataApi;\n    resource: ODataResource;\n    body: T | null;\n    headers: HttpHeaders;\n    status: number;\n    statusText: string;\n    url?: string;\n  }) {\n    super(init);\n    this.api = init.api;\n    this.resource = init.resource;\n  }\n\n  static fromHttpResponse(req: ODataRequest, res: HttpResponse) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: res.body,\n      headers: res.headers,\n      status: res.status,\n      statusText: res.statusText,\n      url: res.url || undefined,\n    });\n  }\n\n  static fromJSON(\n    req: ODataRequest,\n    json: {\n      body: T | null;\n      headers: { [name: string]: string | string[] };\n      status: number;\n      statusText: string;\n      url: string | null;\n    }\n  ) {\n    return new ODataResponse({\n      api: req.api,\n      resource: req.resource,\n      body: json.body,\n      headers: new HttpHeaders(json.headers),\n      status: json.status,\n      statusText: json.statusText,\n      url: json.url || undefined,\n    });\n  }\n\n  toJSON() {\n    return {\n      body: this.body,\n      headers: this.headers\n        .keys()\n        .map((name) => ({ [name]: this.headers.getAll(name) || [] }))\n        .reduce((acc, header) => Object.assign(acc, header), {}),\n      status: this.status,\n      statusText: this.statusText,\n      url: this.url,\n    };\n  }\n\n  private _options?: ODataResponseOptions;\n  get options(): ODataResponseOptions {\n    if (this._options === undefined) {\n      this._options = new ODataResponseOptions(this.api.options);\n      const contentType = this.headers.get(CONTENT_TYPE);\n      if (contentType && contentType.indexOf(APPLICATION_JSON) !== -1) {\n        const features = contentType\n          .split(',')\n          .find((p) => p.startsWith(APPLICATION_JSON)) as string;\n        this._options.setFeatures(features);\n      }\n      const header = Http.resolveHeaderKey(this.headers, ODATA_VERSION_HEADERS);\n      if (header) {\n        const version = (this.headers.get(header) || '').replace(/\\;/g, '') as\n          | '2.0'\n          | '3.0'\n          | '4.0';\n        this._options.setVersion(version);\n      }\n\n      const location = this.headers.get(LOCATION_HEADER);\n      if (location) {\n        this._options.setLocation(location);\n      }\n\n      const cacheControl = this.headers.get(CACHE_CONTROL);\n      if (cacheControl) {\n        this._options.setCache(cacheControl);\n      }\n    }\n    return this._options;\n  }\n\n  private _payload?: any;\n  get payload() {\n    if (this._payload === undefined) {\n      this._payload =\n        this.body && this.options.version === '2.0'\n          ? (this.body)['d']\n          : this.body;\n    }\n    return this._payload;\n  }\n\n  private _context?: any;\n  get context(): ODataContext {\n    if (this._context === undefined) {\n      this._context = this.options.helper.context(\n        Types.isPlainObject(this.payload) ? this.payload : {}\n      );\n    }\n    return this._context;\n  }\n\n  private _annotations?: any;\n  get annotations(): { [name: string]: any } {\n    if (this._annotations === undefined) {\n      const options = this.options;\n      this._annotations = options.helper.annotations(this.payload || {});\n      let key = Http.resolveHeaderKey(this.headers, ETAG_HEADERS);\n      if (key) {\n        const etag = this.headers.get(key);\n        if (etag) options.helper.etag(this._annotations, etag);\n      }\n      key = Http.resolveHeaderKey(this.headers, ODATA_ENTITYID_HEADERS);\n      if (key) {\n        const entityId = this.headers.get(key);\n        if (entityId) options.helper.id(this._annotations, entityId);\n      }\n    }\n    return this._annotations;\n  }\n\n  /**\n   * Handle the response body as an entity\n   * @returns\n   */\n  entity(): ODataEntity {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntityAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    const data = payload ? annots.data(payload) : null;\n    let entity = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(data, this.api.options.stripMetadata)\n        : data\n    ) as T | null;\n\n    if (entity !== null)\n      entity = this.resource.deserialize(entity, options) as T;\n    return { entity, annots };\n  }\n\n  /**\n   * Handle the response body as entities\n   * @returns\n   */\n  entities(): ODataEntities {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataEntitiesAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    let entities = payload ? annots.data(payload) : null;\n\n    if (entities !== null)\n      entities = this.resource.deserialize(entities, options) as T[];\n    return { entities, annots };\n  }\n\n  /**\n   * Handle the response body as a property\n   * @returns\n   */\n  property(): ODataProperty {\n    const options = this.options;\n    const payload = this.payload;\n    const annots = new ODataPropertyAnnotations(\n      options.helper,\n      this.annotations,\n      this.context\n    );\n    const data = payload ? (annots.data(payload) as T) : null;\n    let property = (\n      data !== null && Types.isPlainObject(data)\n        ? options.helper.attributes(data, this.api.options.stripMetadata)\n        : data\n    ) as T | null;\n\n    if (property !== null)\n      property = this.resource.deserialize(property, options) as T;\n    return { property, annots };\n  }\n\n  /**\n   * Handle the response body as a value\n   * @returns\n   */\n  value(): T | null {\n    const options = this.options;\n    const payload = this.payload;\n    let value = (\n      payload !== null && Types.isPlainObject(payload)\n        ? options.helper.attributes(payload, this.api.options.stripMetadata)\n        : payload\n    ) as T | null;\n\n    if (value !== null) value = this.resource.deserialize(value, options) as T;\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataResponseOptions.html":{"url":"classes/ODataResponseOptions.html","title":"class - ODataResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/responses/options.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            ResponseOptions\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                cacheability\n                            \n                            \n                                    Optional\n                                ieee754Compatible\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Optional\n                                maxAge\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                            \n                                    Optional\n                                streaming\n                            \n                            \n                                    Optional\n                                stringAsEnum\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clone\n                            \n                            \n                                setCache\n                            \n                            \n                                setFeatures\n                            \n                            \n                                setLocation\n                            \n                            \n                                setVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    helper\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: Options)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        Options\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        cacheability\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ieee754Compatible\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        location\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        maxAge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataMetadataType\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        streaming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        stringAsEnum\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        version\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataVersion\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/resources/responses/options.ts:19\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clone\n                        \n                    \n                \n            \n            \n                \nclone()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         ODataResponseOptions\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCache\n                        \n                    \n                \n            \n            \n                \nsetCache(cacheControl: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cacheControl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setFeatures\n                        \n                    \n                \n            \n            \n                \nsetFeatures(features: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    features\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setLocation\n                        \n                    \n                \n            \n            \n                \nsetLocation(location: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    location\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setVersion\n                        \n                    \n                \n            \n            \n                \nsetVersion(version: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    version\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        helper\n                    \n                \n\n                \n                    \n                        gethelper()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/responses/options.ts:36\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {\n  CacheCacheability,\n  ODataMetadataType,\n  ODataVersion,\n  Options,\n  ResponseOptions,\n} from '../../types';\nimport {\n  DEFAULT_VERSION,\n  MAX_AGE,\n  VERSION_2_0,\n  VERSION_3_0,\n  VERSION_4_0,\n} from '../../constants';\n\nimport { ODataHelper } from '../../helper';\n\nexport class ODataResponseOptions implements ResponseOptions {\n  version: ODataVersion;\n  streaming?: boolean;\n  // OData\n  metadata?: ODataMetadataType;\n  stringAsEnum?: boolean;\n  ieee754Compatible?: boolean;\n  // Location\n  location?: string;\n  // Cache\n  cacheability?: 'public' | 'private' | 'no-cache' | 'no-store';\n  maxAge?: number;\n\n  constructor(config: Options) {\n    this.version = config.version || DEFAULT_VERSION;\n    this.stringAsEnum = config.stringAsEnum;\n  }\n\n  get helper() {\n    return ODataHelper[this.version];\n  }\n\n  clone() {\n    return new ODataResponseOptions(this);\n  }\n\n  setFeatures(features: string) {\n    features.split(';').forEach((o) => {\n      let [k, v] = o.split('=');\n      switch (k.trim()) {\n        case 'odata.metadata':\n          this.metadata = v as ODataMetadataType;\n          break;\n        case 'odata.streaming':\n          this.streaming = v == 'true';\n          break;\n        case 'IEEE754Compatible':\n          this.ieee754Compatible = v == 'true';\n          break;\n      }\n    });\n  }\n\n  setVersion(version: string) {\n    const value = version.replace(/\\;/g, '').trim();\n    if ([VERSION_2_0, VERSION_3_0, VERSION_4_0].indexOf(value) !== -1)\n      this.version = value as ODataVersion;\n  }\n\n  setLocation(location: string) {\n    // TODO: resolve location?\n    this.location = location;\n  }\n\n  setCache(cacheControl: string) {\n    cacheControl.split(',').forEach((directive) => {\n      if (directive.startsWith(MAX_AGE)) {\n        let maxAge = Number(directive.split('=')[1]);\n        if (!Number.isNaN(maxAge)) this.maxAge = maxAge;\n      }\n      if (\n        ['public', 'private', 'no-cache', 'no-store'].indexOf(directive) !== -1\n      ) {\n        this.cacheability = directive as CacheCacheability;\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSchema.html":{"url":"classes/ODataSchema.html","title":"class - ODataSchema","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSchema\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/schema/schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                annotations\n                            \n                            \n                                api\n                            \n                            \n                                callables\n                            \n                            \n                                containers\n                            \n                            \n                                entities\n                            \n                            \n                                enums\n                            \n                            \n                                namespace\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                configure\n                            \n                            \n                                findAnnotation\n                            \n                            \n                                    Public\n                                findCallableForType\n                            \n                            \n                                    Public\n                                findEntitySetForType\n                            \n                            \n                                    Public\n                                findEnumTypeForType\n                            \n                            \n                                    Public\n                                findStructuredTypeForType\n                            \n                            \n                                isNamespaceOf\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    entitySets\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: SchemaConfig, api: ODataApi)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        SchemaConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        api\n                                                  \n                                                        \n                                                                        ODataApi\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        annotations\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataAnnotation[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        api\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataApi\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        callables\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataCallable[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntityContainer[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        entities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enums\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEnumType[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/schema/schema.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAnnotation\n                        \n                    \n                \n            \n            \n                \nfindAnnotation(predicate: (annot: ODataAnnotation) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:62\n                \n            \n\n\n            \n                \n                    Find an annotation inside the schema.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Function that returns true if the annotation match.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The annotation that matches the predicate.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findCallableForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCallableForType(type: string, bindingType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:79\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bindingType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEntitySetForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEntitySetForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findEnumTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findEnumTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:67\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        findStructuredTypeForType\n                        \n                    \n                \n            \n            \n                \n                    \n                    findStructuredTypeForType(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:73\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isNamespaceOf\n                        \n                    \n                \n            \n            \n                \nisNamespaceOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/schema/schema.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        entitySets\n                    \n                \n\n                \n                    \n                        getentitySets()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/schema/schema.ts:50\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Parser, SchemaConfig } from '../types';\n\nimport { OData } from '../utils/odata';\nimport { ODataAnnotation } from './annotation';\nimport { ODataApi } from '../api';\nimport { ODataCallable } from './callable';\nimport { ODataEntityContainer } from './entity-container';\nimport { ODataEntitySet } from './entity-set';\nimport { ODataEnumType } from './enum-type';\nimport { ODataStructuredType } from './structured-type';\n\nexport class ODataSchema {\n  api: ODataApi;\n  namespace: string;\n  alias?: string;\n  enums: ODataEnumType[];\n  entities: ODataStructuredType[];\n  callables: ODataCallable[];\n  containers: ODataEntityContainer[];\n  annotations: ODataAnnotation[];\n\n  constructor(config: SchemaConfig, api: ODataApi) {\n    this.api = api;\n    this.namespace = config.namespace;\n    this.alias = config.alias;\n    this.enums = (config.enums || []).map(\n      (config) => new ODataEnumType(config, this)\n    );\n    this.entities = (config.entities || []).map(\n      (config) => new ODataStructuredType(config, this)\n    );\n    this.callables = OData.mergeCallableParameters(config.callables || []).map(\n      (config) => new ODataCallable(config, this)\n    );\n    this.containers = (config.containers || []).map(\n      (config) => new ODataEntityContainer(config, this)\n    );\n    this.annotations = (config.annotations || []).map(\n      (config) => new ODataAnnotation(config)\n    );\n  }\n\n  isNamespaceOf(type: string) {\n    return (\n      type.startsWith(this.namespace) ||\n      (this.alias && type.startsWith(this.alias))\n    );\n  }\n\n  get entitySets() {\n    return this.containers.reduce(\n      (acc, container) => [...acc, ...container.entitySets],\n      [] as ODataEntitySet[]\n    );\n  }\n\n  /**\n   * Find an annotation inside the schema.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  //#region Find for Type\n  public findEnumTypeForType(type: string) {\n    return this.enums.find((e) => e.isTypeOf(type)) as\n      | ODataEnumType\n      | undefined;\n  }\n\n  public findStructuredTypeForType(type: string) {\n    return this.entities.find((e) => e.isTypeOf(type)) as\n      | ODataStructuredType\n      | undefined;\n  }\n\n  public findCallableForType(type: string, bindingType?: string) {\n    return this.callables.find(\n      (c) =>\n        c.isTypeOf(type) &&\n        (bindingType === undefined || bindingType === c.binding()?.type)\n    ) as ODataCallable | undefined;\n  }\n\n  public findEntitySetForType(type: string) {\n    return this.entitySets.find((e) => e.isTypeOf(type));\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    findOptionsForType,\n  }: {\n    parserForType: (type: string) => Parser;\n    findOptionsForType: (type: string) => any;\n  }) {\n    // Configure Enums\n    this.enums.forEach((enu) => enu.configure());\n    // Configure Entities\n    this.entities.forEach((config) =>\n      config.configure({ parserForType, findOptionsForType })\n    );\n    // Configure callables\n    this.callables.forEach((callable) => callable.configure({ parserForType }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ODataServiceFactory.html":{"url":"injectables/ODataServiceFactory.html","title":"injectable - ODataServiceFactory","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ODataServiceFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/factory.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                entitySet\n                            \n                            \n                                singleton\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(client: ODataClient)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/services/factory.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        client\n                                                  \n                                                        \n                                                                        ODataClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        entitySet\n                        \n                    \n                \n            \n            \n                \nentitySet(entitySetName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:15\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create an entity set service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    entitySetName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the entity set.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataEntitySetService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        singleton\n                        \n                    \n                \n            \n            \n                \nsingleton(singletonName: string, apiNameOrEntityType?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/factory.ts:30\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    Factory method to create a singleton service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    singletonName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the singleton.\n\n                                    \n                                \n                                \n                                    apiNameOrEntityType\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Name of the API or the type of the entity.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataSingletonService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ODataClient } from '../client';\nimport { ODataEntitySetService } from './entity-set';\nimport { ODataSingletonService } from './singleton';\n\n@Injectable()\nexport class ODataServiceFactory {\n  constructor(protected client: ODataClient) {}\n\n  /**\n   * Factory method to create an entity set service.\n   * @param entitySetName Name of the entity set.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  entitySet(\n    entitySetName: string,\n    apiNameOrEntityType?: string\n  ): ODataEntitySetService {\n    return new (class extends ODataEntitySetService {})(\n      this.client,\n      entitySetName,\n      apiNameOrEntityType\n    );\n  }\n\n  /** Factory method to create a singleton service.\n   * @param singletonName Name of the singleton.\n   * @param apiNameOrEntityType Name of the API or the type of the entity.\n   */\n  singleton(\n    singletonName: string,\n    apiNameOrEntityType?: string\n  ): ODataSingletonService {\n    return new (class extends ODataSingletonService {})(\n      this.client,\n      singletonName,\n      apiNameOrEntityType\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataSingletonService.html":{"url":"classes/ODataSingletonService.html","title":"class - ODataSingletonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataSingletonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/services/singleton.ts\n        \n\n\n            \n                Description\n            \n            \n                OData Singleton Service\nwww.odata.org/getting-started/advanced-tutorial/#singleton\n\n            \n\n            \n                Extends\n            \n            \n                        ODataEntityService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                attach\n                            \n                            \n                                    Public\n                                entity\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                update\n                            \n                            \n                                    Protected\n                                callAction\n                            \n                            \n                                    Protected\n                                callFunction\n                            \n                            \n                                    Protected\n                                fetchNavigationProperty\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    singletonSchema\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        attach\n                        \n                    \n                \n            \n            \n                \n                    \n                    attach(model: M)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:28\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        M\n                    \n                \n            \n\n            \n                \n                    Attach an existing model to this service.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                            M\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The model to attach.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        entity\n                        \n                    \n                \n            \n            \n                \n                    \n                    entity()\n                \n            \n\n\n            \n                \n                    Inherited from         ODataEntityService\n\n                \n            \n            \n                \n                        Defined in         ODataEntityService:20\n\n                \n            \n\n\n            \n                \n                    Get the entity resource for this service.\n\n\n                    \n                        Returns :         ODataSingletonResource\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:59\n                \n            \n\n\n            \n                \n                    Patch the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(attrs: Partial, options?)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/services/singleton.ts:45\n                \n            \n\n\n            \n                \n                    Update the singleton entity\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                            Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The attributes for the entity.\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The options for the request.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callAction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callAction(params: P | null, resource: ODataActionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:62\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataActionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        callFunction\n                        \n                    \n                \n            \n            \n                \n                    \n                    callFunction(params: P | null, resource: ODataFunctionResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:25\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        P\n                        R\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            P | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resource\n                                    \n                                                ODataFunctionResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        fetchNavigationProperty\n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchNavigationProperty(resource: ODataNavigationPropertyResource, responseType, options?: ODataQueryArgumentsOptions)\n                \n            \n\n\n            \n                \n                    Inherited from         ODataBaseService\n\n                \n            \n            \n                \n                        Defined in         ODataBaseService:99\n\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        S\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resource\n                                    \n                                                ODataNavigationPropertyResource\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    responseType\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                ODataQueryArgumentsOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        singletonSchema\n                    \n                \n\n                \n                    \n                        getsingletonSchema()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/services/singleton.ts:35\n                                \n                            \n                    \n                        \n                                The schema for the singleton.\n\n\n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import type {\n  ODataEntity,\n  ODataOptions,\n  ODataSingletonResource,\n} from '../resources';\n\nimport { ODataEntityService } from './entity';\nimport type { ODataModel } from '../models/model';\nimport { Observable } from 'rxjs';\n\n/**\n * OData Singleton Service\n * www.odata.org/getting-started/advanced-tutorial/#singleton\n */\nexport class ODataSingletonService extends ODataEntityService {\n  /**\n   * Get the entity resource for this service.\n   * @param key The entity key.\n   */\n  public entity(): ODataSingletonResource {\n    return this.client.singleton(this.name, this.apiNameOrEntityType);\n  }\n\n  /**\n   * Attach an existing model to this service.\n   * @param model The model to attach.\n   */\n  public attach>(model: M) {\n    model.attach(this.entity());\n  }\n\n  /**\n   * The schema for the singleton.\n   */\n  get singletonSchema() {\n    return this.api.findEntitySetByName(this.name);\n  }\n\n  /**\n   * Update the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public update(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity();\n    return res.update(attrs, options);\n  }\n\n  /**\n   * Patch the singleton entity\n   * @param attrs The attributes for the entity.\n   * @param etag The etag for the entity.\n   * @param options The options for the request.\n   */\n  public patch(\n    attrs: Partial,\n    options?: ODataOptions & { etag?: string }\n  ): Observable> {\n    const res = this.entity();\n    return res.modify(attrs, options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ODataStructuredTypeParser.html":{"url":"classes/ODataStructuredTypeParser.html","title":"class - ODataStructuredTypeParser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ODataStructuredTypeParser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/parsers/structured-type.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Parser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                alias\n                            \n                            \n                                    Optional\n                                base\n                            \n                            \n                                children\n                            \n                            \n                                fields\n                            \n                            \n                                    Optional\n                                keys\n                            \n                            \n                                name\n                            \n                            \n                                namespace\n                            \n                            \n                                open\n                            \n                            \n                                    Optional\n                                optionsHelper\n                            \n                            \n                                    Optional\n                                parent\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                childParser\n                            \n                            \n                                configure\n                            \n                            \n                                defaults\n                            \n                            \n                                deserialize\n                            \n                            \n                                encode\n                            \n                            \n                                findChildParser\n                            \n                            \n                                isTypeOf\n                            \n                            \n                                resolveKey\n                            \n                            \n                                serialize\n                            \n                            \n                                toJsonSchema\n                            \n                            \n                                typeFor\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: StructuredTypeConfig, namespace: string, alias?: string)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:356\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        StructuredTypeConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namespace\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alias\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        alias\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:351\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        base\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:352\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        children\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredTypeParser[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:350\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fields\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredTypeFieldParser[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:355\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataEntityTypeKey[]\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:354\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:347\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        namespace\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:348\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        open\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:349\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        optionsHelper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OptionsHelper\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:356\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ODataStructuredTypeParser\n\n                    \n                \n                    \n                        \n                                Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:353\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        childParser\n                        \n                    \n                \n            \n            \n                \nchildParser(predicate: (p: ODataStructuredTypeParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:402\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Parser\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:467\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        defaults\n                        \n                    \n                \n            \n            \n                \ndefaults()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:509\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     literal type\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:409\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:459\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findChildParser\n                        \n                    \n                \n            \n            \n                \nfindChildParser(predicate: (p: ODataStructuredTypeParser) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:390\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    predicate\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ODataStructuredTypeParser | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTypeOf\n                        \n                    \n                \n            \n            \n                \nisTypeOf(type: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:377\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolveKey\n                        \n                    \n                \n            \n            \n                \nresolveKey(value: any)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:483\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: T, options?: Options)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:433\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                Options\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJsonSchema\n                        \n                    \n                \n            \n            \n                \ntoJsonSchema(options: JsonSchemaOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:526\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                JsonSchemaOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typeFor\n                        \n                    \n                \n            \n            \n                \ntypeFor(name: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:383\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(attrs: any, undefined: literal type)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/parsers/structured-type.ts:574\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    attrs\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Objects, Types } from '../utils';\nimport {\n  Parser,\n  StructuredTypeFieldConfig,\n  StructuredTypeConfig,\n  OptionsHelper,\n  NONE_PARSER,\n  StructuredTypeFieldOptions,\n  Options,\n} from '../types';\nimport { ODataEnumTypeParser } from './enum-type';\nimport { COMPUTED } from '../constants';\nimport { ODataAnnotation } from '../schema/annotation';\nimport { raw } from '../resources/query';\nimport { ODataParserOptions } from '../options';\n\n// JSON SCHEMA\ntype JsonSchemaSelect = Array;\ntype JsonSchemaCustom = {\n  [P in keyof T]?: (\n    schema: any,\n    field: ODataStructuredTypeFieldParser\n  ) => any;\n};\ntype JsonSchemaExpand = { [P in keyof T]?: JsonSchemaOptions };\ntype JsonSchemaRequired = { [P in keyof T]?: boolean };\nexport type JsonSchemaOptions = {\n  select?: JsonSchemaSelect;\n  custom?: JsonSchemaCustom;\n  expand?: JsonSchemaExpand;\n  required?: JsonSchemaRequired;\n};\n\nexport class ODataEntityTypeKey {\n  name: string;\n  alias?: string;\n  constructor({ name, alias }: { name: string; alias?: string }) {\n    this.name = name;\n    this.alias = alias;\n  }\n}\n\nexport class ODataReferential {\n  property: string;\n  referencedProperty: string;\n  constructor({\n    property,\n    referencedProperty,\n  }: {\n    property: string;\n    referencedProperty: string;\n  }) {\n    this.property = property;\n    this.referencedProperty = referencedProperty;\n  }\n}\n\nexport class ODataStructuredTypeFieldParser implements Parser {\n  name: string;\n  private structuredType: ODataStructuredTypeParser;\n  type: string;\n  private parser: Parser;\n  default?: any;\n  maxLength?: number;\n  collection: boolean;\n  nullable: boolean;\n  navigation: boolean;\n  precision?: number;\n  scale?: number;\n  referentials: ODataReferential[];\n  annotations: ODataAnnotation[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    name: string,\n    structuredType: ODataStructuredTypeParser,\n    field: StructuredTypeFieldConfig\n  ) {\n    this.name = name;\n    this.structuredType = structuredType;\n    this.type = field.type;\n    this.parser = NONE_PARSER;\n    this.annotations = (field.annotations || []).map(\n      (annot) => new ODataAnnotation(annot)\n    );\n    this.referentials = (field.referentials || []).map(\n      (referential) => new ODataReferential(referential)\n    );\n    this.default = field.default;\n    this.maxLength = field.maxLength;\n    this.collection = field.collection !== undefined ? field.collection : false;\n    this.nullable = field.nullable !== undefined ? field.nullable : true;\n    this.navigation = field.navigation !== undefined ? field.navigation : false;\n    this.precision = field.precision;\n    this.scale = field.scale;\n  }\n\n  /**\n   * Find an annotation inside the structured field type.\n   * @param predicate Function that returns true if the annotation match.\n   * @returns The annotation that matches the predicate.\n   */\n  findAnnotation(predicate: (annot: ODataAnnotation) => boolean) {\n    return this.annotations.find(predicate);\n  }\n\n  validate(\n    value: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ):\n    | { [name: string]: any }\n    | { [name: string]: any }[]\n    | string[]\n    | undefined {\n    let errors;\n    if (this.collection && Array.isArray(value)) {\n      errors = value.map((v) => this.validate(v, { method, navigation })) as {\n        [name: string]: any[];\n      }[];\n    } else if (\n      (this.isStructuredType() &&\n        typeof value === 'object' &&\n        value !== null) ||\n      (this.navigation && value !== undefined)\n    ) {\n      errors =\n        this.structured().validate(value, { method, navigation }) ||\n        ({} as { [name: string]: any[] });\n    } else if (\n      this.isEnumType() &&\n      (typeof value === 'string' || typeof value === 'number')\n    ) {\n      errors = this.enum().validate(value, { method, navigation });\n    } else {\n      // IsEdmType\n      const computed = this.findAnnotation((a) => a.term === COMPUTED);\n      errors = [];\n      if (\n        !this.nullable &&\n        (value === null || (value === undefined && method !== 'modify')) && // Is null or undefined without patch?\n        !(computed?.bool && method === 'create') // Not (Is Computed field and create) ?\n      ) {\n        errors.push(`required`);\n      }\n      if (\n        this.maxLength !== undefined &&\n        typeof value === 'string' &&\n        value.length > this.maxLength\n      ) {\n        errors.push(`maxlength`);\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n\n  //#region Deserialize\n  private parse(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .deserialize(value, options);\n    }\n    return parser.deserialize(value, options);\n  }\n\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? value.map((v) => this.parse(parser, v, parserOptions))\n        : this.parse(parser, value, parserOptions);\n    }\n    return this.parser.deserialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Serialize\n  private toJson(\n    parser: ODataStructuredTypeParser,\n    value: any,\n    options?: OptionsHelper\n  ): any {\n    const type = Types.isPlainObject(value)\n      ? options?.helper.type(value)\n      : undefined;\n    if (type !== undefined) {\n      return parser\n        .childParser((c) => c.isTypeOf(type))\n        .serialize(value, options);\n    }\n    return parser.serialize(value, options);\n  }\n\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parser instanceof ODataStructuredTypeParser) {\n      const parser = this.parser as ODataStructuredTypeParser;\n      return Array.isArray(value)\n        ? (value as any[]).map((v) => this.toJson(parser, v, parserOptions))\n        : this.toJson(parser, value, parserOptions);\n    }\n    return this.parser.serialize(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  //#region Encode\n  encode(value: T, options?: Options): string {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return this.parser.encode(value, {\n      field: this,\n      ...parserOptions,\n    } as StructuredTypeFieldOptions);\n  }\n  //#endregion\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    this.parser = parserForType(this.type);\n    if (this.default !== undefined)\n      this.default = this.deserialize(this.default, options);\n  }\n\n  //#region Json Schema\n  // https://json-schema.org/\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any =\n      this.parser instanceof ODataStructuredTypeFieldParser ||\n      this.parser instanceof ODataStructuredTypeParser ||\n      this.parser instanceof ODataEnumTypeParser\n        ? this.parser.toJsonSchema(options)\n        : ({ title: this.name, type: 'object' } as any);\n\n    if (\n      [\n        'Edm.String',\n        'Edm.Date',\n        'Edm.TimeOfDay',\n        'Edm.DateTimeOffset',\n        'Edm.Guid',\n        'Edm.Binary',\n      ].indexOf(this.type) !== -1\n    ) {\n      schema.type = 'string';\n      if (this.type === 'Edm.Date') schema.format = 'date';\n      else if (this.type === 'Edm.TimeOfDay') schema.format = 'time';\n      else if (this.type === 'Edm.DateTimeOffset') schema.format = 'date-time';\n      else if (this.type === 'Edm.Guid')\n        schema.pattern =\n          '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$';\n      else if (this.type === 'Edm.Binary') schema.contentEncoding = 'base64';\n      else if (this.type === 'Edm.String' && this.maxLength)\n        schema.maxLength = this.maxLength;\n    } else if (\n      ['Edm.Int64', 'Edm.Int32', 'Edm.Int16', 'Edm.Byte', 'Edm.SByte'].indexOf(\n        this.type\n      ) !== -1\n    ) {\n      //TODO: Range\n      schema.type = 'integer';\n    } else if (['Edm.Decimal', 'Edm.Double'].indexOf(this.type) !== -1) {\n      schema.type = 'number';\n    } else if (['Edm.Boolean'].indexOf(this.type) !== -1) {\n      schema.type = 'boolean';\n    }\n    if (this.default) schema.default = this.default;\n    if (this.nullable) schema.type = [schema.type, 'null'];\n    if (this.collection)\n      schema = {\n        type: 'array',\n        items: schema,\n        additionalItems: false,\n      };\n    return schema;\n  }\n  //#endregion\n\n  isKey() {\n    return (\n      this.structuredType.keys?.find((k) => k.name === this.name) !== undefined\n    );\n  }\n\n  hasReferentials() {\n    return this.referentials.length !== 0;\n  }\n\n  isEdmType() {\n    return this.type.startsWith('Edm.');\n  }\n\n  isEnumType() {\n    return this.parser instanceof ODataEnumTypeParser;\n  }\n\n  enum() {\n    if (!this.isEnumType()) throw new Error('Field are not EnumType');\n    return this.parser as ODataEnumTypeParser;\n  }\n\n  isStructuredType() {\n    return this.parser instanceof ODataStructuredTypeParser;\n  }\n\n  structured() {\n    if (!this.isStructuredType())\n      throw new Error('Field are not StrucuturedType');\n    return this.parser as ODataStructuredTypeParser;\n  }\n}\n\nexport class ODataStructuredTypeParser implements Parser {\n  name: string;\n  namespace: string;\n  open: boolean;\n  children: ODataStructuredTypeParser[] = [];\n  alias?: string;\n  base?: string;\n  parent?: ODataStructuredTypeParser;\n  keys?: ODataEntityTypeKey[];\n  fields: ODataStructuredTypeFieldParser[];\n  optionsHelper?: OptionsHelper;\n\n  constructor(\n    config: StructuredTypeConfig,\n    namespace: string,\n    alias?: string\n  ) {\n    this.name = config.name;\n    this.base = config.base;\n    this.open = config.open || false;\n    this.namespace = namespace;\n    this.alias = alias;\n    if (Array.isArray(config.keys))\n      this.keys = config.keys.map((key) => new ODataEntityTypeKey(key));\n    this.fields = Object.entries(\n      config.fields as { [P in keyof T]: StructuredTypeFieldConfig }\n    ).map(\n      ([name, config]) => new ODataStructuredTypeFieldParser(name, this, config)\n    );\n  }\n\n  isTypeOf(type: string) {\n    var names = [`${this.namespace}.${this.name}`];\n    if (this.alias) names.push(`${this.alias}.${this.name}`);\n    return names.indexOf(type) !== -1;\n  }\n\n  typeFor(name: string): string | undefined {\n    const field = this.fields.find((f) => f.name === name);\n    if (field === undefined && this.parent !== undefined)\n      return this.parent.typeFor(name);\n    return field !== undefined ? field.type : undefined;\n  }\n\n  findChildParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): ODataStructuredTypeParser | undefined {\n    if (predicate(this)) return this;\n    let match: ODataStructuredTypeParser | undefined;\n    for (let ch of this.children) {\n      match = ch.findChildParser(predicate);\n      if (match !== undefined) break;\n    }\n    return match;\n  }\n\n  childParser(\n    predicate: (p: ODataStructuredTypeParser) => boolean\n  ): Parser {\n    return this.findChildParser(predicate) || NONE_PARSER;\n  }\n\n  // Deserialize\n  deserialize(value: any, options?: Options): T {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.deserialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value && value[f.name] !== undefined && value[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.deserialize(value[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Serialize\n  serialize(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    if (this.parent !== undefined)\n      value = this.parent.serialize(value, parserOptions);\n    const fields = this.fields.filter(\n      (f) =>\n        f.name in value &&\n        (value as any)[f.name] !== undefined &&\n        (value as any)[f.name] !== null\n    );\n    return {\n      ...value,\n      ...fields.reduce(\n        (acc, f) => ({\n          ...acc,\n          [f.name]: f.serialize((value as any)[f.name], parserOptions),\n        }),\n        {}\n      ),\n    };\n  }\n\n  // Encode\n  encode(value: T, options?: Options): any {\n    const parserOptions =\n      options !== undefined\n        ? new ODataParserOptions(options)\n        : this.optionsHelper;\n    return raw(JSON.stringify(this.serialize(value, parserOptions)));\n  }\n\n  configure({\n    parserForType,\n    options,\n  }: {\n    parserForType: (type: string) => Parser;\n    options: OptionsHelper;\n  }) {\n    this.optionsHelper = options;\n    if (this.base) {\n      const parent = parserForType(this.base) as ODataStructuredTypeParser;\n      parent.children.push(this);\n      this.parent = parent;\n    }\n    this.fields.forEach((f) => f.configure({ parserForType, options }));\n  }\n\n  resolveKey(value: any): any {\n    let key = this.parent?.resolveKey(value) || {};\n    if (Array.isArray(this.keys) && this.keys.length > 0) {\n      for (var k of this.keys) {\n        let v = value as any;\n        let structured = this as ODataStructuredTypeParser | undefined;\n        let field: ODataStructuredTypeFieldParser | undefined;\n        for (let name of k.name.split('/')) {\n          if (structured === undefined) break;\n          field = structured.fields.find((f) => f.name === name);\n          if (field !== undefined) {\n            v = Types.isPlainObject(v) ? v[field.name] : v;\n            structured = field.isStructuredType()\n              ? field.structured()\n              : undefined;\n          }\n        }\n        if (field !== undefined && v !== undefined) {\n          key[k.alias || field.name] = field.encode(v);\n        }\n      }\n    }\n    if (Types.isEmpty(key)) return undefined;\n    return Objects.resolveKey(key);\n  }\n\n  defaults(): { [name: string]: any } {\n    let value = this.parent?.defaults() || {};\n    let fields = this.fields.filter(\n      (f) => f.default !== undefined || f.isStructuredType()\n    );\n    return {\n      ...value,\n      ...fields.reduce((acc, f) => {\n        let value = f.isStructuredType()\n          ? f.structured().defaults()\n          : f.default;\n        return Types.isEmpty(value) ? acc : { ...acc, [f.name]: value };\n      }, {}),\n    };\n  }\n\n  // Json Schema\n  toJsonSchema(options: JsonSchemaOptions = {}) {\n    let schema: any = this.parent?.toJsonSchema(options) || {\n      $schema: 'http://json-schema.org/draft-07/schema#',\n      $id: `${this.namespace}.${this.name}`,\n      title: this.name,\n      type: 'object',\n      properties: {},\n      required: [],\n    };\n    const fields = this.fields.filter(\n      (f) =>\n        (!f.navigation || (options.expand && f.name in options.expand)) &&\n        (!options.select || (options.select).indexOf(f.name) !== -1)\n    );\n    schema.properties = Object.assign(\n      {},\n      schema.properties,\n      fields\n        .map((f) => {\n          let expand =\n            options.expand && f.name in options.expand\n              ? (options.expand as any)[f.name]\n              : undefined;\n          let schema = f.toJsonSchema(expand);\n          if (options.custom && f.name in options.custom)\n            schema = (\n              options.custom[f.name as keyof T] as (\n                schema: any,\n                field: ODataStructuredTypeFieldParser\n              ) => any\n            )(schema, f);\n          return { [f.name]: schema };\n        })\n        .reduce((acc, v) => Object.assign(acc, v), {})\n    );\n    schema.required = [\n      ...schema.required,\n      ...fields\n        .filter((f) =>\n          options.required && f.name in options.required\n            ? options.required[f.name as keyof T]\n            : !f.nullable\n        )\n        .map((f) => f.name),\n    ];\n    return schema;\n  }\n\n  validate(\n    attrs: any,\n    {\n      method,\n      navigation = false,\n    }: {\n      create?: boolean;\n      method?: 'create' | 'update' | 'modify';\n      navigation?: boolean;\n    } = {}\n  ): { [name: string]: any } | undefined {\n    const errors = (this.parent?.validate(attrs, { method, navigation }) ||\n      {}) as { [name: string]: any };\n    const fields = this.fields.filter((f) => !f.navigation || navigation);\n    for (var field of fields) {\n      const value = attrs[field.name as keyof T];\n      const errs = field.validate(value, { method, navigation });\n      if (errs !== undefined) {\n        errors[field.name] = errs;\n      }\n    }\n    return !Types.isEmpty(errors) ? errors : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Operator.html":{"url":"classes/Operator.html","title":"class - Operator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Operator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            Renderable\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                render\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    undefined\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(op: string, values: any[], normalize: boolean)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:210\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        op\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        values\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        normalize\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(aliases?: QueryCustomType[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:229\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aliases\n                                    \n                                                QueryCustomType[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { op: string; values: {}; normalize: boolean; }\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        undefined\n                    \n                \n\n                \n                    \n                        get()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:217\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Options.html":{"url":"interfaces/Options.html","title":"interface - Options","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Options\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            stringAsEnum\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        stringAsEnum\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stringAsEnum:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         ODataVersion\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersion\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OptionsHelper.html":{"url":"interfaces/OptionsHelper.html","title":"interface - OptionsHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OptionsHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Options\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            exponentialDecimals\n                                        \n                                \n                                \n                                        \n                                            helper\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ieee754Compatible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            streaming\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exponentialDecimals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exponentialDecimals:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        helper\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        helper:         ODataVersionHelper\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataVersionHelper\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ieee754Compatible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ieee754Compatible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         ODataMetadataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ODataMetadataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        streaming\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        streaming:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Parser.html":{"url":"interfaces/Parser.html","title":"interface - Parser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Parser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deserialize\n                                    \n                                \n                                \n                                    \n                                        encode\n                                    \n                                \n                                \n                                    \n                                        serialize\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deserialize\n                        \n                    \n                \n            \n            \n                \ndeserialize(value: any, options?: OptionsHelper | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                OptionsHelper | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encode\n                        \n                    \n                \n            \n            \n                \nencode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                OptionsHelper | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: any, options?: OptionsHelper | StructuredTypeFieldOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/types.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                OptionsHelper | StructuredTypeFieldOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Renderable.html":{"url":"interfaces/Renderable.html","title":"interface - Renderable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Renderable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        render\n                                    \n                                \n                                \n                                    \n                                        toJSON\n                                    \n                                \n                                \n                                    \n                                        toString\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(aliases?: QueryCustomType[])\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aliases\n                                    \n                                                QueryCustomType[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseJson.html":{"url":"interfaces/ResponseJson.html","title":"interface - ResponseJson","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseJson\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/cache/storage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            statusText\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:     any | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataCache, ODataCacheEntry } from './cache';\nimport { ODataRequest, ODataResponse } from '../resources';\n\ninterface ResponseJson {\n  body: any | null;\n  headers: { [name: string]: string | string[] };\n  status: number;\n  statusText: string;\n  url: string | null;\n}\n\nexport class ODataInStorageCache extends ODataCache {\n  name: string;\n  storage: Storage;\n\n  constructor({\n    name,\n    storage = sessionStorage,\n    timeout,\n  }: {\n    timeout?: number;\n    name: string;\n    storage?: Storage;\n  }) {\n    super({ timeout });\n    this.name = name;\n    this.storage = storage;\n    this.restore();\n    window.addEventListener('beforeunload', () => this.store());\n  }\n\n  store() {\n    this.storage.setItem(\n      this.name,\n      JSON.stringify(Array.from(this.entries.entries()))\n    );\n  }\n\n  restore() {\n    this.entries = new Map>(\n      JSON.parse(this.storage.getItem(this.name) || '[]')\n    );\n  }\n\n  flush() {\n    super.flush();\n    this.store();\n  }\n\n  putResponse(req: ODataRequest, res: ODataResponse) {\n    const scope = this.scope(req);\n    const tags = this.tags(req, res);\n    this.put(req.pathWithParams, res.toJSON(), {\n      timeout: res.options.maxAge,\n      scope,\n      tags,\n    });\n  }\n\n  getResponse(req: ODataRequest): ODataResponse | undefined {\n    const scope = this.scope(req);\n    const data = this.get(req.pathWithParams, { scope });\n\n    return data !== undefined ? ODataResponse.fromJSON(req, data) : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseOptions.html":{"url":"interfaces/ResponseOptions.html","title":"interface - ResponseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResponseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OptionsHelper\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cacheability\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxAge\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cacheability\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheability:         CacheCacheability\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CacheCacheability\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxAge\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxAge:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SegmentHandler.html":{"url":"classes/SegmentHandler.html","title":"class - SegmentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SegmentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/path/handlers.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearKey\n                            \n                            \n                                clearParameters\n                            \n                            \n                                hasKey\n                            \n                            \n                                hasParameters\n                            \n                            \n                                key\n                            \n                            \n                                parameters\n                            \n                            \n                                path\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    name\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(segment: ODataSegment)\n                    \n                \n                        \n                            \n                                Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        segment\n                                                  \n                                                        \n                                                                        ODataSegment\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearKey\n                        \n                    \n                \n            \n            \n                \nclearKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearParameters\n                        \n                    \n                \n            \n            \n                \nclearParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasKey\n                        \n                    \n                \n            \n            \n                \nhasKey()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasParameters\n                        \n                    \n                \n            \n            \n                \nhasParameters()\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n            \n                \nkey(value?: EntityKey)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:20\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                EntityKey\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parameters\n                        \n                    \n                \n            \n            \n                \nparameters(value?: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:30\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n            \n                \npath(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n            \n                \ntype(value?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n\n                \n                    \n                        getname()\n                    \n                \n                            \n                                \n                                    Defined in projects/angular-odata/src/lib/resources/path/handlers.ts:9\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { PathSegmentNames } from '../../types';\nimport { Types } from '../../utils';\n\nimport { EntityKey } from '../resource';\nimport type { ODataPathSegments, ODataSegment } from './segments';\n\nexport class SegmentHandler {\n  constructor(private segment: ODataSegment) {}\n  get name() {\n    return this.segment.name;\n  }\n  type(value?: string) {\n    if (value !== undefined) this.segment.type = value;\n    return this.segment.type;\n  }\n  path(value?: string) {\n    if (value !== undefined) this.segment.path = value;\n    return this.segment.path;\n  }\n  key(value?: EntityKey) {\n    if (value !== undefined) this.segment.key = value;\n    return this.segment.key as EntityKey;\n  }\n  hasKey() {\n    return !Types.isEmpty(this.segment.key);\n  }\n  clearKey() {\n    delete this.segment.key;\n  }\n  parameters(value?: T) {\n    if (value !== undefined) this.segment.parameters = value;\n    return this.segment.parameters as T;\n  }\n  hasParameters() {\n    return !Types.isEmpty(this.segment.parameters);\n  }\n  clearParameters() {\n    delete this.segment.parameters;\n  }\n}\n\nexport class ODataPathSegmentsHandler {\n  constructor(protected segments: ODataPathSegments) {}\n  entitySet() {\n    return this.segments.get(PathSegmentNames.entitySet);\n  }\n  singleton() {\n    return this.segments.get(PathSegmentNames.singleton);\n  }\n  action() {\n    return this.segments.get(PathSegmentNames.action);\n  }\n  function() {\n    return this.segments.get(PathSegmentNames.function);\n  }\n  keys(values?: (EntityKey | undefined)[]) {\n    return this.segments.keys(values);\n  }\n  property() {\n    return this.segments.get(PathSegmentNames.property);\n  }\n  navigationProperty() {\n    return this.segments.get(PathSegmentNames.navigationProperty);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringAndCollectionFunctions.html":{"url":"classes/StringAndCollectionFunctions.html","title":"class - StringAndCollectionFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringAndCollectionFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                concat\n                            \n                            \n                                contains\n                            \n                            \n                                endsWith\n                            \n                            \n                                indexOf\n                            \n                            \n                                length\n                            \n                            \n                                startsWith\n                            \n                            \n                                subString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        concat\n                        \n                    \n                \n            \n            \n                \nconcat(field: T, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contains\n                        \n                    \n                \n            \n            \n                \ncontains(field: T, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endsWith\n                        \n                    \n                \n            \n            \n                \nendsWith(field: T, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        indexOf\n                        \n                    \n                \n            \n            \n                \nindexOf(field: T, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        length\n                        \n                    \n                \n            \n            \n                \nlength(value: T, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startsWith\n                        \n                    \n                \n            \n            \n                \nstartsWith(field: T, value: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subString\n                        \n                    \n                \n            \n            \n                \nsubString(field: T, start: any, length?: any, normalize?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    start\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    length\n                                    \n                                                any\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StringFunctions.html":{"url":"classes/StringFunctions.html","title":"class - StringFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StringFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                matchesPattern\n                            \n                            \n                                toLower\n                            \n                            \n                                toUpper\n                            \n                            \n                                trim\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        matchesPattern\n                        \n                    \n                \n            \n            \n                \nmatchesPattern(value: T | string, pattern: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pattern\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toLower\n                        \n                    \n                \n            \n            \n                \ntoLower(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toUpper\n                        \n                    \n                \n            \n            \n                \ntoUpper(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trim\n                        \n                    \n                \n            \n            \n                \ntrim(value: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuredTypeFieldOptions.html":{"url":"interfaces/StructuredTypeFieldOptions.html","title":"interface - StructuredTypeFieldOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructuredTypeFieldOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OptionsHelper\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            field\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         StructuredTypeFieldConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuredTypeFieldConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ODataVersionHelper } from './helper';\nimport { Observable } from 'rxjs';\n\nexport type ODataVersion = '2.0' | '3.0' | '4.0';\nexport type FetchPolicy =\n  | 'cache-first'\n  | 'cache-and-network'\n  | 'network-only'\n  | 'no-cache'\n  | 'cache-only';\nexport type ODataMetadataType = 'minimal' | 'full' | 'none';\nexport type CacheCacheability = 'public' | 'private' | 'no-cache' | 'no-store';\n\nexport enum PathSegmentNames {\n  batch = 'batch',\n  metadata = 'metadata',\n  entitySet = 'entitySet',\n  singleton = 'singleton',\n  type = 'type',\n  property = 'property',\n  navigationProperty = 'navigationProperty',\n  reference = 'reference',\n  value = 'value',\n  count = 'count',\n  function = 'function',\n  action = 'action',\n}\n\nexport enum QueryOptionNames {\n  select = 'select',\n  expand = 'expand',\n  compute = 'compute',\n  filter = 'filter',\n  search = 'search',\n  transform = 'transform',\n  orderBy = 'orderBy',\n  top = 'top',\n  skip = 'skip',\n  skiptoken = 'skiptoken',\n  format = 'format',\n  count = 'count',\n}\n\nexport interface Options {\n  version?: ODataVersion;\n  stringAsEnum?: boolean;\n}\n\nexport interface ApiOptions extends Options {\n  params?: { [param: string]: string | string[] };\n  headers?: { [param: string]: string | string[] };\n  withCredentials?: boolean;\n  //Headers\n  accept?: {\n    exponentialDecimals?: boolean;\n    metadata?: ODataMetadataType;\n    ieee754Compatible?: boolean;\n    streaming?: boolean;\n  };\n  etag?: {\n    ifMatch?: boolean;\n    ifNoneMatch?: boolean;\n  };\n  prefer?: {\n    maxPageSize?: number;\n    return?: 'representation' | 'minimal';\n    continueOnError?: boolean;\n    includeAnnotations?: string;\n  };\n  stripMetadata?: ODataMetadataType;\n  fetchPolicy?: FetchPolicy;\n  bodyQueryOptions?: QueryOptionNames[];\n}\n\nexport interface OptionsHelper extends Options {\n  helper: ODataVersionHelper;\n  exponentialDecimals?: boolean;\n  metadata?: ODataMetadataType;\n  ieee754Compatible?: boolean;\n  streaming?: boolean;\n}\n\nexport interface ResponseOptions extends OptionsHelper {\n  cacheability?: CacheCacheability;\n  maxAge?: number;\n}\n\nexport interface StructuredTypeFieldOptions extends OptionsHelper {\n  field: StructuredTypeFieldConfig;\n}\n\nexport interface Parser {\n  // Deserialize value/s from request body.\n  deserialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): T;\n  // Serialize value/s for request body.\n  serialize(\n    value: any,\n    options?: OptionsHelper | StructuredTypeFieldOptions\n  ): any;\n  //Encode value/s for URL parameter or query-string.\n  encode(value: any, options?: OptionsHelper | StructuredTypeFieldOptions): any;\n}\n\nexport const NONE_PARSER = {\n  deserialize: (value: any) => value,\n  serialize: (value: any) => value,\n  encode: (value: any) => value,\n} as Parser;\n\nexport interface Cache {\n  put(key: string, payload: T, ...opts: any[]): void;\n  get(key: string, ...opts: any[]): T | undefined;\n}\n\n//#region Configs\nexport type ApiConfig = {\n  serviceRootUrl: string;\n  name?: string;\n  version?: ODataVersion;\n  default?: boolean;\n  creation?: Date;\n  cache?: Cache;\n  errorHandler?: (error: any, caught: Observable) => Observable;\n  options?: ApiOptions;\n  parsers?: { [type: string]: Parser };\n  schemas?: SchemaConfig[];\n};\nexport type AnnotationConfig = {\n  term: string;\n  string?: string;\n  bool?: boolean;\n  int?: number;\n  permissions?: string[];\n  properties?: string[];\n};\nexport type SchemaConfig = {\n  namespace: string;\n  alias?: string;\n  annotations?: AnnotationConfig[];\n  enums?: EnumTypeConfig[];\n  entities?: StructuredTypeConfig[];\n  callables?: CallableConfig[];\n  containers?: EntityContainerConfig[];\n};\n\nexport type EntityContainerConfig = {\n  name: string;\n  annotations?: AnnotationConfig[];\n  entitySets?: EntitySetConfig[];\n};\n\nexport type EnumTypeFieldConfig = {\n  value: number;\n  annotations?: AnnotationConfig[];\n};\n\nexport type EnumTypeConfig = {\n  name: string;\n  flags?: boolean;\n  annotations?: AnnotationConfig[];\n  members: { [name: string]: number } | { [value: number]: string };\n  fields: { [member: string]: EnumTypeFieldConfig };\n};\n\nexport type StructuredTypeFieldConfig = {\n  type: string;\n  default?: any;\n  maxLength?: number;\n  key?: boolean;\n  collection?: boolean;\n  nullable?: boolean;\n  navigation?: boolean;\n  precision?: number;\n  annotations?: AnnotationConfig[];\n  scale?: number;\n  referentials?: { property: string; referencedProperty: string }[];\n  referential?: string;\n  referenced?: string;\n};\n\nexport type StructuredTypeConfig = {\n  name: string;\n  base?: string;\n  open?: boolean;\n  model?: { new (...params: any[]): any };\n  collection?: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n  keys?: { name: string; alias?: string }[];\n  fields: { [P in keyof T]?: StructuredTypeFieldConfig };\n};\n\nexport type Parameter = {\n  type: string;\n  nullable?: boolean;\n  collection?: boolean;\n};\n\nexport type CallableConfig = {\n  name: string;\n  entitySetPath?: string;\n  bound?: boolean;\n  composable?: boolean;\n  parameters?: { [name: string]: Parameter };\n  return?: { type: string; collection?: boolean };\n};\nexport type EntitySetConfig = {\n  name: string;\n  entityType: string;\n  service: { new (...params: any[]): any };\n  annotations?: AnnotationConfig[];\n};\n//#endregion\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TypeFunctions.html":{"url":"classes/TypeFunctions.html","title":"class - TypeFunctions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TypeFunctions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/angular-odata/src/lib/resources/query/syntax.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cast\n                            \n                            \n                                isof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cast\n                        \n                    \n                \n            \n            \n                \ncast(value: T | string, type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:183\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isof\n                        \n                    \n                \n            \n            \n                \nisof(value: T | string, type?: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/angular-odata/src/lib/resources/query/syntax.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Function\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { normalizeValue } from './builder';\nimport type { QueryCustomType } from './builder';\n\nexport interface Renderable {\n  render(aliases?: QueryCustomType[]): string;\n  toString(): string;\n  toJSON(): any;\n}\n\nexport type Funcs = (\n  x: ODataSyntax\n) => Function | Operator | Grouping | Navigation;\nexport type Field = keyof T | Funcs;\n\nfunction applyMixins(derivedCtor: any, constructors: any[]) {\n  constructors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      Object.defineProperty(\n        derivedCtor.prototype,\n        name,\n        Object.getOwnPropertyDescriptor(baseCtor.prototype, name) ||\n          Object.create(null)\n      );\n    });\n  });\n}\n\nfunction render(\n  value: any,\n  aliases?: QueryCustomType[],\n  normalize?: boolean\n): string | number | boolean | null {\n  if (typeof value === 'function') {\n    return render(value(syntax), aliases, normalize);\n  }\n  if (typeof value === 'object' && value !== null && 'render' in value) {\n    return render(value.render(aliases), aliases, normalize);\n  }\n  return normalize ? normalizeValue(value, aliases) : value;\n}\n\nexport class Function implements Renderable {\n  constructor(\n    protected name: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Function';\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [field, ...values] = this.values;\n\n    field = render(field);\n    let params = [\n      field,\n      ...values.map((v) => render(v, aliases, this.normalize)),\n    ];\n    return `${this.name}(${params.join(', ')})`;\n  }\n}\n\nexport class StringAndCollectionFunctions {\n  concat(field: T, value: any, normalize?: boolean) {\n    return new Function('concat', [field, value], normalize);\n  }\n  contains(field: T, value: any, normalize?: boolean) {\n    return new Function('contains', [field, value], normalize);\n  }\n  endsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('endswith', [field, value], normalize);\n  }\n  indexOf(field: T, value: any, normalize?: boolean) {\n    return new Function('indexof', [field, value], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n  startsWith(field: T, value: any, normalize?: boolean) {\n    return new Function('startswith', [field, value], normalize);\n  }\n  subString(field: T, start: any, length?: any, normalize?: boolean) {\n    let values = [field, start];\n    if (length !== undefined) {\n      values.push(length);\n    }\n    return new Function('substring', values, normalize);\n  }\n}\n\nexport class CollectionFunctions {\n  hasSubset(s1: T, s2: any) {\n    return new Function('hassubset', [s1, s2]);\n  }\n  hasSubsequence(s1: T, s2: any) {\n    return new Function('hassubsequence', [s1, s2]);\n  }\n}\n\nexport class StringFunctions {\n  matchesPattern(value: T | string, pattern: string) {\n    return new Function('matchesPattern', [value, pattern]);\n  }\n  toLower(value: T) {\n    return new Function('tolower', [value]);\n  }\n  toUpper(value: T) {\n    return new Function('toupper', [value]);\n  }\n  trim(value: T) {\n    return new Function('trim', [value]);\n  }\n}\n\nexport class DateAndTimeFunctions {\n  date(value: T) {\n    return new Function('date', [value]);\n  }\n  day(value: T) {\n    return new Function('day', [value]);\n  }\n  fractionalseconds(value: T) {\n    return new Function('fractionalseconds', [value]);\n  }\n  hour(value: T) {\n    return new Function('hour', [value]);\n  }\n  maxdatetime(value: T) {\n    return new Function('maxdatetime', [value]);\n  }\n  mindatetime(value: T) {\n    return new Function('mindatetime', [value]);\n  }\n  minute(value: T) {\n    return new Function('minute', [value]);\n  }\n  month(value: T) {\n    return new Function('month', [value]);\n  }\n  now() {\n    return new Function('now', []);\n  }\n  second(value: T) {\n    return new Function('second', [value]);\n  }\n  time(value: T) {\n    return new Function('time', [value]);\n  }\n  totaloffsetminutes(value: T) {\n    return new Function('totaloffsetminutes', [value]);\n  }\n  totalseconds(value: T) {\n    return new Function('totalseconds', [value]);\n  }\n  year(value: T) {\n    return new Function('year', [value]);\n  }\n}\n\nexport class ArithmeticFunctions {\n  ceiling(value: T | string) {\n    return new Function('ceiling', [value]);\n  }\n  floor(value: T | string) {\n    return new Function('floor', [value]);\n  }\n  round(value: T | string) {\n    return new Function('round', [value]);\n  }\n}\n\nexport class TypeFunctions {\n  cast(value: T | string, type?: string) {\n    return new Function('cast', [value, type]);\n  }\n\n  isof(value: T | string, type?: string) {\n    return new Function('isof', [value, type]);\n  }\n}\n\nexport class GeoFunctions {\n  distance(value: T, point: string, normalize?: boolean) {\n    return new Function('distance', [value, point], normalize);\n  }\n  intersects(value: T, polygon: string, normalize?: boolean) {\n    return new Function('intersects', [value, polygon], normalize);\n  }\n  length(value: T, normalize?: boolean) {\n    return new Function('length', [value], normalize);\n  }\n}\n\nexport class ConditionalFunctions {\n  case(condition: T | string, value: any) {\n    return new Function('case', [condition, value]);\n  }\n}\n\nexport class Operator implements Renderable {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Operator';\n  }\n\n  toJSON() {\n    return {\n      op: this.op,\n      values: this.values,\n      normalize: this.normalize,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left);\n    if (right !== undefined) {\n      right = Array.isArray(right)\n        ? `(${right.map((v) => render(v, aliases, this.normalize)).join(',')})`\n        : render(right, aliases, this.normalize);\n      return `${left} ${this.op} ${right}`;\n    }\n    return `${this.op}(${left})`;\n  }\n}\n\nexport class LogicalOperators {\n  eq(left: any, right: any, normalize?: boolean) {\n    return new Operator('eq', [left, right], normalize);\n  }\n  ne(left: any, right: any, normalize?: boolean) {\n    return new Operator('ne', [left, right], normalize);\n  }\n  gt(left: any, right: any, normalize?: boolean) {\n    return new Operator('gt', [left, right], normalize);\n  }\n  ge(left: any, right: any, normalize?: boolean) {\n    return new Operator('ge', [left, right], normalize);\n  }\n  lt(left: any, right: any, normalize?: boolean) {\n    return new Operator('lt', [left, right], normalize);\n  }\n  le(left: any, right: any, normalize?: boolean) {\n    return new Operator('le', [left, right], normalize);\n  }\n  and(left: any, right: any, normalize?: boolean) {\n    return new Operator('and', [left, right], normalize);\n  }\n  or(left: any, right: any, normalize?: boolean) {\n    return new Operator('or', [left, right], normalize);\n  }\n  not(value: any, normalize?: boolean) {\n    return new Operator('not', [value], normalize);\n  }\n  has(left: any, right: any, normalize?: boolean) {\n    return new Operator('has', [left, right], normalize);\n  }\n  in(left: any, right: any, normalize?: boolean) {\n    return new Operator('in', [left, right], normalize);\n  }\n}\n\nexport class ArithmeticOperators {\n  add(left: any, right: any, normalize?: boolean) {\n    return new Operator('add', [left, right], normalize);\n  }\n  sub(left: any, right: any, normalize?: boolean) {\n    return new Operator('sub', [left, right], normalize);\n  }\n  mul(left: any, right: any, normalize?: boolean) {\n    return new Operator('mul', [left, right], normalize);\n  }\n  div(left: any, right: any, normalize?: boolean) {\n    return new Operator('div', [left, right], normalize);\n  }\n  mod(left: any, right: any, normalize?: boolean) {\n    return new Operator('mod', [left, right], normalize);\n  }\n  neg(value: any, normalize?: boolean) {\n    return new Operator('-', [value], normalize);\n  }\n}\n\nexport class Grouping implements Renderable {\n  constructor(protected group: Renderable) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Grouping';\n  }\n\n  toJSON() {\n    return {\n      group: this.group.toJSON(),\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `(${render(this.group, aliases)})`;\n  }\n}\n\nexport class Navigation implements Renderable {\n  constructor(protected field: T, protected value: Field) {}\n\n  get [Symbol.toStringTag]() {\n    return 'Navigation';\n  }\n\n  toJSON() {\n    return {\n      field: this.field,\n      value: this.value,\n    };\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    return `${this.field}/${render(this.value, aliases)}`;\n  }\n}\n\nexport class GroupingAndNavigationOperators {\n  grouping(value: any) {\n    return new Grouping(value);\n  }\n\n  navigation(field: T, value: Field) {\n    return new Navigation(field, value);\n  }\n}\n\nexport class Lambda extends Operator {\n  constructor(\n    protected op: string,\n    protected values: any[],\n    protected normalize: boolean = true\n  ) {\n    super(op, values, normalize);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lambda';\n  }\n\n  render(aliases?: QueryCustomType[]): string {\n    let [left, right] = this.values;\n\n    left = render(left, aliases);\n    let alias = left.split('/').pop().toLowerCase();\n    return `${left}/${this.op}(${alias}:${alias}/${render(right, aliases)})`;\n  }\n}\n\nexport class LambdaOperators {\n  any(field: T, value: any) {\n    return new Lambda('any', [field, value]);\n  }\n\n  all(field: T, value: any) {\n    return new Lambda('all', [field, value]);\n  }\n}\n\nexport class ODataOperators {}\nexport interface ODataOperators\n  extends LogicalOperators,\n    ArithmeticOperators,\n    GroupingAndNavigationOperators,\n    LambdaOperators {}\n\napplyMixins(ODataOperators, [\n  LogicalOperators,\n  ArithmeticOperators,\n  GroupingAndNavigationOperators,\n  LambdaOperators,\n]);\nexport const operators: ODataOperators = new ODataOperators();\n\nexport class ODataFunctions {}\nexport interface ODataFunctions\n  extends StringAndCollectionFunctions,\n    CollectionFunctions,\n    StringFunctions,\n    DateAndTimeFunctions,\n    ArithmeticFunctions,\n    TypeFunctions,\n    GeoFunctions,\n    ConditionalFunctions {}\n\napplyMixins(ODataFunctions, [\n  StringAndCollectionFunctions,\n  CollectionFunctions,\n  StringFunctions,\n  DateAndTimeFunctions,\n  ArithmeticFunctions,\n  TypeFunctions,\n  GeoFunctions,\n  ConditionalFunctions,\n]);\nexport const functions: ODataFunctions = new ODataFunctions();\n\nexport class ODataSyntax {}\nexport interface ODataSyntax extends ODataOperators, ODataFunctions {}\napplyMixins(ODataSyntax, [ODataOperators, ODataFunctions]);\n\nexport const syntax: ODataSyntax = new ODataSyntax();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~12.2.0\n        \n            @angular/common : ~12.2.0\n        \n            @angular/compiler : ~12.2.0\n        \n            @angular/core : ~12.2.0\n        \n            @angular/forms : ~12.2.0\n        \n            @angular/platform-browser : ~12.2.0\n        \n            @angular/platform-browser-dynamic : ~12.2.0\n        \n            @angular/router : ~12.2.0\n        \n            rxjs : ~6.6.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.11.4\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Connector   (projects/.../expressions.ts)\n                        \n                        \n                            FieldType   (projects/.../metadata.ts)\n                        \n                        \n                            ODataModelState   (projects/.../options.ts)\n                        \n                        \n                            PathSegmentNames   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomTypes   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptionNames   (projects/.../types.ts)\n                        \n                        \n                            StandardAggregateMethods   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/query/expressions.ts\n    \n        \n            \n                \n                    \n                        \n                        Connector\n                    \n                \n                        \n                            \n                                 AND\n                            \n                        \n                        \n                            \n                                Value : and\n                            \n                        \n                        \n                            \n                                 OR\n                            \n                        \n                        \n                            \n                                Value : or\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/responses/metadata.ts\n    \n        \n            \n                \n                    \n                        \n                        FieldType\n                    \n                \n                        \n                            \n                                 ATTRIBUTE\n                            \n                        \n                        \n                            \n                                 TAG\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/models/options.ts\n    \n        \n            \n                \n                    \n                        \n                        ODataModelState\n                    \n                \n                        \n                            \n                                 Added\n                            \n                        \n                        \n                            \n                                 Removed\n                            \n                        \n                        \n                            \n                                 Changed\n                            \n                        \n                        \n                            \n                                 Unchanged\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/types.ts\n    \n        \n            \n                \n                    \n                        \n                        PathSegmentNames\n                    \n                \n                        \n                            \n                                 batch\n                            \n                        \n                        \n                            \n                                Value : batch\n                            \n                        \n                        \n                            \n                                 metadata\n                            \n                        \n                        \n                            \n                                Value : metadata\n                            \n                        \n                        \n                            \n                                 entitySet\n                            \n                        \n                        \n                            \n                                Value : entitySet\n                            \n                        \n                        \n                            \n                                 singleton\n                            \n                        \n                        \n                            \n                                Value : singleton\n                            \n                        \n                        \n                            \n                                 type\n                            \n                        \n                        \n                            \n                                Value : type\n                            \n                        \n                        \n                            \n                                 property\n                            \n                        \n                        \n                            \n                                Value : property\n                            \n                        \n                        \n                            \n                                 navigationProperty\n                            \n                        \n                        \n                            \n                                Value : navigationProperty\n                            \n                        \n                        \n                            \n                                 reference\n                            \n                        \n                        \n                            \n                                Value : reference\n                            \n                        \n                        \n                            \n                                 value\n                            \n                        \n                        \n                            \n                                Value : value\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n                        \n                            \n                                 function\n                            \n                        \n                        \n                            \n                                Value : function\n                            \n                        \n                        \n                            \n                                 action\n                            \n                        \n                        \n                            \n                                Value : action\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        QueryOptionNames\n                    \n                \n                        \n                            \n                                 select\n                            \n                        \n                        \n                            \n                                Value : select\n                            \n                        \n                        \n                            \n                                 expand\n                            \n                        \n                        \n                            \n                                Value : expand\n                            \n                        \n                        \n                            \n                                 compute\n                            \n                        \n                        \n                            \n                                Value : compute\n                            \n                        \n                        \n                            \n                                 filter\n                            \n                        \n                        \n                            \n                                Value : filter\n                            \n                        \n                        \n                            \n                                 search\n                            \n                        \n                        \n                            \n                                Value : search\n                            \n                        \n                        \n                            \n                                 transform\n                            \n                        \n                        \n                            \n                                Value : transform\n                            \n                        \n                        \n                            \n                                 orderBy\n                            \n                        \n                        \n                            \n                                Value : orderBy\n                            \n                        \n                        \n                            \n                                 top\n                            \n                        \n                        \n                            \n                                Value : top\n                            \n                        \n                        \n                            \n                                 skip\n                            \n                        \n                        \n                            \n                                Value : skip\n                            \n                        \n                        \n                            \n                                 skiptoken\n                            \n                        \n                        \n                            \n                                Value : skiptoken\n                            \n                        \n                        \n                            \n                                 format\n                            \n                        \n                        \n                            \n                                Value : format\n                            \n                        \n                        \n                            \n                                 count\n                            \n                        \n                        \n                            \n                                Value : count\n                            \n                        \n            \n        \n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n        \n            \n                \n                    \n                        \n                        QueryCustomTypes\n                    \n                \n                        \n                            \n                                 Raw\n                            \n                        \n                        \n                            \n                                 Alias\n                            \n                        \n                        \n                            \n                                 Duration\n                            \n                        \n                        \n                            \n                                 Binary\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StandardAggregateMethods\n                    \n                \n                        \n                            \n                                 sum\n                            \n                        \n                        \n                            \n                                Value : sum\n                            \n                        \n                        \n                            \n                                 min\n                            \n                        \n                        \n                            \n                                Value : min\n                            \n                        \n                        \n                            \n                                 max\n                            \n                        \n                        \n                            \n                                Value : max\n                            \n                        \n                        \n                            \n                                 average\n                            \n                        \n                        \n                            \n                                Value : average\n                            \n                        \n                        \n                            \n                                 countdistinct\n                            \n                        \n                        \n                            \n                                Value : countdistinct\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addBody   (projects/.../client.ts)\n                        \n                        \n                            applyMixins   (projects/.../syntax.ts)\n                        \n                        \n                            buildAggregate   (projects/.../builder.ts)\n                        \n                        \n                            buildExpand   (projects/.../builder.ts)\n                        \n                        \n                            buildFilter   (projects/.../builder.ts)\n                        \n                        \n                            buildGroupBy   (projects/.../builder.ts)\n                        \n                        \n                            buildOrderBy   (projects/.../builder.ts)\n                        \n                        \n                            buildPathAndQuery   (projects/.../builder.ts)\n                        \n                        \n                            buildTransforms   (projects/.../builder.ts)\n                        \n                        \n                            buildUrl   (projects/.../builder.ts)\n                        \n                        \n                            cloneReg   (projects/.../types.ts)\n                        \n                        \n                            cloneSymbol   (projects/.../types.ts)\n                        \n                        \n                            createSettings   (projects/.../module.ts)\n                        \n                        \n                            escapeIllegalChars   (projects/.../builder.ts)\n                        \n                        \n                            forEach   (projects/.../objects.ts)\n                        \n                        \n                            getStringCollectionClause   (projects/.../builder.ts)\n                        \n                        \n                            Model   (projects/.../options.ts)\n                        \n                        \n                            ModelField   (projects/.../options.ts)\n                        \n                        \n                            normalizeValue   (projects/.../builder.ts)\n                        \n                        \n                            now   (projects/.../strings.ts)\n                        \n                        \n                            parseNot   (projects/.../builder.ts)\n                        \n                        \n                            pathSegmentsBuilder   (projects/.../segments.ts)\n                        \n                        \n                            render   (projects/.../syntax.ts)\n                        \n                        \n                            renderPrimitiveValue   (projects/.../builder.ts)\n                        \n                        \n                            Unnamed function   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/client.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addBody\n                        \n                    \n                \n            \n            \n                \naddBody(options, body)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/syntax.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        applyMixins\n                        \n                    \n                \n            \n            \n                \napplyMixins(derivedCtor: any, constructors)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    derivedCtor\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    constructors\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender(value: any, aliases?, normalize?: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    aliases\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    normalize\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | number | boolean | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        buildAggregate\n                        \n                    \n                \n            \n            \n                \nbuildAggregate(aggregate)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aggregate\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildExpand\n                        \n                    \n                \n            \n            \n                \nbuildExpand(expands: Expand)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    expands\n                                    \n                                                Expand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildFilter\n                        \n                    \n                \n            \n            \n                \nbuildFilter(filters: Filter, aliases, propPrefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    filters\n                                    \n                                                Filter\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                                \n                                    aliases\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                                \n                                    propPrefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildGroupBy\n                        \n                    \n                \n            \n            \n                \nbuildGroupBy(groupBy: GroupBy)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupBy\n                                    \n                                                GroupBy\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildOrderBy\n                        \n                    \n                \n            \n            \n                \nbuildOrderBy(orderBy: OrderBy, prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    orderBy\n                                    \n                                                OrderBy\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildPathAndQuery\n                        \n                    \n                \n            \n            \n                \nbuildPathAndQuery(__namedParameters: {select: Partial>, search, skiptoken, format, top, skip, filter, transform, orderBy, key, count, expand, action, func, aliases})\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    select\n                                    \n                                                Partial>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    search\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    skiptoken\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    format\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    top\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    skip\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filter\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    transform\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    orderBy\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    count\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expand\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    func\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    aliases\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildTransforms\n                        \n                    \n                \n            \n            \n                \nbuildTransforms(transforms)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transforms\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildUrl\n                        \n                    \n                \n            \n            \n                \nbuildUrl(path: string, params)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        escapeIllegalChars\n                        \n                    \n                \n            \n            \n                \nescapeIllegalChars(string: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    string\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStringCollectionClause\n                        \n                    \n                \n            \n            \n                \ngetStringCollectionClause(lambdaParameter: string, value: any, collectionOperator: string, propName: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lambdaParameter\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    collectionOperator\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    propName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        normalizeValue\n                        \n                    \n                \n            \n            \n                \nnormalizeValue(value: Value, aliases?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Value\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    aliases\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseNot\n                        \n                    \n                \n            \n            \n                \nparseNot(builtFilters)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    builtFilters\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        renderPrimitiveValue\n                        \n                    \n                \n            \n            \n                \nrenderPrimitiveValue(key: string, val: any, aliases)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    val\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    aliases\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Unnamed function\n                        \n                    \n                \n            \n            \n                \nUnnamed function(__namedParameters: {select: Partial>, search, skiptoken, format, top, skip, filter, transform, orderBy, key, count, expand, action, func, aliases})\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    select\n                                    \n                                                Partial>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    search\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    skiptoken\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    format\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    top\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    skip\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filter\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    transform\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    orderBy\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    count\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expand\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    func\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    aliases\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cloneReg\n                        \n                    \n                \n            \n            \n                \ncloneReg(targe: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    targe\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cloneSymbol\n                        \n                    \n                \n            \n            \n                \ncloneSymbol(targe: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    targe\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createSettings\n                        \n                    \n                \n            \n            \n                \ncreateSettings(configs)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    configs\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/objects.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        forEach\n                        \n                    \n                \n            \n            \n                \nforEach(array, iteratee)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    array\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    iteratee\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/models/options.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Model\n                        \n                    \n                \n            \n            \n                \nModel(__namedParameters: {cid: string})\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    cid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        CID\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ModelField\n                        \n                    \n                \n            \n            \n                \nModelField(__namedParameters: {name, ...options: any[]})\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/strings.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        now\n                        \n                    \n                \n            \n            \n                \nnow()\n                \n            \n\n\n\n\n        \n    \n    projects/angular-odata/src/lib/resources/path/segments.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pathSegmentsBuilder\n                        \n                    \n                \n            \n            \n                \npathSegmentsBuilder(segment: ODataSegment)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    segment\n                                    \n                                                ODataSegment\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAngular OData\n\n\nA fluent API for querying, creating, updating and deleting OData resources in Angular.\nOData service for Angular.\nPlease check also my other related project, OData Angular Generator\nDemo:\nFull examples of the library:\n\nAngularODataEntity\n\nTable of contents\n\nInstallation\nUsage\nGenerator\nOData Version\nQuery Builder\nDocumentation\n\nInstallation\nInstall from npm:\nnpm i angular-odataUsage\n\nAdd module to your project\n\nimport { NgModule } from '@angular/core';\nimport { ODataModule } from 'angular-odata';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot({\n      serviceRootUrl: 'https://services.odata.org/V4/(S(4m0tuxtnhcfctl4gzem3gr10))/TripPinServiceRW/'\n    })\n    ...\n  ]\n})\nexport class AppModule {}\nInject and use the ODataServiceFactory\n\nimport { Component } from \"@angular/core\";\nimport { ODataClient, ODATA_ETAG } from \"angular-odata\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: [\"./app.component.css\"],\n})\nexport class AppComponent {\n  title = \"TripPin\";\n  constructor(private factory: ODataServiceFactory) {\n    this.queries();\n  }\n\n  queries() {\n    // Use OData Service Factory\n    let airportsService = this.factory.entitySet(\n      \"Airports\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Airport\"\n    );\n    let airports = airportsService.entities();\n\n    // Fetch airports\n    airports.fetch().subscribe(({ entities }) => {\n      console.log(\"Airports: \", entities);\n    });\n\n    // Fetch airports with count\n    airports\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    // Fetch all airports\n    airports\n      .fetchAll()\n      .subscribe((airports) => console.log(\"All Airports: \", airports));\n\n    // Fetch airport with key and fetch again from cache\n    airports\n      .entity(\"CYYZ\")\n      .fetch()\n      .pipe(\n        switchMap(() =>\n          // From Cache!\n          airports.entity(\"CYYZ\").fetch({ fetchPolicy: \"cache-first\" })\n        )\n      )\n      .subscribe(({ entity, annots }) =>\n        console.log(\"Airport: \", entity, \"Annotations: \", annots)\n      );\n\n    // Clone airports resource and filter new resource\n    airports\n      .clone()\n      .query((q) =>\n        q.filter({ Location: { City: { CountryRegion: \"United States\" } } })\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports of United States: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) =>\n      q.filter().push({ Location: { City: { Region: \"California\" } } })\n    );\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"Airports in California: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Store airports resource\n    var json = airports.toJSON();\n    // Load airports resource\n    airports = this.odata.fromJSON(json) as ODataEntitySetResource;\n\n    // Change query definition of airports resource and fetch again\n    airports.query((q) => q.filter().clear());\n    airports\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\"Airports: \", entities, \"Annotations: \", annots)\n      );\n\n    let peopleService = this.factory.entitySet(\n      \"People\",\n      \"Microsoft.OData.SampleService.Models.TripPin.Person\"\n    );\n    let people = peopleService.entities();\n\n    // Clone people resource and expand and fetch\n    people\n      .clone()\n      .query((q) =>\n        q.expand({\n          Friends: {\n            expand: { Friends: { select: [\"AddressInfo\"] } },\n          },\n          Trips: { select: [\"Name\", \"Tags\"] },\n        })\n      )\n      .fetch({ withCount: true })\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    // Clone people resource and filter with expressions\n    people\n      .clone()\n      .query((q) =>\n        q.filter(({ e }) =>\n          e().eq(\"Emails\", \"john@example.com\").or(e().eq(\"UserName\", \"john\"))\n        )\n      )\n      .fetch()\n      .subscribe(({ entities, annots }) =>\n        console.log(\n          \"People with Friends and Trips: \",\n          entities,\n          \"Annotations: \",\n          annots\n        )\n      );\n\n    this.odata\n      .batch(\"TripPin\")\n      .exec(() =>\n        forkJoin({\n          airports: airports.fetch(),\n          people: people.fetch({ withCount: true }),\n        })\n      )\n      .subscribe();\n  }\n}Generator\nIf you use OData Angular Generator, import the config and the module from generated source.\nimport { NgModule } from '@angular/core';\n\nimport { ODataModule } from 'angular-odata';\nimport { TripPinConfig, TripPinModule } from './trippin';\n\n@NgModule({\n  imports: [\n    ...\n    ODataModule.forRoot(TripPinConfig),\n    TripPinModule\n  ]\n  ...\n})\nexport class AppModule {}OData Version\nThe library works mainly with OData Version 4, however, it incorporates basic support for versions 3 and 2.\nQuery Builder\nFor a deep query customizations the library use odata-query and odata-filter-builder as a builders.\n\nOData v4 query builder\nOData Filter Builder\n\nDocumentation\nThe api documentation is generated using compodoc and can be viewed here: https://diegomvh.github.io/angular-odata/docs/\nLibrary documentation can be viewed on the wiki here: https://github.com/diegomvh/angular-odata/wiki\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Diego van Haaster\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ODataModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    110 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    11 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Aggregate   (projects/.../builder.ts)\n                        \n                        \n                            AnnotationConfig   (projects/.../types.ts)\n                        \n                        \n                            ApiConfig   (projects/.../types.ts)\n                        \n                        \n                            CacheCacheability   (projects/.../types.ts)\n                        \n                        \n                            CallableConfig   (projects/.../types.ts)\n                        \n                        \n                            Duration   (projects/.../durations.ts)\n                        \n                        \n                            EntityContainerConfig   (projects/.../types.ts)\n                        \n                        \n                            EntityKey   (projects/.../resource.ts)\n                        \n                        \n                            EntitySetConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            EnumTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Expand   (projects/.../builder.ts)\n                        \n                        \n                            ExpandObject   (projects/.../builder.ts)\n                        \n                        \n                            ExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ExpandType   (projects/.../builder.ts)\n                        \n                        \n                            FetchPolicy   (projects/.../types.ts)\n                        \n                        \n                            Field   (projects/.../syntax.ts)\n                        \n                        \n                            Filter   (projects/.../builder.ts)\n                        \n                        \n                            FilterType   (projects/.../builder.ts)\n                        \n                        \n                            Funcs   (projects/.../syntax.ts)\n                        \n                        \n                            GroupBy   (projects/.../builder.ts)\n                        \n                        \n                            JsonSchemaCustom   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaExpand   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaOptions   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaRequired   (projects/.../structured-type.ts)\n                        \n                        \n                            JsonSchemaSelect   (projects/.../structured-type.ts)\n                        \n                        \n                            ModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ModelOptions   (projects/.../options.ts)\n                        \n                        \n                            NestedExpandOptions   (projects/.../builder.ts)\n                        \n                        \n                            ODataCollectionResource   (projects/.../options.ts)\n                        \n                        \n                            ODataContext   (projects/.../helper.ts)\n                        \n                        \n                            ODataEntities   (projects/.../types.ts)\n                        \n                        \n                            ODataEntitiesOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataEntity   (projects/.../types.ts)\n                        \n                        \n                            ODataEntityOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataMetadataType   (projects/.../types.ts)\n                        \n                        \n                            ODataModelEntry   (projects/.../options.ts)\n                        \n                        \n                            ODataModelEventType   (projects/.../options.ts)\n                        \n                        \n                            ODataModelFieldOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataModelRelation   (projects/.../options.ts)\n                        \n                        \n                            ODataModelResource   (projects/.../options.ts)\n                        \n                        \n                            ODataNoneOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataProperty   (projects/.../types.ts)\n                        \n                        \n                            ODataPropertyOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArguments   (projects/.../options.ts)\n                        \n                        \n                            ODataQueryArgumentsOptions   (projects/.../options.ts)\n                        \n                        \n                            ODataSegment   (projects/.../segments.ts)\n                        \n                        \n                            ODataVersion   (projects/.../types.ts)\n                        \n                        \n                            OrderBy   (projects/.../builder.ts)\n                        \n                        \n                            OrderByObject   (projects/.../builder.ts)\n                        \n                        \n                            OrderByType   (projects/.../builder.ts)\n                        \n                        \n                            Parameter   (projects/.../types.ts)\n                        \n                        \n                            QueryCustomType   (projects/.../builder.ts)\n                        \n                        \n                            QueryOptions   (projects/.../builder.ts)\n                        \n                        \n                            SchemaConfig   (projects/.../types.ts)\n                        \n                        \n                            Select   (projects/.../builder.ts)\n                        \n                        \n                            SelectType   (projects/.../builder.ts)\n                        \n                        \n                            StructuredTypeConfig   (projects/.../types.ts)\n                        \n                        \n                            StructuredTypeFieldConfig   (projects/.../types.ts)\n                        \n                        \n                            Transform   (projects/.../builder.ts)\n                        \n                        \n                            Unpacked   (projects/.../builder.ts)\n                        \n                        \n                            Value   (projects/.../builder.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/angular-odata/src/lib/resources/query/builder.ts\n    \n    \n        \n            \n                \n                    \n                    Aggregate\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Expand\n                \n            \n            \n                \n                        ExpandType | ExpandType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandObject\n                \n            \n            \n                \n                             | NestedExpandOptions\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExpandType\n                \n            \n            \n                \n                        string | ExpandObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                        FilterType | FilterType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilterType\n                \n            \n            \n                \n                        string | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    GroupBy\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NestedExpandOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderBy\n                \n            \n            \n                \n                        OrderByType | OrderByType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByObject\n                \n            \n            \n                \n                         | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OrderByType\n                \n            \n            \n                \n                        string | OrderByObject\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryCustomType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Select\n                \n            \n            \n                \n                        SelectType | SelectType[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectType\n                \n            \n            \n                \n                        string | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Transform\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Unpacked\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Value\n                \n            \n            \n                \n                            string | Date | number | boolean | QueryCustomType\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/types.ts\n    \n    \n        \n            \n                \n                    \n                    AnnotationConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ApiConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CacheCacheability\n                \n            \n            \n                \n                        \"public\" | \"private\" | \"no-cache\" | \"no-store\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CallableConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntityContainerConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntitySetConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EnumTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FetchPolicy\n                \n            \n            \n                \n                        \"cache-first\" | \"cache-and-network\" | \"network-only\" | \"no-cache\" | \"cache-only\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataMetadataType\n                \n            \n            \n                \n                        \"minimal\" | \"full\" | \"none\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataVersion\n                \n            \n            \n                \n                        \"2.0\" | \"3.0\" | \"4.0\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Parameter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SchemaConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuredTypeFieldConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/utils/durations.ts\n    \n    \n        \n            \n                \n                    \n                    Duration\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/resource.ts\n    \n    \n        \n            \n                \n                    \n                    EntityKey\n                \n            \n            \n                \n                             | QueryCustomType | string | number\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/syntax.ts\n    \n    \n        \n            \n                \n                    \n                    Field\n                \n            \n            \n                \n                             | Funcs\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Funcs\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/parsers/structured-type.ts\n    \n    \n        \n            \n                \n                    \n                    JsonSchemaCustom\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaExpand\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaRequired\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonSchemaSelect\n                \n            \n            \n                \n                        Array\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/models/options.ts\n    \n    \n        \n            \n                \n                    \n                    ModelFieldOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ModelOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataCollectionResource\n                \n            \n            \n                \n                            ODataEntitySetResource | ODataNavigationPropertyResource | ODataPropertyResource\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEntry\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelEventType\n                \n            \n            \n                \n                        \"change\" | \"reset\" | \"update\" | \"destroy\" | \"add\" | \"remove\" | \"invalid\" | \"request\" | \"sync\" | \"attach\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelFieldOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelRelation\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataModelResource\n                \n            \n            \n                \n                            ODataEntityResource | ODataSingletonResource | ODataNavigationPropertyResource | ODataPropertyResource\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/helper.ts\n    \n    \n        \n            \n                \n                    \n                    ODataContext\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/responses/types.ts\n    \n    \n        \n            \n                \n                    \n                    ODataEntities\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntity\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataProperty\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/types/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataEntitiesOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataEntityOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataNoneOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataPropertyOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ODataQueryArgumentsOptions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/query/options.ts\n    \n    \n        \n            \n                \n                    \n                    ODataQueryArguments\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    projects/angular-odata/src/lib/resources/path/segments.ts\n    \n    \n        \n            \n                \n                    \n                    ODataSegment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
